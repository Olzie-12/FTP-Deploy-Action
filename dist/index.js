/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        return new URL(proxyVar);
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 5176:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFilter = void 0;
const normalize_1 = __nccwpck_require__(7561);
const util_1 = __nccwpck_require__(9735);
function createFilter(options, ...args) {
    let criteria = args.length <= 1 ? args[0] : args;
    let filters = normalize_1.normalize(criteria, options);
    pathFilter[util_1._filters] = filters;
    return pathFilter;
    function pathFilter(...args) {
        // Does the file path match any of the exclude filters?
        let exclude = filters.exclude.some((filter) => filter(...args));
        if (exclude) {
            return false;
        }
        if (filters.include.length === 0) {
            // Include everything that's not excluded
            return true;
        }
        // Does the file path match any of the include filters?
        let include = filters.include.some((filter) => filter(...args));
        return include;
    }
}
exports.createFilter = createFilter;
//# sourceMappingURL=create-filter.js.map

/***/ }),

/***/ 2405:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filePathFilter = void 0;
const create_filter_1 = __nccwpck_require__(5176);
function filePathFilter(...args) {
    return create_filter_1.createFilter({}, ...args);
}
exports.filePathFilter = filePathFilter;
//# sourceMappingURL=file-path-filter.js.map

/***/ }),

/***/ 3410:
/***/ (function(module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filePathFilter = void 0;
const file_path_filter_1 = __nccwpck_require__(2405);
Object.defineProperty(exports, "filePathFilter", ({ enumerable: true, get: function () { return file_path_filter_1.filePathFilter; } }));
__exportStar(__nccwpck_require__(3225), exports);
var create_filter_1 = __nccwpck_require__(5176);
Object.defineProperty(exports, "createFilter", ({ enumerable: true, get: function () { return create_filter_1.createFilter; } }));
// Export `filePathFilter` as a named export and the default export
exports["default"] = file_path_filter_1.filePathFilter;
// CommonJS default export hack
/* eslint-env commonjs */
if ( true && typeof module.exports === "object") {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7561:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalize = void 0;
const globToRegExp = __nccwpck_require__(7117);
const path = __nccwpck_require__(1017);
const util_1 = __nccwpck_require__(9735);
/**
 * Normalizes the user-provided filter criteria. The normalized form is a `Filters` object
 * whose `include` and `exclude` properties are both `FilterFunction` arrays.
 */
function normalize(criteria, opts) {
    let filters = {
        include: [],
        exclude: [],
    };
    let options = normalizeOptions(opts);
    // Convert each criterion to a FilterFunction
    let tuples = normalizeCriteria(criteria, options);
    // Populate the `include` and `exclude` arrays
    for (let [filter, filterFunction] of tuples) {
        filters[filter].push(filterFunction);
    }
    return filters;
}
exports.normalize = normalize;
/**
 * Fills-in defaults for any options that weren't specified by the caller.
 */
function normalizeOptions(options) {
    return {
        // TODO: Remove the "getPath" fallback in the next minor release
        map: options.map || options.getPath || String,
        sep: options.sep || path.sep,
    };
}
/**
 * Creates a `FilterFunction` for each given criterion.
 */
function normalizeCriteria(criteria, options, filter) {
    let tuples = [];
    if (Array.isArray(criteria)) {
        for (let criterion of criteria) {
            tuples.push(...normalizeCriteria(criterion, options, filter));
        }
    }
    else if (util_1.isPathFilter(criteria)) {
        for (let filterFunction of criteria[util_1._filters].include) {
            tuples.push(["include", filterFunction]);
        }
        for (let filterFunction of criteria[util_1._filters].exclude) {
            tuples.push(["exclude", filterFunction]);
        }
    }
    else if (util_1.isFilterCriterion(criteria)) {
        tuples.push(normalizeCriterion(criteria, options, filter));
    }
    else if (criteria && typeof criteria === "object" && !filter) {
        if (criteria.include !== undefined) {
            tuples.push(...normalizeCriteria(criteria.include, options, "include"));
        }
        if (criteria.exclude !== undefined) {
            tuples.push(...normalizeCriteria(criteria.exclude, options, "exclude"));
        }
    }
    else {
        throw new Error(`Invalid filter criteria: ${criteria}`);
    }
    return tuples;
}
/**
 * Creates a `FilterFunction` for the given criterion.
 *
 * @param criteria - One or more filter critiera
 * @param options - Options for how the `FilterFunction` should behave
 * @param filter - The type of filter. Defaults to `include`, except for glob patterns that start with "!"
 */
function normalizeCriterion(criterion, options, filter) {
    const globOptions = { extended: true, globstar: true };
    let type = typeof criterion;
    let filterFunction;
    if (type === "function") {
        filterFunction = criterion;
    }
    else if (type === "boolean") {
        let bool = criterion;
        filterFunction = function booleanFilter() {
            return bool;
        };
    }
    else if (type === "string") {
        let glob = criterion;
        let invert = false;
        if (glob.startsWith("!")) {
            glob = glob.substr(1);
            invert = Boolean(filter);
            filter = filter || "exclude";
        }
        let pattern = globToRegExp(glob, globOptions);
        filterFunction = createGlobFilter(pattern, options, invert);
    }
    else if (criterion instanceof RegExp) {
        let pattern = criterion;
        let { map } = options;
        filterFunction = function regExpFilter(...args) {
            let filePath = map(...args);
            return pattern.test(filePath);
        };
    }
    else {
        throw new Error(`Invalid filter criteria: ${criterion}`);
    }
    return [filter || "include", filterFunction];
}
/**
 * Creates a `FilterFunction` for filtering based on glob patterns
 */
function createGlobFilter(pattern, options, invert) {
    let { map, sep } = options;
    return function globFilter(...args) {
        let filePath = map(...args);
        if (sep !== "/") {
            // Glob patterns always expect forward slashes, even on Windows
            filePath = filePath.replace(new RegExp("\\" + sep, "g"), "/");
        }
        let match = pattern.test(filePath);
        return invert ? !match : match;
    };
}
//# sourceMappingURL=normalize.js.map

/***/ }),

/***/ 3225:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 9735:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isPathFilter = exports.isFilterCriterion = exports._filters = void 0;
/**
 * Symbol used to store the underlying filters of a `pathFilter()` function.
 */
exports._filters = Symbol("_filters");
/**
 * Determines whether the given value is a `FilterCriterion`.
 */
function isFilterCriterion(value) {
    let type = typeof value;
    return type === "string" ||
        type === "boolean" ||
        type === "function" ||
        value instanceof RegExp;
}
exports.isFilterCriterion = isFilterCriterion;
/**
 * Determines whether the given value is one of our internal `pathFilter()` functions.
 */
function isPathFilter(value) {
    let fn = value;
    return fn &&
        typeof fn === "function" &&
        typeof fn[exports._filters] === "object";
}
exports.isPathFilter = isPathFilter;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 504:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asyncForEach = void 0;
/**
 * Simultaneously processes all items in the given array.
 *
 * @param array - The array to iterate over
 * @param iterator - The function to call for each item in the array
 * @param done - The function to call when all iterators have completed
 *
 * @internal
 */
function asyncForEach(array, iterator, done) {
    if (!Array.isArray(array)) {
        throw new TypeError(`${array} is not an array`);
    }
    if (array.length === 0) {
        // NOTE: Normally a bad idea to mix sync and async, but it's safe here because
        // of the way that this method is currently used by DirectoryReader.
        done();
        return;
    }
    // Simultaneously process all items in the array.
    let pending = array.length;
    for (let item of array) {
        iterator(item, callback);
    }
    function callback() {
        if (--pending === 0) {
            done();
        }
    }
}
exports.asyncForEach = asyncForEach;
//# sourceMappingURL=for-each.js.map

/***/ }),

/***/ 5833:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirAsync = void 0;
const fs = __nccwpck_require__(7147);
const directory_reader_1 = __nccwpck_require__(4918);
const for_each_1 = __nccwpck_require__(504);
const asyncFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirAsync(dir, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    let promise = new Promise((resolve, reject) => {
        let results = [];
        let reader = new directory_reader_1.DirectoryReader(dir, options, asyncFacade);
        let stream = reader.stream;
        stream.on("error", (err) => {
            reject(err);
            stream.pause();
        });
        stream.on("data", (result) => {
            results.push(result);
        });
        stream.on("end", () => {
            resolve(results);
        });
    });
    if (callback) {
        promise.then((results) => callback(null, results), (err) => callback(err, undefined));
    }
    else {
        return promise;
    }
}
exports.readdirAsync = readdirAsync;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8188:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.callOnce = exports.safeCall = void 0;
/**
 * Calls a function with the given arguments, and ensures that the error-first callback is _always_
 * invoked exactly once, even if the function throws an error.
 *
 * @param fn - The function to invoke
 * @param args - The arguments to pass to the function. The final argument must be a callback function.
 *
 * @internal
 */
function safeCall(fn, input, callback) {
    // Replace the callback function with a wrapper that ensures it will only be called once
    callback = callOnce(callback);
    try {
        fn(input, callback);
    }
    catch (err) {
        callback(err, undefined);
    }
}
exports.safeCall = safeCall;
/**
 * Returns a wrapper function that ensures the given callback function is only called once.
 * Subsequent calls are ignored, unless the first argument is an Error, in which case the
 * error is thrown.
 *
 * @param callback - The function that should only be called once
 *
 * @internal
 */
function callOnce(callback) {
    let fulfilled = false;
    return function onceWrapper(err, result) {
        if (!fulfilled) {
            fulfilled = true;
            callback.call(this, err, result);
        }
        else if (err) {
            // The callback has already been called, but now an error has occurred
            // (most likely inside the callback function). So re-throw the error,
            // so it gets handled further up the call stack
            throw err;
        }
    };
}
exports.callOnce = callOnce;
//# sourceMappingURL=call.js.map

/***/ }),

/***/ 4918:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DirectoryReader = void 0;
const path = __nccwpck_require__(1017);
const stream_1 = __nccwpck_require__(2781);
const call_1 = __nccwpck_require__(8188);
const normalize_options_1 = __nccwpck_require__(2977);
const stat_1 = __nccwpck_require__(9445);
/**
 * Asynchronously reads the contents of a directory and streams the results
 * via a `ReadableStream`.
 *
 * @internal
 */
class DirectoryReader {
    /**
     * @param dir - The absolute or relative directory path to read
     * @param [options] - User-specified options, if any (see `normalizeOptions()`)
     * @param facade - sync or async function implementations
     * @param emit - Indicates whether the reader should emit "file", "directory", and "symlink" events.
     */
    constructor(dir, options, facade, emit = false) {
        this.options = normalize_options_1.normalizeOptions(options, facade, emit);
        // Indicates whether we should keep reading
        // This is set false if stream.Readable.push() returns false.
        this.shouldRead = true;
        // The directories to read
        // (initialized with the top-level directory)
        this.queue = [{
                path: dir,
                basePath: this.options.basePath,
                depth: 0
            }];
        // The number of directories that are currently being processed
        this.pending = 0;
        // The data that has been read, but not yet emitted
        this.buffer = [];
        this.stream = new stream_1.Readable({ objectMode: true });
        this.stream._read = () => {
            // Start (or resume) reading
            this.shouldRead = true;
            // If we have data in the buffer, then send the next chunk
            if (this.buffer.length > 0) {
                this.pushFromBuffer();
            }
            // If we have directories queued, then start processing the next one
            if (this.queue.length > 0) {
                this.readNextDirectory();
            }
            this.checkForEOF();
        };
    }
    /**
     * Reads the next directory in the queue
     */
    readNextDirectory() {
        let { facade } = this.options;
        let dir = this.queue.shift();
        this.pending++;
        // Read the directory listing
        call_1.safeCall(facade.fs.readdir, dir.path, (err, items) => {
            if (err) {
                // fs.readdir threw an error
                this.emit("error", err);
                return this.finishedReadingDirectory();
            }
            try {
                // Process each item in the directory (simultaneously, if async)
                facade.forEach(items, this.processItem.bind(this, dir), this.finishedReadingDirectory.bind(this, dir));
            }
            catch (err2) {
                // facade.forEach threw an error
                // (probably because fs.readdir returned an invalid result)
                this.emit("error", err2);
                this.finishedReadingDirectory();
            }
        });
    }
    /**
     * This method is called after all items in a directory have been processed.
     *
     * NOTE: This does not necessarily mean that the reader is finished, since there may still
     * be other directories queued or pending.
     */
    finishedReadingDirectory() {
        this.pending--;
        if (this.shouldRead) {
            // If we have directories queued, then start processing the next one
            if (this.queue.length > 0) {
                this.readNextDirectory();
            }
            this.checkForEOF();
        }
    }
    /**
     * Determines whether the reader has finished processing all items in all directories.
     * If so, then the "end" event is fired (via {@Readable#push})
     */
    checkForEOF() {
        if (this.buffer.length === 0 && // The stuff we've already read
            this.pending === 0 && // The stuff we're currently reading
            this.queue.length === 0) { // The stuff we haven't read yet
            // There's no more stuff!
            this.stream.push(null);
        }
    }
    /**
     * Processes a single item in a directory.
     *
     * If the item is a directory, and `option.deep` is enabled, then the item will be added
     * to the directory queue.
     *
     * If the item meets the filter criteria, then it will be emitted to the reader's stream.
     *
     * @param dir - A directory object from the queue
     * @param item - The name of the item (name only, no path)
     * @param done - A callback function that is called after the item has been processed
     */
    processItem(dir, item, done) {
        let stream = this.stream;
        let options = this.options;
        let itemPath = dir.basePath + item;
        let fullPath = path.join(dir.path, item);
        // If `options.deep` is a number, and we've already recursed to the max depth,
        // then there's no need to check fs.Stats to know if it's a directory.
        // If `options.deep` is a function, then we'll need fs.Stats
        let maxDepthReached = dir.depth >= options.recurseDepth;
        // Do we need to call `fs.stat`?
        let needStats = !maxDepthReached || // we need the fs.Stats to know if it's a directory
            options.stats || // the user wants fs.Stats objects returned
            options.recurseFnNeedsStats || // we need fs.Stats for the recurse function
            options.filterFnNeedsStats || // we need fs.Stats for the filter function
            stream.listenerCount("file") || // we need the fs.Stats to know if it's a file
            stream.listenerCount("directory") || // we need the fs.Stats to know if it's a directory
            stream.listenerCount("symlink"); // we need the fs.Stats to know if it's a symlink
        // If we don't need stats, then exit early
        if (!needStats) {
            if (this.filter({ path: itemPath })) {
                this.pushOrBuffer({ data: itemPath });
            }
            return done();
        }
        // Get the fs.Stats object for this path
        stat_1.stat(options.facade.fs, fullPath, (err, stats) => {
            if (err) {
                // fs.stat threw an error
                this.emit("error", err);
                return done();
            }
            try {
                // Add the item's path to the fs.Stats object
                // The base of this path, and its separators are determined by the options
                // (i.e. options.basePath and options.sep)
                stats.path = itemPath;
                // Add depth of the path to the fs.Stats object for use this in the filter function
                stats.depth = dir.depth;
                if (this.shouldRecurse(stats, maxDepthReached)) {
                    // Add this subdirectory to the queue
                    this.queue.push({
                        path: fullPath,
                        basePath: itemPath + options.sep,
                        depth: dir.depth + 1,
                    });
                }
                // Determine whether this item matches the filter criteria
                if (this.filter(stats)) {
                    this.pushOrBuffer({
                        data: options.stats ? stats : itemPath,
                        file: stats.isFile(),
                        directory: stats.isDirectory(),
                        symlink: stats.isSymbolicLink(),
                    });
                }
                done();
            }
            catch (err2) {
                // An error occurred while processing the item
                // (probably during a user-specified function, such as options.deep, options.filter, etc.)
                this.emit("error", err2);
                done();
            }
        });
    }
    /**
     * Pushes the given chunk of data to the stream, or adds it to the buffer,
     * depending on the state of the stream.
     */
    pushOrBuffer(chunk) {
        // Add the chunk to the buffer
        this.buffer.push(chunk);
        // If we're still reading, then immediately emit the next chunk in the buffer
        // (which may or may not be the chunk that we just added)
        if (this.shouldRead) {
            this.pushFromBuffer();
        }
    }
    /**
     * Immediately pushes the next chunk in the buffer to the reader's stream.
     * The "data" event will always be fired (via `Readable.push()`).
     * In addition, the "file", "directory", and/or "symlink" events may be fired,
     * depending on the type of properties of the chunk.
     */
    pushFromBuffer() {
        let stream = this.stream;
        let chunk = this.buffer.shift();
        // Stream the data
        try {
            this.shouldRead = stream.push(chunk.data);
        }
        catch (err) {
            this.emit("error", err);
        }
        if (this.options.emit) {
            // Also emit specific events, based on the type of chunk
            chunk.file && this.emit("file", chunk.data);
            chunk.symlink && this.emit("symlink", chunk.data);
            chunk.directory && this.emit("directory", chunk.data);
        }
    }
    /**
     * Determines whether the given directory meets the user-specified recursion criteria.
     * If the user didn't specify recursion criteria, then this function will default to true.
     *
     * @param stats - The directory's `Stats` object
     * @param maxDepthReached - Whether we've already crawled the user-specified depth
     */
    shouldRecurse(stats, maxDepthReached) {
        let { recurseFn } = this.options;
        if (maxDepthReached) {
            // We've already crawled to the maximum depth. So no more recursion.
            return false;
        }
        else if (!stats.isDirectory()) {
            // It's not a directory. So don't try to crawl it.
            return false;
        }
        else if (recurseFn) {
            try {
                // Run the user-specified recursion criteria
                return !!recurseFn(stats);
            }
            catch (err) {
                // An error occurred in the user's code.
                // In Sync and Async modes, this will return an error.
                // In Streaming mode, we emit an "error" event, but continue processing
                this.emit("error", err);
            }
        }
        else {
            // No recursion function was specified, and we're within the maximum depth.
            // So crawl this directory.
            return true;
        }
    }
    /**
     * Determines whether the given item meets the user-specified filter criteria.
     * If the user didn't specify a filter, then this function will always return true.
     *
     * @param stats - The item's `Stats` object, or an object with just a `path` property
     */
    filter(stats) {
        let { filterFn } = this.options;
        if (filterFn) {
            try {
                // Run the user-specified filter function
                return !!filterFn(stats);
            }
            catch (err) {
                // An error occurred in the user's code.
                // In Sync and Async modes, this will return an error.
                // In Streaming mode, we emit an "error" event, but continue processing
                this.emit("error", err);
            }
        }
        else {
            // No filter was specified, so match everything
            return true;
        }
    }
    /**
     * Emits an event.  If one of the event listeners throws an error,
     * then an "error" event is emitted.
     */
    emit(eventName, data) {
        let stream = this.stream;
        try {
            stream.emit(eventName, data);
        }
        catch (err) {
            if (eventName === "error") {
                // Don't recursively emit "error" events.
                // If the first one fails, then just throw
                throw err;
            }
            else {
                stream.emit("error", err);
            }
        }
    }
}
exports.DirectoryReader = DirectoryReader;
//# sourceMappingURL=directory-reader.js.map

/***/ }),

/***/ 8811:
/***/ (function(module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = void 0;
const async_1 = __nccwpck_require__(5833);
const iterator_1 = __nccwpck_require__(5944);
const stream_1 = __nccwpck_require__(5521);
const sync_1 = __nccwpck_require__(704);
const readdir = async_1.readdirAsync;
exports.readdir = readdir;
readdir.sync = sync_1.readdirSync;
readdir.async = async_1.readdirAsync;
readdir.stream = stream_1.readdirStream;
readdir.iterator = iterator_1.readdirIterator;
var async_2 = __nccwpck_require__(5833);
Object.defineProperty(exports, "readdirAsync", ({ enumerable: true, get: function () { return async_2.readdirAsync; } }));
var iterator_2 = __nccwpck_require__(5944);
Object.defineProperty(exports, "readdirIterator", ({ enumerable: true, get: function () { return iterator_2.readdirIterator; } }));
var stream_2 = __nccwpck_require__(5521);
Object.defineProperty(exports, "readdirStream", ({ enumerable: true, get: function () { return stream_2.readdirStream; } }));
var sync_2 = __nccwpck_require__(704);
Object.defineProperty(exports, "readdirSync", ({ enumerable: true, get: function () { return sync_2.readdirSync; } }));
__exportStar(__nccwpck_require__(6299), exports);
exports["default"] = readdir;
// CommonJS default export hack
/* eslint-env commonjs */
if ( true && typeof module.exports === "object") {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5944:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirIterator = void 0;
const fs = __nccwpck_require__(7147);
const for_each_1 = __nccwpck_require__(504);
const directory_reader_1 = __nccwpck_require__(4918);
const pending_1 = __nccwpck_require__(8553);
const iteratorFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirIterator(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, iteratorFacade);
    let stream = reader.stream;
    let pendingValues = [];
    let pendingReads = [];
    let error;
    let readable = false;
    let done = false;
    stream.on("error", function streamError(err) {
        error = err;
        stream.pause();
        fulfillPendingReads();
    });
    stream.on("end", function streamEnd() {
        done = true;
        fulfillPendingReads();
    });
    stream.on("readable", function streamReadable() {
        readable = true;
        fulfillPendingReads();
    });
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        next() {
            let pendingRead = pending_1.pending();
            pendingReads.push(pendingRead);
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(fulfillPendingReads);
            return pendingRead.promise;
        }
    };
    function fulfillPendingReads() {
        if (error) {
            while (pendingReads.length > 0) {
                let pendingRead = pendingReads.shift();
                pendingRead.reject(error);
            }
        }
        else if (pendingReads.length > 0) {
            while (pendingReads.length > 0) {
                let pendingRead = pendingReads.shift();
                let value = getNextValue();
                if (value) {
                    pendingRead.resolve({ value });
                }
                else if (done) {
                    pendingRead.resolve({ done, value });
                }
                else {
                    pendingReads.unshift(pendingRead);
                    break;
                }
            }
        }
    }
    function getNextValue() {
        let value = pendingValues.shift();
        if (value) {
            return value;
        }
        else if (readable) {
            readable = false;
            while (true) {
                value = stream.read();
                if (value) {
                    pendingValues.push(value);
                }
                else {
                    break;
                }
            }
            return pendingValues.shift();
        }
    }
}
exports.readdirIterator = readdirIterator;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8553:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pending = void 0;
/**
 * Returns a `Promise` and the functions to resolve or reject it.
 * @internal
 */
function pending() {
    let resolve, reject;
    let promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        resolve(result) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve(result).then(resolve);
        },
        reject(reason) {
            Promise.reject(reason).catch(reject);
        }
    };
}
exports.pending = pending;
//# sourceMappingURL=pending.js.map

/***/ }),

/***/ 2977:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeOptions = void 0;
const file_path_filter_1 = __nccwpck_require__(3410);
const path = __nccwpck_require__(1017);
/**
 * Validates and normalizes the options argument
 *
 * @param [options] - User-specified options, if any
 * @param facade - sync or async function implementations
 * @param emit - Indicates whether the reader should emit "file", "directory", and "symlink" events.
 *
 * @internal
 */
function normalizeOptions(options, facade, emit) {
    if (options === null || options === undefined) {
        options = {};
    }
    else if (typeof options !== "object") {
        throw new TypeError("options must be an object");
    }
    let sep = options.sep;
    if (sep === null || sep === undefined) {
        sep = path.sep;
    }
    else if (typeof sep !== "string") {
        throw new TypeError("options.sep must be a string");
    }
    let stats = Boolean(options.stats || options.withFileTypes);
    let recurseDepth, recurseFn, recurseFnNeedsStats = false, deep = options.deep;
    if (deep === null || deep === undefined) {
        recurseDepth = 0;
    }
    else if (typeof deep === "boolean") {
        recurseDepth = deep ? Infinity : 0;
    }
    else if (typeof deep === "number") {
        if (deep < 0 || isNaN(deep)) {
            throw new Error("options.deep must be a positive number");
        }
        else if (Math.floor(deep) !== deep) {
            throw new Error("options.deep must be an integer");
        }
        else {
            recurseDepth = deep;
        }
    }
    else if (typeof deep === "function") {
        // Recursion functions require a Stats object
        recurseFnNeedsStats = true;
        recurseDepth = Infinity;
        recurseFn = deep;
    }
    else if (deep instanceof RegExp || (typeof deep === "string" && deep.length > 0)) {
        recurseDepth = Infinity;
        recurseFn = file_path_filter_1.createFilter({ map, sep }, deep);
    }
    else {
        throw new TypeError("options.deep must be a boolean, number, function, regular expression, or glob pattern");
    }
    let filterFn, filterFnNeedsStats = false, filter = options.filter;
    if (filter !== null && filter !== undefined) {
        if (typeof filter === "function") {
            // Filter functions requres a Stats object
            filterFnNeedsStats = true;
            filterFn = filter;
        }
        else if (filter instanceof RegExp ||
            typeof filter === "boolean" ||
            (typeof filter === "string" && filter.length > 0)) {
            filterFn = file_path_filter_1.createFilter({ map, sep }, filter);
        }
        else {
            throw new TypeError("options.filter must be a boolean, function, regular expression, or glob pattern");
        }
    }
    let basePath = options.basePath;
    if (basePath === null || basePath === undefined) {
        basePath = "";
    }
    else if (typeof basePath === "string") {
        // Append a path separator to the basePath, if necessary
        if (basePath && basePath.substr(-1) !== sep) {
            basePath += sep;
        }
    }
    else {
        throw new TypeError("options.basePath must be a string");
    }
    // Determine which facade methods to use
    if (options.fs === null || options.fs === undefined) {
        // The user didn't provide their own facades, so use our internal ones
    }
    else if (typeof options.fs === "object") {
        // Merge the internal facade methods with the user-provided `fs` facades
        facade = Object.assign({}, facade);
        facade.fs = Object.assign({}, facade.fs, options.fs);
    }
    else {
        throw new TypeError("options.fs must be an object");
    }
    return {
        recurseDepth,
        recurseFn,
        recurseFnNeedsStats,
        filterFn,
        filterFnNeedsStats,
        stats,
        sep,
        basePath,
        facade,
        emit,
    };
}
exports.normalizeOptions = normalizeOptions;
/**
 * Maps our modified fs.Stats objects to file paths
 */
function map(stats) {
    return stats.path;
}
//# sourceMappingURL=normalize-options.js.map

/***/ }),

/***/ 9445:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stat = void 0;
const call_1 = __nccwpck_require__(8188);
/**
 * Retrieves the `Stats` for the given path. If the path is a symbolic link,
 * then the Stats of the symlink's target are returned instead.  If the symlink is broken,
 * then the Stats of the symlink itself are returned.
 *
 * @param fs - Synchronous or Asynchronouse facade for the "fs" module
 * @param path - The path to return stats for
 *
 * @internal
 */
function stat(fs, path, callback) {
    let isSymLink = false;
    call_1.safeCall(fs.lstat, path, (err, lstats) => {
        if (err) {
            // fs.lstat threw an eror
            return callback(err, undefined);
        }
        try {
            isSymLink = lstats.isSymbolicLink();
        }
        catch (err2) {
            // lstats.isSymbolicLink() threw an error
            // (probably because fs.lstat returned an invalid result)
            return callback(err2, undefined);
        }
        if (isSymLink) {
            // Try to resolve the symlink
            symlinkStat(fs, path, lstats, callback);
        }
        else {
            // It's not a symlink, so return the stats as-is
            callback(null, lstats);
        }
    });
}
exports.stat = stat;
/**
 * Retrieves the `Stats` for the target of the given symlink.
 * If the symlink is broken, then the Stats of the symlink itself are returned.
 *
 * @param fs - Synchronous or Asynchronouse facade for the "fs" module
 * @param path - The path of the symlink to return stats for
 * @param lstats - The stats of the symlink
 */
function symlinkStat(fs, path, lstats, callback) {
    call_1.safeCall(fs.stat, path, (err, stats) => {
        if (err) {
            // The symlink is broken, so return the stats for the link itself
            return callback(null, lstats);
        }
        try {
            // Return the stats for the resolved symlink target,
            // and override the `isSymbolicLink` method to indicate that it's a symlink
            stats.isSymbolicLink = () => true;
        }
        catch (err2) {
            // Setting stats.isSymbolicLink threw an error
            // (probably because fs.stat returned an invalid result)
            return callback(err2, undefined);
        }
        callback(null, stats);
    });
}
//# sourceMappingURL=stat.js.map

/***/ }),

/***/ 5521:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirStream = void 0;
const fs = __nccwpck_require__(7147);
const for_each_1 = __nccwpck_require__(504);
const directory_reader_1 = __nccwpck_require__(4918);
const streamFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirStream(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, streamFacade, true);
    return reader.stream;
}
exports.readdirStream = readdirStream;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7448:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.syncForEach = void 0;
/**
 * A facade that allows `Array.forEach()` to be called as though it were asynchronous.
 *
 * @param array - The array to iterate over
 * @param iterator - The function to call for each item in the array
 * @param done - The function to call when all iterators have completed
 *
 * @internal
 */
function syncForEach(array, iterator, done) {
    if (!Array.isArray(array)) {
        throw new TypeError(`${array} is not an array`);
    }
    for (let item of array) {
        iterator(item, () => {
            // Note: No error-handling here because this is currently only ever called
            // by DirectoryReader, which never passes an `error` parameter to the callback.
            // Instead, DirectoryReader emits an "error" event if an error occurs.
        });
    }
    done();
}
exports.syncForEach = syncForEach;
//# sourceMappingURL=for-each.js.map

/***/ }),

/***/ 3073:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.syncFS = void 0;
const fs = __nccwpck_require__(7147);
const call_1 = __nccwpck_require__(8188);
/**
 * Synchronous versions of `fs` methods.
 *
 * @internal
 */
exports.syncFS = {
    /**
     * A facade around `fs.readdirSync()` that allows it to be called
     * the same way as `fs.readdir()`.
     */
    readdir(dir, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let items = fs.readdirSync(dir);
            callback(null, items);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
    /**
     * A facade around `fs.statSync()` that allows it to be called
     * the same way as `fs.stat()`.
     */
    stat(path, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let stats = fs.statSync(path);
            callback(null, stats);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
    /**
     * A facade around `fs.lstatSync()` that allows it to be called
     * the same way as `fs.lstat()`.
     */
    lstat(path, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let stats = fs.lstatSync(path);
            callback(null, stats);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
};
//# sourceMappingURL=fs.js.map

/***/ }),

/***/ 704:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirSync = void 0;
const directory_reader_1 = __nccwpck_require__(4918);
const for_each_1 = __nccwpck_require__(7448);
const fs_1 = __nccwpck_require__(3073);
const syncFacade = { fs: fs_1.syncFS, forEach: for_each_1.syncForEach };
function readdirSync(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, syncFacade);
    let stream = reader.stream;
    let results = [];
    let data = stream.read();
    while (data !== null) {
        results.push(data);
        data = stream.read();
    }
    return results;
}
exports.readdirSync = readdirSync;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6299:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types-public.js.map

/***/ }),

/***/ 6448:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HashDiff = exports.fileHash = void 0;
const fs_1 = __importDefault(__nccwpck_require__(7147));
const crypto_1 = __importDefault(__nccwpck_require__(6113));
function fileHash(filename, algorithm) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            // Algorithm depends on availability of OpenSSL on platform
            // Another algorithms: "sha1", "md5", "sha256", "sha512" ...
            let shasum = crypto_1.default.createHash(algorithm);
            try {
                let s = fs_1.default.createReadStream(filename);
                s.on("data", function (data) {
                    shasum.update(data);
                });
                s.on("error", function (error) {
                    reject(error);
                });
                // making digest
                s.on("end", function () {
                    const hash = shasum.digest("hex");
                    return resolve(hash);
                });
            }
            catch (error) {
                return reject("calc fail");
            }
        });
    });
}
exports.fileHash = fileHash;
class HashDiff {
    getDiffs(localFiles, serverFiles) {
        var _a, _b, _c;
        const uploadList = [];
        const deleteList = [];
        const replaceList = [];
        const sameList = [];
        let sizeUpload = 0;
        let sizeDelete = 0;
        let sizeReplace = 0;
        // alphabetize each list based off path
        const localFilesSorted = localFiles.data.sort((first, second) => first.name.localeCompare(second.name));
        const serverFilesSorted = serverFiles.data.sort((first, second) => first.name.localeCompare(second.name));
        let localPosition = 0;
        let serverPosition = 0;
        while (localPosition + serverPosition < localFilesSorted.length + serverFilesSorted.length) {
            let localFile = localFilesSorted[localPosition];
            let serverFile = serverFilesSorted[serverPosition];
            let fileNameCompare = 0;
            if (localFile === undefined) {
                fileNameCompare = 1;
            }
            if (serverFile === undefined) {
                fileNameCompare = -1;
            }
            if (localFile !== undefined && serverFile !== undefined) {
                fileNameCompare = localFile.name.localeCompare(serverFile.name);
            }
            if (fileNameCompare < 0) {
                uploadList.push(localFile);
                sizeUpload += (_a = localFile.size) !== null && _a !== void 0 ? _a : 0;
                localPosition += 1;
            }
            else if (fileNameCompare > 0) {
                deleteList.push(serverFile);
                sizeDelete += (_b = serverFile.size) !== null && _b !== void 0 ? _b : 0;
                serverPosition += 1;
            }
            else if (fileNameCompare === 0) {
                // paths are a match
                if (localFile.type === "file" && serverFile.type === "file") {
                    if (localFile.hash === serverFile.hash) {
                        sameList.push(localFile);
                    }
                    else {
                        sizeReplace += (_c = localFile.size) !== null && _c !== void 0 ? _c : 0;
                        replaceList.push(localFile);
                    }
                }
                localPosition += 1;
                serverPosition += 1;
            }
        }
        // optimize modifications
        let foldersToDelete = deleteList.filter((item) => item.type === "folder");
        // remove files/folders that have a nested parent folder we plan on deleting
        const optimizedDeleteList = deleteList.filter((itemToDelete) => {
            const parentFolderIsBeingDeleted = foldersToDelete.find((folder) => {
                const isSameFile = itemToDelete.name === folder.name;
                const parentFolderExists = itemToDelete.name.startsWith(folder.name);
                return parentFolderExists && !isSameFile;
            }) !== undefined;
            if (parentFolderIsBeingDeleted) {
                // a parent folder is being deleted, no need to delete this one
                return false;
            }
            return true;
        });
        return {
            upload: uploadList,
            delete: optimizedDeleteList,
            replace: replaceList,
            same: sameList,
            sizeDelete,
            sizeReplace,
            sizeUpload
        };
    }
}
exports.HashDiff = HashDiff;


/***/ }),

/***/ 7154:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deploy = exports.getServerFiles = exports.clearWorkingDir = void 0;
const ftp = __importStar(__nccwpck_require__(4384));
const fs_1 = __importDefault(__nccwpck_require__(7147));
const types_1 = __nccwpck_require__(9235);
const HashDiff_1 = __nccwpck_require__(6448);
const utilities_1 = __nccwpck_require__(6969);
const pretty_bytes_1 = __importDefault(__nccwpck_require__(5168));
const errorHandling_1 = __nccwpck_require__(1565);
const syncProvider_1 = __nccwpck_require__(9267);
const localFiles_1 = __nccwpck_require__(6757);
function downloadFileList(client, logger, path) {
    return __awaiter(this, void 0, void 0, function* () {
        // note: originally this was using a writable stream instead of a buffer file
        // basic-ftp doesn't seam to close the connection when using steams over some ftps connections. This appears to be dependent on the ftp server
        const tempFileNameHack = ".ftp-deploy-sync-server-state-buffer-file---delete.json";
        yield (0, utilities_1.retryRequest)(logger, () => __awaiter(this, void 0, void 0, function* () {
            return yield client.download(tempFileNameHack, path).catch(reason => {
                console.log(reason);
                fs_1.default.unlinkSync(tempFileNameHack);
            });
        }));
        const fileAsString = fs_1.default.readFileSync(tempFileNameHack, { encoding: "utf-8" });
        const fileAsObject = JSON.parse(fileAsString);
        fs_1.default.unlinkSync(tempFileNameHack);
        return fileAsObject;
    });
}
function createLocalState(localFiles, logger, args) {
    logger.verbose(`Creating local state at ${args["local-dir"]}${args["state-name"]}`);
    fs_1.default.writeFileSync(`${args["local-dir"]}${args["state-name"]}`, JSON.stringify(localFiles, undefined, 4), { encoding: "utf8" });
    logger.verbose("Local state created");
}
function connect(client, args, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (args.protocol == "sftp") {
                yield client.connect({
                    host: args.server,
                    user: args.username,
                    password: args.password,
                    port: args.port,
                    protocol: "sftp",
                }, {
                    timeout: args.timeout,
                });
            }
            else {
                yield client.connect({
                    host: args.server,
                    user: args.username,
                    password: args.password,
                    port: args.port,
                    protocol: args.protocol,
                }, {
                    secureOptions: {
                        rejectUnauthorized: args.security == "strict",
                        timeout: args.timeout,
                    }
                });
            }
        }
        catch (error) {
            logger.all(args.protocol);
            logger.all(args.server);
            logger.all(args.username);
            logger.all(args.password);
            logger.all("Failed to connect, are you sure your server works via FTP or FTPS? Users sometimes get this error when the server only supports SFTP.");
            throw error;
        }
    });
}
function clearWorkingDir(client, dir) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const file of yield (dir == null ? client.list() : client.list(dir))) {
            if (file.type == 'folder') {
                yield clearWorkingDir(client, dir);
                if (file.name != null) {
                    yield client.removeEmptyFolder(file.name);
                }
            }
            else {
                if (file.name != null) {
                    yield client.removeFile(file.name);
                }
            }
        }
    });
}
exports.clearWorkingDir = clearWorkingDir;
function getServerFiles(client, logger, timings, args) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield (0, syncProvider_1.ensureDir)(client, logger, timings, args["server-dir"]);
            if (args["dangerous-clean-slate"]) {
                logger.all(`----------------------------------------------------------------`);
                logger.all("🗑️ Removing all files on the server because 'dangerous-clean-slate' was set, this will make the deployment very slow...");
                if (args["dry-run"] === false) {
                    yield clearWorkingDir(client, args["server-dir"]);
                }
                logger.all("Clear complete");
                throw new Error("dangerous-clean-slate was run");
            }
            const serverFiles = yield downloadFileList(client, logger, args["server-dir"] + args["state-name"]);
            logger.all(`----------------------------------------------------------------`);
            logger.all(`Last published on 📅 ${new Date(serverFiles.generatedTime).toLocaleDateString(undefined, {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
                hour: "numeric",
                minute: "numeric"
            })}`);
            // apply exclude options to server
            if (args.exclude.length > 0) {
                const filteredData = serverFiles.data.filter((item) => (0, utilities_1.applyExcludeFilter)({
                    path: item.name,
                    isDirectory: () => item.type === "folder"
                }, args.exclude));
                serverFiles.data = filteredData;
            }
            return serverFiles;
        }
        catch (error) {
            logger.all(`----------------------------------------------------------------`);
            logger.all(`No file exists on the server "${args["server-dir"] + args["state-name"]}" - this must be your first publish! 🎉`);
            logger.all(`The first publish will take a while... but once the initial sync is done only differences are published!`);
            logger.all(`If you get this message and its NOT your first publish, something is wrong.`);
            // set the server state to nothing, because we don't know what the server state is
            return {
                description: types_1.syncFileDescription,
                version: types_1.currentSyncFileVersion,
                generatedTime: new Date().getTime(),
                data: [],
            };
        }
    });
}
exports.getServerFiles = getServerFiles;
function deploy(args, logger, timings) {
    return __awaiter(this, void 0, void 0, function* () {
        timings.start("total");
        // header
        logger.all(`----------------------------------------------------------------`);
        logger.all(`🚀 Thanks for using ftp-deploy. Let's deploy some stuff!   `);
        logger.all(`----------------------------------------------------------------`);
        logger.all(`If you found this project helpful, please support it`);
        logger.all(`by giving it a ⭐ on Github --> https://github.com/SamKirkland/FTP-Deploy-Action`);
        logger.all(`or add a badge 🏷️ to your projects readme --> https://github.com/SamKirkland/FTP-Deploy-Action#badge`);
        logger.verbose(`Using the following excludes filters: ${JSON.stringify(args.exclude)}`);
        timings.start("hash");
        const localFiles = yield (0, localFiles_1.getLocalFiles)(args);
        timings.stop("hash");
        const client = new ftp.Client({
            pool: 5,
        });
        createLocalState(localFiles, logger, args);
        global.reconnect = function () {
            return __awaiter(this, void 0, void 0, function* () {
                timings.start("connecting");
                yield connect(client, args, logger);
                timings.stop("connecting");
            });
        };
        if (args["log-level"] === "verbose") {
            client.addListener("transfer-progress", (transfer, progress) => {
                logger.verbose(`Transfer progress for "${transfer.localPath}" to "${transfer.remotePath}". Progress: ${progress.bytes} bytes of ${progress.totalBytes} bytes`);
            });
        }
        let totalBytesUploaded = 0;
        try {
            yield global.reconnect();
            const serverFiles = yield getServerFiles(client, logger, timings, args);
            timings.start("logging");
            const diffTool = new HashDiff_1.HashDiff();
            logger.standard(`----------------------------------------------------------------`);
            logger.standard(`Local Files:\t${(0, utilities_1.formatNumber)(localFiles.data.length)}`);
            logger.standard(`Server Files:\t${(0, utilities_1.formatNumber)(serverFiles.data.length)}`);
            logger.standard(`----------------------------------------------------------------`);
            logger.standard(`Calculating differences between client & server`);
            logger.standard(`----------------------------------------------------------------`);
            const diffs = diffTool.getDiffs(localFiles, serverFiles);
            diffs.upload.filter((itemUpload) => itemUpload.type === "folder").map((itemUpload) => {
                logger.standard(`📁 Create: ${itemUpload.name}`);
            });
            diffs.upload.filter((itemUpload) => itemUpload.type === "file").map((itemUpload) => {
                logger.standard(`📄 Upload: ${itemUpload.name}`);
            });
            diffs.replace.map((itemReplace) => {
                logger.standard(`🔁 File replace: ${itemReplace.name}`);
            });
            diffs.delete.filter((itemUpload) => itemUpload.type === "file").map((itemDelete) => {
                logger.standard(`📄 Delete: ${itemDelete.name}    `);
            });
            diffs.delete.filter((itemUpload) => itemUpload.type === "folder").map((itemDelete) => {
                logger.standard(`📁 Delete: ${itemDelete.name}    `);
            });
            diffs.same.map((itemSame) => {
                if (itemSame.type === "file") {
                    logger.standard(`⚖️  File content is the same, doing nothing: ${itemSame.name}`);
                }
            });
            timings.stop("logging");
            totalBytesUploaded = diffs.sizeUpload + diffs.sizeReplace;
            timings.start("upload");
            try {
                const syncProvider = new syncProvider_1.FTPSyncProvider(client, logger, timings, args["local-dir"], args["server-dir"], args["state-name"], args["dry-run"]);
                yield syncProvider.syncLocalToServer(diffs);
            }
            finally {
                timings.stop("upload");
            }
        }
        catch (error) {
            (0, errorHandling_1.prettyError)(logger, args, error);
            throw error;
        }
        finally {
            client.disconnect();
            timings.stop("total");
        }
        const uploadSpeed = (0, pretty_bytes_1.default)(totalBytesUploaded / (timings.getTime("upload") / 1000));
        // footer
        logger.all(`----------------------------------------------------------------`);
        logger.all(`Time spent hashing: ${timings.getTimeFormatted("hash")}`);
        logger.all(`Time spent connecting to server: ${timings.getTimeFormatted("connecting")}`);
        logger.all(`Time spent deploying: ${timings.getTimeFormatted("upload")} (${uploadSpeed}/second)`);
        logger.all(`  - changing dirs: ${timings.getTimeFormatted("changingDir")}`);
        logger.all(`  - logging: ${timings.getTimeFormatted("logging")}`);
        logger.all(`----------------------------------------------------------------`);
        logger.all(`Total time: ${timings.getTimeFormatted("total")}`);
        logger.all(`----------------------------------------------------------------`);
    });
}
exports.deploy = deploy;


/***/ }),

/***/ 1565:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prettyError = void 0;
function logOriginalError(logger, error) {
    logger.all();
    logger.all(`----------------------------------------------------------------`);
    logger.all(`----------------------  full error below  ----------------------`);
    logger.all(`----------------------------------------------------------------`);
    logger.all();
    logger.all(error);
}
/**
 * Converts a exception to helpful debug info
 * @param error exception
 */
function prettyError(logger, args, error) {
    logger.all();
    logger.all(`----------------------------------------------------------------`);
    logger.all(`--------------  🔥🔥🔥 an error occurred  🔥🔥🔥  --------------`);
    logger.all(`----------------------------------------------------------------`);
    if (typeof error.code === "string") {
        const errorCode = error.code;
        if (errorCode === "ENOTFOUND") {
            logger.all(`The server "${args.server}" doesn't seem to exist. Do you have a typo?`);
        }
    }
    else if (typeof error.name === "string") {
        const errorName = error.name;
        if (errorName.includes("ERR_TLS_CERT_ALTNAME_INVALID")) {
            logger.all(`The certificate for "${args.server}" is likely shared. The host did not place your server on the list of valid domains for this cert.`);
            logger.all(`This is a common issue with shared hosts. You have a few options:`);
            logger.all(` - Ignore this error by setting security back to loose`);
            logger.all(` - Contact your hosting provider and ask them for your servers hostname`);
        }
    }
    // else if (typeof ftpError.code === "number") {
    //     if (ftpError.code === ErrorCode.NotLoggedIn) {
    //         const serverRequiresFTPS = ftpError.message.toLowerCase().includes("must use encryption");
    //
    //         if (serverRequiresFTPS) {
    //             logger.all(`The server you are connecting to requires encryption (ftps)`);
    //             logger.all(`Enable FTPS by using the protocol option.`);
    //         }
    //         else {
    //             logger.all(`Could not login with the username "${args.username}" and password "${args.password}".`);
    //             logger.all(`Make sure you can login with those credentials. If you have a space or a quote in your username or password be sure to escape them!`);
    //         }
    //     }
    // }
    logOriginalError(logger, error);
}
exports.prettyError = prettyError;


/***/ }),

/***/ 6757:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLocalFiles = void 0;
const readdir_enhanced_1 = __importDefault(__nccwpck_require__(8811));
const types_1 = __nccwpck_require__(9235);
const HashDiff_1 = __nccwpck_require__(6448);
const utilities_1 = __nccwpck_require__(6969);
function getLocalFiles(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = yield readdir_enhanced_1.default.async(args["local-dir"], { deep: true, stats: true, sep: "/", filter: (stat) => (0, utilities_1.applyExcludeFilter)(stat, args.exclude) });
        const records = [];
        for (let stat of files) {
            if (stat.isDirectory()) {
                records.push({
                    type: "folder",
                    name: stat.path,
                    size: undefined
                });
                continue;
            }
            if (stat.isFile()) {
                records.push({
                    type: "file",
                    name: stat.path,
                    size: stat.size,
                    hash: yield (0, HashDiff_1.fileHash)(args["local-dir"] + stat.path, "sha256")
                });
                continue;
            }
            if (stat.isSymbolicLink()) {
                console.warn("This script is currently unable to handle symbolic links - please add a feature request if you need this");
            }
        }
        return {
            description: types_1.syncFileDescription,
            version: types_1.currentSyncFileVersion,
            generatedTime: new Date().getTime(),
            data: records
        };
    });
}
exports.getLocalFiles = getLocalFiles;


/***/ }),

/***/ 157:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deploy = exports.excludeDefaults = void 0;
const deploy_1 = __nccwpck_require__(7154);
const utilities_1 = __nccwpck_require__(6969);
/**
 * Default excludes, ignores all git files and the node_modules folder
 * **\/.git* ignores all FILES that start with .git(in any folder or sub-folder)
 * **\/.git*\/** ignores all FOLDERS that start with .git (in any folder or sub-folder)
 * **\/node_modules\/** ignores all FOLDERS named node_modules (in any folder or sub-folder)
 */
exports.excludeDefaults = ["**/.git*", "**/.git*/**", "**/node_modules/**"];
/**
 * Syncs a local folder with a remote folder over FTP.
 * After the initial sync only differences are synced, making deployments super fast!
 */
function deploy(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const argsWithDefaults = (0, utilities_1.getDefaultSettings)(args);
        const logger = new utilities_1.Logger(argsWithDefaults["log-level"]);
        const timings = new utilities_1.Timings();
        yield (0, deploy_1.deploy)(argsWithDefaults, logger, timings);
    });
}
exports.deploy = deploy;


/***/ }),

/***/ 9267:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FTPSyncProvider = exports.ensureDir = void 0;
const pretty_bytes_1 = __importDefault(__nccwpck_require__(5168));
const types_1 = __nccwpck_require__(9235);
const utilities_1 = __nccwpck_require__(6969);
function ensureDir(client, logger, timings, folder) {
    return __awaiter(this, void 0, void 0, function* () {
        timings.start("changingDir");
        logger.verbose(`  changing dir to ${folder}`);
        yield (0, utilities_1.retryRequest)(logger, () => __awaiter(this, void 0, void 0, function* () {
            return yield client.createFolder(folder).catch(reason => {
                console.log(reason);
            });
        }));
        logger.verbose(`  dir changed`);
        timings.stop("changingDir");
    });
}
exports.ensureDir = ensureDir;
class FTPSyncProvider {
    constructor(client, logger, timings, localPath, serverPath, stateName, dryRun) {
        this.client = client;
        this.logger = logger;
        this.timings = timings;
        this.localPath = localPath;
        this.serverPath = serverPath;
        this.stateName = stateName;
        this.dryRun = dryRun;
    }
    /**
     * Converts a file path (ex: "folder/otherfolder/file.txt") to an array of folder and a file path
     * @param fullPath
     */
    getFileBreadcrumbs(fullPath) {
        var _a;
        // todo see if this regex will work for nonstandard folder names
        // todo what happens if the path is relative to the root dir? (starts with /)
        const pathSplit = fullPath.split("/");
        const file = (_a = pathSplit === null || pathSplit === void 0 ? void 0 : pathSplit.pop()) !== null && _a !== void 0 ? _a : ""; // get last item
        const folders = pathSplit.filter(folderName => folderName != "");
        return {
            folders: folders.length === 0 ? null : folders,
            file: file === "" ? null : file
        };
    }
    createFolder(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.all(`creating folder "${folderPath}"`);
            if (this.dryRun === true) {
                return;
            }
            const path = this.getFileBreadcrumbs(folderPath + "/");
            if (path.folders === null) {
                this.logger.verbose(`  no need to change dir`);
            }
            else {
                yield ensureDir(this.client, this.logger, this.timings, path.folders.join("/"));
            }
            this.logger.verbose(`  completed`);
        });
    }
    removeFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.all(`removing "${filePath}"`);
            if (this.dryRun === false) {
                try {
                    yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.removeFile(filePath); }));
                }
                catch (e) {
                    // this error is common when a file was deleted on the server directly
                    if (e.code === types_1.ErrorCode.FileNotFoundOrNoAccess) {
                        this.logger.standard("File not found or you don't have access to the file - skipping...");
                    }
                    else {
                        throw e;
                    }
                }
            }
            this.logger.verbose(`  file removed`);
            this.logger.verbose(`  completed`);
        });
    }
    removeFolder(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const absoluteFolderPath = "/" + (this.serverPath.startsWith("./") ? this.serverPath.replace("./", "") : this.serverPath) + folderPath;
            this.logger.all(`removing folder "${absoluteFolderPath}"`);
            if (this.dryRun === false) {
                yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.removeFolder(absoluteFolderPath); }));
            }
            this.logger.verbose(`  completed`);
        });
    }
    uploadFile(filePath, type = "upload") {
        return __awaiter(this, void 0, void 0, function* () {
            const typePresent = type === "upload" ? "uploading" : "replacing";
            const typePast = type === "upload" ? "uploaded" : "replaced";
            this.logger.all(`${typePresent} "${filePath}"`);
            if (this.dryRun === false) {
                yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.upload(this.localPath + filePath.substring(this.serverPath.length), filePath); }));
            }
            this.logger.verbose(`  file ${typePast}`);
        });
    }
    syncLocalToServer(diffs) {
        return __awaiter(this, void 0, void 0, function* () {
            const totalCount = diffs.delete.length + diffs.upload.length + diffs.replace.length;
            this.logger.all(`----------------------------------------------------------------`);
            this.logger.all(`Making changes to ${totalCount} ${(0, utilities_1.pluralize)(totalCount, "file/folder", "files/folders")} to sync server state`);
            this.logger.all(`Uploading: ${(0, pretty_bytes_1.default)(diffs.sizeUpload)} -- Deleting: ${(0, pretty_bytes_1.default)(diffs.sizeDelete)} -- Replacing: ${(0, pretty_bytes_1.default)(diffs.sizeReplace)}`);
            this.logger.all(`----------------------------------------------------------------`);
            // create new folders
            for (const file of diffs.upload.filter(item => item.type === "folder")) {
                yield this.createFolder(this.serverPath + file.name);
            }
            // upload new files
            for (const file of diffs.upload.filter(item => item.type === "file").filter(item => item.name !== this.stateName)) {
                yield this.uploadFile(this.serverPath + file.name, "upload");
            }
            // replace new files
            for (const file of diffs.replace.filter(item => item.type === "file").filter(item => item.name !== this.stateName)) {
                // note: FTP will replace old files with new files. We run replacements after uploads to limit downtime
                yield this.uploadFile(this.serverPath + file.name, "replace");
            }
            // delete old files
            for (const file of diffs.delete.filter(item => item.type === "file")) {
                yield this.removeFile(this.serverPath + file.name);
            }
            // delete old folders
            for (const file of diffs.delete.filter(item => item.type === "folder")) {
                yield this.removeFolder(this.serverPath + file.name);
            }
            this.logger.all(`----------------------------------------------------------------`);
            this.logger.all(`🎉 Sync complete. Saving current server state to "${this.serverPath + this.stateName}"`);
            if (this.dryRun === false) {
                yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.upload(this.localPath + this.stateName, this.serverPath + this.stateName); }));
            }
        });
    }
}
exports.FTPSyncProvider = FTPSyncProvider;


/***/ }),

/***/ 9235:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorCode = exports.syncFileDescription = exports.currentSyncFileVersion = void 0;
exports.currentSyncFileVersion = "1.0.0";
exports.syncFileDescription = "DO NOT DELETE THIS FILE. This file is used to keep track of which files have been synced in the most recent deployment. If you delete this file a resync will need to be done (which can take a while) - read more: https://github.com/SamKirkland/FTP-Deploy-Action";
var ErrorCode;
(function (ErrorCode) {
    // The requested action is being initiated, expect another reply before proceeding with a new command.
    ErrorCode[ErrorCode["RestartMarkerReplay"] = 110] = "RestartMarkerReplay";
    ErrorCode[ErrorCode["ServiceReadyInNNNMinutes"] = 120] = "ServiceReadyInNNNMinutes";
    ErrorCode[ErrorCode["DataConnectionAlreadyOpenStartingTransfer"] = 125] = "DataConnectionAlreadyOpenStartingTransfer";
    ErrorCode[ErrorCode["FileStatusOkayOpeningDataConnection"] = 150] = "FileStatusOkayOpeningDataConnection";
    // The requested action has been successfully completed.
    ErrorCode[ErrorCode["CommandNotImplemented"] = 202] = "CommandNotImplemented";
    ErrorCode[ErrorCode["SystemStatus"] = 211] = "SystemStatus";
    ErrorCode[ErrorCode["DirectoryStatus"] = 212] = "DirectoryStatus";
    ErrorCode[ErrorCode["FileStatus"] = 213] = "FileStatus";
    ErrorCode[ErrorCode["HelpMessage"] = 214] = "HelpMessage";
    ErrorCode[ErrorCode["IANAOfficialName"] = 215] = "IANAOfficialName";
    ErrorCode[ErrorCode["ReadyForNewUser"] = 220] = "ReadyForNewUser";
    ErrorCode[ErrorCode["ClosingControlConnection"] = 221] = "ClosingControlConnection";
    ErrorCode[ErrorCode["DataConnectionOpen"] = 225] = "DataConnectionOpen";
    ErrorCode[ErrorCode["SuccessNowClosingDataConnection"] = 226] = "SuccessNowClosingDataConnection";
    ErrorCode[ErrorCode["EnteringPassiveMode"] = 227] = "EnteringPassiveMode";
    ErrorCode[ErrorCode["EnteringLongPassiveMode"] = 228] = "EnteringLongPassiveMode";
    ErrorCode[ErrorCode["EnteringExtendedPassiveMode"] = 229] = "EnteringExtendedPassiveMode";
    ErrorCode[ErrorCode["UserLoggedIn"] = 230] = "UserLoggedIn";
    ErrorCode[ErrorCode["UserLoggedOut"] = 231] = "UserLoggedOut";
    ErrorCode[ErrorCode["LogoutWillCompleteWhenTransferDone"] = 232] = "LogoutWillCompleteWhenTransferDone";
    ErrorCode[ErrorCode["ServerAcceptsAuthenticationMethod"] = 234] = "ServerAcceptsAuthenticationMethod";
    ErrorCode[ErrorCode["ActionComplete"] = 250] = "ActionComplete";
    ErrorCode[ErrorCode["PathNameCreated"] = 257] = "PathNameCreated";
    // The command has been accepted, but the requested action is on hold, pending receipt of further information.
    ErrorCode[ErrorCode["UsernameOkayPasswordNeeded"] = 331] = "UsernameOkayPasswordNeeded";
    ErrorCode[ErrorCode["NeedAccountForLogin"] = 332] = "NeedAccountForLogin";
    ErrorCode[ErrorCode["RequestedFileActionPendingFurtherInformation"] = 350] = "RequestedFileActionPendingFurtherInformation";
    // The command was not accepted and the requested action did not take place, but the error condition is temporary and the action may be requested again.
    ErrorCode[ErrorCode["ServiceNotAvailable"] = 421] = "ServiceNotAvailable";
    ErrorCode[ErrorCode["CantOpenDataConnection"] = 425] = "CantOpenDataConnection";
    ErrorCode[ErrorCode["ConnectionClosed"] = 426] = "ConnectionClosed";
    ErrorCode[ErrorCode["InvalidUsernameOrPassword"] = 430] = "InvalidUsernameOrPassword";
    ErrorCode[ErrorCode["HostUnavailable"] = 434] = "HostUnavailable";
    ErrorCode[ErrorCode["FileActionNotTaken"] = 450] = "FileActionNotTaken";
    ErrorCode[ErrorCode["LocalErrorProcessing"] = 451] = "LocalErrorProcessing";
    ErrorCode[ErrorCode["InsufficientStorageSpaceOrFileInUse"] = 452] = "InsufficientStorageSpaceOrFileInUse";
    // Syntax error, command unrecognized and the requested action did not take place. This may include errors such as command line too long.
    ErrorCode[ErrorCode["SyntaxErrorInParameters"] = 501] = "SyntaxErrorInParameters";
    ErrorCode[ErrorCode["CommandNotImpemented"] = 502] = "CommandNotImpemented";
    ErrorCode[ErrorCode["BadSequenceOfCommands"] = 503] = "BadSequenceOfCommands";
    ErrorCode[ErrorCode["CommandNotImplementedForThatParameter"] = 504] = "CommandNotImplementedForThatParameter";
    ErrorCode[ErrorCode["NotLoggedIn"] = 530] = "NotLoggedIn";
    ErrorCode[ErrorCode["NeedAccountForStoringFiles"] = 532] = "NeedAccountForStoringFiles";
    ErrorCode[ErrorCode["CouldNotConnectToServerRequiresSSL"] = 534] = "CouldNotConnectToServerRequiresSSL";
    ErrorCode[ErrorCode["FileNotFoundOrNoAccess"] = 550] = "FileNotFoundOrNoAccess";
    ErrorCode[ErrorCode["UnknownPageType"] = 551] = "UnknownPageType";
    ErrorCode[ErrorCode["ExceededStorageAllocation"] = 552] = "ExceededStorageAllocation";
    ErrorCode[ErrorCode["FileNameNotAllowed"] = 553] = "FileNameNotAllowed";
    // Replies regarding confidentiality and integrity
    ErrorCode[ErrorCode["IntegrityProtectedReply"] = 631] = "IntegrityProtectedReply";
    ErrorCode[ErrorCode["ConfidentialityAndIntegrityProtectedReply"] = 632] = "ConfidentialityAndIntegrityProtectedReply";
    ErrorCode[ErrorCode["ConfidentialityProtectedReply"] = 633] = "ConfidentialityProtectedReply";
    // Common Winsock Error Codes[2] (These are not FTP return codes)
    ErrorCode[ErrorCode["ConnectionClosedByServer"] = 10054] = "ConnectionClosedByServer";
    ErrorCode[ErrorCode["CannotConnect"] = 10060] = "CannotConnect";
    ErrorCode[ErrorCode["CannotConnectRefusedByServer"] = 10061] = "CannotConnectRefusedByServer";
    ErrorCode[ErrorCode["DirectoryNotEmpty"] = 10066] = "DirectoryNotEmpty";
    ErrorCode[ErrorCode["TooManyUsers"] = 10068] = "TooManyUsers";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
;


/***/ }),

/***/ 6969:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyExcludeFilter = exports.getDefaultSettings = exports.Timer = exports.Timings = exports.retryRequest = exports.formatNumber = exports.pluralize = exports.Logger = void 0;
const pretty_ms_1 = __importDefault(__nccwpck_require__(1127));
const module_1 = __nccwpck_require__(157);
const types_1 = __nccwpck_require__(9235);
const multimatch_1 = __importDefault(__nccwpck_require__(8222));
class Logger {
    constructor(level) {
        this.level = level;
    }
    all(...data) {
        console.log(...data);
    }
    standard(...data) {
        if (this.level === "minimal") {
            return;
        }
        console.log(...data);
    }
    verbose(...data) {
        if (this.level !== "verbose") {
            return;
        }
        console.log(...data);
    }
}
exports.Logger = Logger;
function pluralize(count, singular, plural) {
    if (count === 1) {
        return singular;
    }
    return plural;
}
exports.pluralize = pluralize;
function formatNumber(number) {
    return number.toLocaleString();
}
exports.formatNumber = formatNumber;
/**
 * retry a request
 *
 * @example retryRequest(logger, async () => await item());
 */
function retryRequest(logger, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield callback();
        }
        catch (e) {
            if (e.code >= 400 && e.code <= 499) {
                logger.standard("400 level error from server when performing action - retrying...");
                logger.standard(e);
                if (e.code === types_1.ErrorCode.ConnectionClosed) {
                    logger.all("Connection closed. This library does not currently handle reconnects");
                    // await global.reconnect();
                    // todo reset current working dir
                    throw e;
                }
                return yield callback();
            }
            else {
                throw e;
            }
        }
    });
}
exports.retryRequest = retryRequest;
class Timings {
    constructor() {
        this.timers = {};
    }
    start(type) {
        if (this.timers[type] === undefined) {
            this.timers[type] = new Timer();
        }
        this.timers[type].start();
    }
    stop(type) {
        this.timers[type].stop();
    }
    getTime(type) {
        const timer = this.timers[type];
        if (timer === undefined || timer.time === null) {
            return 0;
        }
        return timer.time;
    }
    getTimeFormatted(type) {
        const timer = this.timers[type];
        if (timer === undefined || timer.time === null) {
            return "💣 Failed";
        }
        return (0, pretty_ms_1.default)(timer.time, { verbose: true });
    }
}
exports.Timings = Timings;
class Timer {
    constructor() {
        this.totalTime = null;
        this.startTime = null;
        this.endTime = null;
    }
    start() {
        this.startTime = process.hrtime();
    }
    stop() {
        if (this.startTime === null) {
            throw new Error("Called .stop() before calling .start()");
        }
        this.endTime = process.hrtime(this.startTime);
        const currentSeconds = this.totalTime === null ? 0 : this.totalTime[0];
        const currentNS = this.totalTime === null ? 0 : this.totalTime[1];
        this.totalTime = [
            currentSeconds + this.endTime[0],
            currentNS + this.endTime[1]
        ];
    }
    get time() {
        if (this.totalTime === null) {
            return null;
        }
        return (this.totalTime[0] * 1000) + (this.totalTime[1] / 1000000);
    }
}
exports.Timer = Timer;
function getDefaultSettings(withoutDefaults) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    if (withoutDefaults["local-dir"] !== undefined) {
        if (!withoutDefaults["local-dir"].endsWith("/")) {
            throw new Error("local-dir should be a folder (must end with /)");
        }
    }
    if (withoutDefaults["server-dir"] !== undefined) {
        if (!withoutDefaults["server-dir"].endsWith("/")) {
            throw new Error("server-dir should be a folder (must end with /)");
        }
    }
    return {
        "server": withoutDefaults.server,
        "username": withoutDefaults.username,
        "password": withoutDefaults.password,
        "port": (_a = withoutDefaults.port) !== null && _a !== void 0 ? _a : 22,
        "protocol": (_b = withoutDefaults.protocol) !== null && _b !== void 0 ? _b : "sftp",
        "local-dir": (_c = withoutDefaults["local-dir"]) !== null && _c !== void 0 ? _c : "./",
        "server-dir": (_d = withoutDefaults["server-dir"]) !== null && _d !== void 0 ? _d : "./",
        "state-name": (_e = withoutDefaults["state-name"]) !== null && _e !== void 0 ? _e : ".ftp-deploy-sync-state.json",
        "dry-run": (_f = withoutDefaults["dry-run"]) !== null && _f !== void 0 ? _f : false,
        "dangerous-clean-slate": (_g = withoutDefaults["dangerous-clean-slate"]) !== null && _g !== void 0 ? _g : false,
        "exclude": (_h = withoutDefaults.exclude) !== null && _h !== void 0 ? _h : module_1.excludeDefaults,
        "log-level": (_j = withoutDefaults["log-level"]) !== null && _j !== void 0 ? _j : "standard",
        "security": (_k = withoutDefaults.security) !== null && _k !== void 0 ? _k : "loose",
        "timeout": (_l = withoutDefaults.timeout) !== null && _l !== void 0 ? _l : 30000,
    };
}
exports.getDefaultSettings = getDefaultSettings;
function applyExcludeFilter(stat, excludeFilters) {
    // match exclude, return immediatley
    if (excludeFilters.length > 0) {
        // todo this could be a performance problem...
        const pathWithFolderSlash = stat.path + (stat.isDirectory() ? "/" : "");
        const excludeMatch = (0, multimatch_1.default)(pathWithFolderSlash, excludeFilters, { matchBase: true, dot: true });
        if (excludeMatch.length > 0) {
            return false;
        }
    }
    return true;
}
exports.applyExcludeFilter = applyExcludeFilter;


/***/ }),

/***/ 6554:
/***/ ((module) => {

"use strict";


const arrayDiffer = (array, ...values) => {
	const rest = new Set([].concat(...values));
	return array.filter(element => !rest.has(element));
};

module.exports = arrayDiffer;


/***/ }),

/***/ 9600:
/***/ ((module) => {

"use strict";


module.exports = (...arguments_) => {
	return [...new Set([].concat(...arguments_))];
};


/***/ }),

/***/ 1546:
/***/ ((module) => {

"use strict";


const arrify = value => {
	if (value === null || value === undefined) {
		return [];
	}

	if (Array.isArray(value)) {
		return value;
	}

	if (typeof value === 'string') {
		return [value];
	}

	if (typeof value[Symbol.iterator] === 'function') {
		return [...value];
	}

	return [value];
};

module.exports = arrify;


/***/ }),

/***/ 9417:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 3717:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var concatMap = __nccwpck_require__(6891);
var balanced = __nccwpck_require__(9417);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 6891:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 7117:
/***/ ((module) => {

module.exports = function (glob, opts) {
  if (typeof glob !== 'string') {
    throw new TypeError('Expected a string');
  }

  var str = String(glob);

  // The regexp we are building, as a string.
  var reStr = "";

  // Whether we are matching so called "extended" globs (like bash) and should
  // support single character matching, matching ranges of characters, group
  // matching, etc.
  var extended = opts ? !!opts.extended : false;

  // When globstar is _false_ (default), '/foo/*' is translated a regexp like
  // '^\/foo\/.*$' which will match any string beginning with '/foo/'
  // When globstar is _true_, '/foo/*' is translated to regexp like
  // '^\/foo\/[^/]*$' which will match any string beginning with '/foo/' BUT
  // which does not have a '/' to the right of it.
  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but
  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'
  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when
  // globstar is _false_
  var globstar = opts ? !!opts.globstar : false;

  // If we are doing extended matching, this boolean is true when we are inside
  // a group (eg {*.html,*.js}), and false otherwise.
  var inGroup = false;

  // RegExp flags (eg "i" ) to pass in to RegExp constructor.
  var flags = opts && typeof( opts.flags ) === "string" ? opts.flags : "";

  var c;
  for (var i = 0, len = str.length; i < len; i++) {
    c = str[i];

    switch (c) {
    case "/":
    case "$":
    case "^":
    case "+":
    case ".":
    case "(":
    case ")":
    case "=":
    case "!":
    case "|":
      reStr += "\\" + c;
      break;

    case "?":
      if (extended) {
        reStr += ".";
	    break;
      }

    case "[":
    case "]":
      if (extended) {
        reStr += c;
	    break;
      }

    case "{":
      if (extended) {
        inGroup = true;
	    reStr += "(";
	    break;
      }

    case "}":
      if (extended) {
        inGroup = false;
	    reStr += ")";
	    break;
      }

    case ",":
      if (inGroup) {
        reStr += "|";
	    break;
      }
      reStr += "\\" + c;
      break;

    case "*":
      // Move over all consecutive "*"'s.
      // Also store the previous and next characters
      var prevChar = str[i - 1];
      var starCount = 1;
      while(str[i + 1] === "*") {
        starCount++;
        i++;
      }
      var nextChar = str[i + 1];

      if (!globstar) {
        // globstar is disabled, so treat any number of "*" as one
        reStr += ".*";
      } else {
        // globstar is enabled, so determine if this is a globstar segment
        var isGlobstar = starCount > 1                      // multiple "*"'s
          && (prevChar === "/" || prevChar === undefined)   // from the start of the segment
          && (nextChar === "/" || nextChar === undefined)   // to the end of the segment

        if (isGlobstar) {
          // it's a globstar, so match zero or more path segments
          reStr += "((?:[^/]*(?:\/|$))*)";
          i++; // move over the "/"
        } else {
          // it's not a globstar, so only match one path segment
          reStr += "([^/]*)";
        }
      }
      break;

    default:
      reStr += c;
    }
  }

  // When regexp 'g' flag is specified don't
  // constrain the regular expression with ^ & $
  if (!flags || !~flags.indexOf('g')) {
    reStr = "^" + reStr + "$";
  }

  return new RegExp(reStr, flags);
};


/***/ }),

/***/ 3973:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = (function () { try { return __nccwpck_require__(1017) } catch (e) {}}()) || {
  sep: '/'
}
minimatch.sep = path.sep

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __nccwpck_require__(3717)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  b = b || {}
  var t = {}
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }
  m.Minimatch.defaults = function defaults (options) {
    return orig.defaults(ext(def, options)).Minimatch
  }

  m.filter = function filter (pattern, options) {
    return orig.filter(pattern, ext(def, options))
  }

  m.defaults = function defaults (options) {
    return orig.defaults(ext(def, options))
  }

  m.makeRe = function makeRe (pattern, options) {
    return orig.makeRe(pattern, ext(def, options))
  }

  m.braceExpand = function braceExpand (pattern, options) {
    return orig.braceExpand(pattern, ext(def, options))
  }

  m.match = function (list, pattern, options) {
    return orig.match(list, pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  assertValidPattern(pattern)

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  assertValidPattern(pattern)

  if (!options) options = {}

  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (!options.allowWindowsEscape && path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false
  this.partial = !!options.partial

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

var MAX_PATTERN_LENGTH = 1024 * 64
var assertValidPattern = function (pattern) {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  assertValidPattern(pattern)

  var options = this.options

  // shortcuts
  if (pattern === '**') {
    if (!options.noglobstar)
      return GLOBSTAR
    else
      pattern = '*'
  }
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      /* istanbul ignore next */
      case '/': {
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false
      }

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        // split where the last [ was, make sure we don't have
        // an invalid re. if so, re-walk the contents of the
        // would-be class to re-translate any characters that
        // were passed through as-is
        // TODO: It would probably be faster to determine this
        // without a try/catch and a new RegExp, but it's tricky
        // to do safely.  For now, this is safe and works.
        var cs = pattern.substring(classStart + 1, i)
        try {
          RegExp('[' + cs + ']')
        } catch (er) {
          // not a valid class!
          var sp = this.parse(cs, SUBPARSE)
          re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
          hasMagic = hasMagic || sp[1]
          inClass = false
          continue
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '[': case '.': case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) /* istanbul ignore next - should be impossible */ {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) /* istanbul ignore next - should be impossible */ {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = function match (f, partial) {
  if (typeof partial === 'undefined') partial = this.partial
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    /* istanbul ignore if */
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      /* istanbul ignore if */
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      hit = f === p
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else /* istanbul ignore else */ if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return (fi === fl - 1) && (file[fi] === '')
  }

  // should be unreachable.
  /* istanbul ignore next */
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 8222:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const minimatch = __nccwpck_require__(3973);
const arrayUnion = __nccwpck_require__(9600);
const arrayDiffer = __nccwpck_require__(6554);
const arrify = __nccwpck_require__(1546);

module.exports = (list, patterns, options = {}) => {
	list = arrify(list);
	patterns = arrify(patterns);

	if (list.length === 0 || patterns.length === 0) {
		return [];
	}

	let result = [];
	for (const item of list) {
		for (let pattern of patterns) {
			let process = arrayUnion;

			if (pattern[0] === '!') {
				pattern = pattern.slice(1);
				process = arrayDiffer;
			}

			result = process(result, minimatch.match([item], pattern, options));
		}
	}

	return result;
};


/***/ }),

/***/ 7816:
/***/ ((module) => {

"use strict";

module.exports = milliseconds => {
	if (typeof milliseconds !== 'number') {
		throw new TypeError('Expected a number');
	}

	const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;

	return {
		days: roundTowardsZero(milliseconds / 86400000),
		hours: roundTowardsZero(milliseconds / 3600000) % 24,
		minutes: roundTowardsZero(milliseconds / 60000) % 60,
		seconds: roundTowardsZero(milliseconds / 1000) % 60,
		milliseconds: roundTowardsZero(milliseconds) % 1000,
		microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
		nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
	};
};


/***/ }),

/***/ 5168:
/***/ ((module) => {

"use strict";


const BYTE_UNITS = [
	'B',
	'kB',
	'MB',
	'GB',
	'TB',
	'PB',
	'EB',
	'ZB',
	'YB'
];

const BIBYTE_UNITS = [
	'B',
	'kiB',
	'MiB',
	'GiB',
	'TiB',
	'PiB',
	'EiB',
	'ZiB',
	'YiB'
];

const BIT_UNITS = [
	'b',
	'kbit',
	'Mbit',
	'Gbit',
	'Tbit',
	'Pbit',
	'Ebit',
	'Zbit',
	'Ybit'
];

const BIBIT_UNITS = [
	'b',
	'kibit',
	'Mibit',
	'Gibit',
	'Tibit',
	'Pibit',
	'Eibit',
	'Zibit',
	'Yibit'
];

/*
Formats the given number using `Number#toLocaleString`.
- If locale is a string, the value is expected to be a locale-key (for example: `de`).
- If locale is true, the system default locale is used for translation.
- If no value for locale is specified, the number is returned unmodified.
*/
const toLocaleString = (number, locale, options) => {
	let result = number;
	if (typeof locale === 'string' || Array.isArray(locale)) {
		result = number.toLocaleString(locale, options);
	} else if (locale === true || options !== undefined) {
		result = number.toLocaleString(undefined, options);
	}

	return result;
};

module.exports = (number, options) => {
	if (!Number.isFinite(number)) {
		throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
	}

	options = Object.assign({bits: false, binary: false}, options);

	const UNITS = options.bits ?
		(options.binary ? BIBIT_UNITS : BIT_UNITS) :
		(options.binary ? BIBYTE_UNITS : BYTE_UNITS);

	if (options.signed && number === 0) {
		return ` 0 ${UNITS[0]}`;
	}

	const isNegative = number < 0;
	const prefix = isNegative ? '-' : (options.signed ? '+' : '');

	if (isNegative) {
		number = -number;
	}

	let localeOptions;

	if (options.minimumFractionDigits !== undefined) {
		localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
	}

	if (options.maximumFractionDigits !== undefined) {
		localeOptions = Object.assign({maximumFractionDigits: options.maximumFractionDigits}, localeOptions);
	}

	if (number < 1) {
		const numberString = toLocaleString(number, options.locale, localeOptions);
		return prefix + numberString + ' ' + UNITS[0];
	}

	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
	// eslint-disable-next-line unicorn/prefer-exponentiation-operator
	number /= Math.pow(options.binary ? 1024 : 1000, exponent);

	if (!localeOptions) {
		number = number.toPrecision(3);
	}

	const numberString = toLocaleString(Number(number), options.locale, localeOptions);

	const unit = UNITS[exponent];

	return prefix + numberString + ' ' + unit;
};


/***/ }),

/***/ 1127:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const parseMilliseconds = __nccwpck_require__(7816);

const pluralize = (word, count) => count === 1 ? word : `${word}s`;

const SECOND_ROUNDING_EPSILON = 0.0000001;

module.exports = (milliseconds, options = {}) => {
	if (!Number.isFinite(milliseconds)) {
		throw new TypeError('Expected a finite number');
	}

	if (options.colonNotation) {
		options.compact = false;
		options.formatSubMilliseconds = false;
		options.separateMilliseconds = false;
		options.verbose = false;
	}

	if (options.compact) {
		options.secondsDecimalDigits = 0;
		options.millisecondsDecimalDigits = 0;
	}

	const result = [];

	const floorDecimals = (value, decimalDigits) => {
		const flooredInterimValue = Math.floor((value * (10 ** decimalDigits)) + SECOND_ROUNDING_EPSILON);
		const flooredValue = Math.round(flooredInterimValue) / (10 ** decimalDigits);
		return flooredValue.toFixed(decimalDigits);
	};

	const add = (value, long, short, valueString) => {
		if ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {
			return;
		}

		valueString = (valueString || value || '0').toString();
		let prefix;
		let suffix;
		if (options.colonNotation) {
			prefix = result.length > 0 ? ':' : '';
			suffix = '';
			const wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;
			const minLength = result.length > 0 ? 2 : 1;
			valueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;
		} else {
			prefix = '';
			suffix = options.verbose ? ' ' + pluralize(long, value) : short;
		}

		result.push(prefix + valueString + suffix);
	};

	const parsed = parseMilliseconds(milliseconds);

	add(Math.trunc(parsed.days / 365), 'year', 'y');
	add(parsed.days % 365, 'day', 'd');
	add(parsed.hours, 'hour', 'h');
	add(parsed.minutes, 'minute', 'm');

	if (
		options.separateMilliseconds ||
		options.formatSubMilliseconds ||
		(!options.colonNotation && milliseconds < 1000)
	) {
		add(parsed.seconds, 'second', 's');
		if (options.formatSubMilliseconds) {
			add(parsed.milliseconds, 'millisecond', 'ms');
			add(parsed.microseconds, 'microsecond', 'µs');
			add(parsed.nanoseconds, 'nanosecond', 'ns');
		} else {
			const millisecondsAndBelow =
				parsed.milliseconds +
				(parsed.microseconds / 1000) +
				(parsed.nanoseconds / 1e6);

			const millisecondsDecimalDigits =
				typeof options.millisecondsDecimalDigits === 'number' ?
					options.millisecondsDecimalDigits :
					0;

			const roundedMiliseconds = millisecondsAndBelow >= 1 ?
				Math.round(millisecondsAndBelow) :
				Math.ceil(millisecondsAndBelow);

			const millisecondsString = millisecondsDecimalDigits ?
				millisecondsAndBelow.toFixed(millisecondsDecimalDigits) :
				roundedMiliseconds;

			add(
				Number.parseFloat(millisecondsString, 10),
				'millisecond',
				'ms',
				millisecondsString
			);
		}
	} else {
		const seconds = (milliseconds / 1000) % 60;
		const secondsDecimalDigits =
			typeof options.secondsDecimalDigits === 'number' ?
				options.secondsDecimalDigits :
				1;
		const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
		const secondsString = options.keepDecimalsOnWholeSeconds ?
			secondsFixed :
			secondsFixed.replace(/\.0+$/, '');
		add(Number.parseFloat(secondsString, 10), 'second', 's', secondsString);
	}

	if (result.length === 0) {
		return '0' + (options.verbose ? ' milliseconds' : 'ms');
	}

	if (options.compact) {
		return result[0];
	}

	if (typeof options.unitCount === 'number') {
		const separator = options.colonNotation ? '' : ' ';
		return result.slice(0, Math.max(options.unitCount, 1)).join(separator);
	}

	return options.colonNotation ? result.join('') : result.join(' ');
};


/***/ }),

/***/ 4384:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

!function(e,t){ true?module.exports=t():0}(global,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=34)}([function(e,t){e.exports=__nccwpck_require__(3837)},function(e,t){e.exports=__nccwpck_require__(2361)},function(e,t){e.exports=__nccwpck_require__(2781)},function(e,t,r){var i=r(15).Ber,n=r(4).readUInt32BE,s=r(4).writeUInt32BE;function o(e,t,r,i,s,o){r&&!Buffer.isBuffer(r)&&"string"!=typeof r&&("number"==typeof s&&(o=s),s=i,i=r,r=void 0),t||(t=0);var a,c,h=e.length,f=h-t;return t<0||t>=h||f<4||(a=n(e,t))>(o||1/0)||f<4+a?(i&&i._cleanup(s),!1):(c=(t+=4)+a,e._pos=c,r?Buffer.isBuffer(r)?(e.copy(r,0,t,c),r):e.toString(r,t,c):e.slice(t,c))}e.exports={iv_inc:function(e){var t=12,r=0;do{if(--t,255!==(r=e[t]))return void(e[t]=++r);e[t]=0}while(t>4)},readInt:function(e,t,r,i){var s=e.length;if(t<0||t>=s||s-t<4)return r&&r._cleanup(i),!1;return n(e,t)},readString:o,parseKey:r(32).parseKey,sigSSHToASN1:function(e,t,r,n){var s;switch(t){case"ssh-dss":if(e.length>40)return e;(s=new i.Writer).startSequence();var a=e.slice(0,20),c=e.slice(20);if(128&a[0]){var h=Buffer.allocUnsafe(21);h[0]=0,a.copy(h,1),a=h}else 0!==a[0]||128&a[1]||(a=a.slice(1));if(128&c[0]){var f=Buffer.allocUnsafe(21);f[0]=0,c.copy(f,1),c=f}else 0!==c[0]||128&c[1]||(c=c.slice(1));return s.writeBuffer(a,i.Integer),s.writeBuffer(c,i.Integer),s.endSequence(),s.buffer;case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return!1!==(a=o(e,0,r,n))&&(!1!==(c=o(e,e._pos,r,n))&&((s=new i.Writer).startSequence(),s.writeBuffer(a,i.Integer),s.writeBuffer(c,i.Integer),s.endSequence(),s.buffer));default:return e}},DSASigBERToBare:function(e){if(e.length<=40)return e;var t=new i.Reader(e);t.readSequence();var r=t.readString(i.Integer,!0),n=t.readString(i.Integer,!0),s=0,o=0;if(r.length<20){var a=Buffer.allocUnsafe(20);r.copy(a,1),(r=a)[0]=0}if(n.length<20){var c=Buffer.allocUnsafe(20);n.copy(c,1),(n=c)[0]=0}r.length>20&&0===r[0]&&(s=1);n.length>20&&0===n[0]&&(o=1);var h=Buffer.allocUnsafe(r.length-s+(n.length-o));return r.copy(h,0,s),n.copy(h,r.length-s,o),h},ECDSASigASN1ToSSH:function(e){if(0===e[0])return e;var t=new i.Reader(e);t.readSequence();var r=t.readString(i.Integer,!0),n=t.readString(i.Integer,!0);if(null===r||null===n)return!1;var o=Buffer.allocUnsafe(4+r.length+4+n.length);return s(o,r.length,0),r.copy(o,4),s(o,n.length,4+r.length),n.copy(o,8+r.length),o}}},function(e,t){e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,r){return e[r++]=t>>>24,e[r++]=t>>>16,e[r++]=t>>>8,e[r++]=t,r},writeUInt32LE:function(e,t,r){return e[r++]=t,e[r++]=t>>>8,e[r++]=t>>>16,e[r++]=t>>>24,r}}},function(e,t){e.exports=__nccwpck_require__(7147)},function(e,t){e.exports=__nccwpck_require__(6113)},function(e,t){e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,r){return e[r++]=t>>>24,e[r++]=t>>>16,e[r++]=t>>>8,e[r++]=t,r},writeUInt32LE:function(e,t,r){return e[r++]=t,e[r++]=t>>>8,e[r++]=t>>>16,e[r++]=t>>>24,r}}},function(e,t){e.exports=__nccwpck_require__(1808)},function(e,t,r){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.FileInfo=t.FileType=void 0,function(e){e[e.Unknown=0]="Unknown",e[e.File=1]="File",e[e.Directory=2]="Directory",e[e.SymbolicLink=3]="SymbolicLink"}(i=t.FileType||(t.FileType={}));class n{constructor(e){this.name=e,this.type=i.Unknown,this.size=0,this.rawModifiedAt="",this.modifiedAt=void 0,this.permissions=void 0,this.hardLinkCount=void 0,this.link=void 0,this.group=void 0,this.user=void 0,this.uniqueID=void 0,this.name=e}get isDirectory(){return this.type===i.Directory}get isSymbolicLink(){return this.type===i.SymbolicLink}get isFile(){return this.type===i.File}get date(){return this.rawModifiedAt}set date(e){this.rawModifiedAt=e}}t.FileInfo=n,n.UnixPermission={Read:4,Write:2,Execute:1}},function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||i(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),n(r(37),t),n(r(22),t),n(r(9),t),n(r(23),t),n(r(42),t);var s=r(26);Object.defineProperty(t,"enterPassiveModeIPv4",{enumerable:!0,get:function(){return s.enterPassiveModeIPv4}}),Object.defineProperty(t,"enterPassiveModeIPv6",{enumerable:!0,get:function(){return s.enterPassiveModeIPv6}})},function(e,t){e.exports=__nccwpck_require__(4404)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.positiveIntermediate=t.positiveCompletion=t.isMultiline=t.isSingleLine=t.parseControlResponse=void 0;function i(e){return/^\d\d\d(?:$| )/.test(e)}function n(e){return/^\d\d\d-/.test(e)}t.parseControlResponse=function(e){const t=e.split(/\r?\n/),r=[];let s,o=0;for(let e=0;e<t.length;e++){const a=t[e];if(s)s.test(a)&&(s=void 0,r.push(t.slice(o,e+1).join("\n")));else if(n(a)){const t=a.substr(0,3);s=new RegExp(`^${t}(?:$| )`),o=e}else i(a)&&r.push(a)}return{messages:r,rest:s?t.slice(o).join("\n")+"\n":""}},t.isSingleLine=i,t.isMultiline=n,t.positiveCompletion=function(e){return e>=200&&e<300},t.positiveIntermediate=function(e){return e>=300&&e<400}},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Strategy=void 0;const n=r(1),s=r(43);class o extends n.EventEmitter{constructor(e,t){super(),this.config=e,this.options=t}abort(){return i(this,void 0,void 0,(function*(){yield this.disconnect(),yield this.connect()}))}prepareTransfer(e,t){return this.transfer=new s.Transfer(e,t,(e,t)=>{this.emit("progress",e,t)}),this.transfer.handleProgress}finishTransfer(){this.transfer=null}handleNetwork(e,t){return new Promise((r,i)=>{const n=()=>{this.removeListener("disconnect",s),t&&t(o,a)},s=()=>o(null),o=e=>{n(),r(e)},a=e=>{n(),i(e)};this.once("disconnect",s),e(o,a)})}}t.Strategy=o},function(e,t,r){e.exports={SFTPStream:r(47),SSH2Stream:r(56),utils:r(3),constants:r(18)}},function(e,t,r){var i=r(48);e.exports={Ber:i,BerReader:i.Reader,BerWriter:i.Writer}},function(e,t){e.exports={newInvalidAsn1Error:function(e){var t=new Error;return t.name="InvalidAsn1Error",t.message=e||"",t}}},function(e,t){e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},function(e,t,r){var i,n,s,o=r(6),a=function(){if("function"==typeof o.sign&&"function"==typeof o.verify){var e,t,r="-----BEGIN PRIVATE KEY-----\r\nMC4CAQAwBQYDK2VwBCIEIHKj+sVa9WcD/q2DJUJaf43Kptc8xYuUQA4bOFj9vC8T\r\n-----END PRIVATE KEY-----",i=Buffer.from("a");try{e=o.sign(null,i,r),t=o.verify(null,i,r,e)}catch(e){}return Buffer.isBuffer(e)&&64===e.length&&!0===t}return!1}(),c="function"==typeof o.diffieHellman&&"function"==typeof o.generateKeyPairSync&&"function"==typeof o.createPublicKey,h=t.MESSAGE={DISCONNECT:1,IGNORE:2,UNIMPLEMENTED:3,DEBUG:4,SERVICE_REQUEST:5,SERVICE_ACCEPT:6,KEXINIT:20,NEWKEYS:21,USERAUTH_REQUEST:50,USERAUTH_FAILURE:51,USERAUTH_SUCCESS:52,USERAUTH_BANNER:53,GLOBAL_REQUEST:80,REQUEST_SUCCESS:81,REQUEST_FAILURE:82,CHANNEL_OPEN:90,CHANNEL_OPEN_CONFIRMATION:91,CHANNEL_OPEN_FAILURE:92,CHANNEL_WINDOW_ADJUST:93,CHANNEL_DATA:94,CHANNEL_EXTENDED_DATA:95,CHANNEL_EOF:96,CHANNEL_CLOSE:97,CHANNEL_REQUEST:98,CHANNEL_SUCCESS:99,CHANNEL_FAILURE:100};for(i=0,s=(n=Object.keys(h)).length;i<s;++i)h[h[n[i]]]=n[i];h.KEXDH_INIT=30,h.KEXDH_REPLY=31,h.KEXDH_GEX_REQUEST=34,h.KEXDH_GEX_GROUP=31,h.KEXDH_GEX_INIT=32,h.KEXDH_GEX_REPLY=33,h.KEXECDH_INIT=30,h.KEXECDH_REPLY=31,h.USERAUTH_PASSWD_CHANGEREQ=60,h.USERAUTH_PK_OK=60,h.USERAUTH_INFO_REQUEST=60,h.USERAUTH_INFO_RESPONSE=61;var f=t.DYNAMIC_KEXDH_MESSAGE={};f[h.KEXDH_GEX_GROUP]="KEXDH_GEX_GROUP",f[h.KEXDH_GEX_REPLY]="KEXDH_GEX_REPLY";var u=t.KEXDH_MESSAGE={};u[h.KEXDH_INIT]="KEXDH_INIT",u[h.KEXDH_REPLY]="KEXDH_REPLY";var l=t.DISCONNECT_REASON={HOST_NOT_ALLOWED_TO_CONNECT:1,PROTOCOL_ERROR:2,KEY_EXCHANGE_FAILED:3,RESERVED:4,MAC_ERROR:5,COMPRESSION_ERROR:6,SERVICE_NOT_AVAILABLE:7,PROTOCOL_VERSION_NOT_SUPPORTED:8,HOST_KEY_NOT_VERIFIABLE:9,CONNECTION_LOST:10,BY_APPLICATION:11,TOO_MANY_CONNECTIONS:12,AUTH_CANCELED_BY_USER:13,NO_MORE_AUTH_METHODS_AVAILABLE:14,ILLEGAL_USER_NAME:15};for(i=0,s=(n=Object.keys(l)).length;i<s;++i)l[l[n[i]]]=n[i];var p=t.CHANNEL_OPEN_FAILURE={ADMINISTRATIVELY_PROHIBITED:1,CONNECT_FAILED:2,UNKNOWN_CHANNEL_TYPE:3,RESOURCE_SHORTAGE:4};for(i=0,s=(n=Object.keys(p)).length;i<s;++i)p[p[n[i]]]=n[i];var d=t.TERMINAL_MODE={TTY_OP_END:0,VINTR:1,VQUIT:2,VERASE:3,VKILL:4,VEOF:5,VEOL:6,VEOL2:7,VSTART:8,VSTOP:9,VSUSP:10,VDSUSP:11,VREPRINT:12,VWERASE:13,VLNEXT:14,VFLUSH:15,VSWTCH:16,VSTATUS:17,VDISCARD:18,IGNPAR:30,PARMRK:31,INPCK:32,ISTRIP:33,INLCR:34,IGNCR:35,ICRNL:36,IUCLC:37,IXON:38,IXANY:39,IXOFF:40,IMAXBEL:41,ISIG:50,ICANON:51,XCASE:52,ECHO:53,ECHOE:54,ECHOK:55,ECHONL:56,NOFLSH:57,TOSTOP:58,IEXTEN:59,ECHOCTL:60,ECHOKE:61,PENDIN:62,OPOST:70,OLCUC:71,ONLCR:72,OCRNL:73,ONOCR:74,ONLRET:75,CS7:90,CS8:91,PARENB:92,PARODD:93,TTY_OP_ISPEED:128,TTY_OP_OSPEED:129};for(i=0,s=(n=Object.keys(d)).length;i<s;++i)d[d[n[i]]]=n[i];var g=t.CHANNEL_EXTENDED_DATATYPE={STDERR:1};for(i=0,s=(n=Object.keys(g)).length;i<s;++i)g[g[n[i]]]=n[i];t.SIGNALS=["ABRT","ALRM","FPE","HUP","ILL","INT","QUIT","SEGV","TERM","USR1","USR2","KILL","PIPE"];var m=["ecdh-sha2-nistp256","ecdh-sha2-nistp384","ecdh-sha2-nistp521","diffie-hellman-group-exchange-sha256","diffie-hellman-group14-sha256","diffie-hellman-group16-sha512","diffie-hellman-group18-sha512","diffie-hellman-group14-sha1"];c&&(m.unshift("curve25519-sha256"),m.unshift("curve25519-sha256@libssh.org"));var E=["diffie-hellman-group-exchange-sha1","diffie-hellman-group1-sha1"],v=Buffer.from(m.join(","),"ascii");E=m.concat(E);var y=["ecdsa-sha2-nistp256","ecdsa-sha2-nistp384","ecdsa-sha2-nistp521","ssh-rsa"];a&&y.unshift("ssh-ed25519");var _=["ssh-dss"],w=Buffer.from(y.join(","),"ascii");_=y.concat(_);var b=["aes128-ctr","aes192-ctr","aes256-ctr","aes128-gcm","aes128-gcm@openssh.com","aes256-gcm","aes256-gcm@openssh.com"],S=["aes256-cbc","aes192-cbc","aes128-cbc","blowfish-cbc","3des-cbc","arcfour256","arcfour128","cast128-cbc","arcfour"],k=Buffer.from(b.join(","),"ascii");S=b.concat(S);var T=["hmac-sha2-256","hmac-sha2-512","hmac-sha1"],A=["hmac-md5","hmac-sha2-256-96","hmac-sha2-512-96","hmac-ripemd160","hmac-sha1-96","hmac-md5-96"],U=Buffer.from(T.join(","),"ascii");A=T.concat(A);var B=["none","zlib@openssh.com","zlib"],N=[],R=Buffer.from(B.join(","),"ascii");function P(e,t,r,i,n,s){return{blockLen:e,keyLen:t,ivLen:0===r?e:r,authLen:i,discardLen:n,stream:s}}function D(e,t){return{len:e,actualLen:t}}N=B.concat(N),t.CIPHER_INFO={"aes128-gcm":P(16,16,12,16,0,!1),"aes256-gcm":P(16,32,12,16,0,!1),"aes128-gcm@openssh.com":P(16,16,12,16,0,!1),"aes256-gcm@openssh.com":P(16,32,12,16,0,!1),"aes128-cbc":P(16,16,0,0,0,!1),"aes192-cbc":P(16,24,0,0,0,!1),"aes256-cbc":P(16,32,0,0,0,!1),"rijndael-cbc@lysator.liu.se":P(16,32,0,0,0,!1),"3des-cbc":P(8,24,0,0,0,!1),"blowfish-cbc":P(8,16,0,0,0,!1),"idea-cbc":P(8,16,0,0,0,!1),"cast128-cbc":P(8,16,0,0,0,!1),"camellia128-cbc":P(16,16,0,0,0,!1),"camellia192-cbc":P(16,24,0,0,0,!1),"camellia256-cbc":P(16,32,0,0,0,!1),"camellia128-cbc@openssh.com":P(16,16,0,0,0,!1),"camellia192-cbc@openssh.com":P(16,24,0,0,0,!1),"camellia256-cbc@openssh.com":P(16,32,0,0,0,!1),"aes128-ctr":P(16,16,0,0,0,!1),"aes192-ctr":P(16,24,0,0,0,!1),"aes256-ctr":P(16,32,0,0,0,!1),"3des-ctr":P(8,24,0,0,0,!1),"blowfish-ctr":P(8,16,0,0,0,!1),"cast128-ctr":P(8,16,0,0,0,!1),"camellia128-ctr":P(16,16,0,0,0,!1),"camellia192-ctr":P(16,24,0,0,0,!1),"camellia256-ctr":P(16,32,0,0,0,!1),"camellia128-ctr@openssh.com":P(16,16,0,0,0,!1),"camellia192-ctr@openssh.com":P(16,24,0,0,0,!1),"camellia256-ctr@openssh.com":P(16,32,0,0,0,!1),arcfour:P(8,16,0,0,1536,!0),arcfour128:P(8,16,0,0,1536,!0),arcfour256:P(8,32,0,0,1536,!0),arcfour512:P(8,64,0,0,1536,!0)},t.HMAC_INFO={"hmac-md5":D(16,16),"hmac-md5-96":D(16,12),"hmac-ripemd160":D(20,20),"hmac-sha1":D(20,20),"hmac-sha1-96":D(20,12),"hmac-sha2-256":D(32,32),"hmac-sha2-256-96":D(32,12),"hmac-sha2-512":D(64,64),"hmac-sha2-512-96":D(64,12)},t.ALGORITHMS={KEX:m,KEX_BUF:v,SUPPORTED_KEX:E,SERVER_HOST_KEY:y,SERVER_HOST_KEY_BUF:w,SUPPORTED_SERVER_HOST_KEY:_,CIPHER:b,CIPHER_BUF:k,SUPPORTED_CIPHER:S,HMAC:T,HMAC_BUF:U,SUPPORTED_HMAC:A,COMPRESS:B,COMPRESS_BUF:R,SUPPORTED_COMPRESS:N},t.SSH_TO_OPENSSL={"ecdh-sha2-nistp256":"prime256v1","ecdh-sha2-nistp384":"secp384r1","ecdh-sha2-nistp521":"secp521r1","aes128-gcm":"aes-128-gcm","aes256-gcm":"aes-256-gcm","aes128-gcm@openssh.com":"aes-128-gcm","aes256-gcm@openssh.com":"aes-256-gcm","3des-cbc":"des-ede3-cbc","blowfish-cbc":"bf-cbc","aes256-cbc":"aes-256-cbc","aes192-cbc":"aes-192-cbc","aes128-cbc":"aes-128-cbc","idea-cbc":"idea-cbc","cast128-cbc":"cast-cbc","rijndael-cbc@lysator.liu.se":"aes-256-cbc",arcfour128:"rc4",arcfour256:"rc4",arcfour512:"rc4",arcfour:"rc4","camellia128-cbc":"camellia-128-cbc","camellia192-cbc":"camellia-192-cbc","camellia256-cbc":"camellia-256-cbc","camellia128-cbc@openssh.com":"camellia-128-cbc","camellia192-cbc@openssh.com":"camellia-192-cbc","camellia256-cbc@openssh.com":"camellia-256-cbc","3des-ctr":"des-ede3","blowfish-ctr":"bf-ecb","aes256-ctr":"aes-256-ctr","aes192-ctr":"aes-192-ctr","aes128-ctr":"aes-128-ctr","cast128-ctr":"cast5-ecb","camellia128-ctr":"camellia-128-ecb","camellia192-ctr":"camellia-192-ecb","camellia256-ctr":"camellia-256-ecb","camellia128-ctr@openssh.com":"camellia-128-ecb","camellia192-ctr@openssh.com":"camellia-192-ecb","camellia256-ctr@openssh.com":"camellia-256-ecb","hmac-sha1-96":"sha1","hmac-sha1":"sha1","hmac-sha2-256":"sha256","hmac-sha2-256-96":"sha256","hmac-sha2-512":"sha512","hmac-sha2-512-96":"sha512","hmac-md5-96":"md5","hmac-md5":"md5","hmac-ripemd160":"ripemd160"};var O=t.BUGS={BAD_DHGEX:1,OLD_EXIT:2,DYN_RPORT_BUG:4};t.BUGGY_IMPLS=[["Cisco-1.25",O.BAD_DHGEX],[/^[0-9.]+$/,O.OLD_EXIT],[/^OpenSSH_5\.\d+/,O.DYN_RPORT_BUG]],t.EDDSA_SUPPORTED=a,t.CURVE25519_SUPPORTED=c},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.execFunction=void 0,t.execFunction=(e,...t)=>i(void 0,void 0,void 0,(function*(){let r,i;try{r=yield e(...t)}catch(e){i=e}return{data:r,error:i}}))},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.FtpStrategy=void 0;const n=r(10),s=r(2),o=r(13),a=r(27);class c extends o.Strategy{constructor(){super(...arguments),this.connect=()=>i(this,void 0,void 0,(function*(){var e;this.connected||(this.client||(this.client=new n.Client),yield this.client.access(Object.assign({secure:this.isFTPS,secureOptions:null===(e=this.options)||void 0===e?void 0:e.secureOptions},this.config)),this.emit("connect"))})),this.disconnect=()=>i(this,void 0,void 0,(function*(){return this.connected?(this.emit("disconnect"),new Promise(e=>{this.client.close(),this.client.ftp.socket.once("close",()=>{this.client=null,e()})})):null})),this.download=(e,t,r)=>i(this,void 0,void 0,(function*(){return this.handleTransfer(()=>this.client.downloadTo(e,t.remotePath,t.startAt),t,r)})),this.upload=(e,t,r)=>i(this,void 0,void 0,(function*(){return this.handleTransfer(()=>this.client.uploadFrom(e,t.remotePath),t,r)})),this.list=e=>this.handle(()=>this.client.list(e).then(e=>e.map(this.formatFile))),this.size=e=>this.handle(()=>this.client.size(e)),this.exists=e=>i(this,void 0,void 0,(function*(){try{yield this.client.rename(e,e)}catch(e){return!1}return!0})),this.move=(e,t)=>this.handle(()=>this.client.rename(e,t)),this.removeFile=e=>this.handle(()=>this.client.remove(e)),this.removeEmptyFolder=e=>this.handle(()=>this.client.removeEmptyDir(e)),this.removeFolder=e=>this.handle(()=>this.client.removeDir(e)),this.createFolder=e=>i(this,void 0,void 0,(function*(){yield this.send("MKD "+e)})),this.createEmptyFile=e=>i(this,void 0,void 0,(function*(){const t=s.Readable.from("\n");yield this.upload(t,{remotePath:e},{quiet:!0})})),this.pwd=()=>this.handle(()=>this.client.pwd()),this.send=e=>this.handle(()=>this.client.send(e).then(e=>e.message)),this.formatFile=e=>Object.assign(Object.assign({},a.FtpUtils.formatFile(e)),{lastModified:a.FtpUtils.getValidDate(e.date)}),this.handle=e=>i(this,void 0,void 0,(function*(){try{return yield e()}catch(e){const t=e.message;if("Client is closed"!==t&&!t.startsWith("User closed client during task"))throw e}return null})),this.handleTransfer=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=this.prepareTransfer(t,r);this.client.trackProgress(e=>n(e.bytes)),yield this.handle(e),null===(i=this.client)||void 0===i||i.trackProgress(void 0),this.finishTransfer()}))}get connected(){var e;return!1===(null===(e=this.client)||void 0===e?void 0:e.closed)}get isFTPS(){return"ftps"===this.config.protocol}get socket(){var e,t;return null===(t=null===(e=this.client)||void 0===e?void 0:e.ftp)||void 0===t?void 0:t.socket}}t.FtpStrategy=c},function(e,t){e.exports=__nccwpck_require__(1017)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FTPContext=t.FTPError=void 0;const i=r(8),n=r(12);class s extends Error{constructor(e){super(e.message),this.name=this.constructor.name,this.code=e.code}}t.FTPError=s;t.FTPContext=class{constructor(e=0,t="utf8"){this.timeout=e,this.verbose=!1,this.ipFamily=void 0,this.tlsOptions={},this._partialResponse="",this._encoding=t,this._socket=this.socket=this._newSocket(),this._dataSocket=void 0}close(){const e=this._task?"User closed client during task":"User closed client",t=new Error(e);this.closeWithError(t)}closeWithError(e){this._closingError||(this._closingError=e,this._closeSocket(this._socket),this._closeSocket(this._dataSocket),this._passToHandler(e),this._stopTrackingTask())}get closed(){return void 0===this.socket.remoteAddress||void 0!==this._closingError}reset(){this.socket=this._newSocket()}get socket(){return this._socket}set socket(e){if(this.dataSocket=void 0,this.tlsOptions={},this._partialResponse="",this._socket){e.localPort===this._socket.localPort||this._socket.destroy(),this._removeSocketListeners(this._socket)}e&&(this._closingError=void 0,e.setTimeout(0),e.setEncoding(this._encoding),e.setKeepAlive(!0),e.on("data",e=>this._onControlSocketData(e)),e.on("end",()=>this.closeWithError(new Error("Server sent FIN packet unexpectedly, closing connection."))),e.on("close",e=>{e||this.closeWithError(new Error("Server closed connection unexpectedly."))}),this._setupDefaultErrorHandlers(e,"control socket")),this._socket=e}get dataSocket(){return this._dataSocket}set dataSocket(e){this._closeSocket(this._dataSocket),e&&(e.setTimeout(0),this._setupDefaultErrorHandlers(e,"data socket")),this._dataSocket=e}get encoding(){return this._encoding}set encoding(e){this._encoding=e,this.socket&&this.socket.setEncoding(e)}send(e){const t=e.startsWith("PASS")?"> PASS ###":"> "+e;this.log(t),this._socket.write(e+"\r\n",this.encoding)}request(e){return this.handle(e,(e,t)=>{e instanceof Error?t.reject(e):t.resolve(e)})}handle(e,t){if(this._task){const e=new Error("User launched a task while another one is still running. Forgot to use 'await' or '.then()'?");e.stack+="\nRunning task launched at: "+this._task.stack,this.closeWithError(e)}return new Promise((r,i)=>{const n=(new Error).stack||"Unknown call stack",s={resolve:(...e)=>{this._stopTrackingTask(),r(...e)},reject:e=>{this._stopTrackingTask(),i(e)}};if(this._task={stack:n,resolver:s,responseHandler:t},this._closingError){const e=new Error("Client is closed");return e.stack+="\nClosing reason: "+this._closingError.stack,e.code=void 0!==this._closingError.code?this._closingError.code:"0",void this._passToHandler(e)}this.socket.setTimeout(this.timeout),e&&this.send(e)})}log(e){this.verbose&&console.log(e)}get hasTLS(){return"encrypted"in this._socket}_stopTrackingTask(){this.socket.setTimeout(0),this._task=void 0}_onControlSocketData(e){const t=e.trim();this.log("< "+t);const r=this._partialResponse+t,i=n.parseControlResponse(r);this._partialResponse=i.rest;for(const e of i.messages){const t=parseInt(e.substr(0,3),10),r={code:t,message:e},i=t>=400?new s(r):void 0;this._passToHandler(i||r)}}_passToHandler(e){this._task&&this._task.responseHandler(e,this._task.resolver)}_setupDefaultErrorHandlers(e,t){e.once("error",e=>{e.message+=` (${t})`,this.closeWithError(e)}),e.once("close",e=>{e&&this.closeWithError(new Error(`Socket closed due to transmission error (${t})`))}),e.once("timeout",()=>this.closeWithError(new Error(`Timeout (${t})`)))}_closeSocket(e){e&&(e.destroy(),this._removeSocketListeners(e))}_removeSocketListeners(e){e.removeAllListeners(),e.removeAllListeners("timeout"),e.removeAllListeners("data"),e.removeAllListeners("end"),e.removeAllListeners("error"),e.removeAllListeners("close"),e.removeAllListeners("connect")}_newSocket(){return new i.Socket}}},function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.parseList=void 0;const o=[s(r(38)),s(r(39)),s(r(24))];function a(e){return""!==e.trim()}const c=/\r?\n/;t.parseList=function(e){const t=e.split(c).filter(a);if(0===t.length)return[];const r=t[t.length-1],i=(n=r,o.find(e=>!0===e.testLine(n)));var n;if(!i)throw new Error("This library only supports MLSD, Unix- or DOS-style directory listing. Your FTP server seems to be using another format. You can see the transmitted listing when setting `client.ftp.verbose = true`. You can then provide a custom parser to `client.parseList`, see the documentation for details.");const s=t.map(i.parseLine).filter(e=>void 0!==e);return i.transformList(s)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseMLSxDate=t.transformList=t.parseLine=t.testLine=void 0;const i=r(9);function n(e,t){t.size=parseInt(e,10)}const s={size:n,sizd:n,unique:(e,t)=>{t.uniqueID=e},modify:(e,t)=>{t.modifiedAt=a(e),t.rawModifiedAt=t.modifiedAt.toISOString()},type:(e,t)=>{if(e.startsWith("OS.unix=slink"))return t.type=i.FileType.SymbolicLink,t.link=e.substr(e.indexOf(":")+1),1;switch(e){case"file":t.type=i.FileType.File;break;case"dir":t.type=i.FileType.Directory;break;case"OS.unix=symlink":t.type=i.FileType.SymbolicLink;break;case"cdir":case"pdir":return 2;default:t.type=i.FileType.Unknown}return 1},"unix.mode":(e,t)=>{const r=e.substr(-3);t.permissions={user:parseInt(r[0],10),group:parseInt(r[1],10),world:parseInt(r[2],10)}},"unix.ownername":(e,t)=>{t.user=e},"unix.owner":(e,t)=>{void 0===t.user&&(t.user=e)},get"unix.uid"(){return this["unix.owner"]},"unix.groupname":(e,t)=>{t.group=e},"unix.group":(e,t)=>{void 0===t.group&&(t.group=e)},get"unix.gid"(){return this["unix.group"]}};function o(e,t){const r=e.indexOf(t);return[e.substr(0,r),e.substr(r+t.length)]}function a(e){return new Date(Date.UTC(+e.slice(0,4),+e.slice(4,6)-1,+e.slice(6,8),+e.slice(8,10),+e.slice(10,12),+e.slice(12,14),+e.slice(15,18)))}t.testLine=function(e){return/^\S+=\S+;/.test(e)||e.startsWith(" ")},t.parseLine=function(e){const[t,r]=o(e," ");if(""===r||"."===r||".."===r)return;const n=new i.FileInfo(r),a=t.split(";");for(const e of a){const[t,r]=o(e,"=");if(!r)continue;const i=s[t.toLowerCase()];if(!i)continue;if(2===i(r,n))return}return n},t.transformList=function(e){const t=new Map;for(const r of e)r.isSymbolicLink||void 0===r.uniqueID||t.set(r.uniqueID,r);const r=[];for(const i of e){if(i.isSymbolicLink&&void 0!==i.uniqueID&&void 0===i.link){const e=t.get(i.uniqueID);void 0!==e&&(i.link=e.name)}!i.name.includes("/")&&r.push(i)}return r},t.parseMLSxDate=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ipIsPrivateV4Address=t.upgradeSocket=t.describeAddress=t.describeTLS=void 0;const i=r(11);t.describeTLS=function(e){if(e instanceof i.TLSSocket){const t=e.getProtocol();return t||"Server socket or disconnected client socket"}return"No encryption"},t.describeAddress=function(e){return"IPv6"===e.remoteFamily?`[${e.remoteAddress}]:${e.remotePort}`:`${e.remoteAddress}:${e.remotePort}`},t.upgradeSocket=function(e,t){return new Promise((r,n)=>{const s=Object.assign({},t,{socket:e}),o=i.connect(s,()=>{!1!==s.rejectUnauthorized&&!o.authorized?n(o.authorizationError):(o.removeAllListeners("error"),r(o))}).once("error",e=>{n(e)})})},t.ipIsPrivateV4Address=function(e=""){e.startsWith("::ffff:")&&(e=e.substr(7));const t=e.split(".").map(e=>parseInt(e,10));return 10===t[0]||172===t[0]&&t[1]>=16&&t[1]<=31||192===t[0]&&168===t[1]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.downloadTo=t.uploadFrom=t.connectForPassiveTransfer=t.parsePasvResponse=t.enterPassiveModeIPv4=t.parseEpsvResponse=t.enterPassiveModeIPv6=void 0;const i=r(25),n=r(11),s=r(12);function o(e){const t=e.match(/[|!]{3}(.+)[|!]/);if(null===t||void 0===t[1])throw new Error("Can't parse response to 'EPSV': "+e);const r=parseInt(t[1],10);if(Number.isNaN(r))throw new Error("Can't parse response to 'EPSV', port is not a number: "+e);return r}function a(e){const t=e.match(/([-\d]+,[-\d]+,[-\d]+,[-\d]+),([-\d]+),([-\d]+)/);if(null===t||4!==t.length)throw new Error("Can't parse response to 'PASV': "+e);return{host:t[1].replace(/,/g,"."),port:256*(255&parseInt(t[2],10))+(255&parseInt(t[3],10))}}function c(e,t,r){return new Promise((i,s)=>{const o=function(e){e.message="Can't open data connection in passive mode: "+e.message,s(e)};let a=r._newSocket();a.on("error",o),a.connect({port:t,host:e,family:r.ipFamily},()=>{r.socket instanceof n.TLSSocket&&(a=n.connect(Object.assign({},r.tlsOptions,{socket:a,session:r.socket.getSession()}))),a.removeListener("error",o),r.dataSocket=a,i()})})}t.enterPassiveModeIPv6=async function(e){const t=await e.request("EPSV"),r=o(t.message);if(!r)throw new Error("Can't parse EPSV response: "+t.message);const i=e.socket.remoteAddress;if(void 0===i)throw new Error("Control socket is disconnected, can't get remote address.");return await c(i,r,e),t},t.parseEpsvResponse=o,t.enterPassiveModeIPv4=async function(e){const t=await e.request("PASV"),r=a(t.message);if(!r)throw new Error("Can't parse PASV response: "+t.message);const n=e.socket.remoteAddress;return i.ipIsPrivateV4Address(r.host)&&n&&!i.ipIsPrivateV4Address(n)&&(r.host=n),await c(r.host,r.port,e),t},t.parsePasvResponse=a,t.connectForPassiveTransfer=c;class h{constructor(e,t){this.ftp=e,this.progress=t,this.response=void 0,this.dataTransferDone=!1}onDataStart(e,t){if(void 0===this.ftp.dataSocket)throw new Error("Data transfer should start but there is no data connection.");this.ftp.socket.setTimeout(0),this.ftp.dataSocket.setTimeout(this.ftp.timeout),this.progress.start(this.ftp.dataSocket,e,t)}onDataDone(e){this.progress.updateAndStop(),this.ftp.socket.setTimeout(this.ftp.timeout),this.ftp.dataSocket&&this.ftp.dataSocket.setTimeout(0),this.dataTransferDone=!0,this.tryResolve(e)}onControlDone(e,t){this.response=t,this.tryResolve(e)}onError(e,t){this.progress.updateAndStop(),this.ftp.socket.setTimeout(this.ftp.timeout),this.ftp.dataSocket=void 0,e.reject(t)}onUnexpectedRequest(e){const t=new Error("Unexpected FTP response is requesting an answer: "+e.message);this.ftp.closeWithError(t)}tryResolve(e){this.dataTransferDone&&void 0!==this.response&&(this.ftp.dataSocket=void 0,e.resolve(this.response))}}function f(e,t,r,i){!0===e?i():t.once(r,()=>i())}t.uploadFrom=function(e,t){const r=new h(t.ftp,t.tracker),n=`${t.command} ${t.remotePath}`;return t.ftp.handle(n,(n,o)=>{if(n instanceof Error)r.onError(o,n);else if(150===n.code||125===n.code){const n=t.ftp.dataSocket;if(!n)return void r.onError(o,new Error("Upload should begin but no data connection is available."));f(!("getCipher"in n)||void 0!==n.getCipher(),n,"secureConnect",()=>{t.ftp.log(`Uploading to ${i.describeAddress(n)} (${i.describeTLS(n)})`),r.onDataStart(t.remotePath,t.type),e.pipe(n).once("finish",()=>{n.destroy(),r.onDataDone(o)})})}else s.positiveCompletion(n.code)?r.onControlDone(o,n):s.positiveIntermediate(n.code)&&r.onUnexpectedRequest(n)})},t.downloadTo=function(e,t){if(!t.ftp.dataSocket)throw new Error("Download will be initiated but no data connection is available.");t.ftp.dataSocket.pipe(e);const r=new h(t.ftp,t.tracker);return t.ftp.handle(t.command,(n,o)=>{if(n instanceof Error)r.onError(o,n);else if(150===n.code||125===n.code){const n=t.ftp.dataSocket;if(!n)return void r.onError(o,new Error("Download should begin but no data connection is available."));t.ftp.log(`Downloading from ${i.describeAddress(n)} (${i.describeTLS(n)})`),r.onDataStart(t.remotePath,t.type),f(function(e){if(e.writableFinished)return!0;const t=e._writableState;return!(!t||t.errored)&&(t.finished||t.ended&&0===t.length)}(e),e,"finish",()=>r.onDataDone(o))}else 350===n.code?t.ftp.send("RETR "+t.remotePath):s.positiveCompletion(n.code)?r.onControlDone(o,n):s.positiveIntermediate(n.code)&&r.onUnexpectedRequest(n)})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FtpUtils=void 0;const i=r(10),n=/[0-9][0-9]-[0-9][0-9]-[0-9][0-9]\s[0-9][0-9]\:[0-9][0-9][PA]M/gi;t.FtpUtils=class{static formatFile(e){const{permissions:t,name:r,size:i,user:n,group:s,type:o}=e;return{name:r,type:this.getFileType(o),size:i,owner:n,group:s,permissions:{owner:null==t?void 0:t.user,group:null==t?void 0:t.group}}}static getFileType(e){switch(e){case i.FileType.Directory:return"folder";case i.FileType.File:return"file";case i.FileType.SymbolicLink:return"symbolic-link"}return"unknown"}static getValidDate(e){const t=e.trim();if(!t.match(n))return new Date(t);const[r,i,s,o,a]=t.match(/[0-9][0-9]/g);let c=parseInt(o);return"P"===t[t.length-2]&&(c+=12),new Date(parseInt("20"+s),parseInt(r)-1,parseInt(i),c,parseInt(a))}static getDateFromUnixTime(e){return new Date(1e3*e)}}},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SftpStrategy=void 0;const n=r(0),s=r(29),o=r(10),a=r(13),c=r(27);class h extends a.Strategy{constructor(){super(...arguments),this.connected=!1,this.connect=()=>new Promise((e,t)=>{var r,n;if(this.connected)return e();this.client=new s.Client;const o=()=>{this.client.removeListener("error",a),this.client.removeListener("ready",c),this.client.removeListener("keyboard-interactive",this.onKeyboardInteractive)},a=e=>{o(),t(e)},c=()=>i(this,void 0,void 0,(function*(){o();try{this.wrapper=yield this.getWrapper(),this.connected=!0,this.emit("connect"),e()}catch(e){t(e)}finally{o()}}));this.client.once("error",a),this.client.once("ready",c),this.client.once("end",this.onDisconnect),(null===(r=this.options)||void 0===r?void 0:r.tryKeyboard)&&this.client.once("keyboard-interactive",this.onKeyboardInteractive),this.client.connect(Object.assign(Object.assign({},this.config),{username:this.config.user,readyTimeout:null===(n=this.options)||void 0===n?void 0:n.timeout}))}),this.onKeyboardInteractive=(e,t,r,i,n)=>{n([this.config.password])},this.onDisconnect=()=>{this.connected=!1,this.client=null,this.wrapper=null,this.emit("disconnect")},this.disconnect=()=>this.connected?new Promise(e=>{this.socket.once("close",()=>{e()}),this.client.end()}):null,this.download=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=null===(i=this.wrapper)||void 0===i?void 0:i.createReadStream(t.remotePath,{start:t.startAt,autoClose:!0});return this.handleTransfer(n,e,t,r)})),this.upload=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=null===(i=this.wrapper)||void 0===i?void 0:i.createWriteStream(t.remotePath);return this.handleTransfer(e,n,t,r)})),this.list=(e="./")=>this._list(e).then(e=>null==e?void 0:e.map(e=>this.formatFile(o.parseList(e.longname)[0],e))),this.formatFile=(e,t)=>Object.assign(Object.assign({},c.FtpUtils.formatFile(e)),{lastModified:c.FtpUtils.getDateFromUnixTime(t.attrs.mtime)}),this.size=e=>this._stat(e).then(e=>null==e?void 0:e.size),this.exists=e=>i(this,void 0,void 0,(function*(){try{yield this._stat(e)}catch(e){return!1}return!0})),this.move=(e,t)=>{var r;return this.handle(null===(r=this.wrapper)||void 0===r?void 0:r.rename,e,t)},this.removeFile=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.unlink,e)},this.removeEmptyFolder=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.rmdir,e)},this.removeFolder=e=>i(this,void 0,void 0,(function*(){const t=yield this._list(e);if(t.length)for(const r of t){const t=e+"/"+r.filename;r.attrs.isDirectory()?yield this.removeFolder(t):yield this.removeFile(t)}yield this.removeEmptyFolder(e)})),this.createFolder=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.mkdir,e)},this.createEmptyFile=e=>i(this,void 0,void 0,(function*(){const t=yield this._open(e,"w");t&&(yield this._close(t))})),this.pwd=()=>{var e;return this.handle(null===(e=this.wrapper)||void 0===e?void 0:e.realpath,"./")},this.send=e=>i(this,void 0,void 0,(function*(){let t="";return yield this.handleNetwork((r,i)=>{this.client.exec(e,(e,n)=>{if(e)return i(e);n.on("data",e=>{t+=e}),n.once("error",i),n.once("close",r)})},()=>{void 0}),t})),this.handle=(e,...t)=>this.handleNetwork((r,i)=>{if(!e)return r(null);e.bind(this.wrapper)(...t,(e,...t)=>{if(e)return i(e);r(...t)})}),this.handleTransfer=(e,t,r,i)=>{if(!e||!t)return null;const n=this.prepareTransfer(r,i);return this.handleNetwork((r,i)=>{let s=0;e.on("data",e=>{s+=e.byteLength,n(s)}),e.once("error",i),e.once("close",r),e.pipe(t)},()=>{e.unpipe(t),e.removeAllListeners(),this.finishTransfer()})}}get socket(){return this.client._sock}getWrapper(){return n.promisify(this.client.sftp).bind(this.client)()}_list(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.readdir,e)}_stat(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.stat,e)}_open(e,t){var r;return this.handle(null===(r=this.wrapper)||void 0===r?void 0:r.open,e,t)}_close(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.close,e)}}t.SftpStrategy=h},function(e,t,r){var i=r(6),n=r(8).Socket,s=r(46).lookup,o=r(1).EventEmitter,a=r(0).inherits,c=i.getHashes(),h=r(14),f=h.SSH2Stream,u=h.SFTPStream,l=h.constants,p=l.BUGS,d=l.ALGORITHMS,g=l.EDDSA_SUPPORTED,m=h.utils.parseKey,E=r(60),v=r(33),y=r(63),_=r(65),w=r(7).readUInt32BE,b=Math.pow(2,32)-1,S=/^OpenSSH_(?:(?![0-4])\d)|(?:\d{2,})/,k=function(e){};function T(){if(!(this instanceof T))return new T;o.call(this),this.config={host:void 0,port:void 0,localAddress:void 0,localPort:void 0,forceIPv4:void 0,forceIPv6:void 0,keepaliveCountMax:void 0,keepaliveInterval:void 0,readyTimeout:void 0,username:void 0,password:void 0,privateKey:void 0,tryKeyboard:void 0,agent:void 0,allowAgentFwd:void 0,authHandler:void 0,hostHashAlgo:void 0,hostHashCb:void 0,strictVendor:void 0,debug:void 0},this._readyTimeout=void 0,this._channels=void 0,this._callbacks=void 0,this._forwarding=void 0,this._forwardingUnix=void 0,this._acceptX11=void 0,this._agentFwdEnabled=void 0,this._curChan=void 0,this._remoteVer=void 0,this._sshstream=void 0,this._sock=void 0,this._resetKA=void 0}function A(e,t,r,i){var n=U(e),s=v.MAX_WINDOW,o=v.PACKET_SIZE,a=!0;if(!1===n)return i(new Error("No free channels available"));"function"==typeof r&&(i=r,r={}),e._channels[n]=i;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+n,h).once("CHANNEL_OPEN_FAILURE:"+n,f).once("CHANNEL_CLOSE:"+n,f),"session"===t?a=c.session(n,s,o):"direct-tcpip"===t?a=c.directTcpip(n,s,o,r):"direct-streamlocal@openssh.com"===t&&(a=c.openssh_directStreamLocal(n,s,o,r)),a;function h(r){c.removeListener("CHANNEL_OPEN_FAILURE:"+n,f),c.removeListener("CHANNEL_CLOSE:"+n,f);var a={type:t,incoming:{id:n,window:s,packetSize:o,state:"open"},outgoing:{id:r.sender,window:r.window,packetSize:r.packetSize,state:"open"}};i(void 0,new v(a,e))}function f(t){var r;c.removeListener("CHANNEL_OPEN_CONFIRMATION:"+n,h),c.removeListener("CHANNEL_OPEN_FAILURE:"+n,f),c.removeListener("CHANNEL_CLOSE:"+n,f),delete e._channels[n],t instanceof Error?r=t:"object"==typeof t&&null!==t?((r=new Error("(SSH) Channel open failure: "+t.description)).reason=t.reason,r.lang=t.lang):(r=new Error("(SSH) Channel open failure: server closed channel unexpectedly")).reason=r.lang="",i(r)}}function U(e){if(e._curChan<b)return++e._curChan;for(var t=0,r=e._channels;t<b;++t)if(!r[t])return t;return!1}function B(e,t,r){var i={single:!1,protocol:"MIT-MAGIC-COOKIE-1",cookie:void 0,screen:0};"function"==typeof t?r=t:"object"==typeof t&&null!==t&&("boolean"==typeof t.single&&(i.single=t.single),"number"==typeof t.screen&&(i.screen=t.screen),"string"==typeof t.protocol&&(i.protocol=t.protocol),"string"==typeof t.cookie?i.cookie=t.cookie:Buffer.isBuffer(t.cookie)&&(i.cookie=t.cookie.toString("hex"))),void 0===i.cookie&&(i.cookie=O());var n="function"==typeof r;return"open"!==e.outgoing.state?(n&&r(new Error("Channel is not open")),!0):(n&&e._callbacks.push((function(t){if(t)return r(!0!==t?t:new Error("Unable to request X11"));e._hasX11=!0,++e._client._acceptX11,e.once("close",(function(){e._client._acceptX11&&--e._client._acceptX11})),r()})),e._client._sshstream.x11Forward(e.outgoing.id,i,n))}function N(e,t,r){var i=24,n=80,s=640,o=480,a="vt100",c=null;"function"==typeof t?r=t:"object"==typeof t&&null!==t&&("number"==typeof t.rows&&(i=t.rows),"number"==typeof t.cols&&(n=t.cols),"number"==typeof t.width&&(s=t.width),"number"==typeof t.height&&(o=t.height),"string"==typeof t.term&&(a=t.term),"object"==typeof t.modes&&(c=t.modes));var h="function"==typeof r;return"open"!==e.outgoing.state?(h&&r(new Error("Channel is not open")),!0):(h&&e._callbacks.push((function(e){if(e)return r(!0!==e?e:new Error("Unable to request a pseudo-terminal"));r()})),e._client._sshstream.pty(e.outgoing.id,i,n,o,s,a,c,h))}function R(e,t){var r="function"==typeof t;return"open"!==e.outgoing.state?(r&&t(new Error("Channel is not open")),!0):e._client._agentFwdEnabled?(r&&t(!1),!0):(e._client._agentFwdEnabled=!0,e._callbacks.push((function(i){if(i)return e._client._agentFwdEnabled=!1,void(r&&t(!0!==i?i:new Error("Unable to request agent forwarding")));r&&t()})),e._client._sshstream.openssh_agentForward(e.outgoing.id,!0))}function P(e,t){if("open"!==e.outgoing.state)return!0;for(var r,i,n=!0,s=Object.keys(t||{}),o=0,a=s.length;o<a;++o)i=t[r=s[o]],n=e._client._sshstream.env(e.outgoing.id,r,i,!1);return n}function D(e,t,r){return"open"!==e.outgoing.state?(r(new Error("Channel is not open")),!0):(e._callbacks.push((function(i){if(i)return r(!0!==i?i:new Error("Unable to start subsystem: "+t));e.subtype="subsystem",r(void 0,e)})),e._client._sshstream.subsystem(e.outgoing.id,t,!0))}a(T,o),T.prototype.connect=function(e){var t=this;if(this._sock&&this._sock.writable)return this.once("close",(function(){t.connect(e)})),void this.end();this.config.host=e.hostname||e.host||"localhost",this.config.port=e.port||22,this.config.localAddress="string"==typeof e.localAddress?e.localAddress:void 0,this.config.localPort="string"==typeof e.localPort||"number"==typeof e.localPort?e.localPort:void 0,this.config.forceIPv4=e.forceIPv4||!1,this.config.forceIPv6=e.forceIPv6||!1,this.config.keepaliveCountMax="number"==typeof e.keepaliveCountMax&&e.keepaliveCountMax>=0?e.keepaliveCountMax:3,this.config.keepaliveInterval="number"==typeof e.keepaliveInterval&&e.keepaliveInterval>0?e.keepaliveInterval:0,this.config.readyTimeout="number"==typeof e.readyTimeout&&e.readyTimeout>=0?e.readyTimeout:2e4;var r,o={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var a,h;if(h=e.algorithms.kex,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_KEX,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported key exchange algorithm: "+h[r]);o.kex=h}if(h=e.algorithms.cipher,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_CIPHER,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported cipher algorithm: "+h[r]);o.cipher=h}if(h=e.algorithms.serverHostKey,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_SERVER_HOST_KEY,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported server host key algorithm: "+h[r]);o.serverHostKey=h}if(h=e.algorithms.hmac,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_HMAC,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported HMAC algorithm: "+h[r]);o.hmac=h}if(h=e.algorithms.compress,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_COMPRESS,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported compression algorithm: "+h[r]);o.compress=h}}if(void 0===o.compress&&(e.compress?(o.compress=["zlib@openssh.com","zlib"],"force"!==e.compress&&o.compress.push("none")):!1===e.compress&&(o.compress=["none"])),"string"==typeof e.username)this.config.username=e.username;else{if("string"!=typeof e.user)throw new Error("Invalid username");this.config.username=e.user}this.config.password="string"==typeof e.password?e.password:void 0,this.config.privateKey="string"==typeof e.privateKey||Buffer.isBuffer(e.privateKey)?e.privateKey:void 0,this.config.localHostname="string"==typeof e.localHostname&&e.localHostname.length?e.localHostname:void 0,this.config.localUsername="string"==typeof e.localUsername&&e.localUsername.length?e.localUsername:void 0,this.config.tryKeyboard=!0===e.tryKeyboard,this.config.agent="string"==typeof e.agent&&e.agent.length?e.agent:void 0,this.config.allowAgentFwd=!0===e.agentForward&&void 0!==this.config.agent;var u=this.config.authHandler="function"==typeof e.authHandler?e.authHandler:void 0;this.config.strictVendor="boolean"!=typeof e.strictVendor||e.strictVendor;var p=this.config.debug="function"==typeof e.debug?e.debug:k;if(!0===e.agentForward&&!this.config.allowAgentFwd)throw new Error("You must set a valid agent path to allow agent forwarding");var E,_=this._callbacks=[];if(this._channels={},this._forwarding={},this._forwardingUnix={},this._acceptX11=0,this._agentFwdEnabled=!1,this._curChan=-1,this._remoteVer=void 0,this.config.privateKey){if((E=m(this.config.privateKey,e.passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+E.message);if(Array.isArray(E)&&(E=E[0]),null===E.getPrivatePEM())throw new Error("privateKey value does not contain a (valid) private key")}var b=this._sshstream=new f({algorithms:o,debug:p===k?void 0:p}),S=this._sock=e.sock||new n;this._sock.stderr&&"function"==typeof this._sock.stderr.resume&&this._sock.stderr.resume();var T,A,B=this.config.keepaliveInterval,N=this.config.keepaliveCountMax,R=0;function P(){if(++R>N){if(clearInterval(T),S.readable){var e=new Error("Keepalive timeout");e.level="client-timeout",t.emit("error",e),S.destroy()}}else S.writable?(_.push(D),b.ping()):clearInterval(T)}function D(){B>0&&(R=0,clearInterval(T),S.writable&&(T=setInterval(P,B)))}if(this._resetKA=D,b.on("USERAUTH_BANNER",(function(e){t.emit("banner",e)})),S.on("connect",(function(){p("DEBUG: Client: Connected"),t.emit("connect"),e.sock||b.pipe(S).pipe(b)})).on("timeout",(function(){t.emit("timeout")})).on("error",(function(e){clearTimeout(t._readyTimeout),e.level="client-socket",t.emit("error",e)})).on("end",(function(){b.unpipe(S),clearTimeout(t._readyTimeout),clearInterval(T),t.emit("end")})).on("close",(function(){b.unpipe(S),clearTimeout(t._readyTimeout),clearInterval(T),t.emit("close");var e=_,i=new Error("No response from server");for(_=t._callbacks=[],r=0;r<e.length;++r)e[r](i);var n=t._channels,s=Object.keys(n);for(t._channels={},r=0;r<s.length;++r){var o,a=b.emit("CHANNEL_OPEN_FAILURE:"+s[r],i),c=b.emit("CHANNEL_CLOSE:"+s[r]);a||c||!(o=n[s[r]])||"function"!=typeof o||o(i)}})),b.on("drain",(function(){t.emit("drain")})).once("header",(function(e){t._remoteVer=e.versions.software,e.greeting&&t.emit("greeting",e.greeting)})).on("continue",(function(){t.emit("continue")})).on("error",(function(e){void 0===e.level?e.level="protocol":"handshake"===e.level&&clearTimeout(t._readyTimeout),t.emit("error",e)})).on("end",(function(){S.resume()})),"function"==typeof e.hostVerifier){if(-1===c.indexOf(e.hostHash))throw new Error("Invalid host hash algorithm: "+e.hostHash);var O=e.hostVerifier,I=i.createHash(e.hostHash);b.once("fingerprint",(function(e,t){I.update(e);var r=O(I.digest("hex"),t);void 0!==r&&t(r)}))}var C,L=null,H=null,x=0,F=["none"];if(void 0!==this.config.password&&F.push("password"),void 0!==E&&F.push("publickey"),void 0!==this.config.agent&&F.push("agent"),this.config.tryKeyboard&&F.push("keyboard-interactive"),void 0!==E&&void 0!==this.config.localHostname&&void 0!==this.config.localUsername&&F.push("hostbased"),void 0===u){var M=0;u=function(e,t,r){return M!==F.length&&F[M++]}}var K=!1;function G(e){if(K=!0,!1===e){b.removeListener("USERAUTH_FAILURE",V),b.removeListener("USERAUTH_PK_OK",j);var r=new Error("All configured authentication methods failed");return r.level="client-authentication",t.emit("error",r),void(b.writable&&t.end())}if(-1===F.indexOf(e))throw new Error("Authentication method not allowed: "+e);switch(A=e){case"password":b.authPassword(t.config.username,t.config.password);break;case"publickey":b.authPK(t.config.username,E),b.once("USERAUTH_PK_OK",j);break;case"hostbased":b.authHostbased(t.config.username,E,t.config.localHostname,t.config.localUsername,(function(e,r){var i=E.sign(e);if(i instanceof Error)return i.message="Error while signing data with privateKey: "+i.message,i.level="client-authentication",t.emit("error",i),W();r(i)}));break;case"agent":y(t.config.agent,(function(e,r){return e?(e.level="agent",t.emit("error",e),C=void 0,W()):0===r.length?(p("DEBUG: Agent: No keys stored in agent"),C=void 0,W()):(C=r,x=0,b.authPK(t.config.username,r[0]),void b.once("USERAUTH_PK_OK",j))}));break;case"keyboard-interactive":b.authKeyboard(t.config.username),b.on("USERAUTH_INFO_REQUEST",X);break;case"none":b.authNone(t.config.username)}}function W(){K=!1;var e=u(H,L,G);K||void 0===e||G(e)}function q(){if("agent"===A){if(x>=C.length)return;++x>=C.length?(p("DEBUG: Agent: No more keys left to try"),p("DEBUG: Client: agent auth failed"),C=void 0,W()):(p("DEBUG: Agent: Trying key #"+(x+1)),b.authPK(t.config.username,C[x]),b.once("USERAUTH_PK_OK",j))}}function X(e,r,i,n){if(0===(Array.isArray(n)?n.length:0))return p("DEBUG: Client: Sending automatic USERAUTH_INFO_RESPONSE"),b.authInfoRes();t.emit("keyboard-interactive",e,r,i,n,(function(e){b.authInfoRes(e)}))}function j(){if("agent"===A){var e=C[x],r=w(e,0),i=e.toString("ascii",4,4+r),n=i.slice(4);switch(i){case"ssh-rsa":case"ssh-dss":case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":break;default:if(g&&"ssh-ed25519"===i)break;return p("DEBUG: Agent: Skipping unsupported key type: "+i),q()}b.authPK(t.config.username,e,(function(r,s){y(t.config.agent,e,n,r,(function(e,r){if(e)e.level="agent",t.emit("error",e);else{var n=w(r,0);if(4+n+4<r.length){if(r.toString("ascii",4,4+n)===i)return s(r.slice(4+n+4));(e=new Error("Agent key/signature type mismatch")).level="agent",t.emit("error",e)}}q()}))}))}else"publickey"===A&&b.authPK(t.config.username,E,(function(e,r){var i=E.sign(e);if(i instanceof Error)return i.message="Error while signing data with privateKey: "+i.message,i.level="client-authentication",t.emit("error",i),W();r(i)}))}function V(e,t){if(b.removeListener("USERAUTH_PK_OK",j),b.removeListener("USERAUTH_INFO_REQUEST",X),"agent"===A)return p("DEBUG: Client: Agent key #"+(x+1)+" failed"),q();p("DEBUG: Client: "+A+" auth failed"),L=t,H=e,W()}if(b.once("USERAUTH_SUCCESS",(function(){b.removeListener("USERAUTH_FAILURE",V),b.removeListener("USERAUTH_INFO_REQUEST",X),D(),clearTimeout(t._readyTimeout),t.emit("ready")})).on("USERAUTH_FAILURE",V),b.once("ready",(function(){b.service("ssh-userauth"),b.once("SERVICE_ACCEPT",(function(e){"ssh-userauth"===e&&W()}))})),b.on("CHANNEL_OPEN",(function(e){!function(e,t){var r,i=!1;function n(){var r={type:t.type,incoming:{id:i,window:v.MAX_WINDOW,packetSize:v.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}},n=new v(r,e);return e._sshstream.channelOpenConfirm(t.sender,i,v.MAX_WINDOW,v.PACKET_SIZE),n}function s(){void 0===r&&(r=!1===i?l.CHANNEL_OPEN_FAILURE.RESOURCE_SHORTAGE:l.CHANNEL_OPEN_FAILURE.CONNECT_FAILED),e._sshstream.channelOpenFail(t.sender,r,"","")}if("forwarded-tcpip"===t.type||"x11"===t.type||"auth-agent@openssh.com"===t.type||"forwarded-streamlocal@openssh.com"===t.type){var o="forwarded-tcpip"===t.type&&void 0===e._forwarding[t.data.destIP+":"+t.data.destPort]||"forwarded-streamlocal@openssh.com"===t.type&&void 0===e._forwardingUnix[t.data.socketPath]||"x11"===t.type&&0===e._acceptX11||"auth-agent@openssh.com"===t.type&&!e._agentFwdEnabled;o?(r=l.CHANNEL_OPEN_FAILURE.ADMINISTRATIVELY_PROHIBITED,e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unexpected channel open for: "+t.type)):!1===(i=U(e))?(e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: no channels available"),o=!0):e._channels[i]=!0,o&&s(),!1!==i&&("forwarded-tcpip"===t.type?(0===t.data.destPort&&(t.data.destPort=e._forwarding[t.data.destIP+":"+t.data.destPort]),e.emit("tcp connection",t.data,n,s)):"x11"===t.type?e.emit("x11",t.data,n,s):"forwarded-streamlocal@openssh.com"===t.type?e.emit("unix connection",t.data,n,s):y(e.config.agent,n,s))}else e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unsupported type: "+t.type),r=l.CHANNEL_OPEN_FAILURE.UNKNOWN_CHANNEL_TYPE,s()}(t,e)})),b.on("REQUEST_SUCCESS",(function(e){_.length&&_.shift()(!1,e)})).on("REQUEST_FAILURE",(function(){_.length&&_.shift()(!0)})),b.on("GLOBAL_REQUEST",(function(e,t,r){t&&b.requestFailure()})),e.sock)Z(),b.pipe(S).pipe(b);else{var Y=this.config.host,Q=this.config.forceIPv4,z=this.config.forceIPv6;function $(){Z(),t._sock.connect({host:Y,port:t.config.port,localAddress:t.config.localAddress,localPort:t.config.localPort}),t._sock.setNoDelay(!0),t._sock.setMaxListeners(0),t._sock.setTimeout("number"==typeof e.timeout?e.timeout:0)}p("DEBUG: Client: Trying "+Y+" on port "+this.config.port+" ..."),!Q&&!z||Q&&z?$():s(Y,Q?4:6,(function(e,r,i){if(e){var n=new Error("Error while looking up "+(Q?"IPv4":"IPv6")+" address for host "+Y+": "+e);return clearTimeout(t._readyTimeout),n.level="client-dns",t.emit("error",n),void t.emit("close")}Y=r,$()}))}function Z(){t.config.readyTimeout>0&&(t._readyTimeout=setTimeout((function(){var e=new Error("Timed out while waiting for handshake");e.level="client-timeout",t.emit("error",e),S.destroy()}),t.config.readyTimeout))}},T.prototype.end=function(){return!!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable)&&this._sshstream.disconnect()},T.prototype.destroy=function(){this._sock&&this._sock.destroy()},T.prototype.exec=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");"function"==typeof t&&(r=t,t={});var i=this;return A(this,"session",{allowHalfOpen:!1!==t.allowHalfOpen},(function(n,s){if(n)return r(n);var o=[];function a(e){if(e)return s.close(),r(e);o.length&&o.shift()()}(!0===i.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==i.config.agent)&&o.push((function(){R(s,a)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&P(s,t.env),("object"==typeof t.pty&&null!==t.pty||!0===t.pty)&&o.push((function(){N(s,t.pty,a)})),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){B(s,t.x11,a)}))),o.push((function(){!function(e,t,r,i){if("open"!==e.outgoing.state)return i(new Error("Channel is not open")),!0;e._callbacks.push((function(t){if(t)return i(!0!==t?t:new Error("Unable to exec"));e.subtype="exec",e.allowHalfOpen=!1!==r.allowHalfOpen,i(void 0,e)})),e._client._sshstream.exec(e.outgoing.id,t,!0)}(s,e,t,r)})),o.shift()()}))},T.prototype.shell=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this;return"function"==typeof e?(r=e,e=t=void 0):"function"==typeof t&&(r=t,t=void 0),!e||void 0===e.x11&&void 0===e.env||(t=e,e=void 0),A(this,"session",(function(n,s){if(n)return r(n);var o=[];function a(e){if(e)return s.close(),r(e);o.length&&o.shift()()}(!0===i.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==i.config.agent)&&o.push((function(){R(s,a)})),!1!==e&&o.push((function(){N(s,e,a)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&P(s,t.env),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){B(s,t.x11,a)}))),o.push((function(){!function(e,t){if("open"!==e.outgoing.state)return t(new Error("Channel is not open")),!0;e._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to open shell"));e.subtype="shell",t(void 0,e)})),e._client._sshstream.shell(e.outgoing.id,!0)}(s,r)})),o.shift()()}))},T.prototype.subsys=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return A(this,"session",(function(r,i){if(r)return t(r);D(i,e,(function(e,r){if(e)return t(e);t(void 0,r)}))}))},T.prototype.sftp=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t=this;return A(this,"session",(function(r,i){if(r)return e(r);D(i,"sftp",(function(r,i){if(r)return e(r);var n=t._sshstream._state.incoming.identRaw,s={debug:t.config.debug},o=new u(s,n);function a(t){o.removeListener("ready",c),i.removeListener("exit",h),e(t)}function c(){o.removeListener("error",a),i.removeListener("exit",h),e(void 0,new _(o))}function h(t,r){var i;o.removeListener("ready",c),o.removeListener("error",a),i="number"==typeof t?"Received exit code "+t+" while establishing SFTP session":"Received signal "+r+" while establishing SFTP session";var n=new Error(i);n.code=t,n.signal=r,e(n)}o.once("error",a).once("ready",c).once("close",(function(){i.end()})),i.once("exit",h),o.pipe(i).pipe(o)}))}))},T.prototype.forwardIn=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this,n="function"==typeof r;return n&&this._callbacks.push((function(n,s){if(n)return r(!0!==n?n:new Error("Unable to bind to "+e+":"+t));var o=t;0===t&&s&&s.length>=4&&(o=w(s,0),i._sshstream.remoteBugs&p.DYN_RPORT_BUG||(t=o)),i._forwarding[e+":"+t]=o,r(void 0,o)})),this._sshstream.tcpipForward(e,t,n)},T.prototype.unforwardIn=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this,n="function"==typeof r;return n&&this._callbacks.push((function(n){if(n)return r(!0!==n?n:new Error("Unable to unbind from "+e+":"+t));delete i._forwarding[e+":"+t],r()})),this._sshstream.cancelTcpipForward(e,t,n)},T.prototype.forwardOut=function(e,t,r,i,n){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return A(this,"direct-tcpip",{srcIP:e,srcPort:t,dstIP:r,dstPort:i},n)},T.prototype.openssh_noMoreSessions=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t="function"==typeof e;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(t&&this._callbacks.push((function(t){if(t)return e(!0!==t?t:new Error("Unable to disable future sessions"));e()})),this._sshstream.openssh_noMoreSessions(t)):(t&&process.nextTick((function(){e(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_forwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var r="function"==typeof t,i=this;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(r&&this._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to bind to "+e));i._forwardingUnix[e]=!0,t()})),this._sshstream.openssh_streamLocalForward(e,r)):(r&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_unforwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var r="function"==typeof t,i=this;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(r&&this._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to unbind on "+e));delete i._forwardingUnix[e],t()})),this._sshstream.openssh_cancelStreamLocalForward(e,r)):(r&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_forwardOutStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?A(this,"direct-streamlocal@openssh.com",{socketPath:e},t):(process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)};var O=function(){if("function"==typeof i.randomFillSync){var e=Buffer.alloc(16);return function(){return i.randomFillSync(e,0,16),e.toString("hex")}}return function(){return i.randomBytes(16).toString("hex")}}();T.Client=T,T.Server=r(66),T.utils=h.utils,T.SFTP_STATUS_CODE=u.STATUS_CODE,T.SFTP_OPEN_MODE=u.OPEN_MODE,T.HTTPAgent=E.SSHTTPAgent,T.HTTPSAgent=E.SSHTTPSAgent,e.exports=T},function(e,t){e.exports=__nccwpck_require__(9491)},function(e,t,r){"use strict";var i,n=r(50),s=n.Buffer,o={};for(i in n)n.hasOwnProperty(i)&&"SlowBuffer"!==i&&"Buffer"!==i&&(o[i]=n[i]);var a=o.Buffer={};for(i in s)s.hasOwnProperty(i)&&"allocUnsafe"!==i&&"allocUnsafeSlow"!==i&&(a[i]=s[i]);if(o.Buffer.prototype=s.prototype,a.from&&a.from!==Uint8Array.from||(a.from=function(e,t,r){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return s(e,t,r)}),a.alloc||(a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var i=s(e);return t&&0!==t.length?"string"==typeof r?i.fill(t,r):i.fill(t):i.fill(0),i}),!o.kStringMaxLength)try{o.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}o.constants||(o.constants={MAX_LENGTH:o.kMaxLength},o.kStringMaxLength&&(o.constants.MAX_STRING_LENGTH=o.kStringMaxLength)),e.exports=o},function(e,t,r){var i,n=r(6),s=n.sign,o=n.verify,a=n.createSign,c=n.createVerify,h=n.createDecipheriv,f=n.createHash,u=n.createHmac,l=n.getCiphers(),p=r(15).Ber,d=r(52).pbkdf,g=r(4),m=g.readUInt32BE,E=g.writeUInt32BE,v=r(18),y=v.ALGORITHMS.SUPPORTED_CIPHER,_=v.CIPHER_INFO,w=v.SSH_TO_OPENSSL,b=v.EDDSA_SUPPORTED,S=Symbol("Hash Algorithm"),k=Symbol("Private key PEM"),T=Symbol("Public key PEM"),A=Symbol("Public key SSH"),U=Symbol("Decrypted Key"),B=Object.create(null);!function(){for(var e=Object.keys(_),t=0;t<e.length;++t){var r=w[e[t]];r&&!B[r]&&(B[r]=_[e[t]])}}();var N="function"==typeof String.prototype.trimStart?function(e){return e.trimStart()}:function(e){for(var t=0,r=0;r<e.length;++r){switch(e.charCodeAt(r)){case 32:case 9:case 13:case 10:case 12:++t;continue}break}return 0===t?e:e.slice(t)};function R(e,t){return"-----BEGIN "+e+" KEY-----\n"+(t=t.toString("base64")).replace(/.{64}/g,"$&\n")+(t.length%64?"\n":"")+"-----END "+e+" KEY-----"}function P(e,t){var r=Buffer.allocUnsafe(e.length+t.length);return e.copy(r,0),t.copy(r,e.length),r}function D(e,t){for(var r=e.length,i=e._pos||0,n=0;n<t;++n){var s=r-i;if(i>=r||s<4)return!1;var o=m(e,i);if(s<4+o)return!1;i+=4+o}return e._pos=i,!0}function O(e,t){var r=new p.Writer;return r.startSequence(),r.startSequence(),r.writeOID("1.2.840.113549.1.1.1"),r.writeNull(),r.endSequence(),r.startSequence(p.BitString),r.writeByte(0),r.startSequence(),r.writeBuffer(e,p.Integer),r.writeBuffer(t,p.Integer),r.endSequence(),r.endSequence(),r.endSequence(),R("PUBLIC",r.buffer)}function I(e,t){var r=Buffer.allocUnsafe(15+e.length+4+t.length);E(r,7,0),r.write("ssh-rsa",4,7,"ascii");var i=11;return E(r,t.length,i),t.copy(r,i+=4),E(r,e.length,i+=t.length),e.copy(r,i+4),r}var C=function(){function e(e,t,r,i,n,s,o,a){var c=new p.Writer;return c.startSequence(),c.writeInt(0,p.Integer),c.writeBuffer(e,p.Integer),c.writeBuffer(t,p.Integer),c.writeBuffer(r,p.Integer),c.writeBuffer(i,p.Integer),c.writeBuffer(n,p.Integer),c.writeBuffer(s,p.Integer),c.writeBuffer(o,p.Integer),c.writeBuffer(a,p.Integer),c.endSequence(),c.buffer}try{var t=["return function genOpenSSLRSAPriv(n, e, d, iqmp, p, q) {","  var bn_d = bigIntFromBuffer(d);","  var dmp1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(p) - 1n));","  var dmq1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(q) - 1n));","  return makePEM('RSA PRIVATE', genRSAASN1Buf(n, e, d, p, q, dmp1, dmq1, iqmp));","};"].join("\n");return new Function("bigIntFromBuffer, bigIntToBuffer, makePEM, genRSAASN1Buf",t)((function(e){return BigInt("0x"+e.toString("hex"))}),(function(e){var t=e.toString(16);if(0!=(1&t.length))t="0"+t;else{var r=t.charCodeAt(0);(56===r||r>=97&&r<=102)&&(t="00"+t)}return Buffer.from(t,"hex")}),R,e)}catch(t){return i=r(54),function(t,r,n,s,o,a){var c=new i(o,256),h=new i(a,256),f=new i(n,256),u=f.mod(c.subtract(i.ONE)),l=f.mod(h.subtract(i.ONE));return R("RSA PRIVATE",e(t,r,n,o,a,Buffer.from(u.toByteArray()),Buffer.from(l.toByteArray()),s))}}var i}();function L(e,t,r,i){var n=new p.Writer;return n.startSequence(),n.startSequence(),n.writeOID("1.2.840.10040.4.1"),n.startSequence(),n.writeBuffer(e,p.Integer),n.writeBuffer(t,p.Integer),n.writeBuffer(r,p.Integer),n.endSequence(),n.endSequence(),n.startSequence(p.BitString),n.writeByte(0),n.writeBuffer(i,p.Integer),n.endSequence(),n.endSequence(),R("PUBLIC",n.buffer)}function H(e,t,r,i){var n=Buffer.allocUnsafe(15+e.length+4+t.length+4+r.length+4+i.length);E(n,7,0),n.write("ssh-dss",4,7,"ascii");var s=11;return E(n,e.length,s),e.copy(n,s+=4),E(n,t.length,s+=e.length),t.copy(n,s+=4),E(n,r.length,s+=t.length),r.copy(n,s+=4),E(n,i.length,s+=r.length),i.copy(n,s+4),n}function x(e,t,r,i,n){var s=new p.Writer;return s.startSequence(),s.writeInt(0,p.Integer),s.writeBuffer(e,p.Integer),s.writeBuffer(t,p.Integer),s.writeBuffer(r,p.Integer),s.writeBuffer(i,p.Integer),s.writeBuffer(n,p.Integer),s.endSequence(),R("DSA PRIVATE",s.buffer)}function F(e){var t=new p.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.112"),t.endSequence(),t.startSequence(p.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),R("PUBLIC",t.buffer)}function M(e){var t=Buffer.allocUnsafe(19+e.length);return E(t,11,0),t.write("ssh-ed25519",4,11,"ascii"),E(t,e.length,15),e.copy(t,19),t}function K(e,t){var r=new p.Writer;return r.startSequence(),r.startSequence(),r.writeOID("1.2.840.10045.2.1"),r.writeOID(e),r.endSequence(),r.startSequence(p.BitString),r.writeByte(0),r._ensure(t.length),t.copy(r._buf,r._offset,0,t.length),r._offset+=t.length,r.endSequence(),r.endSequence(),R("PUBLIC",r.buffer)}function G(e,t){var r;switch(e){case"1.2.840.10045.3.1.7":r="nistp256";break;case"1.3.132.0.34":r="nistp384";break;case"1.3.132.0.35":r="nistp521";break;default:return}var i=Buffer.allocUnsafe(39+t.length);return E(i,19,0),i.write("ecdsa-sha2-"+r,4,19,"ascii"),E(i,8,23),i.write(r,27,8,"ascii"),E(i,t.length,35),t.copy(i,39),i}function W(e,t,r){var i=new p.Writer;return i.startSequence(),i.writeInt(1,p.Integer),i.writeBuffer(r,p.OctetString),i.startSequence(160),i.writeOID(e),i.endSequence(),i.startSequence(161),i.startSequence(p.BitString),i.writeByte(0),i._ensure(t.length),t.copy(i._buf,i._offset,0,t.length),i._offset+=t.length,i.endSequence(),i.endSequence(),i.endSequence(),R("EC PRIVATE",i.buffer)}var q,X={sign:function(){if("function"==typeof s)return function(e){var t=this[k];if(null===t)return new Error("No private key available");try{return s(this[S],e,t)}catch(e){return e}};return function(e){var t=this[k];if(null===t)return new Error("No private key available");var r=a(this[S]);return r.update(e),function(e,t){try{return e.sign(t)}catch(e){return e}}(r,t)}}(),verify:function(){if("function"==typeof o)return function(e,t){var r=this[T];if(null===r)return new Error("No public key available");try{return o(this[S],e,r,t)}catch(e){return e}};return function(e,t){var r=this[T];if(null===r)return new Error("No public key available");var i=c(this[S]);return i.update(e),function(e,t,r){try{return e.verify(t,r)}catch(e){return e}}(i,r,t)}}(),getPrivatePEM:function(){return this[k]},getPublicPEM:function(){return this[T]},getPublicSSH:function(){return this[A]}};function j(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function V(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function Y(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function Q(e,t,n,s){var o;i||(i=r(3));var a=null,c=null;switch(t){case"ssh-rsa":var h=i.readString(e,e._pos);if(!1===h)return new Error("Malformed OpenSSH public key");var f=i.readString(e,e._pos);if(!1===f)return new Error("Malformed OpenSSH public key");a=O(f,h),c=I(f,h),o="sha1";break;case"ssh-dss":var u=i.readString(e,e._pos);if(!1===u)return new Error("Malformed OpenSSH public key");var l=i.readString(e,e._pos);if(!1===l)return new Error("Malformed OpenSSH public key");var p=i.readString(e,e._pos);if(!1===p)return new Error("Malformed OpenSSH public key");var d=i.readString(e,e._pos);if(!1===d)return new Error("Malformed OpenSSH public key");a=L(u,l,p,d),c=H(u,l,p,d),o="sha1";break;case"ssh-ed25519":var g=i.readString(e,e._pos);if(!1===g||32!==g.length)return new Error("Malformed OpenSSH public key");a=F(g),c=M(g),o=null;break;case"ecdsa-sha2-nistp256":o="sha256",oid="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===o&&(o="sha384",oid="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===o&&(o="sha512",oid="1.3.132.0.35"),!D(e,1))return new Error("Malformed OpenSSH public key");var m=i.readString(e,e._pos);if(!1===m)return new Error("Malformed OpenSSH public key");a=K(oid,m),c=G(oid,m);break;default:return new Error("Unsupported OpenSSH public key type: "+t)}return new z(s,n,a,c,o)}function z(e,t,r,i,n){this.type=e,this.comment=t,this[k]=null,this[T]=r,this[A]=i,this[S]=n,this[U]=!1}function $(e,t,r,i,n){this.type=e,this.comment=t,this[k]=null,this[T]=r,this[A]=i,this[S]=n,this[U]=!1}j.prototype=X,q=/^-----BEGIN OPENSSH PRIVATE KEY-----(?:\r\n|\n)([\s\S]+)(?:\r\n|\n)-----END OPENSSH PRIVATE KEY-----$/,j.parse=function(e,t){var n,s=q.exec(e);if(null===s)return null;var o=Buffer.from(s[1],"base64");if(o.length<31)return new Error("Malformed OpenSSH private key");var a=o.toString("ascii",0,15);if("openssh-key-v1\0"!==a)return new Error("Unsupported OpenSSH key magic: "+a);i||(i=r(3));var c=i.readString(o,15,"ascii");if(!1===c)return new Error("Malformed OpenSSH private key");if("none"!==c&&-1===y.indexOf(c))return new Error("Unsupported cipher for OpenSSH key: "+c);var f,u,l,g=i.readString(o,o._pos,"ascii");if(!1===g)return new Error("Malformed OpenSSH private key");if("none"!==g){if("none"===c)return new Error("Malformed OpenSSH private key");if("bcrypt"!==g)return new Error("Unsupported kdf name for OpenSSH key: "+g);if(!t)return new Error("Encrypted private OpenSSH key detected, but no passphrase given")}else if("none"!==c)return new Error("Malformed OpenSSH private key");"none"!==c&&(f=_[c]);var E=i.readString(o,o._pos);if(!1===E)return new Error("Malformed OpenSSH private key");if(E.length)switch(g){case"none":return new Error("Malformed OpenSSH private key");case"bcrypt":var v=i.readString(E,0);if(!1===v||E._pos+4>E.length)return new Error("Malformed OpenSSH private key");var S=m(E,E._pos),k=Buffer.allocUnsafe(f.keyLen+f.ivLen);if(0!==d(t,t.length,v,v.length,k,k.length,S))return new Error("Failed to generate information to decrypt key");u=k.slice(0,f.keyLen),l=k.slice(f.keyLen)}else if("none"!==g)return new Error("Malformed OpenSSH private key");var T=i.readInt(o,o._pos);if(!1===T)return new Error("Malformed OpenSSH private key");if(o._pos+=4,T>0){for(var A=0;A<T;++A){var U=i.readString(o,o._pos);if(!1===U)return new Error("Malformed OpenSSH private key");if(!1===i.readString(U,0,"ascii"))return new Error("Malformed OpenSSH private key")}var B=i.readString(o,o._pos);if(!1===B)return new Error("Malformed OpenSSH private key");if(void 0!==u){if(B.length<f.blockLen||B.length%f.blockLen!=0)return new Error("Malformed OpenSSH private key");try{var N={authTagLength:f.authLen},X=h(w[c],u,l,N);if(f.authLen>0){if(o.length-o._pos<f.authLen)return new Error("Malformed OpenSSH private key");X.setAuthTag(o.slice(o._pos,o._pos+=f.authLen))}B=P(X.update(B),X.final())}catch(e){return e}}if(o._pos!==o.length)return new Error("Malformed OpenSSH private key");n=function(e,t,r){var n=[];if(e.length<8)return new Error("Malformed OpenSSH private key");var s,o,a,c,h=m(e,0),f=m(e,4);if(h!==f)return r?new Error("OpenSSH key integrity check failed -- bad passphrase?"):new Error("OpenSSH key integrity check failed");for(e._pos=8,s=0;s<t;++s){var u=void 0,l=void 0,d=void 0,g=void 0,E=i.readString(e,e._pos,"ascii");if(!1===E)return new Error("Malformed OpenSSH private key");switch(E){case"ssh-rsa":var v=i.readString(e,e._pos);if(!1===v)return new Error("Malformed OpenSSH private key");var y=i.readString(e,e._pos);if(!1===y)return new Error("Malformed OpenSSH private key");var _=i.readString(e,e._pos);if(!1===_)return new Error("Malformed OpenSSH private key");var w=i.readString(e,e._pos);if(!1===w)return new Error("Malformed OpenSSH private key");if(!1===(S=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(k=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");d=O(v,y),g=I(v,y),l=C(v,y,_,w,S,k),u="sha1";break;case"ssh-dss":var S,k;if(!1===(S=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(k=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");var T=i.readString(e,e._pos);if(!1===T)return new Error("Malformed OpenSSH private key");var A=i.readString(e,e._pos);if(!1===A)return new Error("Malformed OpenSSH private key");var U=i.readString(e,e._pos);if(!1===U)return new Error("Malformed OpenSSH private key");d=L(S,k,T,A),g=H(S,k,T,A),l=x(S,k,T,A,U),u="sha1";break;case"ssh-ed25519":if(!b)return new Error("Unsupported OpenSSH private key type: "+E);var B=i.readString(e,e._pos);if(!1===B||32!==B.length)return new Error("Malformed OpenSSH private key");var N=i.readString(e,e._pos);if(!1===N||64!==N.length)return new Error("Malformed OpenSSH private key");d=F(B),g=M(B),a=N.slice(0,32),c=void 0,(c=new p.Writer).startSequence(),c.writeInt(0,p.Integer),c.startSequence(),c.writeOID("1.3.101.112"),c.endSequence(),c.startSequence(p.OctetString),c.writeBuffer(a,p.OctetString),c.endSequence(),c.endSequence(),l=R("PRIVATE",c.buffer),u=null;break;case"ecdsa-sha2-nistp256":u="sha256",o="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===u&&(u="sha384",o="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===u&&(u="sha512",o="1.3.132.0.35"),!D(e,1))return new Error("Malformed OpenSSH private key");var P=i.readString(e,e._pos);if(!1===P)return new Error("Malformed OpenSSH private key");var q=i.readString(e,e._pos);if(!1===q)return new Error("Malformed OpenSSH private key");d=K(o,P),g=G(o,P),l=W(o,P,q);break;default:return new Error("Unsupported OpenSSH private key type: "+E)}var X=i.readString(e,e._pos,"utf8");if(!1===X)return new Error("Malformed OpenSSH private key");n.push(new j(E,X,l,d,g,u,r))}var V=0;for(s=e._pos;s<e.length;++s)if(e[s]!==++V%255)return new Error("Malformed OpenSSH private key");return n}(B,T,void 0!==u)}else n=[];return n},V.prototype=X,function(){var e=/^-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----(?:\r\n|\n)((?:[^:]+:\s*[\S].*(?:\r\n|\n))*)([\s\S]+)(?:\r\n|\n)-----END (RSA|DSA|EC) PRIVATE KEY-----$/;V.parse=function(t,r){var i=e.exec(t);if(null===i)return null;var s,o,a,c,u,d,g=Buffer.from(i[3],"base64"),m=i[2],E=!1;if(void 0!==m){m=m.split(/\r\n|\n/g);for(var v=0;v<m.length;++v){var y=m[v],_=y.indexOf(":");if("DEK-Info"===y.slice(0,_)){var w=y.slice(_+2);if(-1===(_=w.indexOf(",")))continue;var b=w.slice(0,_).toLowerCase();if(-1===l.indexOf(b))return new Error("Cipher ("+b+") not supported for encrypted OpenSSH private key");var S=B[b];if(!S)return new Error("Cipher ("+b+") not supported for encrypted OpenSSH private key");var k=Buffer.from(w.slice(_+1),"hex");if(k.length!==S.ivLen)return new Error("Malformed encrypted OpenSSH private key");if(!r)return new Error("Encrypted OpenSSH private key detected, but no passphrase given");for(var T=f("md5").update(r).update(k.slice(0,8)).digest();T.length<S.keyLen;)T=P(T,f("md5").update(T).update(r).update(k).digest().slice(0,8));T.length>S.keyLen&&(T=T.slice(0,S.keyLen));try{var A=h(b,T,k);A.setAutoPadding(!1),g=P(A.update(g),A.final()),E=!0}catch(e){return e}}}}var U,N,D,C="Malformed OpenSSH private key";switch(E&&(C+=". Bad passphrase?"),i[1]){case"RSA":s="ssh-rsa",o=R("RSA PRIVATE",g);try{(d=new p.Reader(g)).readSequence(),d.readInt();var x=d.readString(p.Integer,!0);if(null===x)return new Error(C);var F=d.readString(p.Integer,!0);if(null===F)return new Error(C);a=O(x,F),c=I(x,F)}catch(e){return new Error(C)}u="sha1";break;case"DSA":s="ssh-dss",o=R("DSA PRIVATE",g);try{(d=new p.Reader(g)).readSequence(),d.readInt();var M=d.readString(p.Integer,!0);if(null===M)return new Error(C);var W=d.readString(p.Integer,!0);if(null===W)return new Error(C);var q=d.readString(p.Integer,!0);if(null===q)return new Error(C);var X=d.readString(p.Integer,!0);if(null===X)return new Error(C);a=L(M,W,q,X),c=H(M,W,q,X)}catch(e){return new Error(C)}u="sha1";break;case"EC":var j,Y;try{(d=new p.Reader(g)).readSequence(),d.readInt(),Y=d.readString(p.OctetString,!0),d.readByte();var Q=d.readLength();if(null===Q)return new Error(C);d._offset=Q;var z=d.readOID();if(null===z)return new Error(C);switch(z){case"1.2.840.10045.3.1.7":j="prime256v1",s="ecdsa-sha2-nistp256",u="sha256";break;case"1.3.132.0.34":j="secp384r1",s="ecdsa-sha2-nistp384",u="sha384";break;case"1.3.132.0.35":j="secp521r1",s="ecdsa-sha2-nistp521",u="sha512";break;default:return new Error("Unsupported private key EC OID: "+z)}}catch(e){return new Error(C)}o=R("EC PRIVATE",g);var $=(U=j,N=Y,(D=n.createECDH(U)).setPrivateKey(N),D.getPublicKey());a=K(z,$),c=G(z,$)}return new V(s,"",o,a,c,u,E)}}(),Y.prototype=X,function(){var e=Buffer.alloc(0),t=Buffer.from([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([0,0,0,0]),s=Buffer.from([0,0,0,1]),o=/^PuTTY-User-Key-File-2: (ssh-(?:rsa|dss))\r?\nEncryption: (aes256-cbc|none)\r?\nComment: ([^\r\n]*)\r?\nPublic-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-MAC: ([^\r\n]+)/;Y.parse=function(a,c){var l=o.exec(a);if(null===l)return null;var p=l[2],d="none"!==p;if(d&&!c)return new Error("Encrypted PPK private key detected, but no passphrase given");var g=Buffer.from(l[5],"base64");if(d){var m=_[p],v=P(f("sha1").update(n).update(c).digest(),f("sha1").update(s).update(c).digest());v.length>m.keyLen&&(v=v.slice(0,m.keyLen));try{var y=h(w[p],v,t);y.setAutoPadding(!1),g=P(y.update(g),y.final()),decrypted=!0}catch(e){return e}}var b,S,k,T=l[1],A=l[3],U=Buffer.from(l[4],"base64"),B=l[6],N=T.length,R=p.length,F=Buffer.byteLength(A),M=U.length,K=g.length,G=Buffer.allocUnsafe(4+N+4+R+4+F+4+M+4+K);if(E(G,N,V=0),G.write(T,V+=4,N,"ascii"),E(G,R,V+=N),G.write(p,V+=4,R,"ascii"),E(G,F,V+=R),G.write(A,V+=4,F,"utf8"),E(G,M,V+=F),U.copy(G,V+=4),E(G,K,V+=M),g.copy(G,V+4),c||(c=e),u("sha1",f("sha1").update("putty-private-key-file-mac-key").update(c).digest()).update(G).digest("hex")!==B)return d?new Error("PPK private key integrity check failed -- bad passphrase?"):new Error("PPK private key integrity check failed");switch(i||(i=r(3)),U._pos=0,D(U,1),T){case"ssh-rsa":var W=i.readString(U,U._pos);if(!1===W)return new Error("Malformed PPK public key");var q=i.readString(U,U._pos);if(!1===q)return new Error("Malformed PPK public key");var X=i.readString(g,0);if(!1===X)return new Error("Malformed PPK private key");if(!1===(V=i.readString(g,g._pos)))return new Error("Malformed PPK private key");if(!1===(Q=i.readString(g,g._pos)))return new Error("Malformed PPK private key");var j=i.readString(g,g._pos);if(!1===j)return new Error("Malformed PPK private key");b=O(q,W),S=I(q,W),k=C(q,W,X,j,V,Q);break;case"ssh-dss":var V,Q;if(!1===(V=i.readString(U,U._pos)))return new Error("Malformed PPK public key");if(!1===(Q=i.readString(U,U._pos)))return new Error("Malformed PPK public key");var z=i.readString(U,U._pos);if(!1===z)return new Error("Malformed PPK public key");var $=i.readString(U,U._pos);if(!1===$)return new Error("Malformed PPK public key");var Z=i.readString(g,0);if(!1===Z)return new Error("Malformed PPK private key");b=L(V,Q,z,$),S=H(V,Q,z,$),k=x(V,Q,z,$,Z)}return new Y(T,A,k,b,S,"sha1",d)}}(),z.prototype=X,function(){var e;e=b?/^(((?:ssh-(?:rsa|dss|ed25519))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/:/^(((?:ssh-(?:rsa|dss))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/,z.parse=function(t){var n=e.exec(t);if(null===n)return null;i||(i=r(3));var s=n[1],o=n[2],a=Buffer.from(n[3],"base64"),c=n[4]||"",h=i.readString(a,a._pos,"ascii");return!1===h||0!==h.indexOf(o)?new Error("Malformed OpenSSH public key"):Q(a,o,c,s)}}(),$.prototype=X,function(){var e=/^---- BEGIN SSH2 PUBLIC KEY ----(?:\r\n|\n)((?:(?:[\x21-\x7E]+?):(?:(?:.*?\\\r?\n)*.*)(?:\r\n|\n))*)((?:[A-Z0-9a-z\/+=]+(?:\r\n|\n))+)---- END SSH2 PUBLIC KEY ----$/,t=/^([\x21-\x7E]+?):((?:.*?\\\r?\n)*.*)$/gm,n=/\\\r?\n/g;$.parse=function(s){var o=e.exec(s);if(null===o)return null;var a=o[1],c=Buffer.from(o[2],"base64"),h="";if(void 0!==a)for(;o=t.exec(a);)"comment"===o[1].toLowerCase()&&(h=N(o[2].replace(n,""))).length>1&&34===h.charCodeAt(0)&&34===h.charCodeAt(h.length-1)&&(h=h.slice(1,-1));i||(i=r(3));var f=i.readString(c,0,"ascii");if(!1===f)return new Error("Malformed RFC4716 public key");var u=null,l=null;switch(f){case"ssh-rsa":var p=i.readString(c,c._pos);if(!1===p)return new Error("Malformed RFC4716 public key");var d=i.readString(c,c._pos);if(!1===d)return new Error("Malformed RFC4716 public key");u=O(d,p),l=I(d,p);break;case"ssh-dss":var g=i.readString(c,c._pos);if(!1===g)return new Error("Malformed RFC4716 public key");var m=i.readString(c,c._pos);if(!1===m)return new Error("Malformed RFC4716 public key");var E=i.readString(c,c._pos);if(!1===E)return new Error("Malformed RFC4716 public key");var v=i.readString(c,c._pos);if(!1===v)return new Error("Malformed RFC4716 public key");u=L(g,m,E,v),l=H(g,m,E,v);break;default:return new Error("Malformed RFC4716 public key")}return new $(f,h,u,l,"sha1")}}(),e.exports={parseDERKey:function(e,t){return Q(e,t,"",t)},parseKey:function(e,t){if(Buffer.isBuffer(e))e=e.toString("utf8").trim();else{if("string"!=typeof e)return new Error("Key data must be a Buffer or string");e=e.trim()}if(null!=t)if("string"==typeof t)t=Buffer.from(t);else if(!Buffer.isBuffer(t))return new Error("Passphrase must be a string or Buffer when supplied");var r;return null!==(r=j.parse(e,t))||null!==(r=V.parse(e,t))||null!==(r=Y.parse(e,t))||null!==(r=z.parse(e))||null!==(r=$.parse(e))?r:new Error("Unsupported key format")}}},function(e,t,r){var i=r(0).inherits,n=r(2).Duplex,s=r(2).Readable,o=r(2).Writable,a=r(14).constants.CHANNEL_EXTENDED_DATATYPE.STDERR,c=["CHANNEL_EOF","CHANNEL_CLOSE","CHANNEL_DATA","CHANNEL_EXTENDED_DATA","CHANNEL_WINDOW_ADJUST","CHANNEL_SUCCESS","CHANNEL_FAILURE","CHANNEL_REQUEST"],h=c.length;function f(e,t,r){var i={highWaterMark:2097152,allowHalfOpen:!r||r&&!1!==r.allowHalfOpen};this.allowHalfOpen=i.allowHalfOpen,n.call(this,i);var o=this,a=r&&r.server;this.server=a,this.type=e.type,this.subtype=void 0;var f,p,d,g,m,E=this.incoming=e.incoming,v=E.id,y=this.outgoing=e.outgoing,_=this._callbacks=[];this._client=t,this._hasX11=!1;var w=t._channels,b=t._sshstream;function S(){o._waitClientDrain&&(o._waitClientDrain=!1,o._waitWindow||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))}function k(){o.eof(),(a||!a&&!o.allowHalfOpen)&&o.close(),o.writable=!1}function T(){o.readable=!1}t._sock.on("drain",S),b.once("CHANNEL_EOF:"+v,(function(){"open"===E.state&&(E.state="eof",o.readable&&o.push(null),!a&&o.stderr.readable&&o.stderr.push(null))})).once("CHANNEL_CLOSE:"+v,(function(){if("closed"!==E.state){E.state="closed",o.readable&&o.push(null),a&&o.stderr.writable?o.stderr.end():!a&&o.stderr.readable&&o.stderr.push(null),"open"!==y.state&&"eof"!==y.state||o.close(),"closing"===y.state&&(y.state="closed"),delete w[v];var e=o._writableState;t._sock.removeListener("drain",S),e.ending||e.finished||o.end(),o._callbacks=[];for(var r=0;r<_.length;++r)_[r](!0);_=o._callbacks,a?o.readable?o.once("end",(function(){o.emit("close")})):o.emit("close"):(o.readable?o.once("end",(function(){null===f?o.emit("close",f,p,d,g,m):o.emit("close",f)})):null===f?o.emit("close",f,p,d,g,m):o.emit("close",f),o.stderr.readable?o.stderr.once("end",(function(){o.stderr.emit("close")})):o.stderr.emit("close"));for(r=0;r<h;++r)b.removeAllListeners(c[r]+":"+v)}})).on("CHANNEL_DATA:"+v,(function(e){0!==E.window&&(E.window-=e.length,o.push(e)?E.window<=1048576&&u(o):o._waitChanDrain=!0)})).on("CHANNEL_WINDOW_ADJUST:"+v,(function(e){y.window+=e,o._waitWindow&&(o._waitWindow=!1,o._waitClientDrain||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))})).on("CHANNEL_SUCCESS:"+v,(function(){a?(b._kalast=Date.now(),b._kacnt=0):t._resetKA(),_.length&&_.shift()(!1)})).on("CHANNEL_FAILURE:"+v,(function(){a?(b._kalast=Date.now(),b._kacnt=0):t._resetKA(),_.length&&_.shift()(!0)})).on("CHANNEL_REQUEST:"+v,(function(e){if(!a){if("exit-status"===e.request)return void o.emit("exit",f=e.code);if("exit-signal"===e.request)return void o.emit("exit",f=null,p="SIG"+e.signal,d=e.coredump,g=e.description,m=e.lang)}e.wantReply&&b.channelFailure(y.id)})),this.stdin=this.stdout=this,a?this.stderr=new l(this):(this.stderr=new s(i),this.stderr._read=function(e){o._waitChanDrain&&(o._waitChanDrain=!1,E.window<=1048576&&u(o))},b.on("CHANNEL_EXTENDED_DATA:"+v,(function(e,t){0!==E.window&&(E.window-=t.length,o.stderr.push(t)?E.window<=1048576&&u(o):o._waitChanDrain=!0)}))),this._waitClientDrain=!1,this._waitWindow=!1,this._waitChanDrain=!1,this._chunk=void 0,this._chunkcb=void 0,this._chunkErr=void 0,this._chunkcbErr=void 0,this.on("finish",k).on("prefinish",k),this.on("end",T).on("close",T)}function u(e){if("closed"===e.outgoing.state)return!0;var t=2097152-e.incoming.window;return t<=0||(e.incoming.window+=t,e._client._sshstream.channelWindowAdjust(e.outgoing.id,t))}function l(e){o.call(this,{highWaterMark:2097152}),this._channel=e}i(f,n),f.prototype.eof=function(){var e=!0,t=this.outgoing;return"open"===t.state&&(t.state="eof",e=this._client._sshstream.channelEOF(t.id)),e},f.prototype.close=function(){var e=!0,t=this.outgoing;return"open"!==t.state&&"eof"!==t.state||(t.state="closing",e=this._client._sshstream.channelClose(t.id)),e},f.prototype._read=function(e){this._waitChanDrain&&(this._waitChanDrain=!1,this.incoming.window<=1048576&&u(this))},f.prototype._write=function(e,t,r){var i,n,s,o=this._client._sshstream,a=this.outgoing,c=a.packetSize,h=a.id,f=a.window,u=e.length,l=0;if("open"===a.state){for(;u-l>0&&f>0;)if((s=u-l)>f&&(s=f),s>c&&(s=c),i=o.channelData(h,e.slice(l,l+s)),l+=s,f-=s,!i){this._waitClientDrain=!0,this._chunk=void 0,this._chunkcb=r;break}if(a.window=f,u-l>0)return 0===f&&(this._waitWindow=!0),l>0?(n=Buffer.allocUnsafe(u-l),e.copy(n,0,l),this._chunk=n):this._chunk=e,void(this._chunkcb=r);this._waitClientDrain||r()}},f.prototype.destroy=function(){this.end()},f.prototype.setWindow=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||"shell"!==this.subtype&&"exec"!==this.subtype||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.windowChange(this.outgoing.id,e,t,r,i)},f.prototype.signal=function(e){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.signal(this.outgoing.id,e)},f.prototype.exit=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||("number"==typeof e?this._client._sshstream.exitStatus(this.outgoing.id,e):this._client._sshstream.exitSignal(this.outgoing.id,e,t,r))},f.MAX_WINDOW=2097152,f.PACKET_SIZE=32768,i(l,o),l.prototype._write=function(e,t,r){var i,n,s,o=this._channel,c=o._client._sshstream,h=o.outgoing,f=h.packetSize,u=h.id,l=h.window,p=e.length,d=0;if("open"===o.outgoing.state){for(;p-d>0&&l>0;)if((s=p-d)>l&&(s=l),s>f&&(s=f),i=c.channelExtData(u,e.slice(d,d+s),a),d+=s,l-=s,!i){o._waitClientDrain=!0,o._chunkErr=void 0,o._chunkcbErr=r;break}if(h.window=l,p-d>0)return 0===l&&(o._waitWindow=!0),d>0?(n=Buffer.allocUnsafe(p-d),e.copy(n,0,d),o._chunkErr=n):o._chunkErr=e,void(o._chunkcbErr=r);o._waitClientDrain||r()}},e.exports=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(35);Object.defineProperty(t,"Client",{enumerable:!0,get:function(){return i.Client}});var n=r(13);Object.defineProperty(t,"Strategy",{enumerable:!0,get:function(){return n.Strategy}});var s=r(20);Object.defineProperty(t,"FtpStrategy",{enumerable:!0,get:function(){return s.FtpStrategy}});var o=r(28);Object.defineProperty(t,"SftpStrategy",{enumerable:!0,get:function(){return o.SftpStrategy}});var a=r(19);Object.defineProperty(t,"execFunction",{enumerable:!0,get:function(){return a.execFunction}})},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const n=r(1),s=r(5),o=r(36),a=r(20),c=r(44),h=r(45),f=r(28);class u extends n.EventEmitter{constructor(e){super(),this.workers=[],this.tasks=new o.TasksManager,this.transfers=new Map,this.strategies={ftp:a.FtpStrategy,ftps:a.FtpStrategy,sftp:f.SftpStrategy},this.handleWorkerEvents=e=>{e.on("connect",this.onConnect),e.on("disconnect",this.onDisconnect),e.on("progress",this.onProgress)},this.clearWorkerEvents=e=>{e.removeListener("connect",this.onConnect),e.removeListener("disconnect",this.onDisconnect),e.removeListener("progress",this.onProgress)},this.getWorkerInstance=e=>this.workers[e],this.workerFilter=(e,t)=>"all"===e.group||!t&&"misc"===e.group||e.group===t,this.onConnect=()=>{this.emit("connect")},this.onDisconnect=()=>{this.emit("disconnect")},this.onProgress=(e,t)=>{this.emit("transfer-progress",e,t)},this.options=Object.assign({pool:1},e),this.tasks.getWorkerInstance=this.getWorkerInstance,this.tasks.workerFilter=this.workerFilter}get config(){return this._config}registerProtocol(e,t){this.strategies[e]=t}unregisterProtocol(e){delete this.strategies[e]}createWorker(){const{protocol:e}=this.config,t=this.strategies[e];if(!t)throw new Error(`Strategy for protocol ${e} not found.`);return new t(this.config,this._connectionOptions)}setWorkers(){this.workers.forEach(this.clearWorkerEvents),this.workers=[];const{pool:e}=this.options;for(let t=0;t<e;t++){const e=this.createWorker();this.handleWorkerEvents(e),this.workers.push(e)}this.setWorkerGroups()}setWorkerGroups(){const{pool:e,transferPool:t}=this.options,r=[];t&&1!==e?r.push("misc",...c.repeat("transfer",e-1)):r.push(...c.repeat("all",e)),this.tasks.setWorkers(...r)}connect(e,t){return i(this,void 0,void 0,(function*(){if(!this._config&&!e)throw new Error("Config must be provided!");yield this.disconnect(),e&&(this._config=e),t&&(this._connectionOptions=t),this.setWorkers(),yield Promise.all(this.workers.map(e=>e.connect()))}))}disconnect(){return i(this,void 0,void 0,(function*(){yield Promise.all(this.workers.map(e=>e.disconnect()))}))}abort(){return i(this,void 0,void 0,(function*(){this.emit("transfer-abort",...this.transfers.keys()),this.tasks.deleteAllTasks(),yield Promise.all(this.workers.map(e=>e.abort()))}))}abortTransfer(...e){return i(this,void 0,void 0,(function*(){const t=[],r=[];e.forEach(e=>{const i=this.transfers.get(e);null!=i&&r.push(this.workers[i]),t.push(i),this.emit("transfer-abort",e)}),this.tasks.deleteTasks(...e),this.tasks.pauseWorkers(...t),yield Promise.all(r.map(e=>e.abort())),this.tasks.resumeWorkers(...t)}))}download(e,t,r){let n,o;return"string"==typeof e?(n=s.createWriteStream(e,{flags:r?"a":"w",start:r}),o=e):(n=e,o=h.getPathFromStream(e)),this.handleTransfer(({instance:e,taskId:s})=>i(this,void 0,void 0,(function*(){const i=yield e.size(t);yield e.download(n,{id:s,startAt:r,localPath:o,remotePath:t,totalBytes:i})})),{remotePath:t,localPath:o})}upload(e,t){let r,n;return"string"==typeof e?(r=s.createReadStream(e),n=e):(r=e,n=h.getPathFromStream(e)),this.handleTransfer(({instance:e,taskId:s})=>i(this,void 0,void 0,(function*(){const i=yield h.getFileSize(n);yield e.upload(r,{id:s,localPath:n,remotePath:t,totalBytes:i})})),{remotePath:t,localPath:n})}list(e){return this.tasks.handle(({instance:t})=>t.list(e))}size(e){return this.tasks.handle(({instance:t})=>t.size(e))}exists(e){return this.tasks.handle(({instance:t})=>t.exists(e))}move(e,t){return this.tasks.handle(({instance:r})=>r.move(e,t))}removeFile(e){return this.tasks.handle(({instance:t})=>t.removeFile(e))}removeEmptyFolder(e){return this.tasks.handle(({instance:t})=>t.removeEmptyFolder(e))}removeFolder(e){return this.tasks.handle(({instance:t})=>t.removeFolder(e))}createFolder(e){return this.tasks.handle(({instance:t})=>t.createFolder(e))}createEmptyFile(e){return this.tasks.handle(({instance:t})=>t.createEmptyFile(e))}pwd(){return this.tasks.handle(({instance:e})=>e.pwd())}send(e){return this.tasks.handle(({instance:t})=>t.send(e))}handleTransfer(e,t){return i(this,void 0,void 0,(function*(){const r=this.tasks.createTaskId(),n=Object.assign({id:r},t);this.transfers.set(r,null),this.emit("transfer-new",n);try{yield this.tasks.handle(t=>i(this,void 0,void 0,(function*(){this.transfers.set(r,t.workerIndex),yield e(t)})),"transfer-transfer",r)}catch(e){throw e}finally{this.transfers.delete(r),this.emit("transfer-finish",n)}}))}}t.Client=u},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TasksManager=void 0;const n=r(1),s=r(19),o=(e,t)=>e.group===t;class a extends n.EventEmitter{constructor(){super(...arguments),this.workers=[],this.queue=[],this.taskCounter=-1,this.unavailableWorkers=0,this.process=(e,t)=>i(this,void 0,void 0,(function*(){if(t=t||this.getWorker(e.group)){t.busy=!0,this.unavailableWorkers++;const r=this.getWorkerInstance?this.getWorkerInstance(t.index,e.group):t.index,{data:i,error:n}=yield s.execFunction(e.fn,{instance:r,taskId:e.id,workerIndex:t.index});t.busy=!1,this.unavailableWorkers--,this.finishTask(e.id,i,n),this.processNext()}else this.queue.push(e)}))}getWorker(e){if(this.unavailableWorkers===this.workers.length)return null;const t=this.workerFilter||o;return this.workers.find(r=>!r.busy&&!r.paused&&t(r,e))}getWorkers(e){return(null==e?void 0:e.length)?e.map(e=>this.workers[e]):this.workers}setWorkers(...e){this.workers=e.map((e,t)=>({busy:!1,group:e,index:t}))}handle(e,t,r){return i(this,void 0,void 0,(function*(){return this.workersCheck(),new Promise((i,n)=>{const s={id:null!=r?r:this.createTaskId(),fn:e,group:t},o=e=>{if(e.taskId===s.id){if(this.removeListener("change",o),e.error)return n(e.error);i(e.data)}};this.on("change",o),this.process(s)})}))}processNext(){return i(this,void 0,void 0,(function*(){if(this.queue.length){const e=[];for(const t of this.queue){const r=this.getWorker(t.group);r?this.process(t,r):e.push(t)}this.queue=e}}))}workersCheck(){if(!this.workers.length)throw new Error("No workers set")}pauseWorkers(...e){this.unavailableWorkers+=e.length,this.getWorkers(e).forEach(e=>e.paused=!0)}resumeWorkers(...e){this.unavailableWorkers-=e.length,this.getWorkers(e).forEach(e=>e.paused=!1),this.processNext()}deleteTasks(...e){const t=[];this.queue.forEach(r=>{e.includes(r.id)?this.finishTask(r.id):t.push(r)}),this.queue=t}deleteAllTasks(){this.queue.forEach(e=>this.finishTask(e.id)),this.queue=[]}createTaskId(){return++this.taskCounter}finishTask(e,t,r){this.emit("change",{taskId:e,data:t,error:r,type:"finished"})}}t.TasksManager=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const i=r(5),n=r(21),s=r(11),o=r(0),a=r(22),c=r(23),h=r(40),f=r(41),u=r(24),l=r(25),p=r(26),d=r(12),g=o.promisify(i.readdir),m=o.promisify(i.mkdir),E=o.promisify(i.stat),v=o.promisify(i.open),y=o.promisify(i.close),_=o.promisify(i.unlink);async function w(e){try{return await e()}catch(e){return}}t.Client=class{constructor(e=3e4){this.availableListCommands=["MLSD","LIST -a","LIST"],this.ftp=new a.FTPContext(e),this.prepareTransfer=this._enterFirstCompatibleMode([p.enterPassiveModeIPv6,p.enterPassiveModeIPv4]),this.parseList=c.parseList,this._progressTracker=new h.ProgressTracker}close(){this.ftp.close(),this._progressTracker.stop()}get closed(){return this.ftp.closed}connect(e="localhost",t=21){return this.ftp.reset(),this.ftp.socket.connect({host:e,port:t,family:this.ftp.ipFamily},()=>this.ftp.log(`Connected to ${l.describeAddress(this.ftp.socket)} (${l.describeTLS(this.ftp.socket)})`)),this._handleConnectResponse()}connectImplicitTLS(e="localhost",t=21,r={}){return this.ftp.reset(),this.ftp.socket=s.connect(t,e,r,()=>this.ftp.log(`Connected to ${l.describeAddress(this.ftp.socket)} (${l.describeTLS(this.ftp.socket)})`)),this.ftp.tlsOptions=r,this._handleConnectResponse()}_handleConnectResponse(){return this.ftp.handle(void 0,(e,t)=>{e instanceof Error?t.reject(e):d.positiveCompletion(e.code)?t.resolve(e):(this.ftp.socket.destroy(),t.reject(new a.FTPError(e)))})}send(e,t=!1){return t?(this.ftp.log("Deprecated call using send(command, flag) with boolean flag to ignore errors. Use sendIgnoringError(command)."),this.sendIgnoringError(e)):this.ftp.request(e)}sendIgnoringError(e){return this.ftp.handle(e,(e,t)=>{e instanceof a.FTPError?t.resolve({code:e.code,message:e.message}):e instanceof Error?t.reject(e):t.resolve(e)})}async useTLS(e={},t="AUTH TLS"){const r=await this.send(t);return this.ftp.socket=await l.upgradeSocket(this.ftp.socket,e),this.ftp.tlsOptions=e,this.ftp.log("Control socket is using: "+l.describeTLS(this.ftp.socket)),r}login(e="anonymous",t="guest"){return this.ftp.log("Login security: "+l.describeTLS(this.ftp.socket)),this.ftp.handle("USER "+e,(e,r)=>{e instanceof Error?r.reject(e):d.positiveCompletion(e.code)?r.resolve(e):331===e.code?this.ftp.send("PASS "+t):r.reject(new a.FTPError(e))})}async useDefaultSettings(){await this.send("TYPE I"),await this.sendIgnoringError("STRU F"),await this.sendIgnoringError("OPTS UTF8 ON"),await this.sendIgnoringError("OPTS MLST type;size;modify;unique;unix.mode;unix.owner;unix.group;unix.ownername;unix.groupname;"),this.ftp.hasTLS&&(await this.sendIgnoringError("PBSZ 0"),await this.sendIgnoringError("PROT P"))}async access(e={}){const t=!0===e.secure;let r;return r="implicit"===e.secure?await this.connectImplicitTLS(e.host,e.port,e.secureOptions):await this.connect(e.host,e.port),t&&await this.useTLS(e.secureOptions),await this.login(e.user,e.password),await this.useDefaultSettings(),r}async pwd(){const e=await this.send("PWD"),t=e.message.match(/"(.+)"/);if(null===t||void 0===t[1])throw new Error("Can't parse response to command 'PWD': "+e.message);return t[1]}async features(){const e=await this.sendIgnoringError("FEAT"),t=new Map;return e.code<400&&d.isMultiline(e.message)&&e.message.split("\n").slice(1,-1).forEach(e=>{const r=e.trim().split(" ");t.set(r[0],r[1]||"")}),t}async cd(e){const t=await this.protectWhitespace(e);return this.send("CWD "+t)}async cdup(){return this.send("CDUP")}async lastMod(e){const t=await this.protectWhitespace(e),r=(await this.send("MDTM "+t)).message.slice(4);return u.parseMLSxDate(r)}async size(e){const t="SIZE "+await this.protectWhitespace(e),r=await this.send(t),i=parseInt(r.message.slice(4),10);if(Number.isNaN(i))throw new Error(`Can't parse response to command '${t}' as a numerical value: ${r.message}`);return i}async rename(e,t){const r=await this.protectWhitespace(e),i=await this.protectWhitespace(t);return await this.send("RNFR "+r),this.send("RNTO "+i)}async remove(e,t=!1){const r=await this.protectWhitespace(e);return this.send("DELE "+r,t)}trackProgress(e){this._progressTracker.bytesOverall=0,this._progressTracker.reportTo(e)}async uploadFrom(e,t,r={}){return this._uploadWithCommand(e,t,"STOR",r)}async appendFrom(e,t,r={}){return this._uploadWithCommand(e,t,"APPE",r)}async _uploadWithCommand(e,t,r,i){return"string"==typeof e?this._uploadLocalFile(e,t,r,i):this._uploadFromStream(e,t,r)}async _uploadLocalFile(e,t,r,n){const s=await v(e,"r"),o=i.createReadStream("",{fd:s,start:n.localStart,end:n.localEndInclusive,autoClose:!1});try{return await this._uploadFromStream(o,t,r)}finally{await w(()=>y(s))}}async _uploadFromStream(e,t,r){const i=e=>this.ftp.closeWithError(e);e.once("error",i);try{const n=await this.protectWhitespace(t);return await this.prepareTransfer(this.ftp),await p.uploadFrom(e,{ftp:this.ftp,tracker:this._progressTracker,command:r,remotePath:n,type:"upload"})}finally{e.removeListener("error",i)}}async downloadTo(e,t,r=0){return"string"==typeof e?this._downloadToFile(e,t,r):this._downloadToStream(e,t,r)}async _downloadToFile(e,t,r){const n=r>0,s=n?"r+":"w",o=await v(e,s),a=i.createWriteStream("",{fd:o,start:r,autoClose:!1});try{return await this._downloadToStream(a,t,r)}catch(t){const r=await w(()=>E(e)),i=r&&r.size>0;throw!n&&!i&&await w(()=>_(e)),t}finally{await w(()=>y(o))}}async _downloadToStream(e,t,r){const i=e=>this.ftp.closeWithError(e);e.once("error",i);try{const n=await this.protectWhitespace(t);return await this.prepareTransfer(this.ftp),await p.downloadTo(e,{ftp:this.ftp,tracker:this._progressTracker,command:r>0?"REST "+r:"RETR "+n,remotePath:n,type:"download"})}finally{e.removeListener("error",i),e.end()}}async list(e=""){const t=await this.protectWhitespace(e);let r;for(const e of this.availableListCommands){const i=`${e} ${t}`.trim();await this.prepareTransfer(this.ftp);try{const t=await this._requestListWithCommand(i);return this.availableListCommands=[e],t}catch(e){if(!(e instanceof a.FTPError))throw e;r=e}}throw r}async _requestListWithCommand(e){const t=new f.StringWriter;await p.downloadTo(t,{ftp:this.ftp,tracker:this._progressTracker,command:e,remotePath:"",type:"list"});const r=t.getText(this.ftp.encoding);return this.ftp.log(r),this.parseList(r)}async removeDir(e){return this._exitAtCurrentDirectory(async()=>{await this.cd(e),await this.clearWorkingDir(),"/"!==e&&(await this.cdup(),await this.removeEmptyDir(e))})}async clearWorkingDir(){for(const e of await this.list())e.isDirectory?(await this.cd(e.name),await this.clearWorkingDir(),await this.cdup(),await this.removeEmptyDir(e.name)):await this.remove(e.name)}async uploadFromDir(e,t){return this._exitAtCurrentDirectory(async()=>(t&&await this.ensureDir(t),await this._uploadToWorkingDir(e)))}async _uploadToWorkingDir(e){const t=await g(e);for(const r of t){const t=n.join(e,r),i=await E(t);i.isFile()?await this.uploadFrom(t,r):i.isDirectory()&&(await this._openDir(r),await this._uploadToWorkingDir(t),await this.cdup())}}async downloadToDir(e,t){return this._exitAtCurrentDirectory(async()=>(t&&await this.cd(t),await this._downloadFromWorkingDir(e)))}async _downloadFromWorkingDir(e){await async function(e){try{await E(e)}catch(t){await m(e,{recursive:!0})}}(e);for(const t of await this.list()){const r=n.join(e,t.name);t.isDirectory?(await this.cd(t.name),await this._downloadFromWorkingDir(r),await this.cdup()):t.isFile&&await this.downloadTo(r,t.name)}}async ensureDir(e){e.startsWith("/")&&await this.cd("/");const t=e.split("/").filter(e=>""!==e);for(const e of t)await this._openDir(e)}async _openDir(e){await this.sendIgnoringError("MKD "+e),await this.cd(e)}async removeEmptyDir(e){const t=await this.protectWhitespace(e);return this.send("RMD "+t)}async protectWhitespace(e){if(!e.startsWith(" "))return e;const t=await this.pwd();return(t.endsWith("/")?t:t+"/")+e}async _exitAtCurrentDirectory(e){const t=await this.pwd();try{return await e()}finally{this.closed||await w(()=>this.cd(t))}}_enterFirstCompatibleMode(e){return async t=>{t.log("Trying to find optimal transfer strategy...");for(const r of e)try{const e=await r(t);return t.log("Optimal transfer strategy found."),this.prepareTransfer=r,e}catch(e){if(!(e instanceof a.FTPError))throw e}throw new Error("None of the available transfer strategies work.")}}async upload(e,t,r={}){return this.ftp.log("Warning: upload() has been deprecated, use uploadFrom()."),this.uploadFrom(e,t,r)}async append(e,t,r={}){return this.ftp.log("Warning: append() has been deprecated, use appendFrom()."),this.appendFrom(e,t,r)}async download(e,t,r=0){return this.ftp.log("Warning: download() has been deprecated, use downloadTo()."),this.downloadTo(e,t,r)}async uploadDir(e,t){return this.ftp.log("Warning: uploadDir() has been deprecated, use uploadFromDir()."),this.uploadFromDir(e,t)}async downloadDir(e){return this.ftp.log("Warning: downloadDir() has been deprecated, use downloadToDir()."),this.downloadToDir(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformList=t.parseLine=t.testLine=void 0;const i=r(9),n=new RegExp("(\\S+)\\s+(\\S+)\\s+(?:(<DIR>)|([0-9]+))\\s+(\\S.*)");t.testLine=function(e){return/^\d{2}/.test(e)&&n.test(e)},t.parseLine=function(e){const t=e.match(n);if(null===t)return;const r=t[5];if("."===r||".."===r)return;const s=new i.FileInfo(r);return"<DIR>"===t[3]?(s.type=i.FileType.Directory,s.size=0):(s.type=i.FileType.File,s.size=parseInt(t[4],10)),s.rawModifiedAt=t[1]+" "+t[2],s},t.transformList=function(e){return e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformList=t.parseLine=t.testLine=void 0;const i=r(9),n=new RegExp("([bcdelfmpSs-])(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?\\s*(\\d+)\\s+(?:(\\S+(?:\\s\\S+)*?)\\s+)?(?:(\\S+(?:\\s\\S+)*)\\s+)?(\\d+(?:,\\s*\\d+)?)\\s+((?:\\d+[-/]\\d+[-/]\\d+)|(?:\\S{3}\\s+\\d{1,2})|(?:\\d{1,2}\\s+\\S{3})|(?:\\d{1,2}月\\s+\\d{1,2}日))\\s+((?:\\d+(?::\\d+)?)|(?:\\d{4}年))\\s(.*)");function s(e,t,r){let n=0;"-"!==e&&(n+=i.FileInfo.UnixPermission.Read),"-"!==t&&(n+=i.FileInfo.UnixPermission.Write);const s=r.charAt(0);return"-"!==s&&s.toUpperCase()!==s&&(n+=i.FileInfo.UnixPermission.Execute),n}t.testLine=function(e){return n.test(e)},t.parseLine=function(e){const t=e.match(n);if(null===t)return;const r=t[21];if("."===r||".."===r)return;const o=new i.FileInfo(r);switch(o.size=parseInt(t[18],10),o.user=t[16],o.group=t[17],o.hardLinkCount=parseInt(t[15],10),o.rawModifiedAt=t[19]+" "+t[20],o.permissions={user:s(t[4],t[5],t[6]),group:s(t[8],t[9],t[10]),world:s(t[12],t[13],t[14])},t[1].charAt(0)){case"d":o.type=i.FileType.Directory;break;case"e":case"l":o.type=i.FileType.SymbolicLink;break;case"b":case"c":o.type=i.FileType.File;break;case"f":case"-":o.type=i.FileType.File;break;default:o.type=i.FileType.Unknown}if(o.isSymbolicLink){const e=r.indexOf(" -> ");-1!==e&&(o.name=r.substring(0,e),o.link=r.substring(e+4))}return o},t.transformList=function(e){return e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProgressTracker=void 0;function i(){}t.ProgressTracker=class{constructor(){this.bytesOverall=0,this.intervalMs=500,this.onStop=i,this.onHandle=i}reportTo(e=i){this.onHandle=e}start(e,t,r){let n=0;this.onStop=function(e,t){const r=setInterval(t,e);return t(),e=>{clearInterval(r),e&&t();t=i}}(this.intervalMs,()=>{const i=e.bytesRead+e.bytesWritten;this.bytesOverall+=i-n,n=i,this.onHandle({name:t,type:r,bytes:i,bytesOverall:this.bytesOverall})})}stop(){this.onStop(!1)}updateAndStop(){this.onStop(!0)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StringWriter=void 0;const i=r(2);class n extends i.Writable{constructor(){super(...arguments),this.buf=Buffer.alloc(0)}_write(e,t,r){e instanceof Buffer?(this.buf=Buffer.concat([this.buf,e]),r(null)):r(new Error("StringWriter expects chunks of type 'Buffer'."))}getText(e){return this.buf.toString(e)}}t.StringWriter=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Transfer=void 0;t.Transfer=class{constructor(e,t,r){var i;this.info=e,this.options=t,this.onProgress=r,this.handleProgress=e=>{var t;this.bytes=e;const{id:r,localPath:i,remotePath:n,totalBytes:s}=this.info;(null===(t=this.options)||void 0===t?void 0:t.quiet)||this.onProgress({id:r,localPath:i,remotePath:n},{bytes:e,totalBytes:s,speed:this.speed,eta:this.eta,percent:this.percent})},this.startTime=Date.now(),this.bytes=null!==(i=null==e?void 0:e.startAt)&&void 0!==i?i:0}get elapsed(){return(Date.now()-this.startTime)/1e3}get speed(){const e=this.elapsed;return 0===e?0:Math.round(this.bytes/e)}get eta(){if(0===this.speed)return null;const e=this.info.totalBytes/this.speed;return Math.round(e-this.elapsed)}get percent(){return Math.round(this.bytes/this.info.totalBytes*100)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0,t.repeat=(e,t)=>Array(t).fill(e)},function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getFileSize=t.getPathFromStream=void 0;const n=r(5);t.getPathFromStream=e=>e.path,t.getFileSize=e=>i(void 0,void 0,void 0,(function*(){if(!e)return-1;const{size:t}=yield n.promises.stat(e);return t}))},function(e,t){e.exports=__nccwpck_require__(9523)},function(e,t,r){var i=r(2).Transform,n=r(2).Readable,s=r(2).Writable,o=r(5).constants||process.binding("constants"),a=r(0),c=a.inherits,h=a.isDate,f=r(1).EventEmitter.listenerCount,u=r(5),l=r(3).readString,p=r(3).readInt,d=r(4).readUInt32BE,g=r(4).writeUInt32BE,m=1,E=2,v=4,y=8,_=2147483648,w={OK:0,EOF:1,NO_SUCH_FILE:2,PERMISSION_DENIED:3,FAILURE:4,BAD_MESSAGE:5,NO_CONNECTION:6,CONNECTION_LOST:7,OP_UNSUPPORTED:8};Object.keys(w).forEach((function(e){w[w[e]]=e}));var b={0:"No error",1:"End of file",2:"No such file or directory",3:"Permission denied",4:"Failure",5:"Bad message",6:"No connection",7:"Connection lost",8:"Operation unsupported"};P.STATUS_CODE=w;var S={INIT:1,OPEN:3,CLOSE:4,READ:5,WRITE:6,LSTAT:7,FSTAT:8,SETSTAT:9,FSETSTAT:10,OPENDIR:11,READDIR:12,REMOVE:13,MKDIR:14,RMDIR:15,REALPATH:16,STAT:17,RENAME:18,READLINK:19,SYMLINK:20,EXTENDED:200};Object.keys(S).forEach((function(e){S[S[e]]=e}));var k={VERSION:2,STATUS:101,HANDLE:102,DATA:103,NAME:104,ATTRS:105,EXTENDED:201};Object.keys(k).forEach((function(e){k[k[e]]=e}));var T={READ:1,WRITE:2,APPEND:4,CREAT:8,TRUNC:16,EXCL:32};P.OPEN_MODE=T;var A=Math.pow(2,32)-1,U=Buffer.from([0,0,0,5,S.INIT,0,0,0,3]),B=Buffer.from([0,0,0,5,k.VERSION,0,0,0,3]),N=/^SSH-2.0-(?:OpenSSH|dropbear)/;function R(e){}function P(e,t){"string"!=typeof e||t||(t=e,e=void 0),"object"==typeof e&&e||(e={}),i.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this.debug="function"==typeof e.debug?e.debug:R,this.server=!!e.server,this._isOpenSSH=t&&N.test(t),this._needContinue=!1,this._state={status:"packet_header",writeReqid:-1,pktLeft:void 0,pktHdrBuf:Buffer.allocUnsafe(9),pktBuf:void 0,pktType:void 0,version:void 0,extensions:{},maxDataLen:this._isOpenSSH?260096:32768,requests:{}};var r=this;function n(){r.writable=!1,r._cleanup(!1)}this.on("end",(function(){r.readable=!1})).on("finish",n).on("prefinish",n),this.server||this.push(U)}function D(e,t,r,i,n,s){var o,a,c,h,f=64,l=32768;"function"==typeof n?s=n:"object"==typeof n&&null!==n&&("number"==typeof n.concurrency&&n.concurrency>0&&!isNaN(n.concurrency)&&(f=n.concurrency),"number"==typeof n.chunkSize&&n.chunkSize>0&&!isNaN(n.chunkSize)&&(l=n.chunkSize),"number"==typeof n.fileSize&&n.fileSize>0&&!isNaN(n.fileSize)&&(c=n.fileSize),"function"==typeof n.step&&(o=n.step),"string"!=typeof n.mode&&"number"!=typeof n.mode||(a=x(n.mode)));var p,d,g,m=0,E=0,v=!1,y=l*f;function _(r){if(!v){v=!0;var i,n=0;p||d?(i=function(){0==--n&&s(r)},p&&(e===u||e.writable)&&++n,d&&(t===u||t.writable)&&++n,p&&(e===u||e.writable)&&e.close(p,i),d&&(t===u||t.writable)&&t.close(d,i)):s(r)}}e.open(r,"r",(function(n,v){if(n)return _(n);function w(n,c){if(n)return e!==u?void e.stat(r,(function(e,t){if(e)return _(n);w(null,t)})):_(n);h=c.size,t.open(i,"w",(function(r,n){if(r)return _(r);if(d=n,h<=0)return _();for(;y>h;){if(1===f){y=h;break}y-=l,--f}if((g=function(e){try{return Buffer.allocUnsafe(e)}catch(e){return e}}(y))instanceof Error)return _(g);function c(r,i,n,a,c,f){if(r)return _(r);function v(r){if(r)return _(r);if(E+=i,o&&o(E,i,h),i<f)return w(c,a+i,f-i);if(E!==h){if(!(m>=h)){var n=m+l>h?h-m:l;w(c,m,n),m+=n}}else t.close(d,(function(t){if(d=void 0,t)return _(t);e.close(p,(function(e){if(p=void 0,e)return _(e);s()}))}))}c=c||0,e===u?t.writeData(d,g,c,i,a,v):t.write(d,g,c,i,a,v)}function v(e,t,r){return function(i,n,s){c(i,n,0,t,e,r)}}function w(t,r,i){e===u?e.read(p,g,t,i,r,v(t,r,i)):e.readData(p,g,t,i,r,v(t,r,i))}function b(){for(var e=0,t=0;m<h&&e<f;){var r=m+l>h?h-m:l;w(t,m,r),t+=r,m+=r,++e}}void 0!==a?t.fchmod(d,a,(function e(r){r?t.chmod(i,a,(function(t){e()})):b()})):b()}))}p=v,void 0===c?e.fstat(p,w):w(null,{size:c})}))}function O(e,t,r,i,n,s,o){var a="function"==typeof o?o:void 0;e.writeData(t,r,i,n,s,(function(o,c){if(o)return e.close(t,(function(){a&&a(o)}));c===n?e.close(t,a):O(e,t,r,i+=c,n-=c,s+=c,a)}))}function I(e,t,r,i){var n=d(e,t),s=new G;if(t+=4,n&m){var o=C(e,t,r,i);if(!1===o)return!1;s.size=o,t+=8}if(n&E){var a,c;if(!1===(a=p(e,t,this,i)))return!1;if(s.uid=a,!1===(c=p(e,t+=4,this,i)))return!1;s.gid=c,t+=4}if(n&v){var h=p(e,t,this,i);if(!1===h)return!1;s.mode=h,s.permissions=h,t+=4}if(n&y){var f,u;if(!1===(f=p(e,t,this,i)))return!1;if(s.atime=f,!1===(u=p(e,t+=4,this,i)))return!1;s.mtime=u,t+=4}if(n&_){var l=p(e,t,this,i);if(!1===l)return!1;t+=4;for(var g,w=0;w<l;++w){if(!1===(g=p(e,t,this,i)))return!1;t+=4+g}}return e._pos=t,s}function C(e,t,r,i){if(e.length-t<8)return r&&r._cleanup(i),!1;for(var n=0,s=t+8;t<s;++t)n*=256,n+=e[t];return e._pos=t,n}function L(e){var t=0,r=0,i=[],n=0;if("object"!=typeof e||null===e)return{flags:t,nbytes:r,bytes:i};if("number"==typeof e.size){t|=m,r+=8;var s=new Array(8),o=e.size;for(n=7;n>=0;--n)s[n]=255&o,o/=256;i.push(s)}if("number"==typeof e.uid&&"number"==typeof e.gid&&(t|=E,r+=8,i.push([e.uid>>24&255,e.uid>>16&255,e.uid>>8&255,255&e.uid]),i.push([e.gid>>24&255,e.gid>>16&255,e.gid>>8&255,255&e.gid])),"number"==typeof e.permissions||"string"==typeof e.permissions||"number"==typeof e.mode||"string"==typeof e.mode){var a=x(e.mode||e.permissions);t|=v,r+=4,i.push([a>>24&255,a>>16&255,a>>8&255,255&a])}if(("number"==typeof e.atime||h(e.atime))&&("number"==typeof e.mtime||h(e.mtime))){var c=H(e.atime),f=H(e.mtime);t|=y,r+=8,i.push([c>>24&255,c>>16&255,c>>8&255,255&c]),i.push([f>>24&255,f>>16&255,f>>8&255,255&f])}return{flags:t,nbytes:r,bytes:i}}function H(e){if("number"==typeof e&&!isNaN(e))return e;if(h(e))return parseInt(e.getTime()/1e3,10);throw new Error("Cannot parse time: "+e)}function x(e){if("number"==typeof e&&!isNaN(e))return e;if("string"==typeof e)return x(parseInt(e,8));throw new Error("Cannot parse mode: "+e)}c(P,i),P.prototype.__read=i.prototype._read,P.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},P.prototype.__push=i.prototype.push,P.prototype.push=function(e,t){if(!this.readable)return!1;null===e&&(this.readable=!1);var r=this.__push(e,t);return this._needContinue=!1===r,r},P.prototype._cleanup=function(e){var t=this._state;t.pktBuf=void 0;var r=t.requests,i=Object.keys(r),n=i.length;if(n){if(this.readable)for(var s,o=new Error("SFTP session ended early"),a=0;a<n;++a)(s=r[i[a]].cb)&&s(o);t.requests={}}this.readable&&this.push(null),this._readableState.endEmitted||this._readableState.flowing||this.resume(),!1!==e&&(this.debug("DEBUG[SFTP]: Parser: Malformed packet"),e&&e(new Error("Malformed packet")))},P.prototype._transform=function(e,t,r){for(var i,n,s,o=this._state,a=this.server,c=o.status,h=o.pktType,u=o.pktBuf,m=o.pktLeft,E=o.version,v=o.pktHdrBuf,y=o.requests,_=this.debug,T=e.length,A=0;;){if("discard"===c){if(!(m<=(n=T-A))){m-=n;break}A+=m,m=0,c="packet_header",i=u=void 0}else{if(void 0!==u){if(m<=(n=T-A)){e.copy(u,u.length-m,A,A+m),A+=m,m=0,i=u,u=void 0;continue}e.copy(u,u.length-m,A),m-=n;break}if("packet_header"===c)if(i){if(m=d(i,4)-1,h=i[8],a){if(void 0===E&&h!==S.INIT)return _("DEBUG[SFTP]: Parser: Unexpected packet before init"),this._cleanup(!1),r(new Error("Unexpected packet before init"));if(void 0!==E&&h===S.INIT)_("DEBUG[SFTP]: Parser: Unexpected duplicate init"),c="bad_pkt";else{if(m>34e3)return _("DEBUG[SFTP]: Parser: "+(V="Packet length ("+m+") exceeds max length (34000)")),this._cleanup(!1),r(new Error(V));h===S.EXTENDED?c="bad_pkt":void 0===S[h]&&(_("DEBUG[SFTP]: Parser: Unsupported packet type: "+h),c="discard")}}else{if(void 0===E&&h!==k.VERSION)return _("DEBUG[SFTP]: Parser: Unexpected packet before version"),this._cleanup(!1),r(new Error("Unexpected packet before version"));void 0!==E&&h===k.VERSION?(_("DEBUG[SFTP]: Parser: Unexpected duplicate version"),c="bad_pkt"):void 0===k[h]&&(c="discard")}"bad_pkt"===c?(g(v,m+1,0),v[4]=h,m=4,u=v):(u=Buffer.allocUnsafe(m),c="payload")}else m=5,u=v;else if("payload"===c){if(h===k.VERSION||h===S.INIT){if(!1===(E=o.version=p(i,0,this,r)))return;if(E<3)return this._cleanup(!1),r(new Error("Incompatible SFTP version: "+E));a&&this.push(B);var U,N,R=i.length;for(i._pos=4;i._pos<R;){if(!1===(U=l(i,i._pos,"ascii",this,r)))return;if(!1===(N=l(i,i._pos,"ascii",this,r)))return;o.extensions[U]?o.extensions[U].push(N):o.extensions[U]=[N]}this.emit("ready")}else{if(!1===(s=p(i,0,this,r)))return;var P,D,O,L;if(a){var H,x,F=S[h];if(_("DEBUG[SFTP]: Parser: Request: "+F),f(this,F)){if(h===S.OPEN){if(!1===(P=l(i,4,"utf8",this,r)))return;var M=p(i,i._pos,this,r);if(!1===M)return;if(!1===(D=I(i,i._pos+4,this,r)))return;this.emit(F,s,P,M,D)}else if(h===S.CLOSE||h===S.FSTAT||h===S.READDIR){if(!1===(O=l(i,4,this,r)))return;this.emit(F,s,O)}else if(h===S.READ){if(!1===(O=l(i,4,this,r)))return;if(!1===(H=C(i,i._pos,this,r)))return;var K=p(i,i._pos,this,r);if(!1===K)return;this.emit(F,s,O,H,K)}else if(h===S.WRITE){if(!1===(O=l(i,4,this,r)))return;if(!1===(H=C(i,i._pos,this,r)))return;if(!1===(L=l(i,i._pos,this,r)))return;this.emit(F,s,O,H,L)}else if(h===S.LSTAT||h===S.STAT||h===S.OPENDIR||h===S.REMOVE||h===S.RMDIR||h===S.REALPATH||h===S.READLINK){if(!1===(x=l(i,4,"utf8",this,r)))return;this.emit(F,s,x)}else if(h===S.SETSTAT||h===S.MKDIR){if(!1===(x=l(i,4,"utf8",this,r)))return;if(!1===(D=I(i,i._pos,this,r)))return;this.emit(F,s,x,D)}else if(h===S.FSETSTAT){if(!1===(O=l(i,4,this,r)))return;if(!1===(D=I(i,i._pos,this,r)))return;this.emit(F,s,O,D)}else if(h===S.RENAME||h===S.SYMLINK){var G,W;if(!1===(G=l(i,4,"utf8",this,r)))return;if(!1===(W=l(i,i._pos,"utf8",this,r)))return;h===S.SYMLINK&&this._isOpenSSH?this.emit(F,s,W,G):this.emit(F,s,G,W)}}else this.status(s,w.OP_UNSUPPORTED)}else{var q=y[s],X=q&&q.cb;if(_("DEBUG[SFTP]: Parser: Response: "+k[h]),q&&X)if(h===k.STATUS){var j=p(i,4,this,r);if(!1===j)return;if(j===w.OK)X();else{var V,Y="";if(i.length>=12){if(!1===(V=l(i,8,"utf8",this,r)))return;if(i._pos+4<i.length&&!1===(Y=l(i,i._pos,"ascii",this,r)))return}var Q=new Error(V||b[j]||"Unknown status");Q.code=j,Q.lang=Y,X(Q)}}else if(h===k.HANDLE){if(!1===(O=l(i,4,this,r)))return;X(void 0,O)}else if(h===k.DATA)if(q.buffer){var z=p(i,4,this,r);if(!1===z)return;var $=q.buffer.length;if(z>$&&g(i,$,4),!1===(L=l(i,4,q.buffer,this,r)))return;X(void 0,L,z)}else{if(!1===(L=l(i,4,this,r)))return;X(void 0,L)}else if(h===k.NAME){var Z=p(i,4,this,r);if(!1===Z)return;var J,ee=[];i._pos=8;for(var te=0;te<Z;++te){if(!1===(P=l(i,i._pos,"utf8",this,r)))return;if(!1===(J=l(i,i._pos,"utf8",this,r)))return;if(!1===(D=I(i,i._pos,this,r)))return;ee.push({filename:P,longname:J,attrs:D})}X(void 0,ee)}else if(h===k.ATTRS){if(!1===(D=I(i,4,this,r)))return;X(void 0,D)}else if(h===k.EXTENDED){if(q.extended)switch(q.extended){case"statvfs@openssh.com":case"fstatvfs@openssh.com":var re={f_bsize:void 0,f_frsize:void 0,f_blocks:void 0,f_bfree:void 0,f_bavail:void 0,f_files:void 0,f_ffree:void 0,f_favail:void 0,f_sid:void 0,f_flag:void 0,f_namemax:void 0};if(re.f_bsize=C(i,4,this,r),!1===re.f_bsize)return;if(re.f_frsize=C(i,12,this,r),!1===re.f_frsize)return;if(re.f_blocks=C(i,20,this,r),!1===re.f_blocks)return;if(re.f_bfree=C(i,28,this,r),!1===re.f_bfree)return;if(re.f_bavail=C(i,36,this,r),!1===re.f_bavail)return;if(re.f_files=C(i,44,this,r),!1===re.f_files)return;if(re.f_ffree=C(i,52,this,r),!1===re.f_ffree)return;if(re.f_favail=C(i,60,this,r),!1===re.f_favail)return;if(re.f_sid=C(i,68,this,r),!1===re.f_sid)return;if(re.f_flag=C(i,76,this,r),!1===re.f_flag)return;if(re.f_namemax=C(i,84,this,r),!1===re.f_namemax)return;X(void 0,re)}X()}q&&delete y[s]}}c="packet_header",i=u=void 0}else if("bad_pkt"===c){if(a&&i[4]!==S.INIT){var ie=i[4]===S.EXTENDED?w.OP_UNSUPPORTED:w.FAILURE;if(i[4]===S.INIT||i[4]===k.VERSION)return this._cleanup(r);if(!1===(s=p(i,5,this,r)))return;this.status(s,ie)}m=d(i,0)-5,c="discard"}}if(A>=T)break}o.status=c,o.pktType=h,o.pktBuf=u,o.pktLeft=m,o.version=E,r()},P.prototype.createReadStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new Z(this,e,t)},P.prototype.createWriteStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new ee(this,e,t)},P.prototype.open=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=this._state;"function"==typeof r&&(i=r,r=void 0);var s="number"==typeof t?t:K(t);if(null===s)throw new Error("Unknown flags string: "+t);var o=0,a=0;"string"!=typeof r&&"number"!=typeof r||(r={mode:r}),"object"==typeof r&&null!==r&&(o=(r=L(r)).flags,a=r.nbytes,r=r.bytes);var c=Buffer.byteLength(e),h=9,f=Buffer.allocUnsafe(13+c+4+4+a);g(f,f.length-4,0),f[4]=S.OPEN;var u=n.writeReqid=(n.writeReqid+1)%A;if(g(f,u,5),g(f,c,h),f.write(e,h+=4,c,"utf8"),g(f,s,h+=c),g(f,o,h+=4),r&&o){h+=4;for(var l=0,p=r.length;l<p;++l)for(var d=0,m=r[l].length;d<m;++d)f[h++]=r[l][d]}return n.requests[u]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing OPEN"),this.push(f)},P.prototype.close=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var r=this._state,i=e.length,n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.CLOSE;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),e.copy(s,n+=4),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing CLOSE"),this.push(s)},P.prototype.readData=function(e,t,r,i,n,s){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(r>=t.length)throw new Error("offset is out of bounds");if(r+i>t.length)throw new Error("length extends beyond buffer");if(null===n)throw new Error("null position currently unsupported");var o=this._state,a=e.length,c=9,h=n,f=Buffer.allocUnsafe(13+a+8+4);g(f,f.length-4,0),f[4]=S.READ;var u=o.writeReqid=(o.writeReqid+1)%A;g(f,u,5),g(f,a,c),e.copy(f,c+=4),c+=a;for(var l=7;l>=0;--l)f[c+l]=255&h,h/=256;return g(f,i,c+=8),o.requests[u]={cb:function(e,t,r){if(e){if(s._wantEOFError||e.code!==w.EOF)return s(e)}else if(r>i)return s(new Error("Received more data than requested"));s(void 0,r||0,t,n)},buffer:t.slice(r,r+i)},this.debug("DEBUG[SFTP]: Outgoing: Writing READ"),this.push(f)},P.prototype.writeData=function(e,t,r,i,n,s){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(r>t.length)throw new Error("offset is out of bounds");if(r+i>t.length)throw new Error("length extends beyond buffer");if(null===n)throw new Error("null position currently unsupported");var o=this,a=this._state;if(i){var c=i>a.maxDataLen?i-a.maxDataLen:0,h=n;c&&(i=a.maxDataLen);var f=e.length,u=9,l=Buffer.allocUnsafe(13+f+8+4+i);g(l,l.length-4,0),l[4]=S.WRITE;var p=a.writeReqid=(a.writeReqid+1)%A;g(l,p,5),g(l,f,u),e.copy(l,u+=4),u+=f;for(var d=7;d>=0;--d)l[u+d]=255&n,n/=256;return g(l,i,u+=8),t.copy(l,u+=4,r,r+i),a.requests[p]={cb:function(n){n?s&&s(n):c?o.writeData(e,t,r+i,c,h+i,s):s&&s(void 0,r+i)}},this.debug("DEBUG[SFTP]: Outgoing: Writing WRITE"),this.push(l)}s&&process.nextTick((function(){s(void 0,0)}))},P.prototype.fastGet=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");D(this,u,e,t,r,i)},P.prototype.fastPut=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");D(u,this,e,t,r,i)},P.prototype.readFile=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i;"function"==typeof r?i=r:"function"==typeof t&&(i=t,t=void 0);var n=this;if("string"==typeof t)t={encoding:t,flag:"r"};else if(t){if("object"!=typeof t)throw new TypeError("Bad arguments")}else t={encoding:null,flag:"r"};var s,o,a,c=t.encoding;if(c&&!Buffer.isEncoding(c))throw new Error("Unknown encoding: "+c);var h,f=0,u=0,l=t.flag||"r";function p(){0===s?(o=Buffer.allocUnsafe(8192),n.readData(h,o,0,8192,u,d)):n.readData(h,o,f,s-f,u,d)}function d(e,t){var r;if(e){if(!(r=e.code===w.EOF))return n.close(h,(function(){return i&&i(e)}))}else r=!1;if(r||0===s&&0===t)return g();u+=t,f+=t,0!==s?f===s?g():p():(a.push(o.slice(0,t)),p())}function g(){n.close(h,(function(e){return 0===s?o=Buffer.concat(a,f):f<s&&(o=o.slice(0,f)),c&&(o=o.toString(c)),i&&i(e,o)}))}this.open(e,l,438,(function(t,r){if(t)return i&&i(t);h=r,n.fstat(h,(function t(r,c){if(r)n.stat(e,(function(e,s){if(e)return n.close(h,(function(){i&&i(r)}));t(null,s)}));else{if(0===(s=c.size||0))return a=[],p();o=Buffer.allocUnsafe(s),p()}}))})),d._wantEOFError=!0},P.prototype.writeFile=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n;"function"==typeof i?n=i:"function"==typeof r&&(n=r,r=void 0);var s=this;if("string"==typeof r)r={encoding:r,mode:438,flag:"w"};else if(r){if("object"!=typeof r)throw new TypeError("Bad arguments")}else r={encoding:"utf8",mode:438,flag:"w"};if(r.encoding&&!Buffer.isEncoding(r.encoding))throw new Error("Unknown encoding: "+r.encoding);var o=r.flag||"w";this.open(e,o,r.mode,(function(i,a){if(i)n&&n(i);else{var c=Buffer.isBuffer(t)?t:Buffer.from(""+t,r.encoding||"utf8"),h=/a/.test(o)?null:0;if(null===h)return void s.fstat(a,(function t(r,i){r?s.stat(e,(function(e,i){if(e)return s.close(a,(function(){n&&n(r)}));t(null,i)})):O(s,a,c,0,c.length,i.size,n)}));O(s,a,c,0,c.length,h,n)}}))},P.prototype.appendFile=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n;if("function"==typeof i?n=i:"function"==typeof r&&(n=r,r=void 0),"string"==typeof r)r={encoding:r,mode:438,flag:"a"};else if(r){if("object"!=typeof r)throw new TypeError("Bad arguments")}else r={encoding:"utf8",mode:438,flag:"a"};r.flag||(r=a._extend({flag:"a"},r)),this.writeFile(e,t,r,n)},P.prototype.exists=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");this.stat(e,(function(e){t&&t(!e)}))},P.prototype.unlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.REMOVE;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing REMOVE"),this.push(s)},P.prototype.rename=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(13+n+4+s);g(a,a.length-4,0),a[4]=S.RENAME;var c=i.writeReqid=(i.writeReqid+1)%A;return g(a,c,5),g(a,n,o),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing RENAME"),this.push(a)},P.prototype.mkdir=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=0,n=0,s=this._state;"function"==typeof t&&(r=t,t=void 0),"object"==typeof t&&null!==t&&(i=(t=L(t)).flags,n=t.nbytes,t=t.bytes);var o=Buffer.byteLength(e),a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=S.MKDIR;var h=s.writeReqid=(s.writeReqid+1)%A;if(g(c,h,5),g(c,o,a),c.write(e,a+=4,o,"utf8"),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing MKDIR"),this.push(c)},P.prototype.rmdir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.RMDIR;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing RMDIR"),this.push(s)},P.prototype.readdir=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i,n=this._state;if("function"==typeof t&&(r=t,t={}),"object"==typeof t&&null!==t||(t={}),i=!t||!t.full,!Buffer.isBuffer(e)&&"string"!=typeof e)throw new Error("missing directory handle or path");if("string"==typeof e){var s=this,o=[],a=0;return this.opendir(e,(function e(i,n){if(i)return r(i);s.readdir(n,t,(function(t,i){var c=t&&t.code===w.EOF;if(t&&!c)return s.close(n,(function(){r(t)}));if(c)return s.close(n,(function(e){if(e)return r(e);r(void 0,o)}));for(var h=0,f=i.length;h<f;++h,++a)o[a]=i[h];e(void 0,n)}))}))}var c=e.length,h=9,f=Buffer.allocUnsafe(13+c);g(f,f.length-4,0),f[4]=S.READDIR;var u=n.writeReqid=(n.writeReqid+1)%A;return g(f,u,5),g(f,c,h),e.copy(f,h+=4),n.requests[u]={cb:i?function(e,t){if(e)return r(e);for(var i=t.length-1;i>=0;--i)"."!==t[i].filename&&".."!==t[i].filename||t.splice(i,1);r(void 0,t)}:r},this.debug("DEBUG[SFTP]: Outgoing: Writing READDIR"),this.push(f)},P.prototype.fstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var r=this._state,i=e.length,n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.FSTAT;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),e.copy(s,n+=4),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing FSTAT"),this.push(s)},P.prototype.stat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.STAT;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing STAT"),this.push(s)},P.prototype.lstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.LSTAT;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing LSTAT"),this.push(s)},P.prototype.opendir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.OPENDIR;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing OPENDIR"),this.push(s)},P.prototype.setstat=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=0,n=0,s=this._state;"object"==typeof t&&null!==t?(i=(t=L(t)).flags,n=t.nbytes,t=t.bytes):"function"==typeof t&&(r=t);var o=Buffer.byteLength(e),a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=S.SETSTAT;var h=s.writeReqid=(s.writeReqid+1)%A;if(g(c,h,5),g(c,o,a),c.write(e,a+=4,o,"utf8"),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing SETSTAT"),this.push(c)},P.prototype.fsetstat=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=0,n=0,s=this._state;"object"==typeof t&&null!==t?(i=(t=L(t)).flags,n=t.nbytes,t=t.bytes):"function"==typeof t&&(r=t);var o=e.length,a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=S.FSETSTAT;var h=s.writeReqid=(s.writeReqid+1)%A;if(g(c,h,5),g(c,o,a),e.copy(c,a+=4),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing FSETSTAT"),this.push(c)},P.prototype.futimes=function(e,t,r,i){return this.fsetstat(e,{atime:H(t),mtime:H(r)},i)},P.prototype.utimes=function(e,t,r,i){return this.setstat(e,{atime:H(t),mtime:H(r)},i)},P.prototype.fchown=function(e,t,r,i){return this.fsetstat(e,{uid:t,gid:r},i)},P.prototype.chown=function(e,t,r,i){return this.setstat(e,{uid:t,gid:r},i)},P.prototype.fchmod=function(e,t,r){return this.fsetstat(e,{mode:t},r)},P.prototype.chmod=function(e,t,r){return this.setstat(e,{mode:t},r)},P.prototype.readlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.READLINK;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:function(e,r){return e?t(e):r&&r.length?void t(void 0,r[0].filename):t(new Error("Response missing link info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing READLINK"),this.push(s)},P.prototype.symlink=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(t),s=Buffer.byteLength(e),o=9,a=Buffer.allocUnsafe(13+n+4+s);g(a,a.length-4,0),a[4]=S.SYMLINK;var c=i.writeReqid=(i.writeReqid+1)%A;return g(a,c,5),this._isOpenSSH?(g(a,s,o),a.write(e,o+=4,s,"utf8"),g(a,n,o+=s),a.write(t,o+=4,n,"utf8")):(g(a,n,o),a.write(t,o+=4,n,"utf8"),g(a,s,o+=n),a.write(e,o+=4,s,"utf8")),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing SYMLINK"),this.push(a)},P.prototype.realpath=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=S.REALPATH;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:function(e,r){return e?t(e):r&&r.length?void t(void 0,r[0].filename):t(new Error("Response missing path info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing REALPATH"),this.push(s)},P.prototype.ext_openssh_rename=function(e,t,r){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["posix-rename@openssh.com"]||-1===i.extensions["posix-rename@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(41+n+4+s);g(a,a.length-4,0),a[4]=S.EXTENDED;var c=i.writeReqid=(i.writeReqid+1)%A;return g(a,c,5),g(a,24,o),a.write("posix-rename@openssh.com",o+=4,24,"ascii"),g(a,n,o+=24),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing posix-rename@openssh.com"),this.push(a)},P.prototype.ext_openssh_statvfs=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["statvfs@openssh.com"]||-1===r.extensions["statvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");var i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(36+i);g(s,s.length-4,0),s[4]=S.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,19,n),s.write("statvfs@openssh.com",n+=4,19,"ascii"),g(s,i,n+=19),s.write(e,n+=4,i,"utf8"),r.requests[o]={extended:"statvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing statvfs@openssh.com"),this.push(s)},P.prototype.ext_openssh_fstatvfs=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["fstatvfs@openssh.com"]||-1===r.extensions["fstatvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=e.length,n=9,s=Buffer.allocUnsafe(37+i);g(s,s.length-4,0),s[4]=S.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,20,n),s.write("fstatvfs@openssh.com",n+=4,20,"ascii"),g(s,i,n+=20),s.write(e,n+=4,i,"utf8"),r.requests[o]={extended:"fstatvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fstatvfs@openssh.com"),this.push(s)},P.prototype.ext_openssh_hardlink=function(e,t,r){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["hardlink@openssh.com"]||-1===i.extensions["hardlink@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(37+n+4+s);g(a,a.length-4,0),a[4]=S.EXTENDED;var c=i.writeReqid=(i.writeReqid+1)%A;return g(a,c,5),g(a,20,o),a.write("hardlink@openssh.com",o+=4,20,"ascii"),g(a,n,o+=20),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing hardlink@openssh.com"),this.push(a)},P.prototype.ext_openssh_fsync=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["fsync@openssh.com"]||-1===r.extensions["fsync@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=e.length,n=9,s=Buffer.allocUnsafe(34+i);g(s,s.length-4,0),s[4]=S.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%A;return g(s,o,5),g(s,17,n),s.write("fsync@openssh.com",n+=4,17,"ascii"),g(s,i,n+=17),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fsync@openssh.com"),this.push(s)},P.prototype.status=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");if(!w[t]||"number"!=typeof t)throw new Error("Bad status code: "+t);r||(r=""),i||(i="");var n=Buffer.byteLength(r),s=Buffer.byteLength(i),o=Buffer.allocUnsafe(17+n+4+s);return g(o,o.length-4,0),o[4]=k.STATUS,g(o,e,5),g(o,t,9),g(o,n,13),n&&o.write(r,17,n,"utf8"),g(o,s,17+n),s&&o.write(i,17+n+4,s,"ascii"),this.debug("DEBUG[SFTP]: Outgoing: Writing STATUS"),this.push(o)},P.prototype.handle=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Buffer.isBuffer(t))throw new Error("handle is not a Buffer");var r=t.length;if(r>256)throw new Error("handle too large (> 256 bytes)");var i=Buffer.allocUnsafe(13+r);return g(i,i.length-4,0),i[4]=k.HANDLE,g(i,e,5),g(i,r,9),r&&t.copy(i,13),this.debug("DEBUG[SFTP]: Outgoing: Writing HANDLE"),this.push(i)},P.prototype.data=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.isBuffer(t);if(!i&&"string"!=typeof t)throw new Error("data is not a Buffer or string");i||r||(r="utf8");var n=i?t.length:Buffer.byteLength(t,r),s=Buffer.allocUnsafe(13+n);return g(s,s.length-4,0),s[4]=k.DATA,g(s,e,5),g(s,n,9),n&&(i?t.copy(s,13):s.write(t,13,n,r)),this.debug("DEBUG[SFTP]: Outgoing: Writing DATA"),this.push(s)},P.prototype.name=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Array.isArray(t)){if("object"!=typeof t||null===t)throw new Error("names is not an object or array");t=[t]}var r,i,n,s,o,a,c,h,f,u,l,p,d=t.length,m=0,E=[];for(u=0;u<d;++u)n=(i=t[u])&&i.filename&&"string"==typeof i.filename?i.filename:"",m+=4+Buffer.byteLength(n),s=i&&i.longname&&"string"==typeof i.longname?i.longname:"",m+=4+Buffer.byteLength(s),"object"==typeof i.attrs&&null!==i.attrs?(m+=4+(r=L(i.attrs)).nbytes,E.push(r)):(m+=4,E.push(null));for(h=Buffer.allocUnsafe(13+m),g(h,h.length-4,0),h[4]=k.NAME,g(h,e,5),g(h,d,9),f=13,u=0;u<d;++u)if(n=(i=t[u])&&i.filename&&"string"==typeof i.filename?i.filename:"",a=Buffer.byteLength(n),g(h,a,f),f+=4,a&&(h.write(n,f,a,"utf8"),f+=a),s=i&&i.longname&&"string"==typeof i.longname?i.longname:"",a=Buffer.byteLength(s),g(h,a,f),f+=4,a&&(h.write(s,f,a,"utf8"),f+=a),o=E[u]){if(g(h,o.flags,f),f+=4,o.flags&&o.bytes){var v=o.bytes;for(l=0,a=v.length;l<a;++l)for(p=0,c=v[l].length;p<c;++p)h[f++]=v[l][p]}}else g(h,0,f),f+=4;return this.debug("DEBUG[SFTP]: Outgoing: Writing NAME"),this.push(h)},P.prototype.attrs=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if("object"!=typeof t||null===t)throw new Error("attrs is not an object");var r=L(t),i=Buffer.allocUnsafe(13+r.nbytes),n=13;if(g(i,i.length-4,0),i[4]=k.ATTRS,g(i,e,5),g(i,r.flags,9),r.flags&&r.bytes)for(var s=r.bytes,o=0,a=s.length;o<a;++o)for(var c=0,h=s[o].length;c<h;++c)i[n++]=s[o][c];return this.debug("DEBUG[SFTP]: Outgoing: Writing ATTRS"),this.push(i)};var F={r:T.READ,"r+":T.READ|T.WRITE,w:T.TRUNC|T.CREAT|T.WRITE,wx:T.TRUNC|T.CREAT|T.WRITE|T.EXCL,xw:T.TRUNC|T.CREAT|T.WRITE|T.EXCL,"w+":T.TRUNC|T.CREAT|T.READ|T.WRITE,"wx+":T.TRUNC|T.CREAT|T.READ|T.WRITE|T.EXCL,"xw+":T.TRUNC|T.CREAT|T.READ|T.WRITE|T.EXCL,a:T.APPEND|T.CREAT|T.WRITE,ax:T.APPEND|T.CREAT|T.WRITE|T.EXCL,xa:T.APPEND|T.CREAT|T.WRITE|T.EXCL,"a+":T.APPEND|T.CREAT|T.READ|T.WRITE,"ax+":T.APPEND|T.CREAT|T.READ|T.WRITE|T.EXCL,"xa+":T.APPEND|T.CREAT|T.READ|T.WRITE|T.EXCL},M=Object.keys(F);function K(e){var t=F[e];return void 0!==t?t:null}function G(e){this.mode=e&&e.mode,this.permissions=this.mode,this.uid=e&&e.uid,this.gid=e&&e.gid,this.size=e&&e.size,this.atime=e&&e.atime,this.mtime=e&&e.mtime}P.stringToFlags=K,P.flagsToString=function(e){for(var t=0;t<M.length;++t){var r=M[t];if(F[r]===e)return r}return null},G.prototype._checkModeProperty=function(e){return(this.mode&o.S_IFMT)===e},G.prototype.isDirectory=function(){return this._checkModeProperty(o.S_IFDIR)},G.prototype.isFile=function(){return this._checkModeProperty(o.S_IFREG)},G.prototype.isBlockDevice=function(){return this._checkModeProperty(o.S_IFBLK)},G.prototype.isCharacterDevice=function(){return this._checkModeProperty(o.S_IFCHR)},G.prototype.isSymbolicLink=function(){return this._checkModeProperty(o.S_IFLNK)},G.prototype.isFIFO=function(){return this._checkModeProperty(o.S_IFIFO)},G.prototype.isSocket=function(){return this._checkModeProperty(o.S_IFSOCK)},P.Stats=G;var W,q=r(55),X=q.validateNumber,j=q.destroyImpl,V=q.ERR_OUT_OF_RANGE,Y=q.ERR_INVALID_ARG_TYPE,Q=[];function z(e,t){if(!Number.isSafeInteger(e)){if(X(e,t),!Number.isInteger(e))throw new V(t,"an integer",e);throw new V(t,">= 0 and <= 2 ** 53 - 1",e)}if(e<0)throw new V(t,">= 0 and <= 2 ** 53 - 1",e)}function $(e){return e+7&-8}function Z(e,t,r){if(void 0===r)r={};else if("string"==typeof r)r={encoding:r};else{if(null===r||"object"!=typeof r)throw new TypeError('"options" argument must be a string or an object');r=Object.create(r)}if(void 0===r.highWaterMark&&(r.highWaterMark=65536),r.emitClose=!1,n.call(this,r),this.path=t,this.flags=void 0===r.flags?"r":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.end=r.end,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=0,this.bytesRead=0,this.closed=!1,this.handle=void 0===r.handle?null:r.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(z(this.start,"start"),this.pos=this.start),void 0===this.end)this.end=1/0;else if(this.end!==1/0&&(z(this.end,"end"),void 0!==this.start&&this.start>this.end))throw new V("start",`<= "end" (here: ${this.end})`,this.start);this.on("end",(function(){this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}function J(e,t,r){if(!e.handle)return i();function i(i){t(i=i||r),e.closed=!0,i||e.emit("close")}e.sftp.close(e.handle,i)}function ee(e,t,r){if(void 0===r)r={};else if("string"==typeof r)r={encoding:r};else{if(null===r||"object"!=typeof r)throw new TypeError('"options" argument must be a string or an object');r=Object.create(r)}r.emitClose=!1,s.call(this,r),this.path=t,this.flags=void 0===r.flags?"w":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=0,this.bytesWritten=0,this.closed=!1,this.handle=void 0===r.handle?null:r.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(z(this.start,"start"),this.pos=this.start),r.encoding&&this.setDefaultEncoding(r.encoding),this.on("finish",(function(){this._writableState.finalCalled||this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}c(Z,n),Z.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,(e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t,this.emit("open",t),this.emit("ready"),this.read()}))},Z.prototype._read=function(e){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._read(e)}));if(!this.destroyed){var t;(!W||W.length-W.used<128)&&(t=this.readableHighWaterMark||this._readableState.highWaterMark,(W=Q.length>0?Q.pop():Buffer.allocUnsafe(t)).used=0);var r=W,i=Math.min(W.length-W.used,e),n=W.used;if(void 0!==this.end&&(i=Math.min(this.end-this.pos+1,i)),i<=0)return this.push(null);this.sftp.readData(this.handle,W,W.used,i,this.pos,(e,t)=>{if(e)return this.emit("error",e),void(this.autoClose&&this.destroy());var s=null;if(n+i===r.used&&r===W){var o=r.used+t-i;r.used=$(o)}else{var a=n+i&-8,c=$(n+t);a-c>=128&&Q.push(r.slice(c,a))}t>0&&(this.bytesRead+=t,s=r.slice(n,n+t)),this.pos+=t,this.push(s)}),W.used=$(W.used+i)}},"function"!=typeof n.prototype.destroy&&(Z.prototype.destroy=j),Z.prototype._destroy=function(e,t){!this._opening||Buffer.isBuffer(this.handle)?(J(this,t,e),this.handle=null,this._opening=!1):this.once("open",J.bind(null,this,t,e))},Z.prototype.close=function(e){this.destroy(null,e)},Object.defineProperty(Z.prototype,"pending",{get(){return null===this.handle},configurable:!0}),c(ee,s),ee.prototype._final=function(e){this.autoClose&&this.destroy(),e()},ee.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,(e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t;var r=e=>{if(e)this.sftp.chmod(this.path,this.mode,e=>{r()});else if("a"!==this.flags[0])this.emit("open",t),this.emit("ready");else{var i=(e,r)=>{e?this.sftp.stat(this.path,(t,r)=>{if(t)return this.destroy(),void this.emit("error",e);i(null,r)}):(this.pos=r.size,this.emit("open",t),this.emit("ready"))};this.sftp.fstat(t,i)}};this.sftp.fchmod(t,this.mode,r)}))},ee.prototype._write=function(e,t,r){if(!Buffer.isBuffer(e)){const t=new Y("data","Buffer",e);return this.emit("error",t)}if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._write(e,t,r)}));this.sftp.writeData(this.handle,e,0,e.length,this.pos,(e,t)=>{if(e)return this.autoClose&&this.destroy(),r(e);this.bytesWritten+=t,r()}),this.pos+=e.length},ee.prototype._writev=function(e,t){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._writev(e,t)}));for(var r=this.sftp,i=this.handle,n=e.length,s=(e,r)=>{if(e)return this.destroy(),t(e);this.bytesWritten+=r,0==--n&&t()},o=0;o<e.length;++o){var a=e[o].chunk;r.writeData(i,a,0,a.length,this.pos,s),this.pos+=a.length}},"function"!=typeof s.prototype.destroy&&(ee.prototype.destroy=Z.prototype.destroy),ee.prototype._destroy=Z.prototype._destroy,ee.prototype.close=function(e){if(e){if(this.closed)return void process.nextTick(e);this.on("close",e)}this.autoClose||this.on("finish",this.destroy.bind(this)),this.end()},ee.prototype.destroySoon=ee.prototype.end,Object.defineProperty(ee.prototype,"pending",{get(){return null===this.handle},configurable:!0}),e.exports=P},function(e,t,r){var i=r(16),n=r(17),s=r(49),o=r(51);for(var a in e.exports={Reader:s,Writer:o},n)n.hasOwnProperty(a)&&(e.exports[a]=n[a]);for(var c in i)i.hasOwnProperty(c)&&(e.exports[c]=i[c])},function(e,t,r){var i=r(30),n=r(31).Buffer,s=r(17),o=r(16).newInvalidAsn1Error;function a(e){if(!e||!n.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(a.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(a.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(a.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),a.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var t=255&this._buf[this._offset];return e||(this._offset+=1),t},a.prototype.peek=function(){return this.readByte(!0)},a.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var t=255&this._buf[e++];if(null===t)return null;if(128==(128&t)){if(0===(t&=127))throw o("Indefinite length not supported");if(t>4)throw o("encoding too long");if(this._size-e<t)return null;this._len=0;for(var r=0;r<t;r++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=t;return e},a.prototype.readSequence=function(e){var t=this.peek();if(null===t)return null;if(void 0!==e&&e!==t)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var r=this.readLength(this._offset+1);return null===r?null:(this._offset=r,t)},a.prototype.readInt=function(){return this._readTag(s.Integer)},a.prototype.readBoolean=function(){return 0!==this._readTag(s.Boolean)},a.prototype.readEnumeration=function(){return this._readTag(s.Enumeration)},a.prototype.readString=function(e,t){e||(e=s.OctetString);var r=this.peek();if(null===r)return null;if(r!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+r.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>this._size-i)return null;if(this._offset=i,0===this.length)return t?n.alloc(0):"";var a=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,t?a:a.toString("utf8")},a.prototype.readOID=function(e){e||(e=s.OID);var t=this.readString(e,!0);if(null===t)return null;for(var r=[],i=0,n=0;n<t.length;n++){var o=255&t[n];i<<=7,i+=127&o,0==(128&o)&&(r.push(i),i=0)}return i=r.shift(),r.unshift(i%40),r.unshift(i/40>>0),r.join(".")},a.prototype._readTag=function(e){i.ok(void 0!==e);var t=this.peek();if(null===t)return null;if(t!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var r=this.readLength(this._offset+1);if(null===r)return null;if(this.length>4)throw o("Integer too long: "+this.length);if(this.length>this._size-r)return null;this._offset=r;for(var n=this._buf[this._offset],s=0,a=0;a<this.length;a++)s<<=8,s|=255&this._buf[this._offset++];return 128==(128&n)&&4!==a&&(s-=1<<8*a),s>>0},e.exports=a},function(e,t){e.exports=__nccwpck_require__(4300)},function(e,t,r){var i=r(30),n=r(31).Buffer,s=r(17),o=r(16).newInvalidAsn1Error,a={size:1024,growthFactor:8};function c(e){var t,r;t=a,r=e||{},i.ok(t),i.equal(typeof t,"object"),i.ok(r),i.equal(typeof r,"object"),Object.getOwnPropertyNames(t).forEach((function(e){if(!r[e]){var i=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,i)}})),e=r,this._buf=n.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(c.prototype,"buffer",{get:function(){if(this._seq.length)throw o(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),c.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},c.prototype.writeInt=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof t&&(t=s.Integer);for(var r=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&r>1;)r--,e<<=8;if(r>4)throw o("BER ints cannot be > 0xffffffff");for(this._ensure(2+r),this._buf[this._offset++]=t,this._buf[this._offset++]=r;r-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},c.prototype.writeNull=function(){this.writeByte(s.Null),this.writeByte(0)},c.prototype.writeEnumeration=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof t&&(t=s.Enumeration),this.writeInt(e,t)},c.prototype.writeBoolean=function(e,t){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof t&&(t=s.Boolean),this._ensure(3),this._buf[this._offset++]=t,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},c.prototype.writeString=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof t&&(t=s.OctetString);var r=n.byteLength(e);this.writeByte(t),this.writeLength(r),r&&(this._ensure(r),this._buf.write(e,this._offset),this._offset+=r)},c.prototype.writeBuffer=function(e,t){if("number"!=typeof t)throw new TypeError("tag must be a number");if(!n.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(t),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},c.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var t=this;e.forEach((function(e){t.writeString(e)}))},c.prototype.writeOID=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof t&&(t=s.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var r=e.split("."),i=[];i.push(40*parseInt(r[0],10)+parseInt(r[1],10)),r.slice(2).forEach((function(e){!function(e,t){t<128?e.push(t):t<16384?(e.push(t>>>7|128),e.push(127&t)):t<2097152?(e.push(t>>>14|128),e.push(255&(t>>>7|128)),e.push(127&t)):t<268435456?(e.push(t>>>21|128),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t)):(e.push(255&(t>>>28|128)),e.push(255&(t>>>21|128)),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t))}(i,parseInt(e,10))}));var n=this;this._ensure(2+i.length),this.writeByte(t),this.writeLength(i.length),i.forEach((function(e){n.writeByte(e)}))},c.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw o("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},c.prototype.startSequence=function(e){"number"!=typeof e&&(e=s.Sequence|s.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},c.prototype.endSequence=function(){var e=this._seq.pop(),t=e+3,r=this._offset-t;if(r<=127)this._shift(t,r,-2),this._buf[e]=r;else if(r<=255)this._shift(t,r,-1),this._buf[e]=129,this._buf[e+1]=r;else if(r<=65535)this._buf[e]=130,this._buf[e+1]=r>>8,this._buf[e+2]=r;else{if(!(r<=16777215))throw o("Sequence too long");this._shift(t,r,1),this._buf[e]=131,this._buf[e+1]=r>>16,this._buf[e+2]=r>>8,this._buf[e+3]=r}},c.prototype._shift=function(e,t,r){i.ok(void 0!==e),i.ok(void 0!==t),i.ok(r),this._buf.copy(this._buf,e+r,e,e+t),this._offset+=r},c.prototype._ensure=function(e){if(i.ok(e),this._size-this._offset<e){var t=this._size*this._options.growthFactor;t-this._offset<e&&(t+=e);var r=n.alloc(t);this._buf.copy(r,0,0,this._offset),this._buf=r,this._size=t}},e.exports=c},function(e,t,r){"use strict";var i=r(53).lowlevel.crypto_hash,n=0,s=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function o(e,t,r){return(e[0][t[r+3]]+e[1][t[r+2]]^e[2][t[r+1]])+e[3][t[r]]}function a(e,t){var r,i=0;for(r=0;r<4;r++,n++)n>=t&&(n=0),i=i<<8|e[n];return i}s.prototype.encipher=function(e,t){void 0===t&&(t=new Uint8Array(e.buffer),0!==e.byteOffset&&(t=t.subarray(e.byteOffset))),e[0]^=this.P[0];for(var r=1;r<16;r+=2)e[1]^=o(this.S,t,0)^this.P[r],e[0]^=o(this.S,t,4)^this.P[r+1];var i=e[0];e[0]=e[1]^this.P[17],e[1]=i},s.prototype.decipher=function(e){var t=new Uint8Array(e.buffer);0!==e.byteOffset&&(t=t.subarray(e.byteOffset)),e[0]^=this.P[17];for(var r=16;r>0;r-=2)e[1]^=o(this.S,t,0)^this.P[r],e[0]^=o(this.S,t,4)^this.P[r-1];var i=e[0];e[0]=e[1]^this.P[0],e[1]=i},s.prototype.expand0state=function(e,t){var r,i,s=new Uint32Array(2),o=new Uint8Array(s.buffer);for(r=0,n=0;r<18;r++)this.P[r]^=a(e,t);for(n=0,r=0;r<18;r+=2)this.encipher(s,o),this.P[r]=s[0],this.P[r+1]=s[1];for(r=0;r<4;r++)for(i=0;i<256;i+=2)this.encipher(s,o),this.S[r][i]=s[0],this.S[r][i+1]=s[1]},s.prototype.expandstate=function(e,t,r,i){var s,o,c=new Uint32Array(2);for(s=0,n=0;s<18;s++)this.P[s]^=a(r,i);for(s=0,n=0;s<18;s+=2)c[0]^=a(e,t),c[1]^=a(e,t),this.encipher(c),this.P[s]=c[0],this.P[s+1]=c[1];for(s=0;s<4;s++)for(o=0;o<256;o+=2)c[0]^=a(e,t),c[1]^=a(e,t),this.encipher(c),this.S[s][o]=c[0],this.S[s][o+1]=c[1];n=0},s.prototype.enc=function(e,t){for(var r=0;r<t;r++)this.encipher(e.subarray(2*r))},s.prototype.dec=function(e,t){for(var r=0;r<t;r++)this.decipher(e.subarray(2*r))};function c(e,t,r){var i,n=new s,o=new Uint32Array(8),c=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(n.expandstate(t,64,e,64),i=0;i<64;i++)n.expand0state(t,64),n.expand0state(e,64);for(i=0;i<8;i++)o[i]=a(c,c.byteLength);for(i=0;i<64;i++)n.enc(o,o.byteLength/8);for(i=0;i<8;i++)r[4*i+3]=o[i]>>>24,r[4*i+2]=o[i]>>>16,r[4*i+1]=o[i]>>>8,r[4*i+0]=o[i]}e.exports={BLOCKS:8,HASHSIZE:32,hash:c,pbkdf:function(e,t,r,n,s,o,a){var h,f,u,l,p,d,g=new Uint8Array(64),m=new Uint8Array(64),E=new Uint8Array(32),v=new Uint8Array(32),y=new Uint8Array(n+4),_=o;if(a<1)return-1;if(0===t||0===n||0===o||o>E.byteLength*E.byteLength||n>1<<20)return-1;for(l=Math.floor((o+E.byteLength-1)/E.byteLength),u=Math.floor((o+l-1)/l),h=0;h<n;h++)y[h]=r[h];for(i(g,e,t),d=1;o>0;d++){for(y[n+0]=d>>>24,y[n+1]=d>>>16,y[n+2]=d>>>8,y[n+3]=d,i(m,y,n+4),c(g,m,v),h=E.byteLength;h--;)E[h]=v[h];for(h=1;h<a;h++)for(i(m,v,v.byteLength),c(g,m,v),f=0;f<E.byteLength;f++)E[f]^=v[f];for(u=Math.min(u,o),h=0;h<u&&!((p=h*l+(d-1))>=_);h++)s[p]=E[h];o-=h}return 0}}},function(e,t,r){!function(e){"use strict";var t=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},i=function(){throw new Error("no PRNG")},n=new Uint8Array(16),s=new Uint8Array(32);s[0]=9;var o=t(),a=t([1]),c=t([56129,1]),h=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),f=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),u=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),l=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),p=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function d(e,t,r,i){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=i>>24&255,e[t+5]=i>>16&255,e[t+6]=i>>8&255,e[t+7]=255&i}function g(e,t,r,i,n){var s,o=0;for(s=0;s<n;s++)o|=e[t+s]^r[i+s];return(1&o-1>>>8)-1}function m(e,t,r,i){return g(e,t,r,i,16)}function E(e,t,r,i){return g(e,t,r,i,32)}function v(e,t,r,i){!function(e,t,r,i){for(var n,s=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,h=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,f=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,u=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,l=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,E=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,y=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=s,b=o,S=a,k=c,T=h,A=f,U=u,B=l,N=p,R=d,P=g,D=m,O=E,I=v,C=y,L=_,H=0;H<20;H+=2)w^=(n=(O^=(n=(N^=(n=(T^=(n=w+O|0)<<7|n>>>25)+w|0)<<9|n>>>23)+T|0)<<13|n>>>19)+N|0)<<18|n>>>14,A^=(n=(b^=(n=(I^=(n=(R^=(n=A+b|0)<<7|n>>>25)+A|0)<<9|n>>>23)+R|0)<<13|n>>>19)+I|0)<<18|n>>>14,P^=(n=(U^=(n=(S^=(n=(C^=(n=P+U|0)<<7|n>>>25)+P|0)<<9|n>>>23)+C|0)<<13|n>>>19)+S|0)<<18|n>>>14,L^=(n=(D^=(n=(B^=(n=(k^=(n=L+D|0)<<7|n>>>25)+L|0)<<9|n>>>23)+k|0)<<13|n>>>19)+B|0)<<18|n>>>14,w^=(n=(k^=(n=(S^=(n=(b^=(n=w+k|0)<<7|n>>>25)+w|0)<<9|n>>>23)+b|0)<<13|n>>>19)+S|0)<<18|n>>>14,A^=(n=(T^=(n=(B^=(n=(U^=(n=A+T|0)<<7|n>>>25)+A|0)<<9|n>>>23)+U|0)<<13|n>>>19)+B|0)<<18|n>>>14,P^=(n=(R^=(n=(N^=(n=(D^=(n=P+R|0)<<7|n>>>25)+P|0)<<9|n>>>23)+D|0)<<13|n>>>19)+N|0)<<18|n>>>14,L^=(n=(C^=(n=(I^=(n=(O^=(n=L+C|0)<<7|n>>>25)+L|0)<<9|n>>>23)+O|0)<<13|n>>>19)+I|0)<<18|n>>>14;w=w+s|0,b=b+o|0,S=S+a|0,k=k+c|0,T=T+h|0,A=A+f|0,U=U+u|0,B=B+l|0,N=N+p|0,R=R+d|0,P=P+g|0,D=D+m|0,O=O+E|0,I=I+v|0,C=C+y|0,L=L+_|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=b>>>0&255,e[5]=b>>>8&255,e[6]=b>>>16&255,e[7]=b>>>24&255,e[8]=S>>>0&255,e[9]=S>>>8&255,e[10]=S>>>16&255,e[11]=S>>>24&255,e[12]=k>>>0&255,e[13]=k>>>8&255,e[14]=k>>>16&255,e[15]=k>>>24&255,e[16]=T>>>0&255,e[17]=T>>>8&255,e[18]=T>>>16&255,e[19]=T>>>24&255,e[20]=A>>>0&255,e[21]=A>>>8&255,e[22]=A>>>16&255,e[23]=A>>>24&255,e[24]=U>>>0&255,e[25]=U>>>8&255,e[26]=U>>>16&255,e[27]=U>>>24&255,e[28]=B>>>0&255,e[29]=B>>>8&255,e[30]=B>>>16&255,e[31]=B>>>24&255,e[32]=N>>>0&255,e[33]=N>>>8&255,e[34]=N>>>16&255,e[35]=N>>>24&255,e[36]=R>>>0&255,e[37]=R>>>8&255,e[38]=R>>>16&255,e[39]=R>>>24&255,e[40]=P>>>0&255,e[41]=P>>>8&255,e[42]=P>>>16&255,e[43]=P>>>24&255,e[44]=D>>>0&255,e[45]=D>>>8&255,e[46]=D>>>16&255,e[47]=D>>>24&255,e[48]=O>>>0&255,e[49]=O>>>8&255,e[50]=O>>>16&255,e[51]=O>>>24&255,e[52]=I>>>0&255,e[53]=I>>>8&255,e[54]=I>>>16&255,e[55]=I>>>24&255,e[56]=C>>>0&255,e[57]=C>>>8&255,e[58]=C>>>16&255,e[59]=C>>>24&255,e[60]=L>>>0&255,e[61]=L>>>8&255,e[62]=L>>>16&255,e[63]=L>>>24&255}(e,t,r,i)}function y(e,t,r,i){!function(e,t,r,i){for(var n,s=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,h=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,f=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,u=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,l=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,E=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,y=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=0;w<20;w+=2)s^=(n=(E^=(n=(p^=(n=(h^=(n=s+E|0)<<7|n>>>25)+s|0)<<9|n>>>23)+h|0)<<13|n>>>19)+p|0)<<18|n>>>14,f^=(n=(o^=(n=(v^=(n=(d^=(n=f+o|0)<<7|n>>>25)+f|0)<<9|n>>>23)+d|0)<<13|n>>>19)+v|0)<<18|n>>>14,g^=(n=(u^=(n=(a^=(n=(y^=(n=g+u|0)<<7|n>>>25)+g|0)<<9|n>>>23)+y|0)<<13|n>>>19)+a|0)<<18|n>>>14,_^=(n=(m^=(n=(l^=(n=(c^=(n=_+m|0)<<7|n>>>25)+_|0)<<9|n>>>23)+c|0)<<13|n>>>19)+l|0)<<18|n>>>14,s^=(n=(c^=(n=(a^=(n=(o^=(n=s+c|0)<<7|n>>>25)+s|0)<<9|n>>>23)+o|0)<<13|n>>>19)+a|0)<<18|n>>>14,f^=(n=(h^=(n=(l^=(n=(u^=(n=f+h|0)<<7|n>>>25)+f|0)<<9|n>>>23)+u|0)<<13|n>>>19)+l|0)<<18|n>>>14,g^=(n=(d^=(n=(p^=(n=(m^=(n=g+d|0)<<7|n>>>25)+g|0)<<9|n>>>23)+m|0)<<13|n>>>19)+p|0)<<18|n>>>14,_^=(n=(y^=(n=(v^=(n=(E^=(n=_+y|0)<<7|n>>>25)+_|0)<<9|n>>>23)+E|0)<<13|n>>>19)+v|0)<<18|n>>>14;e[0]=s>>>0&255,e[1]=s>>>8&255,e[2]=s>>>16&255,e[3]=s>>>24&255,e[4]=f>>>0&255,e[5]=f>>>8&255,e[6]=f>>>16&255,e[7]=f>>>24&255,e[8]=g>>>0&255,e[9]=g>>>8&255,e[10]=g>>>16&255,e[11]=g>>>24&255,e[12]=_>>>0&255,e[13]=_>>>8&255,e[14]=_>>>16&255,e[15]=_>>>24&255,e[16]=u>>>0&255,e[17]=u>>>8&255,e[18]=u>>>16&255,e[19]=u>>>24&255,e[20]=l>>>0&255,e[21]=l>>>8&255,e[22]=l>>>16&255,e[23]=l>>>24&255,e[24]=p>>>0&255,e[25]=p>>>8&255,e[26]=p>>>16&255,e[27]=p>>>24&255,e[28]=d>>>0&255,e[29]=d>>>8&255,e[30]=d>>>16&255,e[31]=d>>>24&255}(e,t,r,i)}var _=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function w(e,t,r,i,n,s,o){var a,c,h=new Uint8Array(16),f=new Uint8Array(64);for(c=0;c<16;c++)h[c]=0;for(c=0;c<8;c++)h[c]=s[c];for(;n>=64;){for(v(f,h,o,_),c=0;c<64;c++)e[t+c]=r[i+c]^f[c];for(a=1,c=8;c<16;c++)a=a+(255&h[c])|0,h[c]=255&a,a>>>=8;n-=64,t+=64,i+=64}if(n>0)for(v(f,h,o,_),c=0;c<n;c++)e[t+c]=r[i+c]^f[c];return 0}function b(e,t,r,i,n){var s,o,a=new Uint8Array(16),c=new Uint8Array(64);for(o=0;o<16;o++)a[o]=0;for(o=0;o<8;o++)a[o]=i[o];for(;r>=64;){for(v(c,a,n,_),o=0;o<64;o++)e[t+o]=c[o];for(s=1,o=8;o<16;o++)s=s+(255&a[o])|0,a[o]=255&s,s>>>=8;r-=64,t+=64}if(r>0)for(v(c,a,n,_),o=0;o<r;o++)e[t+o]=c[o];return 0}function S(e,t,r,i,n){var s=new Uint8Array(32);y(s,i,n,_);for(var o=new Uint8Array(8),a=0;a<8;a++)o[a]=i[a+16];return b(e,t,r,o,s)}function k(e,t,r,i,n,s,o){var a=new Uint8Array(32);y(a,s,o,_);for(var c=new Uint8Array(8),h=0;h<8;h++)c[h]=s[h+16];return w(e,t,r,i,n,c,a)}var T=function(e){var t,r,i,n,s,o,a,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|r<<3),i=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(r>>>10|i<<6),n=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(i>>>7|n<<9),s=255&e[8]|(255&e[9])<<8,this.r[4]=255&(n>>>4|s<<12),this.r[5]=s>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(s>>>14|o<<2),a=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(o>>>11|a<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(a>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function A(e,t,r,i,n,s){var o=new T(s);return o.update(r,i,n),o.finish(e,t),0}function U(e,t,r,i,n,s){var o=new Uint8Array(16);return A(o,0,r,i,n,s),m(e,t,o,0)}function B(e,t,r,i,n){var s;if(r<32)return-1;for(k(e,0,t,0,r,i,n),A(e,16,e,32,r-32,e),s=0;s<16;s++)e[s]=0;return 0}function N(e,t,r,i,n){var s,o=new Uint8Array(32);if(r<32)return-1;if(S(o,0,32,i,n),0!==U(t,16,t,32,r-32,o))return-1;for(k(e,0,t,0,r,i,n),s=0;s<32;s++)e[s]=0;return 0}function R(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function P(e){var t,r,i=1;for(t=0;t<16;t++)r=e[t]+i+65535,i=Math.floor(r/65536),e[t]=r-65536*i;e[0]+=i-1+37*(i-1)}function D(e,t,r){for(var i,n=~(r-1),s=0;s<16;s++)i=n&(e[s]^t[s]),e[s]^=i,t[s]^=i}function O(e,r){var i,n,s,o=t(),a=t();for(i=0;i<16;i++)a[i]=r[i];for(P(a),P(a),P(a),n=0;n<2;n++){for(o[0]=a[0]-65517,i=1;i<15;i++)o[i]=a[i]-65535-(o[i-1]>>16&1),o[i-1]&=65535;o[15]=a[15]-32767-(o[14]>>16&1),s=o[15]>>16&1,o[14]&=65535,D(a,o,1-s)}for(i=0;i<16;i++)e[2*i]=255&a[i],e[2*i+1]=a[i]>>8}function I(e,t){var r=new Uint8Array(32),i=new Uint8Array(32);return O(r,e),O(i,t),E(r,0,i,0)}function C(e){var t=new Uint8Array(32);return O(t,e),1&t[0]}function L(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function H(e,t,r){for(var i=0;i<16;i++)e[i]=t[i]+r[i]}function x(e,t,r){for(var i=0;i<16;i++)e[i]=t[i]-r[i]}function F(e,t,r){var i,n,s=0,o=0,a=0,c=0,h=0,f=0,u=0,l=0,p=0,d=0,g=0,m=0,E=0,v=0,y=0,_=0,w=0,b=0,S=0,k=0,T=0,A=0,U=0,B=0,N=0,R=0,P=0,D=0,O=0,I=0,C=0,L=r[0],H=r[1],x=r[2],F=r[3],M=r[4],K=r[5],G=r[6],W=r[7],q=r[8],X=r[9],j=r[10],V=r[11],Y=r[12],Q=r[13],z=r[14],$=r[15];s+=(i=t[0])*L,o+=i*H,a+=i*x,c+=i*F,h+=i*M,f+=i*K,u+=i*G,l+=i*W,p+=i*q,d+=i*X,g+=i*j,m+=i*V,E+=i*Y,v+=i*Q,y+=i*z,_+=i*$,o+=(i=t[1])*L,a+=i*H,c+=i*x,h+=i*F,f+=i*M,u+=i*K,l+=i*G,p+=i*W,d+=i*q,g+=i*X,m+=i*j,E+=i*V,v+=i*Y,y+=i*Q,_+=i*z,w+=i*$,a+=(i=t[2])*L,c+=i*H,h+=i*x,f+=i*F,u+=i*M,l+=i*K,p+=i*G,d+=i*W,g+=i*q,m+=i*X,E+=i*j,v+=i*V,y+=i*Y,_+=i*Q,w+=i*z,b+=i*$,c+=(i=t[3])*L,h+=i*H,f+=i*x,u+=i*F,l+=i*M,p+=i*K,d+=i*G,g+=i*W,m+=i*q,E+=i*X,v+=i*j,y+=i*V,_+=i*Y,w+=i*Q,b+=i*z,S+=i*$,h+=(i=t[4])*L,f+=i*H,u+=i*x,l+=i*F,p+=i*M,d+=i*K,g+=i*G,m+=i*W,E+=i*q,v+=i*X,y+=i*j,_+=i*V,w+=i*Y,b+=i*Q,S+=i*z,k+=i*$,f+=(i=t[5])*L,u+=i*H,l+=i*x,p+=i*F,d+=i*M,g+=i*K,m+=i*G,E+=i*W,v+=i*q,y+=i*X,_+=i*j,w+=i*V,b+=i*Y,S+=i*Q,k+=i*z,T+=i*$,u+=(i=t[6])*L,l+=i*H,p+=i*x,d+=i*F,g+=i*M,m+=i*K,E+=i*G,v+=i*W,y+=i*q,_+=i*X,w+=i*j,b+=i*V,S+=i*Y,k+=i*Q,T+=i*z,A+=i*$,l+=(i=t[7])*L,p+=i*H,d+=i*x,g+=i*F,m+=i*M,E+=i*K,v+=i*G,y+=i*W,_+=i*q,w+=i*X,b+=i*j,S+=i*V,k+=i*Y,T+=i*Q,A+=i*z,U+=i*$,p+=(i=t[8])*L,d+=i*H,g+=i*x,m+=i*F,E+=i*M,v+=i*K,y+=i*G,_+=i*W,w+=i*q,b+=i*X,S+=i*j,k+=i*V,T+=i*Y,A+=i*Q,U+=i*z,B+=i*$,d+=(i=t[9])*L,g+=i*H,m+=i*x,E+=i*F,v+=i*M,y+=i*K,_+=i*G,w+=i*W,b+=i*q,S+=i*X,k+=i*j,T+=i*V,A+=i*Y,U+=i*Q,B+=i*z,N+=i*$,g+=(i=t[10])*L,m+=i*H,E+=i*x,v+=i*F,y+=i*M,_+=i*K,w+=i*G,b+=i*W,S+=i*q,k+=i*X,T+=i*j,A+=i*V,U+=i*Y,B+=i*Q,N+=i*z,R+=i*$,m+=(i=t[11])*L,E+=i*H,v+=i*x,y+=i*F,_+=i*M,w+=i*K,b+=i*G,S+=i*W,k+=i*q,T+=i*X,A+=i*j,U+=i*V,B+=i*Y,N+=i*Q,R+=i*z,P+=i*$,E+=(i=t[12])*L,v+=i*H,y+=i*x,_+=i*F,w+=i*M,b+=i*K,S+=i*G,k+=i*W,T+=i*q,A+=i*X,U+=i*j,B+=i*V,N+=i*Y,R+=i*Q,P+=i*z,D+=i*$,v+=(i=t[13])*L,y+=i*H,_+=i*x,w+=i*F,b+=i*M,S+=i*K,k+=i*G,T+=i*W,A+=i*q,U+=i*X,B+=i*j,N+=i*V,R+=i*Y,P+=i*Q,D+=i*z,O+=i*$,y+=(i=t[14])*L,_+=i*H,w+=i*x,b+=i*F,S+=i*M,k+=i*K,T+=i*G,A+=i*W,U+=i*q,B+=i*X,N+=i*j,R+=i*V,P+=i*Y,D+=i*Q,O+=i*z,I+=i*$,_+=(i=t[15])*L,o+=38*(b+=i*x),a+=38*(S+=i*F),c+=38*(k+=i*M),h+=38*(T+=i*K),f+=38*(A+=i*G),u+=38*(U+=i*W),l+=38*(B+=i*q),p+=38*(N+=i*X),d+=38*(R+=i*j),g+=38*(P+=i*V),m+=38*(D+=i*Y),E+=38*(O+=i*Q),v+=38*(I+=i*z),y+=38*(C+=i*$),s=(i=(s+=38*(w+=i*H))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),o=(i=o+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),E=(i=E+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),_=(i=_+n+65535)-65536*(n=Math.floor(i/65536)),s=(i=(s+=n-1+37*(n-1))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),o=(i=o+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),E=(i=E+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),_=(i=_+n+65535)-65536*(n=Math.floor(i/65536)),s+=n-1+37*(n-1),e[0]=s,e[1]=o,e[2]=a,e[3]=c,e[4]=h,e[5]=f,e[6]=u,e[7]=l,e[8]=p,e[9]=d,e[10]=g,e[11]=m,e[12]=E,e[13]=v,e[14]=y,e[15]=_}function M(e,t){F(e,t,t)}function K(e,r){var i,n=t();for(i=0;i<16;i++)n[i]=r[i];for(i=253;i>=0;i--)M(n,n),2!==i&&4!==i&&F(n,n,r);for(i=0;i<16;i++)e[i]=n[i]}function G(e,r,i){var n,s,o=new Uint8Array(32),a=new Float64Array(80),h=t(),f=t(),u=t(),l=t(),p=t(),d=t();for(s=0;s<31;s++)o[s]=r[s];for(o[31]=127&r[31]|64,o[0]&=248,L(a,i),s=0;s<16;s++)f[s]=a[s],l[s]=h[s]=u[s]=0;for(h[0]=l[0]=1,s=254;s>=0;--s)D(h,f,n=o[s>>>3]>>>(7&s)&1),D(u,l,n),H(p,h,u),x(h,h,u),H(u,f,l),x(f,f,l),M(l,p),M(d,h),F(h,u,h),F(u,f,p),H(p,h,u),x(h,h,u),M(f,h),x(u,l,d),F(h,u,c),H(h,h,l),F(u,u,h),F(h,l,d),F(l,f,a),M(f,p),D(h,f,n),D(u,l,n);for(s=0;s<16;s++)a[s+16]=h[s],a[s+32]=u[s],a[s+48]=f[s],a[s+64]=l[s];var g=a.subarray(32),m=a.subarray(16);return K(g,g),F(m,m,g),O(e,m),0}function W(e,t){return G(e,t,s)}function q(e,t){return i(t,32),W(e,t)}function X(e,t,r){var i=new Uint8Array(32);return G(i,r,t),y(e,n,i,_)}T.prototype.blocks=function(e,t,r){for(var i,n,s,o,a,c,h,f,u,l,p,d,g,m,E,v,y,_,w,b=this.fin?0:2048,S=this.h[0],k=this.h[1],T=this.h[2],A=this.h[3],U=this.h[4],B=this.h[5],N=this.h[6],R=this.h[7],P=this.h[8],D=this.h[9],O=this.r[0],I=this.r[1],C=this.r[2],L=this.r[3],H=this.r[4],x=this.r[5],F=this.r[6],M=this.r[7],K=this.r[8],G=this.r[9];r>=16;)l=u=0,l+=(S+=8191&(i=255&e[t+0]|(255&e[t+1])<<8))*O,l+=(k+=8191&(i>>>13|(n=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*G),l+=(T+=8191&(n>>>10|(s=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*K),l+=(A+=8191&(s>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*M),u=(l+=(U+=8191&(o>>>4|(a=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*F))>>>13,l&=8191,l+=(B+=a>>>1&8191)*(5*x),l+=(N+=8191&(a>>>14|(c=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*H),l+=(R+=8191&(c>>>11|(h=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*L),l+=(P+=8191&(h>>>8|(f=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*C),p=u+=(l+=(D+=f>>>5|b)*(5*I))>>>13,p+=S*I,p+=k*O,p+=T*(5*G),p+=A*(5*K),u=(p+=U*(5*M))>>>13,p&=8191,p+=B*(5*F),p+=N*(5*x),p+=R*(5*H),p+=P*(5*L),u+=(p+=D*(5*C))>>>13,p&=8191,d=u,d+=S*C,d+=k*I,d+=T*O,d+=A*(5*G),u=(d+=U*(5*K))>>>13,d&=8191,d+=B*(5*M),d+=N*(5*F),d+=R*(5*x),d+=P*(5*H),g=u+=(d+=D*(5*L))>>>13,g+=S*L,g+=k*C,g+=T*I,g+=A*O,u=(g+=U*(5*G))>>>13,g&=8191,g+=B*(5*K),g+=N*(5*M),g+=R*(5*F),g+=P*(5*x),m=u+=(g+=D*(5*H))>>>13,m+=S*H,m+=k*L,m+=T*C,m+=A*I,u=(m+=U*O)>>>13,m&=8191,m+=B*(5*G),m+=N*(5*K),m+=R*(5*M),m+=P*(5*F),E=u+=(m+=D*(5*x))>>>13,E+=S*x,E+=k*H,E+=T*L,E+=A*C,u=(E+=U*I)>>>13,E&=8191,E+=B*O,E+=N*(5*G),E+=R*(5*K),E+=P*(5*M),v=u+=(E+=D*(5*F))>>>13,v+=S*F,v+=k*x,v+=T*H,v+=A*L,u=(v+=U*C)>>>13,v&=8191,v+=B*I,v+=N*O,v+=R*(5*G),v+=P*(5*K),y=u+=(v+=D*(5*M))>>>13,y+=S*M,y+=k*F,y+=T*x,y+=A*H,u=(y+=U*L)>>>13,y&=8191,y+=B*C,y+=N*I,y+=R*O,y+=P*(5*G),_=u+=(y+=D*(5*K))>>>13,_+=S*K,_+=k*M,_+=T*F,_+=A*x,u=(_+=U*H)>>>13,_&=8191,_+=B*L,_+=N*C,_+=R*I,_+=P*O,w=u+=(_+=D*(5*G))>>>13,w+=S*G,w+=k*K,w+=T*M,w+=A*F,u=(w+=U*x)>>>13,w&=8191,w+=B*H,w+=N*L,w+=R*C,w+=P*I,S=l=8191&(u=(u=((u+=(w+=D*O)>>>13)<<2)+u|0)+(l&=8191)|0),k=p+=u>>>=13,T=d&=8191,A=g&=8191,U=m&=8191,B=E&=8191,N=v&=8191,R=y&=8191,P=_&=8191,D=w&=8191,t+=16,r-=16;this.h[0]=S,this.h[1]=k,this.h[2]=T,this.h[3]=A,this.h[4]=U,this.h[5]=B,this.h[6]=N,this.h[7]=R,this.h[8]=P,this.h[9]=D},T.prototype.finish=function(e,t){var r,i,n,s,o=new Uint16Array(10);if(this.leftover){for(s=this.leftover,this.buffer[s++]=1;s<16;s++)this.buffer[s]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,s=2;s<10;s++)this.h[s]+=r,r=this.h[s]>>>13,this.h[s]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,s=1;s<10;s++)o[s]=this.h[s]+r,r=o[s]>>>13,o[s]&=8191;for(o[9]-=8192,i=(1^r)-1,s=0;s<10;s++)o[s]&=i;for(i=~i,s=0;s<10;s++)this.h[s]=this.h[s]&i|o[s];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),n=this.h[0]+this.pad[0],this.h[0]=65535&n,s=1;s<8;s++)n=(this.h[s]+this.pad[s]|0)+(n>>>16)|0,this.h[s]=65535&n;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},T.prototype.update=function(e,t,r){var i,n;if(this.leftover){for((n=16-this.leftover)>r&&(n=r),i=0;i<n;i++)this.buffer[this.leftover+i]=e[t+i];if(r-=n,t+=n,this.leftover+=n,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(n=r-r%16,this.blocks(e,t,n),t+=n,r-=n),r){for(i=0;i<r;i++)this.buffer[this.leftover+i]=e[t+i];this.leftover+=r}};var j=B,V=N;var Y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function Q(e,t,r,i){for(var n,s,o,a,c,h,f,u,l,p,d,g,m,E,v,y,_,w,b,S,k,T,A,U,B,N,R=new Int32Array(16),P=new Int32Array(16),D=e[0],O=e[1],I=e[2],C=e[3],L=e[4],H=e[5],x=e[6],F=e[7],M=t[0],K=t[1],G=t[2],W=t[3],q=t[4],X=t[5],j=t[6],V=t[7],Q=0;i>=128;){for(b=0;b<16;b++)S=8*b+Q,R[b]=r[S+0]<<24|r[S+1]<<16|r[S+2]<<8|r[S+3],P[b]=r[S+4]<<24|r[S+5]<<16|r[S+6]<<8|r[S+7];for(b=0;b<80;b++)if(n=D,s=O,o=I,a=C,c=L,h=H,f=x,F,l=M,p=K,d=G,g=W,m=q,E=X,v=j,V,A=65535&(T=V),U=T>>>16,B=65535&(k=F),N=k>>>16,A+=65535&(T=(q>>>14|L<<18)^(q>>>18|L<<14)^(L>>>9|q<<23)),U+=T>>>16,B+=65535&(k=(L>>>14|q<<18)^(L>>>18|q<<14)^(q>>>9|L<<23)),N+=k>>>16,A+=65535&(T=q&X^~q&j),U+=T>>>16,B+=65535&(k=L&H^~L&x),N+=k>>>16,A+=65535&(T=Y[2*b+1]),U+=T>>>16,B+=65535&(k=Y[2*b]),N+=k>>>16,k=R[b%16],U+=(T=P[b%16])>>>16,B+=65535&k,N+=k>>>16,B+=(U+=(A+=65535&T)>>>16)>>>16,A=65535&(T=w=65535&A|U<<16),U=T>>>16,B=65535&(k=_=65535&B|(N+=B>>>16)<<16),N=k>>>16,A+=65535&(T=(M>>>28|D<<4)^(D>>>2|M<<30)^(D>>>7|M<<25)),U+=T>>>16,B+=65535&(k=(D>>>28|M<<4)^(M>>>2|D<<30)^(M>>>7|D<<25)),N+=k>>>16,U+=(T=M&K^M&G^K&G)>>>16,B+=65535&(k=D&O^D&I^O&I),N+=k>>>16,u=65535&(B+=(U+=(A+=65535&T)>>>16)>>>16)|(N+=B>>>16)<<16,y=65535&A|U<<16,A=65535&(T=g),U=T>>>16,B=65535&(k=a),N=k>>>16,U+=(T=w)>>>16,B+=65535&(k=_),N+=k>>>16,O=n,I=s,C=o,L=a=65535&(B+=(U+=(A+=65535&T)>>>16)>>>16)|(N+=B>>>16)<<16,H=c,x=h,F=f,D=u,K=l,G=p,W=d,q=g=65535&A|U<<16,X=m,j=E,V=v,M=y,b%16==15)for(S=0;S<16;S++)k=R[S],A=65535&(T=P[S]),U=T>>>16,B=65535&k,N=k>>>16,k=R[(S+9)%16],A+=65535&(T=P[(S+9)%16]),U+=T>>>16,B+=65535&k,N+=k>>>16,_=R[(S+1)%16],A+=65535&(T=((w=P[(S+1)%16])>>>1|_<<31)^(w>>>8|_<<24)^(w>>>7|_<<25)),U+=T>>>16,B+=65535&(k=(_>>>1|w<<31)^(_>>>8|w<<24)^_>>>7),N+=k>>>16,_=R[(S+14)%16],U+=(T=((w=P[(S+14)%16])>>>19|_<<13)^(_>>>29|w<<3)^(w>>>6|_<<26))>>>16,B+=65535&(k=(_>>>19|w<<13)^(w>>>29|_<<3)^_>>>6),N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,R[S]=65535&B|N<<16,P[S]=65535&A|U<<16;A=65535&(T=M),U=T>>>16,B=65535&(k=D),N=k>>>16,k=e[0],U+=(T=t[0])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[0]=D=65535&B|N<<16,t[0]=M=65535&A|U<<16,A=65535&(T=K),U=T>>>16,B=65535&(k=O),N=k>>>16,k=e[1],U+=(T=t[1])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[1]=O=65535&B|N<<16,t[1]=K=65535&A|U<<16,A=65535&(T=G),U=T>>>16,B=65535&(k=I),N=k>>>16,k=e[2],U+=(T=t[2])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[2]=I=65535&B|N<<16,t[2]=G=65535&A|U<<16,A=65535&(T=W),U=T>>>16,B=65535&(k=C),N=k>>>16,k=e[3],U+=(T=t[3])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[3]=C=65535&B|N<<16,t[3]=W=65535&A|U<<16,A=65535&(T=q),U=T>>>16,B=65535&(k=L),N=k>>>16,k=e[4],U+=(T=t[4])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[4]=L=65535&B|N<<16,t[4]=q=65535&A|U<<16,A=65535&(T=X),U=T>>>16,B=65535&(k=H),N=k>>>16,k=e[5],U+=(T=t[5])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[5]=H=65535&B|N<<16,t[5]=X=65535&A|U<<16,A=65535&(T=j),U=T>>>16,B=65535&(k=x),N=k>>>16,k=e[6],U+=(T=t[6])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[6]=x=65535&B|N<<16,t[6]=j=65535&A|U<<16,A=65535&(T=V),U=T>>>16,B=65535&(k=F),N=k>>>16,k=e[7],U+=(T=t[7])>>>16,B+=65535&k,N+=k>>>16,N+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[7]=F=65535&B|N<<16,t[7]=V=65535&A|U<<16,Q+=128,i-=128}return i}function z(e,t,r){var i,n=new Int32Array(8),s=new Int32Array(8),o=new Uint8Array(256),a=r;for(n[0]=1779033703,n[1]=3144134277,n[2]=1013904242,n[3]=2773480762,n[4]=1359893119,n[5]=2600822924,n[6]=528734635,n[7]=1541459225,s[0]=4089235720,s[1]=2227873595,s[2]=4271175723,s[3]=1595750129,s[4]=2917565137,s[5]=725511199,s[6]=4215389547,s[7]=327033209,Q(n,s,t,r),r%=128,i=0;i<r;i++)o[i]=t[a-r+i];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,d(o,r-8,a/536870912|0,a<<3),Q(n,s,o,r),i=0;i<8;i++)d(e,8*i,n[i],s[i]);return 0}function $(e,r){var i=t(),n=t(),s=t(),o=t(),a=t(),c=t(),h=t(),u=t(),l=t();x(i,e[1],e[0]),x(l,r[1],r[0]),F(i,i,l),H(n,e[0],e[1]),H(l,r[0],r[1]),F(n,n,l),F(s,e[3],r[3]),F(s,s,f),F(o,e[2],r[2]),H(o,o,o),x(a,n,i),x(c,o,s),H(h,o,s),H(u,n,i),F(e[0],a,c),F(e[1],u,h),F(e[2],h,c),F(e[3],a,u)}function Z(e,t,r){var i;for(i=0;i<4;i++)D(e[i],t[i],r)}function J(e,r){var i=t(),n=t(),s=t();K(s,r[2]),F(i,r[0],s),F(n,r[1],s),O(e,n),e[31]^=C(i)<<7}function ee(e,t,r){var i,n;for(R(e[0],o),R(e[1],a),R(e[2],a),R(e[3],o),n=255;n>=0;--n)Z(e,t,i=r[n/8|0]>>(7&n)&1),$(t,e),$(e,e),Z(e,t,i)}function te(e,r){var i=[t(),t(),t(),t()];R(i[0],u),R(i[1],l),R(i[2],a),F(i[3],u,l),ee(e,i,r)}function re(e,r,n){var s,o=new Uint8Array(64),a=[t(),t(),t(),t()];for(n||i(r,32),z(o,r,32),o[0]&=248,o[31]&=127,o[31]|=64,te(a,o),J(e,a),s=0;s<32;s++)r[s+32]=e[s];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ne(e,t){var r,i,n,s;for(i=63;i>=32;--i){for(r=0,n=i-32,s=i-12;n<s;++n)t[n]+=r-16*t[i]*ie[n-(i-32)],r=t[n]+128>>8,t[n]-=256*r;t[n]+=r,t[i]=0}for(r=0,n=0;n<32;n++)t[n]+=r-(t[31]>>4)*ie[n],r=t[n]>>8,t[n]&=255;for(n=0;n<32;n++)t[n]-=r*ie[n];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function se(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;ne(e,r)}function oe(e,r,i,n){var s,o,a=new Uint8Array(64),c=new Uint8Array(64),h=new Uint8Array(64),f=new Float64Array(64),u=[t(),t(),t(),t()];z(a,n,32),a[0]&=248,a[31]&=127,a[31]|=64;var l=i+64;for(s=0;s<i;s++)e[64+s]=r[s];for(s=0;s<32;s++)e[32+s]=a[32+s];for(z(h,e.subarray(32),i+32),se(h),te(u,h),J(e,u),s=32;s<64;s++)e[s]=n[s];for(z(c,e,i+64),se(c),s=0;s<64;s++)f[s]=0;for(s=0;s<32;s++)f[s]=h[s];for(s=0;s<32;s++)for(o=0;o<32;o++)f[s+o]+=c[s]*a[o];return ne(e.subarray(32),f),l}function ae(e,r){var i=t(),n=t(),s=t(),c=t(),f=t(),u=t(),l=t();return R(e[2],a),L(e[1],r),M(s,e[1]),F(c,s,h),x(s,s,e[2]),H(c,e[2],c),M(f,c),M(u,f),F(l,u,f),F(i,l,s),F(i,i,c),function(e,r){var i,n=t();for(i=0;i<16;i++)n[i]=r[i];for(i=250;i>=0;i--)M(n,n),1!==i&&F(n,n,r);for(i=0;i<16;i++)e[i]=n[i]}(i,i),F(i,i,s),F(i,i,c),F(i,i,c),F(e[0],i,c),M(n,e[0]),F(n,n,c),I(n,s)&&F(e[0],e[0],p),M(n,e[0]),F(n,n,c),I(n,s)?-1:(C(e[0])===r[31]>>7&&x(e[0],o,e[0]),F(e[3],e[0],e[1]),0)}function ce(e,r,i,n){var s,o=new Uint8Array(32),a=new Uint8Array(64),c=[t(),t(),t(),t()],h=[t(),t(),t(),t()];if(-1,i<64)return-1;if(ae(h,n))return-1;for(s=0;s<i;s++)e[s]=r[s];for(s=0;s<32;s++)e[s+32]=n[s];if(z(a,e,i),se(a),ee(c,h,a),te(h,r.subarray(32)),$(c,h),J(o,c),i-=64,E(r,0,o,0)){for(s=0;s<i;s++)e[s]=0;return-1}for(s=0;s<i;s++)e[s]=r[s+64];return i}function he(e,t){if(32!==e.length)throw new Error("bad key size");if(24!==t.length)throw new Error("bad nonce size")}function fe(){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function ue(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:y,crypto_stream_xor:k,crypto_stream:S,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:b,crypto_onetimeauth:A,crypto_onetimeauth_verify:U,crypto_verify_16:m,crypto_verify_32:E,crypto_secretbox:B,crypto_secretbox_open:N,crypto_scalarmult:G,crypto_scalarmult_base:W,crypto_box_beforenm:X,crypto_box_afternm:j,crypto_box:function(e,t,r,i,n,s){var o=new Uint8Array(32);return X(o,n,s),j(e,t,r,i,o)},crypto_box_open:function(e,t,r,i,n,s){var o=new Uint8Array(32);return X(o,n,s),V(e,t,r,i,o)},crypto_box_keypair:q,crypto_hash:z,crypto_sign:oe,crypto_sign_keypair:re,crypto_sign_open:ce,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var t=new Uint8Array(e);return i(t,e),t},e.secretbox=function(e,t,r){fe(e,t,r),he(r,t);for(var i=new Uint8Array(32+e.length),n=new Uint8Array(i.length),s=0;s<e.length;s++)i[s+32]=e[s];return B(n,i,i.length,t,r),n.subarray(16)},e.secretbox.open=function(e,t,r){fe(e,t,r),he(r,t);for(var i=new Uint8Array(16+e.length),n=new Uint8Array(i.length),s=0;s<e.length;s++)i[s+16]=e[s];return!(i.length<32)&&(0===N(n,i,i.length,t,r)&&n.subarray(32))},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(fe(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var r=new Uint8Array(32);return G(r,e,t),r},e.scalarMult.base=function(e){if(fe(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return W(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,i,n){var s=e.box.before(i,n);return e.secretbox(t,r,s)},e.box.before=function(e,t){fe(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return X(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,i,n){var s=e.box.before(i,n);return e.secretbox.open(t,r,s)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return q(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(fe(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return W(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(fe(e,t),64!==t.length)throw new Error("bad secret key size");var r=new Uint8Array(64+e.length);return oe(r,e,e.length,t),r},e.sign.open=function(e,t){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(fe(e,t),32!==t.length)throw new Error("bad public key size");var r=new Uint8Array(e.length),i=ce(r,e,e.length,t);if(i<0)return null;for(var n=new Uint8Array(i),s=0;s<n.length;s++)n[s]=r[s];return n},e.sign.detached=function(t,r){for(var i=e.sign(t,r),n=new Uint8Array(64),s=0;s<n.length;s++)n[s]=i[s];return n},e.sign.detached.verify=function(e,t,r){if(fe(e,t,r),64!==t.length)throw new Error("bad signature size");if(32!==r.length)throw new Error("bad public key size");var i,n=new Uint8Array(64+e.length),s=new Uint8Array(64+e.length);for(i=0;i<64;i++)n[i]=t[i];for(i=0;i<e.length;i++)n[i+64]=e[i];return ce(s,n,n.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(64);return re(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(fe(e),64!==e.length)throw new Error("bad secret key size");for(var t=new Uint8Array(32),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(fe(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(32),r=new Uint8Array(64),i=0;i<32;i++)r[i]=e[i];return re(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){fe(e);var t=new Uint8Array(64);return z(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return fe(e,t),0!==e.length&&0!==t.length&&(e.length===t.length&&0===g(e,0,t,0,e.length))},e.setPRNG=function(e){i=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;if(t&&t.getRandomValues){e.setPRNG((function(e,r){var i,n=new Uint8Array(r);for(i=0;i<r;i+=65536)t.getRandomValues(n.subarray(i,i+Math.min(r-i,65536)));for(i=0;i<r;i++)e[i]=n[i];ue(n)}))}else(t=r(6))&&t.randomBytes&&e.setPRNG((function(e,r){var i,n=t.randomBytes(r);for(i=0;i<r;i++)e[i]=n[i];ue(n)}))}()}(e.exports?e.exports:self.nacl=self.nacl||{})},function(e,t){function r(e,t,r){null!=e&&("number"==typeof e?this.fromNumber(e,t,r):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function i(){return new r(null)}r.prototype.am=function(e,t,r,i,n,s){for(var o=16383&t,a=t>>14;--s>=0;){var c=16383&this[e],h=this[e++]>>14,f=a*c+h*o;n=((c=o*c+((16383&f)<<14)+r[i]+n)>>28)+(f>>14)+a*h,r[i++]=268435455&c}return n},r.prototype.DB=28,r.prototype.DM=268435455,r.prototype.DV=1<<28;r.prototype.FV=Math.pow(2,52),r.prototype.F1=24,r.prototype.F2=4;var n,s,o=new Array;for(n="0".charCodeAt(0),s=0;s<=9;++s)o[n++]=s;for(n="a".charCodeAt(0),s=10;s<36;++s)o[n++]=s;for(n="A".charCodeAt(0),s=10;s<36;++s)o[n++]=s;function a(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function c(e,t){var r=o[e.charCodeAt(t)];return null==r?-1:r}function h(e){var t=i();return t.fromInt(e),t}function f(e){var t,r=1;return 0!=(t=e>>>16)&&(e=t,r+=16),0!=(t=e>>8)&&(e=t,r+=8),0!=(t=e>>4)&&(e=t,r+=4),0!=(t=e>>2)&&(e=t,r+=2),0!=(t=e>>1)&&(e=t,r+=1),r}function u(e){this.m=e}function l(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function p(e,t){return e&t}function d(e,t){return e|t}function g(e,t){return e^t}function m(e,t){return e&~t}function E(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function v(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function y(){}function _(e){return e}function w(e){this.r2=i(),this.q3=i(),r.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}u.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},u.prototype.revert=function(e){return e},u.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},u.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},u.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},l.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(r.ZERO)>0&&this.m.subTo(t,t),t},l.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},l.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var r=32767&e[t],i=r*this.mpl+((r*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[r=t+this.m.t]+=this.m.am(0,i,e,t,0,this.m.t);e[r]>=e.DV;)e[r]-=e.DV,e[++r]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},l.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},l.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},r.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},r.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},r.prototype.fromString=function(e,t){var i;if(16==t)i=4;else if(8==t)i=3;else if(256==t)i=8;else if(2==t)i=1;else if(32==t)i=5;else{if(4!=t)return void this.fromRadix(e,t);i=2}this.t=0,this.s=0;for(var n=e.length,s=!1,o=0;--n>=0;){var a=8==i?255&e[n]:c(e,n);a<0?"-"==e.charAt(n)&&(s=!0):(s=!1,0==o?this[this.t++]=a:o+i>this.DB?(this[this.t-1]|=(a&(1<<this.DB-o)-1)<<o,this[this.t++]=a>>this.DB-o):this[this.t-1]|=a<<o,(o+=i)>=this.DB&&(o-=this.DB))}8==i&&0!=(128&e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),s&&r.ZERO.subTo(this,this)},r.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},r.prototype.dlShiftTo=function(e,t){var r;for(r=this.t-1;r>=0;--r)t[r+e]=this[r];for(r=e-1;r>=0;--r)t[r]=0;t.t=this.t+e,t.s=this.s},r.prototype.drShiftTo=function(e,t){for(var r=e;r<this.t;++r)t[r-e]=this[r];t.t=Math.max(this.t-e,0),t.s=this.s},r.prototype.lShiftTo=function(e,t){var r,i=e%this.DB,n=this.DB-i,s=(1<<n)-1,o=Math.floor(e/this.DB),a=this.s<<i&this.DM;for(r=this.t-1;r>=0;--r)t[r+o+1]=this[r]>>n|a,a=(this[r]&s)<<i;for(r=o-1;r>=0;--r)t[r]=0;t[o]=a,t.t=this.t+o+1,t.s=this.s,t.clamp()},r.prototype.rShiftTo=function(e,t){t.s=this.s;var r=Math.floor(e/this.DB);if(r>=this.t)t.t=0;else{var i=e%this.DB,n=this.DB-i,s=(1<<i)-1;t[0]=this[r]>>i;for(var o=r+1;o<this.t;++o)t[o-r-1]|=(this[o]&s)<<n,t[o-r]=this[o]>>i;i>0&&(t[this.t-r-1]|=(this.s&s)<<n),t.t=this.t-r,t.clamp()}},r.prototype.subTo=function(e,t){for(var r=0,i=0,n=Math.min(e.t,this.t);r<n;)i+=this[r]-e[r],t[r++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i-=e.s;r<this.t;)i+=this[r],t[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<e.t;)i-=e[r],t[r++]=i&this.DM,i>>=this.DB;i-=e.s}t.s=i<0?-1:0,i<-1?t[r++]=this.DV+i:i>0&&(t[r++]=i),t.t=r,t.clamp()},r.prototype.multiplyTo=function(e,t){var i=this.abs(),n=e.abs(),s=i.t;for(t.t=s+n.t;--s>=0;)t[s]=0;for(s=0;s<n.t;++s)t[s+i.t]=i.am(0,n[s],t,s,0,i.t);t.s=0,t.clamp(),this.s!=e.s&&r.ZERO.subTo(t,t)},r.prototype.squareTo=function(e){for(var t=this.abs(),r=e.t=2*t.t;--r>=0;)e[r]=0;for(r=0;r<t.t-1;++r){var i=t.am(r,t[r],e,2*r,0,1);(e[r+t.t]+=t.am(r+1,2*t[r],e,2*r+1,i,t.t-r-1))>=t.DV&&(e[r+t.t]-=t.DV,e[r+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(r,t[r],e,2*r,0,1)),e.s=0,e.clamp()},r.prototype.divRemTo=function(e,t,n){var s=e.abs();if(!(s.t<=0)){var o=this.abs();if(o.t<s.t)return null!=t&&t.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=i());var a=i(),c=this.s,h=e.s,u=this.DB-f(s[s.t-1]);u>0?(s.lShiftTo(u,a),o.lShiftTo(u,n)):(s.copyTo(a),o.copyTo(n));var l=a.t,p=a[l-1];if(0!=p){var d=p*(1<<this.F1)+(l>1?a[l-2]>>this.F2:0),g=this.FV/d,m=(1<<this.F1)/d,E=1<<this.F2,v=n.t,y=v-l,_=null==t?i():t;for(a.dlShiftTo(y,_),n.compareTo(_)>=0&&(n[n.t++]=1,n.subTo(_,n)),r.ONE.dlShiftTo(l,_),_.subTo(a,a);a.t<l;)a[a.t++]=0;for(;--y>=0;){var w=n[--v]==p?this.DM:Math.floor(n[v]*g+(n[v-1]+E)*m);if((n[v]+=a.am(0,w,n,y,0,l))<w)for(a.dlShiftTo(y,_),n.subTo(_,n);n[v]<--w;)n.subTo(_,n)}null!=t&&(n.drShiftTo(l,t),c!=h&&r.ZERO.subTo(t,t)),n.t=l,n.clamp(),u>0&&n.rShiftTo(u,n),c<0&&r.ZERO.subTo(n,n)}}},r.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},r.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},r.prototype.exp=function(e,t){if(e>4294967295||e<1)return r.ONE;var n=i(),s=i(),o=t.convert(this),a=f(e)-1;for(o.copyTo(n);--a>=0;)if(t.sqrTo(n,s),(e&1<<a)>0)t.mulTo(s,o,n);else{var c=n;n=s,s=c}return t.revert(n)},r.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var r,i=(1<<t)-1,n=!1,s="",o=this.t,c=this.DB-o*this.DB%t;if(o-- >0)for(c<this.DB&&(r=this[o]>>c)>0&&(n=!0,s=a(r));o>=0;)c<t?(r=(this[o]&(1<<c)-1)<<t-c,r|=this[--o]>>(c+=this.DB-t)):(r=this[o]>>(c-=t)&i,c<=0&&(c+=this.DB,--o)),r>0&&(n=!0),n&&(s+=a(r));return n?s:"0"},r.prototype.negate=function(){var e=i();return r.ZERO.subTo(this,e),e},r.prototype.abs=function(){return this.s<0?this.negate():this},r.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var r=this.t;if(0!=(t=r-e.t))return this.s<0?-t:t;for(;--r>=0;)if(0!=(t=this[r]-e[r]))return t;return 0},r.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+f(this[this.t-1]^this.s&this.DM)},r.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(r.ZERO)>0&&e.subTo(t,t),t},r.prototype.modPowInt=function(e,t){var r;return r=e<256||t.isEven()?new u(t):new l(t),this.exp(e,r)},r.ZERO=h(0),r.ONE=h(1),y.prototype.convert=_,y.prototype.revert=_,y.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r)},y.prototype.sqrTo=function(e,t){e.squareTo(t)},w.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=i();return e.copyTo(t),this.reduce(t),t},w.prototype.revert=function(e){return e},w.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},w.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},w.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var b=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],S=(1<<26)/b[b.length-1];r.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},r.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),r=Math.pow(e,t),n=h(r),s=i(),o=i(),a="";for(this.divRemTo(n,s,o);s.signum()>0;)a=(r+o.intValue()).toString(e).substr(1)+a,s.divRemTo(n,s,o);return o.intValue().toString(e)+a},r.prototype.fromRadix=function(e,t){this.fromInt(0),null==t&&(t=10);for(var i=this.chunkSize(t),n=Math.pow(t,i),s=!1,o=0,a=0,h=0;h<e.length;++h){var f=c(e,h);f<0?"-"==e.charAt(h)&&0==this.signum()&&(s=!0):(a=t*a+f,++o>=i&&(this.dMultiply(n),this.dAddOffset(a,0),o=0,a=0))}o>0&&(this.dMultiply(Math.pow(t,o)),this.dAddOffset(a,0)),s&&r.ZERO.subTo(this,this)},r.prototype.fromNumber=function(e,t,i){if("number"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(r.ONE.shiftLeft(e-1),d,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(r.ONE.shiftLeft(e-1),this);else{var n=new Array,s=7&e;n.length=1+(e>>3),t.nextBytes(n),s>0?n[0]&=(1<<s)-1:n[0]=0,this.fromString(n,256)}},r.prototype.bitwiseTo=function(e,t,r){var i,n,s=Math.min(e.t,this.t);for(i=0;i<s;++i)r[i]=t(this[i],e[i]);if(e.t<this.t){for(n=e.s&this.DM,i=s;i<this.t;++i)r[i]=t(this[i],n);r.t=this.t}else{for(n=this.s&this.DM,i=s;i<e.t;++i)r[i]=t(n,e[i]);r.t=e.t}r.s=t(this.s,e.s),r.clamp()},r.prototype.changeBit=function(e,t){var i=r.ONE.shiftLeft(e);return this.bitwiseTo(i,t,i),i},r.prototype.addTo=function(e,t){for(var r=0,i=0,n=Math.min(e.t,this.t);r<n;)i+=this[r]+e[r],t[r++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i+=e.s;r<this.t;)i+=this[r],t[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<e.t;)i+=e[r],t[r++]=i&this.DM,i>>=this.DB;i+=e.s}t.s=i<0?-1:0,i>0?t[r++]=i:i<-1&&(t[r++]=this.DV+i),t.t=r,t.clamp()},r.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},r.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},r.prototype.multiplyLowerTo=function(e,t,r){var i,n=Math.min(this.t+e.t,t);for(r.s=0,r.t=n;n>0;)r[--n]=0;for(i=r.t-this.t;n<i;++n)r[n+this.t]=this.am(0,e[n],r,n,0,this.t);for(i=Math.min(e.t,t);n<i;++n)this.am(0,e[n],r,n,0,t-n);r.clamp()},r.prototype.multiplyUpperTo=function(e,t,r){--t;var i=r.t=this.t+e.t-t;for(r.s=0;--i>=0;)r[i]=0;for(i=Math.max(t-this.t,0);i<e.t;++i)r[this.t+i-t]=this.am(t-i,e[i],r,0,0,this.t+i-t);r.clamp(),r.drShiftTo(1,r)},r.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,r=this.s<0?e-1:0;if(this.t>0)if(0==t)r=this[0]%e;else for(var i=this.t-1;i>=0;--i)r=(t*r+this[i])%e;return r},r.prototype.millerRabin=function(e){var t=this.subtract(r.ONE),n=t.getLowestSetBit();if(n<=0)return!1;var s=t.shiftRight(n);(e=e+1>>1)>b.length&&(e=b.length);for(var o=i(),a=0;a<e;++a){o.fromInt(b[Math.floor(Math.random()*b.length)]);var c=o.modPow(s,this);if(0!=c.compareTo(r.ONE)&&0!=c.compareTo(t)){for(var h=1;h++<n&&0!=c.compareTo(t);)if(0==(c=c.modPowInt(2,this)).compareTo(r.ONE))return!1;if(0!=c.compareTo(t))return!1}}return!0},r.prototype.clone=function(){var e=i();return this.copyTo(e),e},r.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},r.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},r.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},r.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},r.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var r,i=this.DB-e*this.DB%8,n=0;if(e-- >0)for(i<this.DB&&(r=this[e]>>i)!=(this.s&this.DM)>>i&&(t[n++]=r|this.s<<this.DB-i);e>=0;)i<8?(r=(this[e]&(1<<i)-1)<<8-i,r|=this[--e]>>(i+=this.DB-8)):(r=this[e]>>(i-=8)&255,i<=0&&(i+=this.DB,--e)),0!=(128&r)&&(r|=-256),0==n&&(128&this.s)!=(128&r)&&++n,(n>0||r!=this.s)&&(t[n++]=r);return t},r.prototype.equals=function(e){return 0==this.compareTo(e)},r.prototype.min=function(e){return this.compareTo(e)<0?this:e},r.prototype.max=function(e){return this.compareTo(e)>0?this:e},r.prototype.and=function(e){var t=i();return this.bitwiseTo(e,p,t),t},r.prototype.or=function(e){var t=i();return this.bitwiseTo(e,d,t),t},r.prototype.xor=function(e){var t=i();return this.bitwiseTo(e,g,t),t},r.prototype.andNot=function(e){var t=i();return this.bitwiseTo(e,m,t),t},r.prototype.not=function(){for(var e=i(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},r.prototype.shiftLeft=function(e){var t=i();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},r.prototype.shiftRight=function(e){var t=i();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},r.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+E(this[e]);return this.s<0?this.t*this.DB:-1},r.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,r=0;r<this.t;++r)e+=v(this[r]^t);return e},r.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},r.prototype.setBit=function(e){return this.changeBit(e,d)},r.prototype.clearBit=function(e){return this.changeBit(e,m)},r.prototype.flipBit=function(e){return this.changeBit(e,g)},r.prototype.add=function(e){var t=i();return this.addTo(e,t),t},r.prototype.subtract=function(e){var t=i();return this.subTo(e,t),t},r.prototype.multiply=function(e){var t=i();return this.multiplyTo(e,t),t},r.prototype.divide=function(e){var t=i();return this.divRemTo(e,t,null),t},r.prototype.remainder=function(e){var t=i();return this.divRemTo(e,null,t),t},r.prototype.divideAndRemainder=function(e){var t=i(),r=i();return this.divRemTo(e,t,r),new Array(t,r)},r.prototype.modPow=function(e,t){var r,n,s=e.bitLength(),o=h(1);if(s<=0)return o;r=s<18?1:s<48?3:s<144?4:s<768?5:6,n=s<8?new u(t):t.isEven()?new w(t):new l(t);var a=new Array,c=3,p=r-1,d=(1<<r)-1;if(a[1]=n.convert(this),r>1){var g=i();for(n.sqrTo(a[1],g);c<=d;)a[c]=i(),n.mulTo(g,a[c-2],a[c]),c+=2}var m,E,v=e.t-1,y=!0,_=i();for(s=f(e[v])-1;v>=0;){for(s>=p?m=e[v]>>s-p&d:(m=(e[v]&(1<<s+1)-1)<<p-s,v>0&&(m|=e[v-1]>>this.DB+s-p)),c=r;0==(1&m);)m>>=1,--c;if((s-=c)<0&&(s+=this.DB,--v),y)a[m].copyTo(o),y=!1;else{for(;c>1;)n.sqrTo(o,_),n.sqrTo(_,o),c-=2;c>0?n.sqrTo(o,_):(E=o,o=_,_=E),n.mulTo(_,a[m],o)}for(;v>=0&&0==(e[v]&1<<s);)n.sqrTo(o,_),E=o,o=_,_=E,--s<0&&(s=this.DB-1,--v)}return n.revert(o)},r.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return r.ZERO;for(var i=e.clone(),n=this.clone(),s=h(1),o=h(0),a=h(0),c=h(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),t?(s.isEven()&&o.isEven()||(s.addTo(this,s),o.subTo(e,o)),s.rShiftTo(1,s)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),t?(a.isEven()&&c.isEven()||(a.addTo(this,a),c.subTo(e,c)),a.rShiftTo(1,a)):c.isEven()||c.subTo(e,c),c.rShiftTo(1,c);i.compareTo(n)>=0?(i.subTo(n,i),t&&s.subTo(a,s),o.subTo(c,o)):(n.subTo(i,n),t&&a.subTo(s,a),c.subTo(o,c))}return 0!=n.compareTo(r.ONE)?r.ZERO:c.compareTo(e)>=0?c.subtract(e):c.signum()<0?(c.addTo(e,c),c.signum()<0?c.add(e):c):c},r.prototype.pow=function(e){return this.exp(e,new y)},r.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),r=e.s<0?e.negate():e.clone();if(t.compareTo(r)<0){var i=t;t=r,r=i}var n=t.getLowestSetBit(),s=r.getLowestSetBit();if(s<0)return t;for(n<s&&(s=n),s>0&&(t.rShiftTo(s,t),r.rShiftTo(s,r));t.signum()>0;)(n=t.getLowestSetBit())>0&&t.rShiftTo(n,t),(n=r.getLowestSetBit())>0&&r.rShiftTo(n,r),t.compareTo(r)>=0?(t.subTo(r,t),t.rShiftTo(1,t)):(r.subTo(t,r),r.rShiftTo(1,r));return s>0&&r.lShiftTo(s,r),r},r.prototype.isProbablePrime=function(e){var t,r=this.abs();if(1==r.t&&r[0]<=b[b.length-1]){for(t=0;t<b.length;++t)if(r[0]==b[t])return!0;return!1}if(r.isEven())return!1;for(t=1;t<b.length;){for(var i=b[t],n=t+1;n<b.length&&i<S;)i*=b[n++];for(i=r.modInt(i);t<n;)if(i%b[t++]==0)return!1}return r.millerRabin(e)},r.prototype.square=function(){var e=i();return this.squareTo(e),e},r.prototype.Barrett=w,e.exports=r},function(e,t,r){"use strict";var i=r(0).inspect;function n(e,t){if(!e)throw new ERR_INTERNAL_ASSERTION(t)}function s(e){for(var t="",r=e.length,i="-"===e[0]?1:0;r>=i+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function o(e,t){if(n("string"==typeof t,"`thing` has to be of type string"),Array.isArray(e)){var r=e.length;return n(r>0,"At least one expected value needs to be specified"),e=e.map(e=>String(e)),r>2?`one of ${t} ${e.slice(0,r-1).join(", ")}, or `+e[r-1]:2===r?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}n.fail=function(e){throw new ERR_INTERNAL_ASSERTION(e)},t.ERR_INTERNAL_ASSERTION=class e extends Error{constructor(t){super(),Error.captureStackTrace(this,e);var r="This is caused by either a bug in ssh2-streams or incorrect usage of ssh2-streams internals.\nPlease open an issue with this stack trace at https://github.com/mscdex/ssh2-streams/issues\n";this.message=void 0===t?r:`${t}\n${r}`}};var a=Math.pow(2,32),c=function(){try{return new Function("return 2n ** 32n")()}catch(e){}}();function h(e,t){emitErrorNT(e,t),f(e)}function f(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}t.ERR_OUT_OF_RANGE=class e extends RangeError{constructor(t,r,o,h){super(),Error.captureStackTrace(this,e),n(r,'Missing "range" argument');var f,u=h?t:`The value of "${t}" is out of range.`;Number.isInteger(o)&&Math.abs(o)>a?f=s(String(o)):"bigint"==typeof o?(f=String(o),(o>c||o<-c)&&(f=s(f)),f+="n"):f=i(o),u+=` It must be ${r}. Received ${f}`,this.message=u}},t.ERR_INVALID_ARG_TYPE=class e extends TypeError{constructor(t,r,i){var s,a;if(super(),Error.captureStackTrace(this,e),n("string"==typeof t,"'name' must be a string"),"string"==typeof r&&r.startsWith("not ")?(s="must not be",r=r.replace(/^not /,"")):s="must be",t.endsWith(" argument"))a=`The ${t} ${s} ${o(r,"type")}`;else{var c=t.includes(".")?"property":"argument";a=`The "${t}" ${c} ${s} ${o(r,"type")}`}a+=". Received type "+typeof i,this.message=a}},t.validateNumber=function(e,t){if("number"!=typeof e)throw new ERR_INVALID_ARG_TYPE(t,"number",e)},t.destroyImpl=function(e,t){const r=this._readableState&&this._readableState.destroyed,i=this._writableState&&this._writableState.destroyed;return r||i?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(emitErrorNT,this,e)):process.nextTick(emitErrorNT,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,e=>{!t&&e?this._writableState?this._writableState.errorEmitted?process.nextTick(f,this):(this._writableState.errorEmitted=!0,process.nextTick(h,this,e)):process.nextTick(h,this,e):t?(process.nextTick(f,this),t(e)):process.nextTick(f,this)}),this)}},function(e,t,r){var i=r(6),n=r(57),s=r(2).Transform,o=r(0).inherits,a=r(0).inspect,c=r(58),h=r(15).Ber,f=r(4).readUInt32BE,u=r(4).writeUInt32BE,l=r(18),p=r(3),d=p.iv_inc,g=p.readString,m=p.readInt,E=p.DSASigBERToBare,v=p.ECDSASigASN1ToSSH,y=p.sigSSHToASN1,_=r(32).parseDERKey,w=l.CIPHER_INFO,b=l.HMAC_INFO,S=l.MESSAGE,k=(l.DYNAMIC_KEXDH_MESSAGE,l.KEXDH_MESSAGE,l.ALGORITHMS),T=l.DISCONNECT_REASON,A=l.CHANNEL_OPEN_FAILURE,U=l.SSH_TO_OPENSSL,B=l.TERMINAL_MODE,N=l.SIGNALS,R=(l.EDDSA_SUPPORTED,l.CURVE25519_SUPPORTED),P=l.BUGS,D=l.BUGGY_IMPLS,O=D.length,I=r(59).version,C=0,L=C++,H=C++,x=C++,F=C++,M=C++,K=C++,G=C++,W=C++,q=C++,X=C++,j=C++,V=n.Z_PARTIAL_FLUSH,Y={flush:V},Q=/\x00/g,z=Buffer.from("SSH-"),$=Buffer.allocUnsafe(0),Z=Buffer.allocUnsafe(9),J=Buffer.from([S.GLOBAL_REQUEST,0,0,0,21,107,101,101,112,97,108,105,118,101,64,111,112,101,110,115,115,104,46,99,111,109,1]),ee=Buffer.from([S.NEWKEYS]),te=Buffer.from([S.USERAUTH_SUCCESS]),re=Buffer.from([S.REQUEST_SUCCESS]),ie=Buffer.from([S.REQUEST_FAILURE]),ne=Buffer.from([B.TTY_OP_END]),se=Buffer.from([S.KEXDH_GEX_REQUEST,0,0,4,0,0,0,16,0,0,0,32,0]);function oe(e){}function ae(e){"object"==typeof e&&null!==e||(e={}),s.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this._needContinue=!1,this.bytesSent=this.bytesReceived=0,this.debug="function"==typeof e.debug?e.debug:oe,this.server=!0===e.server,this.maxPacketSize="number"==typeof e.maxPacketSize?e.maxPacketSize:35e3,this.remoteBugs=0,this.server&&(this.remoteBugs=P.BAD_DHGEX),this.readable=!0;var t=this,r=e.hostKeys;if(this.server&&("object"!=typeof r||null===r))throw new Error("hostKeys must be an object keyed on host key type");if(this.config={hostKeys:r,ident:"SSH-2.0-"+(e.ident||"ssh2js"+I+(this.server?"srv":"")),algorithms:{kex:k.KEX,kexBuf:k.KEX_BUF,serverHostKey:k.SERVER_HOST_KEY,serverHostKeyBuf:k.SERVER_HOST_KEY_BUF,cipher:k.CIPHER,cipherBuf:k.CIPHER_BUF,hmac:k.HMAC,hmacBuf:k.HMAC_BUF,compress:k.COMPRESS,compressBuf:k.COMPRESS_BUF}},this.config.ident.replace(Q,""),this.config.ident.length+2>255)throw new Error("ident too long");if("object"==typeof e.algorithms&&null!==e.algorithms){var n=e.algorithms;Array.isArray(n.kex)&&n.kex.length>0&&(this.config.algorithms.kex=n.kex,Buffer.isBuffer(n.kexBuf)||(n.kexBuf=Buffer.from(n.kex.join(","),"ascii")),this.config.algorithms.kexBuf=n.kexBuf),Array.isArray(n.serverHostKey)&&n.serverHostKey.length>0&&(this.config.algorithms.serverHostKey=n.serverHostKey,Buffer.isBuffer(n.serverHostKeyBuf)||(n.serverHostKeyBuf=Buffer.from(n.serverHostKey.join(","),"ascii")),this.config.algorithms.serverHostKeyBuf=n.serverHostKeyBuf),Array.isArray(n.cipher)&&n.cipher.length>0&&(this.config.algorithms.cipher=n.cipher,Buffer.isBuffer(n.cipherBuf)||(n.cipherBuf=Buffer.from(n.cipher.join(","),"ascii")),this.config.algorithms.cipherBuf=n.cipherBuf),Array.isArray(n.hmac)&&n.hmac.length>0&&(this.config.algorithms.hmac=n.hmac,Buffer.isBuffer(n.hmacBuf)||(n.hmacBuf=Buffer.from(n.hmac.join(","),"ascii")),this.config.algorithms.hmacBuf=n.hmacBuf),Array.isArray(n.compress)&&n.compress.length>0&&(this.config.algorithms.compress=n.compress,Buffer.isBuffer(n.compressBuf)||(n.compressBuf=Buffer.from(n.compress.join(","),"ascii")),this.config.algorithms.compressBuf=n.compressBuf)}this.reset(!0),this.on("end",(function(){t.readable=!1,t._state=void 0,t.reset(),t._state.outgoing.bufSeqno=void 0})),this.on("DISCONNECT",(function(e,r,i,n){!function(e,t,r,i,n){if(r!==T.BY_APPLICATION){var s=new Error(i||t);s.code=r,e.emit("error",s)}e.reset()}(t,e,r,i)})),this.on("KEXINIT",(function(e,r){!function(e,t,r){var i=e._state,n=i.outgoing;n.status===X?(e.debug("DEBUG: Received re-key request"),n.status=j,n.kexinit=void 0,me(e,s)):s();function s(){!0===function(e,t,r){var i,n,s,o,a,c=e._state,h=c.incoming,f=c.outgoing,u=e.debug;u("DEBUG: Comparing KEXINITs ...");var l=e.config.algorithms,p=l.kex;if(e.remoteBugs&P.BAD_DHGEX)for(var d=!1,g=p.length-1;g>=0;--g)-1!==p[g].indexOf("group-exchange")&&(d||(p=p.slice(),d=!0),p.splice(g,1));u("DEBUG: (local) KEX algorithms: "+p),u("DEBUG: (remote) KEX algorithms: "+t.algorithms.kex),e.server?(i=p,n=t.algorithms.kex):(i=t.algorithms.kex,n=p);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching key exchange algorithm"),(E=new Error("Handshake failed: no matching key exchange algorithm")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}var m=n[a];u("DEBUG: KEX algorithm: "+m),!r||t.algorithms.kex.length&&m===t.algorithms.kex[0]||(h.ignoreNext=!0);u("DEBUG: (local) Host key formats: "+l.serverHostKey),u("DEBUG: (remote) Host key formats: "+t.algorithms.srvHostKey),e.server?(i=l.serverHostKey,n=t.algorithms.srvHostKey):(i=t.algorithms.srvHostKey,n=l.serverHostKey);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching host key format"),(E=new Error("Handshake failed: no matching host key format")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}c.hostkeyFormat=n[a],u("DEBUG: Host key format: "+c.hostkeyFormat),u("DEBUG: (local) Client->Server ciphers: "+l.cipher),u("DEBUG: (remote) Client->Server ciphers: "+t.algorithms.cs.encrypt),e.server?(i=l.cipher,n=t.algorithms.cs.encrypt):(i=t.algorithms.cs.encrypt,n=l.cipher);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching Client->Server cipher"),(E=new Error("Handshake failed: no matching client->server cipher")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?h.decrypt.type=n[a]:f.encrypt.type=n[a];u("DEBUG: Client->Server Cipher: "+s),u("DEBUG: (local) Server->Client ciphers: "+l.cipher),u("DEBUG: (remote) Server->Client ciphers: "+t.algorithms.sc.encrypt),e.server?(i=l.cipher,n=t.algorithms.sc.encrypt):(i=t.algorithms.sc.encrypt,n=l.cipher);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching Server->Client cipher"),(E=new Error("Handshake failed: no matching server->client cipher")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?f.encrypt.type=n[a]:h.decrypt.type=n[a];u("DEBUG: Server->Client Cipher: "+s),u("DEBUG: (local) Client->Server HMAC algorithms: "+l.hmac),u("DEBUG: (remote) Client->Server HMAC algorithms: "+t.algorithms.cs.mac),e.server?(i=l.hmac,n=t.algorithms.cs.mac):(i=t.algorithms.cs.mac,n=l.hmac);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching Client->Server HMAC algorithm"),(E=new Error("Handshake failed: no matching client->server HMAC")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?h.hmac.type=n[a]:f.hmac.type=n[a];u("DEBUG: Client->Server HMAC algorithm: "+s),u("DEBUG: (local) Server->Client HMAC algorithms: "+l.hmac),u("DEBUG: (remote) Server->Client HMAC algorithms: "+t.algorithms.sc.mac),e.server?(i=l.hmac,n=t.algorithms.sc.mac):(i=t.algorithms.sc.mac,n=l.hmac);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching Server->Client HMAC algorithm"),(E=new Error("Handshake failed: no matching server->client HMAC")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?f.hmac.type=n[a]:h.hmac.type=n[a];u("DEBUG: Server->Client HMAC algorithm: "+s),u("DEBUG: (local) Client->Server compression algorithms: "+l.compress),u("DEBUG: (remote) Client->Server compression algorithms: "+t.algorithms.cs.compress),e.server?(i=l.compress,n=t.algorithms.cs.compress):(i=t.algorithms.cs.compress,n=l.compress);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){return u("DEBUG: No matching Client->Server compression algorithm"),(E=new Error("Handshake failed: no matching client->server compression algorithm")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?h.decompress.type=n[a]:f.compress.type=n[a];u("DEBUG: Client->Server compression algorithm: "+s),u("DEBUG: (local) Server->Client compression algorithms: "+l.compress),u("DEBUG: (remote) Server->Client compression algorithms: "+t.algorithms.sc.compress),e.server?(i=l.compress,n=t.algorithms.sc.compress):(i=t.algorithms.sc.compress,n=l.compress);for(a=0,o=n.length;a<o&&-1===i.indexOf(n[a]);++a);if(a===o){var E;return u("DEBUG: No matching Server->Client compression algorithm"),(E=new Error("Handshake failed: no matching server->client compression algorithm")).level="handshake",e.emit("error",E),e.disconnect(T.KEY_EXCHANGE_FAILED),!1}s=e.server?f.compress.type=n[a]:h.decompress.type=n[a];return u("DEBUG: Server->Client compression algorithm: "+s),c.kex=new Te(m),c.kex.generateKeys(),f.pubkey=c.kex.getPublicKey(),!0}(e,t,r)&&(e.server?i.incoming.expectedPacket=i.kex.pktInit:"groupex"===i.kex.type?function(e){e._state.incoming.expectedPacket="KEXDH_GEX_GROUP",e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_REQUEST"),_e(e,se,void 0,!0)}(e):Ee(e))}}(t,e,r)})),this.on("NEWKEYS",(function(){ce(t)})),this.server?this.on("KEXDH_INIT",(function(e){!function(e,t){!function(e,t){var r=e._state,n=r.outgoing,s=r.incoming,o=e.config.hostKeys[r.hostkeyFormat];Array.isArray(o)&&(o=o[0]);var a=o.getPublicSSH(),c=o.type;t=r.kex.convertPublicKey(t);var h=r.kex.computeSecret(t);if(h instanceof Error)return h.message="Error while computing DH secret ("+r.kex.type+"): "+h.message,h.level="handshake",e.emit("error",h),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var f,l,p,d,g=i.createHash(r.kex.hash),m=Buffer.byteLength(s.identRaw),E=Buffer.byteLength(e.config.ident),v=s.kexinit.length,y=n.kexinit.length,_=a.length,w=t.length,b=n.pubkey.length,k=h.length,A=m+E+v+y+_+w+b+k+32,U=r.kex.getDHParams();U&&(p=U.prime,d=U.generator,f=p.length,l=d.length,A+=12,A+=8,A+=f,A+=l);var B=0,N=Buffer.allocUnsafe(A);u(N,m,B),B+=4,N.write(s.identRaw,B,"utf8"),u(N,E,B+=m),B+=4,N.write(e.config.ident,B,"utf8"),u(N,v,B+=E),B+=4,s.kexinit.copy(N,B),B+=v,s.kexinit=void 0,u(N,y,B),B+=4,n.kexinit.copy(N,B),B+=y,n.kexinit=void 0,u(N,_,B),B+=4,a.copy(N,B),B+=_,U&&(se.slice(1).copy(N,B),u(N,f,B+=12),B+=4,p.copy(N,B),u(N,l,B+=f),B+=4,d.copy(N,B),B+=l);u(N,w,B),B+=4,t.copy(N,B),u(N,b,B+=w),B+=4,n.pubkey.copy(N,B),u(N,k,B+=b),B+=4,h.copy(N,B),n.exchangeHash=g.update(N).digest(),void 0===n.sessionId&&(n.sessionId=n.exchangeHash);n.kexsecret=h;var R=o.sign(n.exchangeHash);if(R instanceof Error)return R.message="Error while signing data with host key ("+c+"): "+R.message,R.level="handshake",e.emit("error",R),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;if(!1===(R=Se(R,c)))return R.message="Error while converting handshake signature",R.level="handshake",e.emit("error",R),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var P=4+c.length+4+R.length,D=Buffer.allocUnsafe(5+_+4+b+4+P);D[B=0]=S[r.kex.pktReply],++B,u(D,_,B),B+=4,a.copy(D,B),u(D,b,B+=_),B+=4,n.pubkey.copy(D,B),u(D,P,B+=b),B+=4,u(D,c.length,B),B+=4,D.write(c,B,c.length,"ascii"),B+=c.length,u(D,R.length,B),B+=4,R.copy(D,B),r.incoming.expectedPacket="NEWKEYS",e.debug("DEBUG: Outgoing: Writing "+r.kex.pktReply),_e(e,D,void 0,!0),n.sentNEWKEYS=!0,e.debug("DEBUG: Outgoing: Writing NEWKEYS"),_e(e,ee,void 0,!0)}(e,t)}(t,e)})):this.on("KEXDH_REPLY",(function(e){!function e(t,r,n){var s=t._state,o=s.incoming,a=s.outgoing,c=t.debug;if(void 0===n){o.expectedPacket="NEWKEYS",a.sentNEWKEYS=!1,c("DEBUG: Checking host key format");var h=g(r.hostkey,0,"ascii",t);if(!1===h)return!1;if(r.hostkey_format!==s.hostkeyFormat||r.hostkey_format!==h)return c("DEBUG: Host key format mismatch"),t.disconnect(T.KEY_EXCHANGE_FAILED),t.reset(),(H=new Error("Handshake failed: host key format mismatch")).level="handshake",t.emit("error",H),!1;c("DEBUG: Checking signature format");var f=g(r.sig,0,"ascii",t);if(!1===f)return!1;if(r.sig_format!==f)return c("DEBUG: Signature format mismatch"),t.disconnect(T.KEY_EXCHANGE_FAILED),t.reset(),(H=new Error("Handshake failed: signature format mismatch")).level="handshake",t.emit("error",H),!1}if(a.status===q){if(void 0===n){c("DEBUG: Verifying host fingerprint");var l=!0,p=t.emit("fingerprint",r.hostkey,(function(i){void 0===n&&(n=!!i,l||e(t,r,n))}));if(l=!1,p&&void 0===n)return}if(void 0===n)c("DEBUG: Host accepted by default (no verification)");else{if(!0!==n)return c("DEBUG: Host denied via fingerprint verification"),t.disconnect(T.KEY_EXCHANGE_FAILED),t.reset(),(H=new Error("Handshake failed: host fingerprint verification failed")).level="handshake",t.emit("error",H),!1;c("DEBUG: Host accepted (verified)")}}if(r.pubkey=s.kex.convertPublicKey(r.pubkey),r.secret=s.kex.computeSecret(r.pubkey),r.secret instanceof Error)return r.secret.message="Error while computing DH secret ("+s.kex.type+"): "+r.secret.message,r.secret.level="handshake",t.emit("error",r.secret),t.disconnect(T.KEY_EXCHANGE_FAILED),!1;var d,m,E,v,w=i.createHash(s.kex.hash),b=Buffer.byteLength(t.config.ident),S=Buffer.byteLength(o.identRaw),k=a.kexinit.length,A=o.kexinit.length,U=r.hostkey.length,B=a.pubkey.length,N=r.pubkey.length,R=r.secret.length,P=b+S+k+A+U+B+N+R+32,D=s.kex.getDHParams();D&&(E=D.prime,v=D.generator,d=E.length,m=v.length,P+=12,P+=8,P+=d,P+=m);var O=0,I=Buffer.allocUnsafe(P);u(I,b,O),O+=4,I.write(t.config.ident,O,"utf8"),u(I,S,O+=b),O+=4,I.write(o.identRaw,O,"utf8"),u(I,k,O+=S),O+=4,a.kexinit.copy(I,O),O+=k,a.kexinit=void 0,u(I,A,O),O+=4,o.kexinit.copy(I,O),O+=A,o.kexinit=void 0,u(I,U,O),O+=4,r.hostkey.copy(I,O),O+=U,D&&(se.slice(1).copy(I,O),u(I,d,O+=12),O+=4,E.copy(I,O),u(I,m,O+=d),O+=4,v.copy(I,O),O+=m);u(I,B,O),O+=4,a.pubkey.copy(I,O),u(I,N,O+=B),O+=4,r.pubkey.copy(I,O),u(I,R,O+=N),O+=4,r.secret.copy(I,O),a.exchangeHash=w.update(I).digest();var C=g(r.sig,r.sig._pos,t);if(!1===C||!(C=y(C,r.sig_format,t)))return!1;var L=_(r.hostkey,r.sig_format);if(L instanceof Error)return!1;if(c("DEBUG: Verifying signature"),!0!==L.verify(a.exchangeHash,C)){var H;return c("DEBUG: Signature verification failed"),t.disconnect(T.KEY_EXCHANGE_FAILED),t.reset(),(H=new Error("Handshake failed: signature verification failed")).level="handshake",t.emit("error",H),!1}void 0===a.sessionId&&(a.sessionId=a.exchangeHash);a.kexsecret=r.secret,c("DEBUG: Outgoing: Writing NEWKEYS"),a.status===j?_e(t,ee,void 0,!0):_e(t,ee);a.sentNEWKEYS=!0,void 0!==n&&void 0===o.expectedPacket&&ce(t)}(t,e)})).on("KEXDH_GEX_GROUP",(function(e,r){!function(e,t,r){var i=e._state,n=i.outgoing;i.kex.setDHParams(t,r),i.kex.generateKeys(),n.pubkey=i.kex.getPublicKey(),Ee(e)}(t,e,r)})),this.server&&("string"==typeof e.greeting&&e.greeting.length&&("\r\n"===e.greeting.slice(-2)?this.push(e.greeting):this.push(e.greeting+"\r\n")),"string"==typeof e.banner&&e.banner.length&&("\r\n"===e.banner.slice(-2)?this.banner=e.banner:this.banner=e.banner+"\r\n")),this.debug("DEBUG: Local ident: "+a(this.config.ident)),this.push(this.config.ident+"\r\n"),this._state.incoming.expectedPacket="KEXINIT"}function ce(e){var t=e._state,r=t.outgoing,s=t.incoming;if(s.expectedPacket=void 0,r.sentNEWKEYS){var o,a,c=r.kexsecret.length,h=r.encrypt.info=w[r.encrypt.type],f=0,l=t.kex.hash,p=Buffer.allocUnsafe(4+c);if(t.authsQueue=[],u(p,c,f),f+=4,r.kexsecret.copy(p,f),r.kexsecret=void 0,h.stream)o=$;else{for(o=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"B":"A","ascii").update(r.sessionId).digest();o.length<h.ivLen;)o=Buffer.concat([o,i.createHash(l).update(p).update(r.exchangeHash).update(o).digest()]);o.length>h.ivLen&&(o=o.slice(0,h.ivLen))}for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"D":"C","ascii").update(r.sessionId).digest();a.length<h.keyLen;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);if(a.length>h.keyLen&&(a=a.slice(0,h.keyLen)),h.authLen>0)r.encrypt.iv=o,r.encrypt.key=a,r.encrypt.instance=!0;else{var d=U[r.encrypt.type];r.encrypt.instance=i.createCipheriv(d,a,o),r.encrypt.instance.setAutoPadding(!1)}var g=s.decrypt.info=w[s.decrypt.type];if(g.stream)o=$;else{for(o=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"A":"B","ascii").update(r.sessionId).digest();o.length<g.ivLen;)o=Buffer.concat([o,i.createHash(l).update(p).update(r.exchangeHash).update(o).digest()]);o.length>g.ivLen&&(o=o.slice(0,g.ivLen))}for(s.decrypt.buf=Buffer.allocUnsafe(g.blockLen),a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"C":"D","ascii").update(r.sessionId).digest();a.length<g.keyLen;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>g.keyLen&&(a=a.slice(0,g.keyLen));var m,E=U[s.decrypt.type];s.decrypt.instance=i.createDecipheriv(E,a,o),s.decrypt.instance.setAutoPadding(!1),s.decrypt.iv=o,s.decrypt.key=a,h.discardLen>0&&(m=Buffer.alloc(h.discardLen),r.encrypt.instance.update(m)),g.discardLen>0&&(m&&m.length===g.discardLen||(m=Buffer.alloc(h.discardLen)),s.decrypt.instance.update(m));var v=r.hmac.info=b[r.hmac.type],y=s.hmac.info=b[s.hmac.type];if(0===h.authLen){for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"F":"E","ascii").update(r.sessionId).digest();a.length<v.len;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>v.len&&(a=a.slice(0,v.len)),r.hmac.key=a}else r.hmac.key=void 0;if(0===g.authLen){for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"E":"F","ascii").update(r.sessionId).digest();a.length<y.len;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>y.len&&(a=a.slice(0,y.len)),s.hmac.key=a}else s.hmac.key=void 0;var _=g.authLen||s.hmac.info.actualLen;if(s.hmac.buf&&s.hmac.buf.length===_||(s.hmac.buf=Buffer.allocUnsafe(_)),r.exchangeHash=void 0,"zlib"===r.compress.type?(r.compress.instance=n.createDeflate(Y),r.compress.queue=[]):"none"===r.compress.type&&(r.compress.instance=!1,r.compress.queue=null),"zlib"===s.decompress.type?s.decompress.instance=n.createInflate(Y):"none"===s.decompress.type&&(s.decompress.instance=!1),e.bytesSent=e.bytesReceived=0,r.status===j){r.status=X;var S=r.rekeyQueue,k=S.length,T=0;for(r.rekeyQueue=[];T<k;++T)Buffer.isBuffer(S[T])?_e(e,S[T]):_e(e,S[T][0],S[T][1]);k=(S=s.rekeyQueue).length,T=0,s.rekeyQueue=[];for(var A=s.seqno;T<k;++T){if(s.seqno=S[T][0],s.payload=S[T][1],!1===fe(e))return;if(s.status===L)return}s.seqno=A}else r.status=X,s.status===M&&(e.debug("DEBUG: Parser: IN_PACKETBEFORE (update) (expecting "+g.blockLen+")"),de(e,2,g.blockLen,s.decrypt.buf)),e.emit("ready")}}function he(e,t){var r=e._state.kex;if(r)switch(t){case 30:return r.pktInit;case 31:switch(r.type){case"group":return"KEXDH_REPLY";case"groupex":return"KEXDH_GEX_GROUP";default:return"KEXECDH_REPLY"}break;case 33:if("groupex"===r.type)return"KEXDH_GEX_REPLY"}return S[t]}function fe(e,t){var r,i,s,o,a,c,h,l,p,d,E,v,_,w,b=e._state.incoming,k=e._state.outgoing,U=b.payload,N=b.seqno;if(++b.seqno>4294967295&&(b.seqno=0),b.ignoreNext)return e.debug("DEBUG: Parser: Packet ignored"),void(b.ignoreNext=!1);var R=U[0];if(void 0===R)return!1;if(k.status!==X&&he(e,R)!==b.expectedPacket&&R<1&&R>4){e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+b.expectedPacket+" but got: "+he(e,R)),e.disconnect(T.PROTOCOL_ERROR);var D=new Error("Received unexpected packet");return D.level="protocol",e.emit("error",D),!1}if(R===S.CHANNEL_DATA){if(!1===(a=m(U,1,e,t)))return!1;if(!1===(c=g(U,5,e,t,32768)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_DATA ("+a+")"),e.emit("CHANNEL_DATA:"+a,c)}else if(R===S.CHANNEL_EXTENDED_DATA){if(!1===(a=m(U,1,e,t)))return!1;var O=m(U,5,e,t);if(!1===O)return!1;if(!1===(c=g(U,9,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EXTENDED_DATA ("+a+")"),e.emit("CHANNEL_EXTENDED_DATA:"+a,O,c)}else if(R===S.CHANNEL_WINDOW_ADJUST){if(!1===(a=m(U,1,e,t)))return!1;var I=m(U,5,e,t);if(!1===I)return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_WINDOW_ADJUST ("+a+", "+I+")"),e.emit("CHANNEL_WINDOW_ADJUST:"+a,I)}else if(R===S.CHANNEL_SUCCESS){if(!1===(a=m(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_SUCCESS ("+a+")"),e.emit("CHANNEL_SUCCESS:"+a)}else if(R===S.CHANNEL_FAILURE){if(!1===(a=m(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_FAILURE ("+a+")"),e.emit("CHANNEL_FAILURE:"+a)}else if(R===S.CHANNEL_EOF){if(!1===(a=m(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EOF ("+a+")"),e.emit("CHANNEL_EOF:"+a)}else if(R===S.CHANNEL_OPEN){var C,L=g(U,1,"ascii",e,t);if(!1===L)return!1;if(!1===(p=m(U,U._pos,e,t)))return!1;if(!1===(d=m(U,U._pos+=4,e,t)))return!1;if(!1===(E=m(U,U._pos+=4,e,t)))return!1;if(e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_OPEN ("+p+", "+L+")"),"forwarded-tcpip"===L||"direct-tcpip"===L){var H=g(U,U._pos+=4,"ascii",e,t);if(!1===H)return!1;var x=m(U,U._pos,e,t);if(!1===x)return!1;if(!1===(h=g(U,U._pos+=4,"ascii",e,t)))return!1;if(!1===(l=m(U,U._pos,e,t)))return!1;C={type:L,sender:p,window:d,packetSize:E,data:{destIP:H,destPort:x,srcIP:h,srcPort:l}}}else if("forwarded-streamlocal@openssh.com"===L||"direct-streamlocal@openssh.com"===L){if(!1===(w=g(U,U._pos+=4,"utf8",e,t)))return!1;C={type:L,sender:p,window:d,packetSize:E,data:{socketPath:w}}}else if("x11"===L){if(!1===(h=g(U,U._pos+=4,"ascii",e,t)))return!1;if(!1===(l=m(U,U._pos,e,t)))return!1;C={type:L,sender:p,window:d,packetSize:E,data:{srcIP:h,srcPort:l}}}else C={type:L,sender:p,window:d,packetSize:E,data:{}};e.emit("CHANNEL_OPEN",C)}else if(R===S.CHANNEL_OPEN_CONFIRMATION){if(!1===(v=m(U,1,e,t)))return!1;if(!1===(p=m(U,5,e,t)))return!1;if(!1===(d=m(U,9,e,t)))return!1;if(!1===(E=m(U,13,e,t)))return!1;o={recipient:v,sender:p,window:d,packetSize:E},U.length>17&&(o.data=U.slice(17)),e.emit("CHANNEL_OPEN_CONFIRMATION:"+o.recipient,o)}else if(R===S.CHANNEL_OPEN_FAILURE){if(!1===(v=m(U,1,e,t)))return!1;var F=m(U,5,e,t);if(!1===F)return!1;if(!1===(_=g(U,9,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"utf8",e,t)))return!1;U._pos=9,o={recipient:v,reasonCode:F,reason:A[F],description:_,lang:i},e.emit("CHANNEL_OPEN_FAILURE:"+o.recipient,o)}else if(R===S.CHANNEL_CLOSE){if(!1===(a=m(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_CLOSE ("+a+")"),e.emit("CHANNEL_CLOSE:"+a)}else if(R===S.IGNORE);else if(R===S.DISCONNECT){var M=m(U,1,e,t);if(!1===M)return!1;var K=T[M];if(!1===(_=g(U,5,"utf8",e,t)))return!1;U._pos<U.length&&(i=g(U,U._pos,"ascii",e,t)),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: DISCONNECT ("+K+")"),e.emit("DISCONNECT",K,M,_,i)}else if(R===S.DEBUG){if(!1===(s=g(U,2,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"ascii",e,t)))return!1;e.emit("DEBUG",s,i)}else if(R===S.NEWKEYS)e.emit("NEWKEYS");else if(R===S.SERVICE_REQUEST){if(!1===(r=g(U,1,"ascii",e,t)))return!1;e.emit("SERVICE_REQUEST",r)}else if(R===S.SERVICE_ACCEPT){if(!1===(r=g(U,1,"ascii",e,t)))return!1;e.emit("SERVICE_ACCEPT",r)}else if(R===S.USERAUTH_REQUEST){var G=g(U,1,"utf8",e,t);if(!1===G)return!1;var W=g(U,U._pos,"ascii",e,t);if(!1===W)return!1;var q,j,V=g(U,U._pos,"ascii",e,t);if(!1===V)return!1;if("password"===V){if(!1===(q=g(U,U._pos+1,"utf8",e,t)))return!1}else if("publickey"===V||"hostbased"===V){var Q,z,$,Z,J,ee,te;if("publickey"===V){if(void 0===(Q=U[U._pos++]))return!1;Q=0!==Q}if(!1===(z=g(U,U._pos,"ascii",e,t)))return!1;if(!1===($=g(U,U._pos,e,t)))return!1;if(Q||"hostbased"===V){if("hostbased"===V){if(!1===(ee=g(U,U._pos,"ascii",e,t)))return!1;if(!1===(te=g(U,U._pos,"utf8",e,t)))return!1}var re=U._pos;if(!1===(Z=g(U,re,e,t)))return!1;if(Z.length>4+z.length+4&&Z.toString("ascii",4,4+z.length)===z&&(Z=Z.slice(4+z.length+4)),!1===(Z=y(Z,z,e,t)))return!1;J=Buffer.allocUnsafe(4+k.sessionId.length+re),u(J,k.sessionId.length,0),k.sessionId.copy(J,4),U.copy(J,4+k.sessionId.length,0,re)}else j="publickey -- check";q={keyAlgo:z,key:$,signature:Z,blob:J,localHostname:ee,localUsername:te}}else if("keyboard-interactive"===V){var ie=m(U,U._pos,e,t);if(!1===ie)return!1;if(!1===(q=g(U,U._pos+4+ie,"utf8",e,t)))return!1}else"none"!==V&&(q=U.slice(U._pos));void 0===j&&(j=V),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: USERAUTH_REQUEST ("+j+")"),e._state.authsQueue.push(V),e.emit("USERAUTH_REQUEST",G,W,V,q)}else if(R===S.USERAUTH_SUCCESS)"zlib@openssh.com"===k.compress.type&&(k.compress.instance=n.createDeflate(Y),k.compress.queue=[]),"zlib@openssh.com"===b.decompress.type&&(b.decompress.instance=n.createInflate(Y)),e._state.authsQueue.shift(),e.emit("USERAUTH_SUCCESS");else if(R===S.USERAUTH_FAILURE){var ne=g(U,1,"ascii",e,t);if(!1===ne)return!1;var se=U[U._pos];if(void 0===se)return!1;se=0!==se,ne=ne.split(","),e._state.authsQueue.shift(),e.emit("USERAUTH_FAILURE",ne,se)}else if(R===S.USERAUTH_BANNER){if(!1===(s=g(U,1,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"utf8",e,t)))return!1;e.emit("USERAUTH_BANNER",s,i)}else if(R===S.GLOBAL_REQUEST){var oe=g(U,1,"ascii",e,t);if(!1===oe)return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST"),!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST ("+oe+")");var ae,ce=U[U._pos++];if(void 0===ce)return!1;if(ce=0!==ce,"tcpip-forward"===oe||"cancel-tcpip-forward"===oe){var fe=g(U,U._pos,"ascii",e,t);if(!1===fe)return!1;var le=m(U,U._pos,e,t);if(!1===le)return!1;ae={bindAddr:fe,bindPort:le}}else if("streamlocal-forward@openssh.com"===oe||"cancel-streamlocal-forward@openssh.com"===oe){if(!1===(w=g(U,U._pos,"utf8",e,t)))return!1;ae={socketPath:w}}else"no-more-sessions@openssh.com"===oe||(ae=U.slice(U._pos));e.emit("GLOBAL_REQUEST",oe,ce,ae)}else if(R===S.REQUEST_SUCCESS)U.length>1?e.emit("REQUEST_SUCCESS",U.slice(1)):e.emit("REQUEST_SUCCESS");else if(R===S.REQUEST_FAILURE)e.emit("REQUEST_FAILURE");else if(R===S.UNIMPLEMENTED);else{if(R===S.KEXINIT)return function(e,t){var r,i=e._state.incoming,n=i.payload,s={algorithms:{kex:void 0,srvHostKey:void 0,cs:{encrypt:void 0,mac:void 0,compress:void 0},sc:{encrypt:void 0,mac:void 0,compress:void 0}},languages:{cs:void 0,sc:void 0}};if(!1===(r=ge(n,17,e,t)))return!1;if(s.algorithms.kex=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.srvHostKey=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.cs.encrypt=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.sc.encrypt=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.cs.mac=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.sc.mac=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.cs.compress=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.algorithms.sc.compress=r,!1===(r=ge(n,n._pos,e,t)))return!1;if(s.languages.cs=r,!1===(r=ge(n,n._pos,e,t)))return!1;s.languages.sc=r;var o=n._pos<n.length&&1===n[n._pos];i.kexinit=n,e.emit("KEXINIT",s,o)}(e,t);if(R===S.CHANNEL_REQUEST)return function(e,t){var r,i,n,s,o,a,c,h=e._state.incoming.payload,u=m(h,1,e,t);if(!1===u)return!1;var l=g(h,5,"ascii",e,t);if(!1===l)return!1;if("exit-status"===l){var p=m(h,++h._pos,e,t);if(!1===p)return!1;r={recipient:u,request:l,wantReply:!1,code:p}}else if("exit-signal"===l){var d;if(e.remoteBugs&P.OLD_EXIT){if(!1===(c=m(h,++h._pos,e,t)))return!1;switch(c){case 1:c="HUP";break;case 2:c="INT";break;case 3:c="QUIT";break;case 6:c="ABRT";break;case 9:c="KILL";break;case 14:c="ALRM";break;case 15:c="TERM";break;default:c="UNKNOWN ("+c+")"}d=!1}else{if(!1===(c=g(h,++h._pos,"ascii",e,t)))return!1;if(void 0===(d=h[h._pos++]))return!1;d=0!==d}var E=g(h,h._pos,"utf8",e,t);if(!1===E)return!1;var v=g(h,h._pos,"utf8",e,t);if(!1===v)return!1;r={recipient:u,request:l,wantReply:!1,signal:c,coredump:d,description:E,lang:v}}else if("pty-req"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var y=g(h,h._pos,"ascii",e,t);if(!1===y)return!1;if(!1===(i=m(h,h._pos,e,t)))return!1;if(!1===(n=m(h,h._pos+=4,e,t)))return!1;if(!1===(s=m(h,h._pos+=4,e,t)))return!1;if(!1===(o=m(h,h._pos+=4,e,t)))return!1;var _=g(h,h._pos+=4,e,t);if(!1===_)return!1;_=function(e){for(var t,r={},i=0,n=e.length;i<n&&!((t=e[i])===B.TTY_OP_END||void 0===B[t]||i+5>n);i+=5)r[B[t]]=f(e,i+1);return r}(_),r={recipient:u,request:l,wantReply:a,term:y,cols:i,rows:n,width:s,height:o,modes:_}}else if("window-change"===l){if(!1===(i=m(h,++h._pos,e,t)))return!1;if(!1===(n=m(h,h._pos+=4,e,t)))return!1;if(!1===(s=m(h,h._pos+=4,e,t)))return!1;if(!1===(o=m(h,h._pos+=4,e,t)))return!1;r={recipient:u,request:l,wantReply:!1,cols:i,rows:n,width:s,height:o}}else if("x11-req"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var w=h[h._pos++];if(void 0===w)return!1;w=0!==w;var b=g(h,h._pos,"ascii",e,t);if(!1===b)return!1;var S=g(h,h._pos,"binary",e,t);if(!1===S)return!1;var k=m(h,h._pos,e,t);if(!1===k)return!1;r={recipient:u,request:l,wantReply:a,single:w,protocol:b,cookie:S,screen:k}}else if("env"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var T=g(h,h._pos,"utf8",e,t);if(!1===T)return!1;var A=g(h,h._pos,"utf8",e,t);if(!1===A)return!1;r={recipient:u,request:l,wantReply:a,key:T,val:A}}else if("shell"===l){if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}else if("exec"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var U=g(h,h._pos,"utf8",e,t);if(!1===U)return!1;r={recipient:u,request:l,wantReply:a,command:U}}else if("subsystem"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var N=g(h,h._pos,"utf8",e,t);if(!1===N)return!1;r={recipient:u,request:l,wantReply:a,subsystem:N}}else if("signal"===l){if(!1===(c=g(h,++h._pos,"ascii",e,t)))return!1;r={recipient:u,request:l,wantReply:!1,signal:"SIG"+c}}else if("xon-xoff"===l){var R=h[++h._pos];if(void 0===R)return!1;r={recipient:u,request:l,wantReply:!1,clientControl:R=0!==R}}else if("auth-agent-req@openssh.com"===l){if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}else{if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_REQUEST ("+u+", "+l+")"),e.emit("CHANNEL_REQUEST:"+u,r)}(e,t);if(R>=30&&R<=49)return function(e,t,r){var i=e._state,n=i.incoming,s=n.payload;if(i.outgoing.status===X||he(e,t)!==n.expectedPacket){return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+n.expectedPacket+" but got: "+he(e,t)),e.disconnect(T.PROTOCOL_ERROR),(o=new Error("Received unexpected packet")).level="protocol",e.emit("error",o),!1}if("groupex"===i.kex.type){var o;if(e.server)return e.disconnect(T.PROTOCOL_ERROR),(o=new Error("DH group exchange not supported by server")).level="handshake",e.emit("error",o),!1;if(t===S.KEXDH_GEX_GROUP){var a=g(s,1,e,r);if(!1===a)return!1;var c=g(s,s._pos,e,r);if(!1===c)return!1;e.emit("KEXDH_GEX_GROUP",a,c)}else if(t===S.KEXDH_GEX_REPLY)return ue(e,r)}else if(t===S.KEXDH_INIT){var h=g(s,1,e,r);if(!1===h)return!1;e.emit("KEXDH_INIT",h)}else if(t===S.KEXDH_REPLY)return ue(e,r)}(e,R,t);if(R>=60&&R<=70)return function(e,t,r){var i,n,s,o=e._state,a=o.authsQueue[0],c=o.incoming.payload;if("password"===a){if(t===S.USERAUTH_PASSWD_CHANGEREQ){if(!1===(i=g(c,1,"utf8",e,r)))return!1;if(!1===(n=g(c,c._pos,"utf8",e,r)))return!1;e.emit("USERAUTH_PASSWD_CHANGEREQ",i,n)}}else if("keyboard-interactive"===a){if(t===S.USERAUTH_INFO_REQUEST){var h,f,u;if(!1===(h=g(c,1,"utf8",e,r)))return!1;if(!1===(f=g(c,c._pos,"utf8",e,r)))return!1;if(!1===(n=g(c,c._pos,"utf8",e,r)))return!1;if(!1===(u=m(c,c._pos,e,r)))return!1;c._pos+=4;for(var l=[],p=0;p<u;++p){if(!1===(s=g(c,c._pos,"utf8",e,r)))return!1;var d=c[c._pos++];if(void 0===d)return!1;d=0!==d,l.push({prompt:s,echo:d})}e.emit("USERAUTH_INFO_REQUEST",h,f,n,l)}else if(t===S.USERAUTH_INFO_RESPONSE){var E=m(c,1,e,r);if(!1===E)return!1;c._pos=5;for(var v=[],y=0;y<E;++y){if(!1===(s=g(c,c._pos,"utf8",e,r)))return!1;v.push(s)}e.emit("USERAUTH_INFO_RESPONSE",v)}}else if("publickey"===a){if(t===S.USERAUTH_PK_OK){var _=e._state.authsQueue;if(!_.length||"publickey"!==_[0])return;_.shift(),e.emit("USERAUTH_PK_OK")}}else if(void 0!==a){e.disconnect(T.PROTOCOL_ERROR);var w=new Error("Invalid authentication method: "+a);w.level="protocol",e.emit("error",w)}}(e,R,t);var pe=Buffer.allocUnsafe(5);pe[0]=S.UNIMPLEMENTED,u(pe,N,1),_e(e,pe)}}function ue(e,t){var r=e._state.incoming.payload,i=g(r,1,e,t);if(!1===i)return!1;var n=g(r,r._pos,e,t);if(!1===n)return!1;var s=g(r,r._pos,e,t);if(!1===s)return!1;var o={hostkey:i,hostkey_format:void 0,pubkey:n,sig:s,sig_format:void 0},a=g(i,0,"ascii",e,t);if(!1===a)return!1;o.hostkey_format=a;var c=g(s,0,"ascii",e,t);if(!1===c)return!1;o.sig_format=c,e.emit("KEXDH_REPLY",o)}function le(e,t){var r=e._state.incoming,n=r.hmac;if(e.debug("DEBUG: Parser: Verifying MAC"),r.decrypt.info.authLen>0){var s=r.decrypt,o=s.instance;o.setAuthTag(t);var a=o.update(r.packet);return r.payload=a.slice(1,r.packet.length-a[0]),d(s.iv),s.instance=i.createDecipheriv(U[s.type],s.key,s.iv),s.instance.setAutoPadding(!1),!0}var c=i.createHmac(U[n.type],n.key);u(Z,r.seqno,0),u(Z,r.pktLen,4),Z[8]=r.padLen,c.update(Z),c.update(r.packet);var h=c.digest();return h.length>r.hmac.info.actualLen&&(h=h.slice(0,r.hmac.info.actualLen)),ke(h,t)}function pe(e,t){var r=e._state.incoming.decrypt.instance;return e.debug("DEBUG: Parser: Decrypting"),r.update(t)}function de(e,t,r,i){var n=e._state.incoming.expect;n.amount=r,n.type=t,n.ptr=0,i?n.buf=i:r&&(n.buf=Buffer.allocUnsafe(r))}function ge(e,t,r,i){var n=g(e,t,"ascii",r,i);return!1!==n&&(n.length?n.split(","):[])}function me(e,t){return function(e,t){i.randomBytes(e,(function r(n,s){if(n)return i.randomBytes(e,r);t&&t(s)}))}(16,(function(r){var i=e.config.algorithms,n=i.kexBuf;if(e.remoteBugs&P.BAD_DHGEX){for(var s=!1,o=i.kex,a=o.length-1;a>=0;--a)-1!==o[a].indexOf("group-exchange")&&(s||(o=o.slice(),s=!0),o.splice(a,1));s&&(n=Buffer.from(o.join(",")))}var c=i.serverHostKeyBuf,h=21+n.length+4+c.length+2*(4+i.cipherBuf.length)+2*(4+i.hmacBuf.length)+2*(4+i.compressBuf.length)+8+1+4,f=Buffer.allocUnsafe(h),l=17;f[0]=S.KEXINIT,!1!==r&&r.copy(f,1),u(f,n.length,l),l+=4,n.copy(f,l),l+=n.length,u(f,c.length,l),l+=4,c.copy(f,l),l+=c.length,u(f,i.cipherBuf.length,l),l+=4,i.cipherBuf.copy(f,l),l+=i.cipherBuf.length,u(f,i.cipherBuf.length,l),l+=4,i.cipherBuf.copy(f,l),l+=i.cipherBuf.length,u(f,i.hmacBuf.length,l),l+=4,i.hmacBuf.copy(f,l),l+=i.hmacBuf.length,u(f,i.hmacBuf.length,l),l+=4,i.hmacBuf.copy(f,l),l+=i.hmacBuf.length,u(f,i.compressBuf.length,l),l+=4,i.compressBuf.copy(f,l),l+=i.compressBuf.length,u(f,i.compressBuf.length,l),l+=4,i.compressBuf.copy(f,l),l+=i.compressBuf.length,f.fill(0,f.length-13),e.debug("DEBUG: Outgoing: Writing KEXINIT"),e._state.incoming.expectedPacket="KEXINIT";var p=e._state.outgoing;p.kexinit=f,p.status===X&&(p.status=j),_e(e,f,t,!0)})),!0}function Ee(e){var t=e._state,r=t.outgoing,i=Buffer.allocUnsafe(5+r.pubkey.length);return t.incoming.expectedPacket=t.kex.pktReply,"groupex"===t.kex.type?(i[0]=S.KEXDH_GEX_INIT,e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_INIT")):(i[0]=S.KEXDH_INIT,"group"===t.kex.type?e.debug("DEBUG: Outgoing: Writing KEXDH_INIT"):e.debug("DEBUG: Outgoing: Writing KEXECDH_INIT")),u(i,r.pubkey.length,1),r.pubkey.copy(i,5),_e(e,i,void 0,!0)}function ve(e,t,r){var i=e._state.outgoing.compress.instance;i.write(t),i.flush(V,ye.bind(e,r))}function ye(e){if(!this._readableState.ended&&!this._writableState.ended){we(this,this._state.outgoing.compress.instance.read(),e);var t=this._state.outgoing.compress.queue;t.shift(),t.length>0&&ve(this,t[0][0],t[0][1])}}function _e(e,t,r,i){var n=e._state;if(!n)return!1;var s=n.outgoing;if(s.status===j&&!i)return"function"==typeof r?s.rekeyQueue.push([t,r]):s.rekeyQueue.push(t),!1;if(e._readableState.ended||e._writableState.ended)return!1;if(s.compress.instance){var o=s.compress.queue;return o.push([t,r]),1===o.length&&ve(e,o[0][0],o[0][1]),!0}return we(e,t,r)}function we(e,t,r){var n,s,o,a,c,h=e._state.outgoing,f=h.encrypt,l=h.hmac;if(n=t.length+9,!1!==f.instance)if(f.info.authLen>0){for(var p=1+t.length+4;p%f.info.blockLen!=0;)++p;s=p-1-t.length,n=4+p}else{var g=f.info.blockLen;s=(n+=(g-1)*n%g)-t.length-5}else s=(n+=7*n%8)-t.length-5;o=Buffer.allocUnsafe(n),u(o,n-4,0),o[4]=s,t.copy(o,5),be(o,5+t.length,s),!1!==l.type&&l.key&&(a=i.createHmac(U[l.type],l.key),u(h.bufSeqno,h.seqno,0),a.update(h.bufSeqno),a.update(o),(a=a.digest()).length>l.info.actualLen&&(a=a.slice(0,l.info.actualLen)));var m,E=0;if(!1!==f.instance)if(f.info.authLen>0){var v=i.createCipheriv(U[f.type],f.key,f.iv);v.setAutoPadding(!1);var y=o.slice(0,4);v.setAAD(y),e.push(y),E+=y,m=v.update(o.slice(4)),e.push(m),E+=m.length;var _=v.final();_.length&&(e.push(_),E+=_.length);var w=v.getAuthTag();c=e.push(w),E+=w.length,d(f.iv)}else m=f.instance.update(o),e.push(m),E+=m.length,c=e.push(a),E+=a.length;else c=e.push(o),E=o.length;return e.bytesSent+=E,++h.seqno>4294967295&&(h.seqno=0),r&&r(),c}o(ae,s),ae.prototype.__read=s.prototype._read,ae.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},ae.prototype.__push=s.prototype.push,ae.prototype.push=function(e,t){var r=this.__push(e,t);return this._needContinue=!1===r,r},ae.prototype._cleanup=function(e){this.reset(),this.debug("DEBUG: Parser: Malformed packet"),e&&e(new Error("Malformed packet"))},ae.prototype._transform=function(e,t,r,i){var n,s,o,h,f=!1,u=!1,l=this._state,p=l.incoming,d=l.outgoing,g=p.expect,E=p.decrypt,v=p.decompress,y=e.length,_=0,w=this.debug,b=this,k=0,A=k;for(this.bytesReceived+=y;;){if(void 0!==g.type){if(k>=y)break;if(2===g.type){_=y-k;var U=g.buf.length-g.ptr;U<=_?(e.copy(g.buf,g.ptr,k,k+U),k+=U,s=g.buf,g.buf=void 0,g.ptr=0,g.type=void 0):(e.copy(g.buf,g.ptr,k),g.ptr+=_,k+=_);continue}if(0===g.type){if(k+=p.search.push(e),void 0!==g.type)continue}else if(1===g.type){if(4+ ++g.ptr>255)return this.reset(),w("DEBUG: Parser: Identification string exceeded 255 characters"),r(new Error("Max identification string size exceeded"));if(10!==e[k]){++k===y&&A<k&&(void 0===g.buf?g.buf=e.toString("ascii",A,k):g.buf+=e.toString("ascii",A,k));continue}g.type=void 0,A<k&&(void 0===g.buf?g.buf=e.toString("ascii",A,k):g.buf+=e.toString("ascii",A,k)),s=g.buf,g.buf=void 0,++k}}if(p.status===L){if(!this.readable)return r();if(this.server)if(s){if(83!==s[0]||83!==s[1]||72!==s[2]||45!==s[3])return this.reset(),w("DEBUG: Parser: Bad identification start"),r(new Error("Bad identification start"));p.status=H,w("DEBUG: Parser: IN_INIT (waiting for rest of identification)")}else w("DEBUG: Parser: IN_INIT (waiting for identification begin)"),de(this,2,4);else{w("DEBUG: Parser: IN_INIT");var B=p.search=new c(z);B.on("info",(function e(t,r,i,n){r&&(void 0===p.greeting?p.greeting=r.toString("binary",i,n):p.greeting+=r.toString("binary",i,n)),t&&(g.type=void 0,p.search.removeListener("info",e))})),B.maxMatches=1,de(this,0),p.status=H}}else if(p.status===H)w("DEBUG: Parser: IN_GREETING"),p.search=void 0,A=k,de(this,1),p.status=x;else{if(p.status===x){w("DEBUG: Parser: IN_HEADER"),13===s.charCodeAt(s.length-1)&&(s=s.slice(0,-1));var N=s.indexOf("-"),R=s.indexOf(" "),P={greeting:p.greeting,identRaw:"SSH-"+s,versions:{protocol:s.substr(0,N),software:-1===R?s.substring(N+1):s.substring(N+1,R)},comments:R>-1?s.substring(R+1):void 0};if(p.greeting=void 0,"1.99"!==P.versions.protocol&&"2.0"!==P.versions.protocol)return this.reset(),w("DEBUG: Parser: protocol version not supported: "+P.versions.protocol),r(new Error("Protocol version not supported"));if(this.emit("header",P),p.status===L)return;var I=P.identRaw,C=P.versions.software;this.debug("DEBUG: Remote ident: "+a(I));for(var q,Y=0;Y<O;++Y)"string"==typeof(q=D[Y])[0]?C===q[0]&&(this.remoteBugs|=q[1]):q[0].test(C)&&(this.remoteBugs|=q[1]);return p.identRaw=I,this.bytesReceived-=y-k,me(this,(function(){k===y?r():b._transform(e.slice(k),t,r)})),void(p.status=F)}if(p.status===F)w("DEBUG: Parser: IN_PACKETBEFORE (expecting "+(n=E.instance?E.info.blockLen:8)+")"),de(this,2,n,E.buf),p.status=M;else if(p.status===M){if(w("DEBUG: Parser: IN_PACKET"),E.instance?((u=E.info.authLen>0)||(s=pe(this,s)),n=E.info.blockLen):(u=!1,n=8),!1===(h=m(s,0,this,r)))return;var Q,Z=p.hmac.info,J=h+4+(Q=Z?Z.actualLen:0),ee=this.maxPacketSize;if(v.instance&&(ee+=5*(this.maxPacketSize/16384+1)+6),h>ee||J<16+Q||(h+(u?0:4))%n!=0)return this.disconnect(T.PROTOCOL_ERROR),w("DEBUG: Parser: Bad packet length ("+J+")"),r(new Error("Bad packet length"));p.pktLen=h;var te=p.pktLen+4-n;if(u?(E.instance.setAAD(s.slice(0,4)),w("DEBUG: Parser: pktLen:"+p.pktLen+",remainLen:"+te)):(p.padLen=s[4],w("DEBUG: Parser: pktLen:"+p.pktLen+",padLen:"+p.padLen+",remainLen:"+te)),te>0)p.pktExtra=u?s.slice(4):s.slice(5),de(this,2,te),p.status=K;else{if(!(te<0)){f=!0,p.status=K;continue}p.status=F}}else if(p.status===K){w("DEBUG: Parser: IN_PACKETDATA"),E.instance?(u=E.info.authLen>0,f?f=!1:u||(s=pe(this,s))):(u=!1,f=!1);var re=p.pktLen-p.padLen-1;if(p.pktExtra?(o=Buffer.allocUnsafe(p.pktExtra.length+s.length),p.pktExtra.copy(o),s.copy(o,p.pktExtra.length),p.payload=o.slice(0,re)):(o=u?s.slice(4):s.slice(5),p.payload=s.slice(5,5+re)),void 0!==p.hmac.info){var ie=E.info.authLen||p.hmac.info.actualLen;w("DEBUG: Parser: HMAC size:"+ie),de(this,2,ie,p.hmac.buf),p.status=G,p.packet=o}else p.status=W;p.pktExtra=void 0,o=void 0}else if(p.status===G){if(w("DEBUG: Parser: IN_PACKETDATAVERIFY"),!le(this,s))return this.reset(),w("DEBUG: Parser: IN_PACKETDATAVERIFY (Invalid HMAC)"),r(new Error("Invalid HMAC"));w("DEBUG: Parser: IN_PACKETDATAVERIFY (Valid HMAC)"),p.status=W,p.packet=void 0}else if(p.status===W){if(v.instance){if(!i){w("DEBUG: Parser: Decompressing"),v.instance.write(p.payload);var ne=[],se=0;return void v.instance.on("readable",(function(){for(var e;e=this.read();)ne.push(e),se+=e.length})).flush(V,(function(){var i;v.instance.removeAllListeners("readable"),1===ne.length?p.payload=ne[0]:p.payload=Buffer.concat(ne,se),ne=null,i=k===y?$:e.slice(k),b._transform(i,t,r,!0)}))}i=!1}this.emit("packet");var ae=p.payload[0];if(w!==oe){var ce="DEBUG: Parser: IN_PACKETDATAAFTER, packet: ",he=l.authsQueue[0],ue=null;if(d.status!==j||ae<=4||ae>=20&&ae<=49||(ce+="(enqueued) "),ae===S.KEXDH_INIT)switch(l.kex.type){case"group":ue="KEXDH_INIT";break;case"groupex":ue="KEXDH_GEX_REQUEST";break;default:ue="KEXECDH_INIT"}else if(ae===S.KEXDH_REPLY)switch(l.kex.type){case"group":ue="KEXDH_REPLY";break;case"groupex":ue="KEXDH_GEX_GROUP";break;default:ue="KEXECDH_REPLY"}else ae===S.KEXDH_GEX_GROUP?ue="KEXDH_GEX_GROUP":ae===S.KEXDH_GEX_REPLY?ue="KEXDH_GEX_REPLY":60===ae?ue="password"===he?"USERAUTH_PASSWD_CHANGEREQ":"keyboard-interactive"===he?"USERAUTH_INFO_REQUEST":"publickey"===he?"USERAUTH_PK_OK":"UNKNOWN PACKET 60":61===ae&&(ue="keyboard-interactive"===he?"USERAUTH_INFO_RESPONSE":"UNKNOWN PACKET 61");null===ue&&(ue=S[ae]),ae!==S.CHANNEL_OPEN&&ae!==S.CHANNEL_REQUEST&&ae!==S.CHANNEL_SUCCESS&&ae!==S.CHANNEL_FAILURE&&ae!==S.CHANNEL_EOF&&ae!==S.CHANNEL_CLOSE&&ae!==S.CHANNEL_DATA&&ae!==S.CHANNEL_EXTENDED_DATA&&ae!==S.CHANNEL_WINDOW_ADJUST&&ae!==S.DISCONNECT&&ae!==S.USERAUTH_REQUEST&&ae!==S.GLOBAL_REQUEST&&w(ce+ue)}if(d.status===X||ae<=4||ae>=20&&ae<=49){if(!1===fe(this,r))return;if(p.status===L)return}else if(d.status===j){if(50===p.rekeyQueue.length)return w("DEBUG: Parser: Max incoming re-key queue length reached"),this.disconnect(T.PROTOCOL_ERROR),r(new Error("Incoming re-key queue length limit reached"));var ge=p.seqno;++p.seqno>4294967295&&(p.seqno=0),p.rekeyQueue.push([ge,p.payload])}p.status=F,p.payload=void 0}}void 0!==s&&(s=void 0)}r()},ae.prototype.reset=function(e){if(this._state){var t=this._state;t.incoming.status=L,t.outgoing.status=q}else this._state={authsQueue:[],hostkeyFormat:void 0,kex:void 0,incoming:{status:L,expectedPacket:void 0,search:void 0,greeting:void 0,seqno:0,pktLen:void 0,padLen:void 0,pktExtra:void 0,payload:void 0,packet:void 0,kexinit:void 0,identRaw:void 0,rekeyQueue:[],ignoreNext:!1,expect:{amount:void 0,type:void 0,ptr:0,buf:void 0},decrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,buf:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},decompress:{instance:!1,type:!1}},outgoing:{status:q,seqno:0,bufSeqno:Buffer.allocUnsafe(4),rekeyQueue:[],kexinit:void 0,kexsecret:void 0,pubkey:void 0,exchangeHash:void 0,sessionId:void 0,sentNEWKEYS:!1,encrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},compress:{instance:!1,type:!1,queue:null}}};e||this.readable&&this.push(null)},ae.prototype.disconnect=function(e){var t=Buffer.alloc(13);return t[0]=S.DISCONNECT,void 0===T[e]&&(e=T.BY_APPLICATION),u(t,e,1),this.debug("DEBUG: Outgoing: Writing DISCONNECT ("+T[e]+")"),_e(this,t),this.reset(),!1},ae.prototype.ping=function(){return this.debug("DEBUG: Outgoing: Writing ping (GLOBAL_REQUEST: keepalive@openssh.com)"),_e(this,J)},ae.prototype.rekey=function(){var e=this._state.outgoing.status;if(e===j)throw new Error("A re-key is already in progress");if(e!==X)throw new Error("Cannot re-key yet");return this.debug("DEBUG: Outgoing: Starting re-key"),me(this)},ae.prototype.requestSuccess=function(e){var t;return Buffer.isBuffer(e)?((t=Buffer.allocUnsafe(1+e.length))[0]=S.REQUEST_SUCCESS,e.copy(t,1)):t=re,this.debug("DEBUG: Outgoing: Writing REQUEST_SUCCESS"),_e(this,t)},ae.prototype.requestFailure=function(){return this.debug("DEBUG: Outgoing: Writing REQUEST_FAILURE"),_e(this,ie)},ae.prototype.channelSuccess=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_SUCCESS,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_SUCCESS ("+e+")"),_e(this,t)},ae.prototype.channelFailure=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_FAILURE,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_FAILURE ("+e+")"),_e(this,t)},ae.prototype.channelEOF=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_EOF,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_EOF ("+e+")"),_e(this,t)},ae.prototype.channelClose=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_CLOSE,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_CLOSE ("+e+")"),_e(this,t)},ae.prototype.channelWindowAdjust=function(e,t){var r=Buffer.allocUnsafe(9);return r[0]=S.CHANNEL_WINDOW_ADJUST,u(r,e,1),u(r,t,5),this.debug("DEBUG: Outgoing: Writing CHANNEL_WINDOW_ADJUST ("+e+", "+t+")"),_e(this,r)},ae.prototype.channelData=function(e,t){var r=Buffer.isBuffer(t),i=r?t.length:Buffer.byteLength(t),n=Buffer.allocUnsafe(9+i);return n[0]=S.CHANNEL_DATA,u(n,e,1),u(n,i,5),r?t.copy(n,9):n.write(t,9,i,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_DATA ("+e+")"),_e(this,n)},ae.prototype.channelExtData=function(e,t,r){var i=Buffer.isBuffer(t),n=i?t.length:Buffer.byteLength(t),s=Buffer.allocUnsafe(13+n);return s[0]=S.CHANNEL_EXTENDED_DATA,u(s,e,1),u(s,r,5),u(s,n,9),i?t.copy(s,13):s.write(t,13,n,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_EXTENDED_DATA ("+e+")"),_e(this,s)},ae.prototype.channelOpenConfirm=function(e,t,r,i){var n=Buffer.allocUnsafe(17);return n[0]=S.CHANNEL_OPEN_CONFIRMATION,u(n,e,1),u(n,t,5),u(n,r,9),u(n,i,13),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_CONFIRMATION (r:"+e+", l:"+t+")"),_e(this,n)},ae.prototype.channelOpenFail=function(e,t,r,i){"string"!=typeof r&&(r=""),"string"!=typeof i&&(i="");var n=Buffer.byteLength(r),s=Buffer.byteLength(i),o=9,a=Buffer.allocUnsafe(13+n+4+s);return a[0]=S.CHANNEL_OPEN_FAILURE,u(a,e,1),u(a,t,5),u(a,n,o),o+=4,n&&(a.write(r,o,n,"utf8"),o+=n),u(a,s,o),s&&a.write(i,o+=4,s,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_FAILURE ("+e+")"),_e(this,a)},ae.prototype.service=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=Buffer.allocUnsafe(5+t);return r[0]=S.SERVICE_REQUEST,u(r,t,1),r.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_REQUEST ("+e+")"),_e(this,r)},ae.prototype.tcpipForward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(23+i+4);return n[0]=S.GLOBAL_REQUEST,u(n,13,1),n.write("tcpip-forward",5,13,"ascii"),n[18]=void 0===r||!0===r?1:0,u(n,i,19),n.write(e,23,i,"ascii"),u(n,t,23+i),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (tcpip-forward)"),_e(this,n)},ae.prototype.cancelTcpipForward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(30+i+4);return n[0]=S.GLOBAL_REQUEST,u(n,20,1),n.write("cancel-tcpip-forward",5,20,"ascii"),n[25]=void 0===r||!0===r?1:0,u(n,i,26),n.write(e,30,i,"ascii"),u(n,t,30+i),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-tcpip-forward)"),_e(this,n)},ae.prototype.openssh_streamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.allocUnsafe(41+r);return i[0]=S.GLOBAL_REQUEST,u(i,31,1),i.write("streamlocal-forward@openssh.com",5,31,"ascii"),i[36]=void 0===t||!0===t?1:0,u(i,r,37),i.write(e,41,r,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (streamlocal-forward@openssh.com)"),_e(this,i)},ae.prototype.openssh_cancelStreamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.allocUnsafe(48+r);return i[0]=S.GLOBAL_REQUEST,u(i,38,1),i.write("cancel-streamlocal-forward@openssh.com",5,38,"ascii"),i[43]=void 0===t||!0===t?1:0,u(i,r,44),i.write(e,48,r,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-streamlocal-forward@openssh.com)"),_e(this,i)},ae.prototype.directTcpip=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(i.srcIP),s=Buffer.byteLength(i.dstIP),o=29,a=Buffer.allocUnsafe(33+n+4+4+s+4);return a[0]=S.CHANNEL_OPEN,u(a,12,1),a.write("direct-tcpip",5,12,"ascii"),u(a,e,17),u(a,t,21),u(a,r,25),u(a,s,o),a.write(i.dstIP,o+=4,s,"ascii"),u(a,i.dstPort,o+=s),u(a,n,o+=4),a.write(i.srcIP,o+=4,n,"ascii"),u(a,i.srcPort,o+=n),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-tcpip)"),_e(this,a)},ae.prototype.openssh_directStreamLocal=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(i.socketPath),s=47,o=Buffer.allocUnsafe(51+n+4+4);return o[0]=S.CHANNEL_OPEN,u(o,30,1),o.write("direct-streamlocal@openssh.com",5,30,"ascii"),u(o,e,35),u(o,t,39),u(o,r,43),u(o,n,s),o.write(i.socketPath,s+=4,n,"utf8"),o.fill(0,o.length-8),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-streamlocal@openssh.com)"),_e(this,o)},ae.prototype.openssh_noMoreSessions=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.allocUnsafe(34);return t[0]=S.GLOBAL_REQUEST,u(t,28,1),t.write("no-more-sessions@openssh.com",5,28,"ascii"),t[33]=void 0===e||!0===e?1:0,this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (no-more-sessions@openssh.com)"),_e(this,t)},ae.prototype.session=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.allocUnsafe(24);return i[0]=S.CHANNEL_OPEN,u(i,7,1),i.write("session",5,7,"ascii"),u(i,e,12),u(i,t,16),u(i,r,20),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", session)"),_e(this,i)},ae.prototype.windowChange=function(e,t,r,i,n){if(this.server)throw new Error("Client-only method called in server mode");var s=Buffer.allocUnsafe(39);return s[0]=S.CHANNEL_REQUEST,u(s,e,1),u(s,13,5),s.write("window-change",9,13,"ascii"),s[22]=0,u(s,r,23),u(s,t,27),u(s,n,31),u(s,i,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", window-change)"),_e(this,s)},ae.prototype.pty=function(e,t,r,i,n,s,o,a){if(this.server)throw new Error("Client-only method called in server mode");s&&s.length||(s="vt100"),!o||Buffer.isBuffer(o)||Array.isArray(o)||"object"!=typeof o||(o=function(e){for(var t,r,i,n=/^\d+$/,s=Object.keys(e),o=0,a=[],c=0,h=s.length;c<h;++c)t=s[c],(r=B[t])&&!n.test(t)&&"number"==typeof e[t]&&"TTY_OP_END"!==t&&(i=e[t],a[o++]=r,a[o++]=i>>>24&255,a[o++]=i>>>16&255,a[o++]=i>>>8&255,a[o++]=255&i);return a[o]=B.TTY_OP_END,a}(o)),o&&o.length||(o=ne);var c=s.length,h=o.length,f=21,l=Buffer.allocUnsafe(21+c+4+4+4+4+4+h);if(l[0]=S.CHANNEL_REQUEST,u(l,e,1),u(l,7,5),l.write("pty-req",9,7,"ascii"),l[16]=void 0===a||!0===a?1:0,u(l,c,17),l.write(s,21,c,"utf8"),u(l,r,f+=c),u(l,t,f+=4),u(l,n,f+=4),u(l,i,f+=4),u(l,h,f+=4),f+=4,Array.isArray(o))for(var p=0;p<h;++p)l[f++]=o[p];else Buffer.isBuffer(o)&&o.copy(l,f);return this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", pty-req)"),_e(this,l)},ae.prototype.shell=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.allocUnsafe(15);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,5,5),r.write("shell",9,5,"ascii"),r[14]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", shell)"),_e(this,r)},ae.prototype.exec=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.isBuffer(t)?t.length:Buffer.byteLength(t),n=Buffer.allocUnsafe(18+i);return n[0]=S.CHANNEL_REQUEST,u(n,e,1),u(n,4,5),n.write("exec",9,4,"ascii"),n[13]=void 0===r||!0===r?1:0,u(n,i,14),Buffer.isBuffer(t)?t.copy(n,18):n.write(t,18,i,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exec)"),_e(this,n)},ae.prototype.signal=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if("SIG"===(t=t.toUpperCase()).slice(0,3)&&(t=t.substring(3)),-1===N.indexOf(t))throw new Error("Invalid signal: "+t);var r=t.length,i=Buffer.allocUnsafe(20+r);return i[0]=S.CHANNEL_REQUEST,u(i,e,1),u(i,6,5),i.write("signal",9,6,"ascii"),i[15]=0,u(i,r,16),i.write(t,20,r,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", signal)"),_e(this,i)},ae.prototype.env=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(t),s=Buffer.isBuffer(r)?r.length:Buffer.byteLength(r),o=Buffer.allocUnsafe(17+n+4+s);return o[0]=S.CHANNEL_REQUEST,u(o,e,1),u(o,3,5),o.write("env",9,3,"ascii"),o[12]=void 0===i||!0===i?1:0,u(o,n,13),o.write(t,17,n,"ascii"),u(o,s,17+n),Buffer.isBuffer(r)?r.copy(o,17+n+4):o.write(r,17+n+4,s,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", env)"),_e(this,o)},ae.prototype.x11Forward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(t.protocol),n=Buffer.byteLength(t.cookie),s=Buffer.allocUnsafe(22+i+4+n+4);s[0]=S.CHANNEL_REQUEST,u(s,e,1),u(s,7,5),s.write("x11-req",9,7,"ascii"),s[16]=void 0===r||!0===r?1:0,s[17]=t.single?1:0,u(s,i,18);var o=22;return Buffer.isBuffer(t.protocol)?t.protocol.copy(s,o):s.write(t.protocol,o,i,"utf8"),u(s,n,o+=i),o+=4,Buffer.isBuffer(t.cookie)?t.cookie.copy(s,o):s.write(t.cookie,o,n,"binary"),o+=n,u(s,t.screen||0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", x11-req)"),_e(this,s)},ae.prototype.subsystem=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(t),n=Buffer.allocUnsafe(23+i);return n[0]=S.CHANNEL_REQUEST,u(n,e,1),u(n,9,5),n.write("subsystem",9,9,"ascii"),n[18]=void 0===r||!0===r?1:0,u(n,i,19),n.write(t,23,i,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", subsystem: "+t+")"),_e(this,n)},ae.prototype.openssh_agentForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.allocUnsafe(36);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,26,5),r.write("auth-agent-req@openssh.com",9,26,"ascii"),r[35]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", auth-agent-req@openssh.com)"),_e(this,r)},ae.prototype.authPassword=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.byteLength(t),n=0,s=Buffer.allocUnsafe(5+r+4+14+4+8+1+4+i);return s[n]=S.USERAUTH_REQUEST,u(s,r,++n),s.write(e,n+=4,r,"utf8"),u(s,14,n+=r),s.write("ssh-connection",n+=4,14,"ascii"),u(s,8,n+=14),s.write("password",n+=4,8,"ascii"),s[n+=8]=0,u(s,i,++n),s.write(t,n+=4,i,"utf8"),this._state.authsQueue.push("password"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (password)"),_e(this,s)},ae.prototype.authPK=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i,n=this,s=this._state.outgoing;"function"==typeof t.getPublicSSH?(i=t.type,t=t.getPublicSSH()):i=t.toString("ascii",4,4+f(t,0));var o=Buffer.byteLength(e),a=Buffer.byteLength(i),c=t.length,h=s.sessionId.length,l=0,p=Buffer.allocUnsafe((r?4+h:0)+1+4+o+4+14+4+9+1+4+a+4+c);return r?(u(p,h,l),s.sessionId.copy(p,l+=4),p[l+=h]=S.USERAUTH_REQUEST):p[l]=S.USERAUTH_REQUEST,u(p,o,++l),p.write(e,l+=4,o,"utf8"),u(p,14,l+=o),p.write("ssh-connection",l+=4,14,"ascii"),u(p,9,l+=14),p.write("publickey",l+=4,9,"ascii"),p[l+=9]=r?1:0,u(p,a,++l),p.write(i,l+=4,a,"ascii"),u(p,c,l+=a),t.copy(p,l+=4),r?(r(p,(function(r){if(!1===(r=Se(r,i)))throw new Error("Error while converting handshake signature");var s=r.length,h=Buffer.allocUnsafe(5+o+4+14+4+9+1+4+a+4+c+4+4+a+4+s);return h[l=0]=S.USERAUTH_REQUEST,u(h,o,++l),h.write(e,l+=4,o,"utf8"),u(h,14,l+=o),h.write("ssh-connection",l+=4,14,"ascii"),u(h,9,l+=14),h.write("publickey",l+=4,9,"ascii"),h[l+=9]=1,u(h,a,++l),h.write(i,l+=4,a,"ascii"),u(h,c,l+=a),t.copy(h,l+=4),u(h,4+a+4+s,l+=c),u(h,a,l+=4),h.write(i,l+=4,a,"ascii"),u(h,s,l+=a),r.copy(h,l+=4),n._state.authsQueue.push("publickey"),n.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey)"),_e(n,h)})),!0):(this._state.authsQueue.push("publickey"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey -- check)"),_e(this,p))},ae.prototype.authHostbased=function(e,t,r,i,n){if(this.server)throw new Error("Client-only method called in server mode");var s,o=this,a=this._state.outgoing;"function"==typeof t.getPublicSSH?(s=t.type,t=t.getPublicSSH()):s=t.toString("ascii",4,4+f(t,0));var c=Buffer.byteLength(e),h=Buffer.byteLength(s),l=t.length,p=a.sessionId.length,d=Buffer.byteLength(r),g=Buffer.byteLength(i),m=0,E=Buffer.allocUnsafe(4+p+1+4+c+4+14+4+9+4+h+4+l+4+d+4+g);return u(E,p,m),a.sessionId.copy(E,m+=4),E[m+=p]=S.USERAUTH_REQUEST,u(E,c,++m),E.write(e,m+=4,c,"utf8"),u(E,14,m+=c),E.write("ssh-connection",m+=4,14,"ascii"),u(E,9,m+=14),E.write("hostbased",m+=4,9,"ascii"),u(E,h,m+=9),E.write(s,m+=4,h,"ascii"),u(E,l,m+=h),t.copy(E,m+=4),u(E,d,m+=l),E.write(r,m+=4,d,"ascii"),u(E,g,m+=d),E.write(i,m+=4,g,"utf8"),n(E,(function(e){if(!1===(e=Se(e,s)))throw new Error("Error while converting handshake signature");var t=e.length,r=Buffer.allocUnsafe(E.length-p+t);return E.copy(r,0,4+p),u(r,t,r.length-t-4),e.copy(r,r.length-t),o._state.authsQueue.push("hostbased"),o.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (hostbased)"),_e(o,r)})),!0},ae.prototype.authKeyboard=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=0,i=Buffer.allocUnsafe(5+t+4+14+4+20+4+4);return i[r]=S.USERAUTH_REQUEST,u(i,t,++r),i.write(e,r+=4,t,"utf8"),u(i,14,r+=t),i.write("ssh-connection",r+=4,14,"ascii"),u(i,20,r+=14),i.write("keyboard-interactive",r+=4,20,"ascii"),u(i,0,r+=20),u(i,0,r+=4),this._state.authsQueue.push("keyboard-interactive"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (keyboard-interactive)"),_e(this,i)},ae.prototype.authNone=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=0,i=Buffer.allocUnsafe(5+t+4+14+4+4);return i[r]=S.USERAUTH_REQUEST,u(i,t,++r),i.write(e,r+=4,t,"utf8"),u(i,14,r+=t),i.write("ssh-connection",r+=4,14,"ascii"),u(i,4,r+=14),i.write("none",r+=4,4,"ascii"),this._state.authsQueue.push("none"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (none)"),_e(this,i)},ae.prototype.authInfoRes=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t,r,i,n=0,s=0;if(e)for(i=0,r=e.length;i<r;++i)n+=4+Buffer.byteLength(e[i]);var o=Buffer.allocUnsafe(5+n);if(o[s++]=S.USERAUTH_INFO_RESPONSE,u(o,e?e.length:0,s),e)for(s+=4,i=0,r=e.length;i<r;++i)t=Buffer.byteLength(e[i]),u(o,t,s),s+=4,t&&(o.write(e[i],s,t,"utf8"),s+=t);return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_RESPONSE"),_e(this,o)},ae.prototype.serviceAccept=function(e){if(!this.server)throw new Error("Server-only method called in client mode");var t=e.length,r=Buffer.allocUnsafe(5+t);if(r[0]=S.SERVICE_ACCEPT,u(r,t,1),r.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_ACCEPT ("+e+")"),_e(this,r),this.server&&this.banner&&"ssh-userauth"===e){var i=Buffer.byteLength(this.banner),n=5+i+4,s=Buffer.allocUnsafe(n);s[0]=S.USERAUTH_BANNER,u(s,i,1),s.write(this.banner,5,i,"utf8"),s.fill(0,n-4),this.debug("DEBUG: Outgoing: Writing USERAUTH_BANNER"),_e(this,s),this.banner=void 0}},ae.prototype.forwardedTcpip=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.boundAddr),s=Buffer.byteLength(i.remoteAddr),o=36+n,a=Buffer.allocUnsafe(36+n+4+4+s+4);return a[0]=S.CHANNEL_OPEN,u(a,15,1),a.write("forwarded-tcpip",5,15,"ascii"),u(a,e,20),u(a,t,24),u(a,r,28),u(a,n,32),a.write(i.boundAddr,36,n,"ascii"),u(a,i.boundPort,o),u(a,s,o+=4),a.write(i.remoteAddr,o+=4,s,"ascii"),u(a,i.remotePort,o+=s),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-tcpip)"),_e(this,a)},ae.prototype.x11=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.originAddr),s=24+n,o=Buffer.allocUnsafe(24+n+4);return o[0]=S.CHANNEL_OPEN,u(o,3,1),o.write("x11",5,3,"ascii"),u(o,e,8),u(o,t,12),u(o,r,16),u(o,n,20),o.write(i.originAddr,24,n,"ascii"),u(o,i.originPort,s),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", x11)"),_e(this,o)},ae.prototype.openssh_authAgent=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.allocUnsafe(39);return i[0]=S.CHANNEL_OPEN,u(i,22,1),i.write("auth-agent@openssh.com",5,22,"ascii"),u(i,e,27),u(i,t,31),u(i,r,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", auth-agent@openssh.com)"),_e(this,i)},ae.prototype.openssh_forwardedStreamLocal=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.socketPath),s=Buffer.allocUnsafe(54+n+4);return s[0]=S.CHANNEL_OPEN,u(s,33,1),s.write("forwarded-streamlocal@openssh.com",5,33,"ascii"),u(s,e,38),u(s,t,42),u(s,r,46),u(s,n,50),s.write(i.socketPath,54,n,"utf8"),u(s,0,54+n),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-streamlocal@openssh.com)"),_e(this,s)},ae.prototype.exitStatus=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.allocUnsafe(25);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,11,5),r.write("exit-status",9,11,"ascii"),r[20]=0,u(r,t,21),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-status)"),_e(this,r)},ae.prototype.exitSignal=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(t),s=i?Buffer.byteLength(i):0,o=25+n,a=Buffer.allocUnsafe(25+n+1+4+s+4);return a[0]=S.CHANNEL_REQUEST,u(a,e,1),u(a,11,5),a.write("exit-signal",9,11,"ascii"),a[20]=0,u(a,n,21),a.write(t,25,n,"utf8"),a[o++]=r?1:0,u(a,s,o),o+=4,s&&(a.write(i,o,s,"utf8"),o+=s),u(a,0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-signal)"),_e(this,a)},ae.prototype.authFailure=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r;if(!this._state.authsQueue.length)throw new Error("No auth in progress");if("boolean"==typeof e&&(t=e,e=void 0),e){r=[];for(var i=0,n=e.length;i<n;++i)"none"!==e[i].toLowerCase()&&r.push(e[i]);r=r.join(",")}else r="";var s=r.length,o=Buffer.allocUnsafe(5+s+1);return o[0]=S.USERAUTH_FAILURE,u(o,s,1),o.write(r,5,s,"ascii"),o[5+s]=!0===t?1:0,this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_FAILURE"),_e(this,o)},ae.prototype.authSuccess=function(){if(!this.server)throw new Error("Server-only method called in client mode");if(!this._state.authsQueue.length)throw new Error("No auth in progress");var e=this._state,t=e.outgoing,r=e.incoming;e.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_SUCCESS");var i=_e(this,te);return"zlib@openssh.com"===t.compress.type&&(t.compress.instance=n.createDeflate(Y),t.compress.queue=[]),"zlib@openssh.com"===r.decompress.type&&(r.decompress.instance=n.createInflate(Y)),i},ae.prototype.authPKOK=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=this._state.authsQueue;if(!r.length||"publickey"!==r[0])throw new Error('"publickey" auth not in progress');var i=e.length,n=t.length,s=Buffer.allocUnsafe(5+i+4+n);return s[0]=S.USERAUTH_PK_OK,u(s,i,1),s.write(e,5,i,"ascii"),u(s,n,5+i),t.copy(s,5+i+4),this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_PK_OK"),_e(this,s)},ae.prototype.authPasswdChg=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(e),i=t?t.length:0,n=0,s=Buffer.allocUnsafe(5+r+4+i);return s[n]=S.USERAUTH_PASSWD_CHANGEREQ,u(s,r,++n),s.write(e,n+=4,r,"utf8"),u(s,i,n+=r),i&&s.write(t,n+=4,i,"ascii"),this.debug("DEBUG: Outgoing: Writing USERAUTH_PASSWD_CHANGEREQ"),_e(this,s)},ae.prototype.authInfoReq=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i,n,s,o,a=0,c=e?Buffer.byteLength(e):0,h=t?Buffer.byteLength(t):0,f=0;for(o=0,s=r.length;o<s;++o)a+=4+Buffer.byteLength(r[o].prompt)+1;var l=Buffer.allocUnsafe(5+c+4+h+4+4+a);for(l[f++]=S.USERAUTH_INFO_REQUEST,u(l,c,f),f+=4,e&&(l.write(e,f,c,"utf8"),f+=c),u(l,h,f),f+=4,t&&(l.write(t,f,h,"utf8"),f+=h),u(l,0,f),f+=4,u(l,r.length,f),f+=4,o=0,s=r.length;o<s;++o)n=r[o],i=Buffer.byteLength(n.prompt),u(l,i,f),f+=4,i&&(l.write(n.prompt,f,i,"utf8"),f+=i),l[f++]=n.echo?1:0;return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_REQUEST"),_e(this,l)};var be="function"==typeof i.randomFillSync?i.randomFillSync:function(e,t,r){i.randomBytes(r).copy(e,t)};function Se(e,t){switch(t){case"ssh-dss":return E(e);case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return v(e)}return e}var ke="function"==typeof i.timingSafeEqual?function(e,t){return e.length!==t.length?(i.timingSafeEqual(e,e),!1):i.timingSafeEqual(e,t)}:function(e,t){var r;e.length===t.length?r=0:(r=1,t=e);for(var i=0,n=e.length;i<n;++i)r|=e[i]^t[i];return 0===r};function Te(e,t){switch(e){case"curve25519-sha256":case"curve25519-sha256@libssh.org":if(!R)break;return this.type="25519",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp256":return this.type="ecdh",this.name="prime256v1",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp384":return this.type="ecdh",this.name="secp384r1",this.hash="sha384",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp521":return this.type="ecdh",this.name="secp521r1",this.hash="sha512",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"diffie-hellman-group1-sha1":return this.type="group",this.name="modp2",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha1":return this.type="group",this.name="modp14",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha256":return this.type="group",this.name="modp14",this.hash="sha256",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group16-sha512":return this.type="group",this.name="modp16",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group18-sha512":return this.type="group",this.name="modp18",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group-exchange-sha1":return this.type="groupex",this.hash="sha1",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null);case"diffie-hellman-group-exchange-sha256":return this.type="groupex",this.hash="sha256",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null)}throw new Error("Unsupported key exchange algorithm: "+e)}function Ae(e){for(var t,r=0,i=e.length;0===e[r];)++r,--i;return 128&e[r]?((t=Buffer.allocUnsafe(1+i))[0]=0,e.copy(t,1,r),e=t):i!==e.length&&(t=Buffer.allocUnsafe(i),e.copy(t,0,r),e=t),e}Te.prototype.setDHParams=function(e,t){if("groupex"===this.type){if(!Buffer.isBuffer(e))throw new Error("Invalid prime value");if(!Buffer.isBuffer(t))throw new Error("Invalid generator value");this._prime=e,this._generator=t}},Te.prototype.getDHParams=function(){if("groupex"===this.type&&this._kex)return{prime:Ae(this._kex.getPrime()),generator:Ae(this._kex.getGenerator())}},Te.prototype.generateKeys=function(){switch(this.type){case"25519":this._keys||(this._keys=i.generateKeyPairSync("x25519"));break;case"ecdh":this._kex||(this._kex=i.createECDH(this.name),this._public=this._kex.generateKeys());break;case"group":case"groupex":this._kex||(this.name?this._kex=i.createDiffieHellmanGroup(this.name):this._prime&&this._generator&&(this._kex=i.createDiffieHellman(this._prime,this._generator)),this._kex&&(this._public=this._kex.generateKeys()))}},Te.prototype.getPublicKey=function(){var e;switch(this.generateKeys(),this.type){case"25519":return(e=this._keys.publicKey.export({type:"spki",format:"der"})).slice(-32);case"ecdh":case"group":case"groupex":e=this._public}if(e)return this.convertPublicKey(e)},Te.prototype.convertPublicKey=function(e){for(var t,r=0,i=e.length;0===e[r];)++r,--i;switch(this.type){case"25519":if(32===e.length)return e;break;default:if(128&e[r])return(t=Buffer.allocUnsafe(1+i))[0]=0,e.copy(t,1,r),t}return i!==e.length&&(t=Buffer.allocUnsafe(i),e.copy(t,0,r),e=t),e},Te.prototype.computeSecret=function(e){switch(this.generateKeys(),this.type){case"25519":try{var t=new h.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.110"),t.endSequence(),t.startSequence(h.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),Ae(i.diffieHellman({privateKey:this._keys.privateKey,publicKey:i.createPublicKey({key:t.buffer,type:"spki",format:"der"})}))}catch(e){return e}break;case"ecdh":case"group":case"groupex":try{return Ae(this._kex.computeSecret(e))}catch(e){return e}}},e.exports=ae,e.exports._send=_e},function(e,t){e.exports=__nccwpck_require__(9796)},function(e,t,r){var i=r(1).EventEmitter;function n(e,t,r,i,n){for(var s=0;s<n;++s,++t,++i)if(e[t]!==r[i])return!1;return!0}function s(e){"string"==typeof e&&(e=new Buffer(e));var t,r,i=e.length;for(this.maxMatches=1/0,this.matches=0,this._occ=new Array(256),this._lookbehind_size=0,this._needle=e,this._bufpos=0,this._lookbehind=new Buffer(i),r=0;r<256;++r)this._occ[r]=i;if(i>=1)for(t=0;t<i-1;++t)this._occ[e[t]]=i-1-t}(0,r(0).inherits)(s,i),s.prototype.reset=function(){this._lookbehind_size=0,this.matches=0,this._bufpos=0},s.prototype.push=function(e,t){var r,i;for(Buffer.isBuffer(e)||(e=new Buffer(e,"binary")),i=e.length,this._bufpos=t||0;r!==i&&this.matches<this.maxMatches;)r=this._sbmh_feed(e);return r},s.prototype._sbmh_feed=function(e){var t=e.length,r=this._needle,i=r.length,s=-this._lookbehind_size,o=r[i-1],a=this._occ,c=this._lookbehind;if(s<0){for(;s<0&&s<=t-i;){if((f=this._sbmh_lookup_char(e,s+i-1))===o&&this._sbmh_memcmp(e,s,i-1))return this._lookbehind_size=0,++this.matches,s>-this._lookbehind_size?this.emit("info",!0,c,0,this._lookbehind_size+s):this.emit("info",!0),this._bufpos=s+i,s+i;s+=a[f]}if(s<0)for(;s<0&&!this._sbmh_memcmp(e,s,t-s);)s++;if(!(s>=0)){var h=this._lookbehind_size+s;return h>0&&this.emit("info",!1,c,0,h),c.copy(c,0,h,this._lookbehind_size-h),this._lookbehind_size-=h,e.copy(c,this._lookbehind_size),this._lookbehind_size+=t,this._bufpos=t,t}this.emit("info",!1,c,0,this._lookbehind_size),this._lookbehind_size=0}for(s>=0&&(s+=this._bufpos);s<=t-i;){var f;if((f=e[s+i-1])===o&&e[s]===r[0]&&n(r,0,e,s,i-1))return++this.matches,s>0?this.emit("info",!0,e,this._bufpos,s):this.emit("info",!0),this._bufpos=s+i,s+i;s+=a[f]}if(s<t){for(;s<t&&(e[s]!==r[0]||!n(e,s,r,0,t-s));)++s;s<t&&(e.copy(c,0,s,s+(t-s)),this._lookbehind_size=t-s)}return s>0&&this.emit("info",!1,e,this._bufpos,s<t?s:t),this._bufpos=t,t},s.prototype._sbmh_lookup_char=function(e,t){return t<0?this._lookbehind[this._lookbehind_size+t]:e[t]},s.prototype._sbmh_memcmp=function(e,t,r){for(var i=0;i<r;){if(this._sbmh_lookup_char(e,t+i)!==this._needle[i])return!1;++i}return!0},e.exports=s},function(e){e.exports=JSON.parse('{"name":"ssh2-streams","version":"0.4.10","author":"Brian White <mscdex@mscdex.net>","description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=5.2.0"},"dependencies":{"asn1":"~0.2.0","bcrypt-pbkdf":"^1.0.2","streamsearch":"~0.1.2"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"}}')},function(e,t,r){var i,n=r(61).Agent,s=r(62).Agent,o=r(0).inherits;function a(e,t){var n=e&&e.localAddress||this._defaultSrcIP,s=e&&e.localPort||0,o=e.host,a=e.port;void 0===i&&(i=r(29).Client);var h=new i,f=!1;h.on("ready",()=>{h.forwardOut(n,s,o,a,(e,r)=>{if(f=!0,e)return h.end(),t(e);r.once("close",()=>{h.end()}),t(null,function(e){return e.setKeepAlive=c,e.setNoDelay=c,e.setTimeout=c,e.ref=c,e.unref=c,e.destroySoon=e.destroy,e}(r))})}).on("error",t).on("close",()=>{f||t(new Error("Unexpected connection loss"))}).connect(this._connectCfg)}function c(){}[n,s].forEach(e=>{function r(t,i){if(!(this instanceof r))return new r(t,i);e.call(this,i),this._connectCfg=t,this._defaultSrcIP=i&&i.srcIP||"localhost"}o(r,e),r.prototype.createConnection=a,t[e===n?"SSHTTPAgent":"SSHTTPSAgent"]=r})},function(e,t){e.exports=__nccwpck_require__(3685)},function(e,t){e.exports=__nccwpck_require__(5687)},function(e,t,r){(function(t){var i=r(8).Socket,n=r(1).EventEmitter,s=r(0).inherits,o=r(21),a=r(5),c=r(64),h=r(7).readUInt32BE,f=r(7).writeUInt32BE,u=r(7).writeUInt32LE,l=/^\!<socket >(\d+) s ([A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8})/,p=/^[/\\][/\\]\.[/\\]pipe[/\\].+/;if(e.exports=function(e,t,r,n,s){var o,d,g,E,v,y,_,w,b=0,S=Buffer.isBuffer(t),k=0,T=0,A=0,U=0,B=!1;function N(){var e;if(S){var r=9;e=Buffer.allocUnsafe(9+b+4+E+4),f(e,e.length-4,0),e[4]=13,f(e,b,5),t.copy(e,r),f(e,E,r+=b),n.copy(e,r+=4),f(e,0,r+=E),o.write(e)}else o.write(Buffer.from([0,0,0,1,11]))}function R(e){for(var r=0,i=e.length;r<i;++r)if(void 0===v)5==++k&&(v=e[r],k=0);else if(14===v)if(g){if(g[k]=e[r],++k===T)return o.removeAllListeners("data"),o.destroy()}else T<<=8,T+=e[r],4==++k&&(g=Buffer.allocUnsafe(T),k=0);else if(12===v)if(void 0===y){if(A<<=8,A+=e[r],4==++k&&(y=new Array(A),k=0,0===A))return o.removeAllListeners("data"),o.destroy()}else if(t)if(!1===B){if(t[k]=e[r],++k===b&&(y[A-1]=t,b=0,k=0,B=!0,0==--A))return t=void 0,o.removeAllListeners("data"),o.destroy()}else!0===B?(U<<=8,U+=e[r],4==++k&&(k=0,U>0?B=U:(t=void 0,B=!1),U=0)):++k===B&&(B=!1,k=0,t=void 0);else b<<=8,b+=e[r],4==++k&&(t=Buffer.allocUnsafe(b),k=0);else if(5===v)return d=S?new Error("Agent unable to sign data"):new Error("Unable to retrieve list of keys from agent"),o.removeAllListeners("data"),o.destroy()}function P(e){d=e}function D(){d?s(d):S&&!g||!S&&!y?s(new Error("Unexpected disconnection from agent")):S&&g?s(void 0,g):!S&&y&&s(void 0,y)}if("function"==typeof t&&"function"==typeof r?(_=t,w=r):S?(b=t.length,E=n.length):(s=t,t=void 0),"win32"!==process.platform||p.test(e))o=new i;else{if("pageant"!==e){var O=!1;return void a.readFile(e,(function t(r,n){if(r)return O?s(new Error("Invalid cygwin unix socket path")):void c.exec('cygpath -w "'+e+'"',(function(r,i,n){if(r||0===i.length)return s(new Error("Invalid cygwin unix socket path"));O=!0,e=i.toString().replace(/[\r\n]/g,""),a.readFile(e,t)}));var f;if(f=l.exec(n.toString("ascii"))){var p,d,g,m,E,v,y=0,_=!1,w=[],b=Buffer.allocUnsafe(12);for(b.fill(0),p=parseInt(f[1],10),d=f[2].replace(/\-/g,""),g=Buffer.allocUnsafe(16),E=0,v=0;v<32;++E,v+=2)g[E]=parseInt(d.substring(v,v+2),16);for(E=0;E<16;E+=4)u(g,h(g,E),E);function S(){y=0,m="secret",o.write(g)}function k(e){y+=e.length,"secret"===m?16===y&&(y=0,m="creds",o.write(b)):"creds"===m&&(_||w.push(e),12===y&&(o.removeListener("connect",S),o.removeListener("data",k),o.removeListener("close",T),_?(I(),o.emit("connect")):(_=!0,b=Buffer.concat(w),u(b,process.pid,0),o.destroy(),A())))}function T(){s(new Error("Problem negotiating cygwin unix socket security"))}function A(){(o=new i).once("connect",S),o.on("data",k),o.once("close",T),o.connect(p)}A()}else s(new Error("Malformed cygwin unix socket file"))}))}o=new m}function I(){var e;_||w?(o.once("connect",(function(){e=_();var t=!1;function r(){t||(o.destroy(),t=!0)}e.once("end",r).once("close",r).on("data",(function(e){o.write(e)})),o.on("data",(function(t){e.write(t)}))})),o.once("close",(function(){e||w()}))):(o.once("connect",N),o.on("data",R),o.once("error",P),o.once("close",D))}I(),o.connect(e)},"win32"===process.platform){var d={},g=o.resolve(t,"..","util/pagent.exe");function m(){this.proc=void 0,this.buffer=null}d[10]=new Error("Invalid pagent.exe arguments"),d[11]=new Error("Pageant is not running"),d[12]=new Error("pagent.exe could not create an mmap"),d[13]=new Error("pagent.exe could not set mode for stdin"),d[14]=new Error("pagent.exe could not set mode for stdout"),d[15]=new Error("pagent.exe did not get expected input payload"),s(m,n),m.prototype.write=function(e){if(null===this.buffer?this.buffer=e:this.buffer=Buffer.concat([this.buffer,e],this.buffer.length+e.length),!(this.buffer.length<4)){var t=h(this.buffer,0);if(!(this.buffer.length-4<t)){e=this.buffer.slice(0,4+t),this.buffer.length>4+t?this.buffer=this.buffer.slice(4+t):this.buffer=null;var r,i=this,n=!1;(r=this.proc=c.spawn(g,[e.length])).stdout.on("data",(function(e){i.emit("data",e)})),r.once("error",(function(e){n||(n=!0,i.emit("error",e))})),r.once("close",(function(e){i.proc=void 0,d[e]&&!n&&(n=!0,i.emit("error",d[e])),i.emit("close",n)})),r.stdin.end(e)}}},m.prototype.end=m.prototype.destroy=function(){this.buffer=null,this.proc&&(this.proc.kill(),this.proc=void 0)},m.prototype.connect=function(){this.emit("connect")}}}).call(this,"/")},function(e,t){e.exports=__nccwpck_require__(2081)},function(e,t,r){var i=r(0).inherits,n=r(1).EventEmitter;function s(e){var t=this;n.call(this),this._stream=e,e.on("error",(function(e){t.emit("error",e)})).on("end",(function(){t.emit("end")})).on("close",(function(){t.emit("close")})).on("continue",(function(){t.emit("continue")}))}i(s,n),s.prototype.end=function(){return this._stream.end()},s.prototype.createReadStream=function(e,t){return this._stream.createReadStream(e,t)},s.prototype.createWriteStream=function(e,t){return this._stream.createWriteStream(e,t)},s.prototype.open=function(e,t,r,i){return this._stream.open(e,t,r,i)},s.prototype.close=function(e,t){return this._stream.close(e,t)},s.prototype.read=function(e,t,r,i,n,s){return this._stream.readData(e,t,r,i,n,s)},s.prototype.write=function(e,t,r,i,n,s){return this._stream.writeData(e,t,r,i,n,s)},s.prototype.fastGet=function(e,t,r,i){return this._stream.fastGet(e,t,r,i)},s.prototype.fastPut=function(e,t,r,i){return this._stream.fastPut(e,t,r,i)},s.prototype.readFile=function(e,t,r){return this._stream.readFile(e,t,r)},s.prototype.writeFile=function(e,t,r,i){return this._stream.writeFile(e,t,r,i)},s.prototype.appendFile=function(e,t,r,i){return this._stream.appendFile(e,t,r,i)},s.prototype.exists=function(e,t){return this._stream.exists(e,t)},s.prototype.unlink=function(e,t){return this._stream.unlink(e,t)},s.prototype.rename=function(e,t,r){return this._stream.rename(e,t,r)},s.prototype.mkdir=function(e,t,r){return this._stream.mkdir(e,t,r)},s.prototype.rmdir=function(e,t){return this._stream.rmdir(e,t)},s.prototype.readdir=function(e,t,r){return this._stream.readdir(e,t,r)},s.prototype.fstat=function(e,t){return this._stream.fstat(e,t)},s.prototype.stat=function(e,t){return this._stream.stat(e,t)},s.prototype.lstat=function(e,t){return this._stream.lstat(e,t)},s.prototype.opendir=function(e,t){return this._stream.opendir(e,t)},s.prototype.setstat=function(e,t,r){return this._stream.setstat(e,t,r)},s.prototype.fsetstat=function(e,t,r){return this._stream.fsetstat(e,t,r)},s.prototype.futimes=function(e,t,r,i){return this._stream.futimes(e,t,r,i)},s.prototype.utimes=function(e,t,r,i){return this._stream.utimes(e,t,r,i)},s.prototype.fchown=function(e,t,r,i){return this._stream.fchown(e,t,r,i)},s.prototype.chown=function(e,t,r,i){return this._stream.chown(e,t,r,i)},s.prototype.fchmod=function(e,t,r){return this._stream.fchmod(e,t,r)},s.prototype.chmod=function(e,t,r){return this._stream.chmod(e,t,r)},s.prototype.readlink=function(e,t){return this._stream.readlink(e,t)},s.prototype.symlink=function(e,t,r){return this._stream.symlink(e,t,r)},s.prototype.realpath=function(e,t){return this._stream.realpath(e,t)},s.prototype.ext_openssh_rename=function(e,t,r){return this._stream.ext_openssh_rename(e,t,r)},s.prototype.ext_openssh_statvfs=function(e,t){return this._stream.ext_openssh_statvfs(e,t)},s.prototype.ext_openssh_fstatvfs=function(e,t){return this._stream.ext_openssh_fstatvfs(e,t)},s.prototype.ext_openssh_hardlink=function(e,t,r){return this._stream.ext_openssh_hardlink(e,t,r)},s.prototype.ext_openssh_fsync=function(e,t){return this._stream.ext_openssh_fsync(e,t)},e.exports=s},function(e,t,r){var i,n=r(8),s=r(1).EventEmitter,o=s.listenerCount,a=r(0).inherits,c=r(14),h=c.utils.parseKey,f=c.SSH2Stream,u=c.SFTPStream,l=c.constants,p=l.DISCONNECT_REASON,d=l.CHANNEL_OPEN_FAILURE,g=l.ALGORITHMS,m=r(33),E=r(67),v=r(7).writeUInt32BE,y=Math.pow(2,32)-1;function _(e,t){if(!(this instanceof _))return new _(e,t);var r,a={"ssh-rsa":null,"ssh-dss":null,"ssh-ed25519":null,"ecdsa-sha2-nistp256":null,"ecdsa-sha2-nistp384":null,"ecdsa-sha2-nistp521":null},c=e.hostKeys;if(!Array.isArray(c))throw new Error("hostKeys must be an array");for(r=0;r<c.length;++r){var u;if((u=Buffer.isBuffer(c[r])||"string"==typeof c[r]?h(c[r]):h(c[r].key,c[r].passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+u.message);if(Array.isArray(u)&&(u=u[0]),null===u.getPrivatePEM())throw new Error("privateKey value contains an invalid private key");a[u.type]||(a[u.type]=u)}var l={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var d,m;if(m=e.algorithms.kex,Array.isArray(m)&&m.length>0){for(d=g.SUPPORTED_KEX,r=0;r<m.length;++r)if(-1===d.indexOf(m[r]))throw new Error("Unsupported key exchange algorithm: "+m[r]);l.kex=m}if(m=e.algorithms.cipher,Array.isArray(m)&&m.length>0){for(d=g.SUPPORTED_CIPHER,r=0;r<m.length;++r)if(-1===d.indexOf(m[r]))throw new Error("Unsupported cipher algorithm: "+m[r]);l.cipher=m}m=e.algorithms.serverHostKey;var v=!1;if(Array.isArray(m)&&m.length>0){for(d=g.SUPPORTED_SERVER_HOST_KEY,r=m.length-1;r>=0;--r){if(-1===d.indexOf(m[r]))throw new Error("Unsupported server host key algorithm: "+m[r]);a[m[r]]||(v||(m=m.slice(),v=!0),m.splice(r,1))}m.length>0&&(l.serverHostKey=m)}if(m=e.algorithms.hmac,Array.isArray(m)&&m.length>0){for(d=g.SUPPORTED_HMAC,r=0;r<m.length;++r)if(-1===d.indexOf(m[r]))throw new Error("Unsupported HMAC algorithm: "+m[r]);l.hmac=m}if(m=e.algorithms.compress,Array.isArray(m)&&m.length>0){for(d=g.SUPPORTED_COMPRESS,r=0;r<m.length;++r)if(-1===d.indexOf(m[r]))throw new Error("Unsupported compression algorithm: "+m[r]);l.compress=m}}if(void 0===l.serverHostKey){var y=Object.keys(a);for(r=y.length-1;r>=0;--r)a[y[r]]||y.splice(r,1);l.serverHostKey=y}!i&&_.KEEPALIVE_INTERVAL>0&&_.KEEPALIVE_CLIENT_INTERVAL>0&&_.KEEPALIVE_CLIENT_COUNT_MAX>=0&&(i=new E(_.KEEPALIVE_INTERVAL,_.KEEPALIVE_CLIENT_INTERVAL,_.KEEPALIVE_CLIENT_COUNT_MAX));var b=this;s.call(this),"function"==typeof t&&b.on("connection",t);var S,k,T={algorithms:l,hostKeys:a,server:!0};for(r=0,k=(S=Object.keys(e)).length;r<k;++r){var A=S[r];"privateKey"!==A&&"publicKey"!==A&&"passphrase"!==A&&"algorithms"!==A&&"hostKeys"!==A&&"server"!==A&&(T[A]=e[A])}if("function"==typeof T.debug)var U=T.debug,B=Object.keys(T);this._srv=new n.Server((function(e){if(b._connections>=b.maxConnections)e.destroy();else{++b._connections,e.once("close",(function(e){--b._connections,s.read()})).on("error",(function(e){s.reset(),s.emit("error",e)}));var t=T;if(U){t={};for(var r,i=0;i<B.length;++i)t[r=B[i]]=T[r];var n="["+process.hrtime().join(".")+"] ";t.debug=function(e){U(n+e)}}var s=new f(t),a=new w(s,e);e.pipe(s).pipe(e),a.on("error",c),s.once("header",(function(t){if(!s._readableState.ended){if(!o(b,"connection"))return s.disconnect(p.BY_APPLICATION);a.removeListener("error",c),b.emit("connection",a,{ip:e.remoteAddress,family:e.remoteFamily,port:e.remotePort,header:t})}}))}function c(e){}})).on("error",(function(e){b.emit("error",e)})).on("listening",(function(){b.emit("listening")})).on("close",(function(){b.emit("close")})),this._connections=0,this.maxConnections=1/0}function w(e,t){s.call(this);var r=this;this._sshstream=e;var n=this._channels={};this._curChan=-1,this._sock=t,this.noMoreSessions=!1,this.authenticated=!1,e.on("end",(function(){t.resume(),r.emit("end")})).on("close",(function(e){r.emit("close",e)})).on("error",(function(e){r.emit("error",e)})).on("drain",(function(){r.emit("drain")})).on("continue",(function(){r.emit("continue")}));var a,c=0,h=!1,f=[];function u(t,i,n,s){if(0===c||a&&(a.username!==t||a.service!==i)||"password"!==n&&"publickey"!==n&&"hostbased"!==n&&"keyboard-interactive"!==n&&"none"!==n||10===f.length)return e.disconnect(p.PROTOCOL_ERROR);if("ssh-connection"!==i)return e.disconnect(p.SERVICE_NOT_AVAILABLE);var h;if(e._state.authMethod=n,"keyboard-interactive"===n?h=new T(e,t,i,n,s,l):"publickey"===n?h=new A(e,t,i,n,s,l):"hostbased"===n?h=new U(e,t,i,n,s,l):"password"===n?h=new B(e,t,i,n,s,l):"none"===n&&(h=new S(e,t,i,n,l)),a){if(!a._initialResponse)return f.push(h);a._multistep&&!this._finalResponse&&(a._cleanup&&a._cleanup(),a.emit("abort"))}a=h,o(r,"authentication")?r.emit("authentication",a):a.reject()}function l(t,i,n,s){a!==t||r.authenticated||(i?(e.removeListener("USERAUTH_REQUEST",u),a=void 0,r.authenticated=!0,e.authSuccess(),f=[],r.emit("ready")):(e.authFailure(n,s),f.length&&(a=f.pop(),o(r,"authentication")?r.emit("authentication",a):a.reject())))}e.on("SERVICE_REQUEST",(function(t){if(0===c||h||r.authenticated||"ssh-userauth"!==t)return e.disconnect(p.SERVICE_NOT_AVAILABLE);h=!0,e.serviceAccept(t)})).on("USERAUTH_REQUEST",u);var g=[];e.on("GLOBAL_REQUEST",(function(t,i,n){var s={type:null,buf:null};function a(t,r){s.type=t,s.buf=r,function(){for(var t;g.length>0&&g[0].type;)"SUCCESS"===(t=g.shift()).type&&e.requestSuccess(t.buf),"FAILURE"===t.type&&e.requestFailure()}()}if(i&&g.push(s),("tcpip-forward"===t||"cancel-tcpip-forward"===t||"no-more-sessions@openssh.com"===t||"streamlocal-forward@openssh.com"===t||"cancel-streamlocal-forward@openssh.com"===t)&&o(r,"request")&&r.authenticated){var c,h;if(i){var f=!1;c=function(e){var r;f||(f=!0,"tcpip-forward"===t&&0===n.bindPort&&"number"==typeof e&&(r=Buffer.allocUnsafe(4),v(r,e,0)),a("SUCCESS",r))},h=function(){f||(f=!0,a("FAILURE"))}}if("no-more-sessions@openssh.com"===t)return r.noMoreSessions=!0,void(c&&c());r.emit("request",c,h,t,n)}else i&&a("FAILURE")})),e.on("CHANNEL_OPEN",(function(t){if("session"===t.type&&r.noMoreSessions||!r.authenticated){var i=d.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,i)}var s,a,c=R(r),h=!1;if(!1===c)return e.channelOpenFail(t.sender,d.RESOURCE_SHORTAGE);switch(n[c]=!0,a=function(){if(!h){h=!0,delete n[c];var r=d.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,r)}},t.type){case"session":o(r,"session")?(s=function(){if(!h)return h=!0,e.channelOpenConfirm(t.sender,c,m.MAX_WINDOW,m.PACKET_SIZE),new b(r,t,c)},r.emit("session",s,a)):a();break;case"direct-tcpip":o(r,"tcpip")?(s=function(){if(!h){h=!0,e.channelOpenConfirm(t.sender,c,m.MAX_WINDOW,m.PACKET_SIZE);var i={type:void 0,incoming:{id:c,window:m.MAX_WINDOW,packetSize:m.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new m(i,r)}},r.emit("tcpip",s,a,t.data)):a();break;case"direct-streamlocal@openssh.com":o(r,"openssh.streamlocal")?(s=function(){if(!h){h=!0,e.channelOpenConfirm(t.sender,c,m.MAX_WINDOW,m.PACKET_SIZE);var i={type:void 0,incoming:{id:c,window:m.MAX_WINDOW,packetSize:m.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new m(i,r)}},r.emit("openssh.streamlocal",s,a,t.data)):a();break;default:a()}})),e.on("NEWKEYS",(function(){++c>1&&r.emit("rekey")})),i&&this.once("ready",(function(){i.add(e)}))}function b(e,t,r){this.subtype=void 0;var i,n=!1,s=this,a=t.sender,c={type:"session",incoming:{id:r,window:m.MAX_WINDOW,packetSize:m.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};e._sshstream.on("CHANNEL_REQUEST:"+r,(function(t){var r,h,f=!1;if(t.wantReply&&("shell"!==t.request&&"exec"!==t.request&&"subsystem"!==t.request&&(r=function(){if(!(f||n||i))return f=!0,e._sshstream.channelSuccess(a)}),h=function(){if(!(f||n||i))return f=!0,e._sshstream.channelFailure(a)}),n)h&&h();else switch(t.request){case"env":o(s,"env")?s.emit("env",r,h,{key:t.key,val:t.val}):h&&h();break;case"pty-req":o(s,"pty")?s.emit("pty",r,h,{cols:t.cols,rows:t.rows,width:t.width,height:t.height,term:t.term,modes:t.modes}):h&&h();break;case"window-change":o(s,"window-change")?s.emit("window-change",r,h,{cols:t.cols,rows:t.rows,width:t.width,height:t.height}):h&&h();break;case"x11-req":o(s,"x11")?s.emit("x11",r,h,{single:t.single,protocol:t.protocol,cookie:t.cookie,screen:t.screen}):h&&h();break;case"signal":o(s,"signal")?s.emit("signal",r,h,{name:t.signal}):h&&h();break;case"auth-agent-req@openssh.com":o(s,"auth-agent")?s.emit("auth-agent",r,h):h&&h();break;case"shell":o(s,"shell")?(r=function(){if(!(f||n||i))return f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new m(c,e,{server:!0})).subtype=s.subtype=t.request,i},s.emit("shell",r,h)):h&&h();break;case"exec":o(s,"exec")?(r=function(){if(!(f||n||i))return f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new m(c,e,{server:!0})).subtype=s.subtype=t.request,i},s.emit("exec",r,h,{command:t.command})):h&&h();break;case"subsystem":r=function(){if(!(f||n||i)){if(f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new m(c,e,{server:!0})).subtype=s.subtype=t.request+":"+t.subsystem,"sftp"===t.subsystem){var r=new u({server:!0,debug:e._sshstream.debug});return i.pipe(r).pipe(i),r}return i}},"sftp"===t.subsystem&&o(s,"sftp")?s.emit("sftp",r,h):"sftp"!==t.subsystem&&o(s,"subsystem")?s.emit("subsystem",r,h,{name:t.subsystem}):h&&h();break;default:h&&h()}})).once("CHANNEL_EOF:"+r,(function(){n=!0,s.emit("eof"),s.emit("end")})).once("CHANNEL_CLOSE:"+r,(function(){n=!0,s.emit("close")}))}function S(e,t,r,i,n){s.call(this);var o=this;this.username=this.user=t,this.service=r,this.method=i,this._initialResponse=!1,this._finalResponse=!1,this._multistep=!1,this._cbfinal=function(e,t,r){o._finalResponse||(o._finalResponse=!0,n(o,e,t,r))},this._stream=e}a(_,s),_.prototype.listen=function(){return this._srv.listen.apply(this._srv,arguments),this},_.prototype.address=function(){return this._srv.address()},_.prototype.getConnections=function(e){this._srv.getConnections(e)},_.prototype.close=function(e){return this._srv.close(e),this},_.prototype.ref=function(){this._srv.ref()},_.prototype.unref=function(){this._srv.unref()},a(w,s),w.prototype.end=function(){return this._sshstream.disconnect(p.BY_APPLICATION)},w.prototype.x11=function(e,t,r){return N(this,"x11",{originAddr:e,originPort:t},r)},w.prototype.forwardOut=function(e,t,r,i,n){return N(this,"forwarded-tcpip",{boundAddr:e,boundPort:t,remoteAddr:r,remotePort:i},n)},w.prototype.openssh_forwardOutStreamLocal=function(e,t){return N(this,"forwarded-streamlocal@openssh.com",{socketPath:e},t)},w.prototype.rekey=function(e){var t,r=this._sshstream,i=!0;try{i=r.rekey()}catch(e){t=e}return"function"==typeof e&&(t?process.nextTick((function(){e(t)})):this.once("rekey",e)),i},a(b,s),a(S,s),S.prototype.accept=function(){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!0)},S.prototype.reject=function(e,t){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!1,e,t)};var k=/[ \t\r\n]*,[ \t\r\n]*/g;function T(e,t,r,i,n,s){S.call(this,e,t,r,i,s),this._multistep=!0;var o=this;this._cb=void 0,this._onInfoResponse=function(e){if(o._cb){var t=o._cb;o._cb=void 0,t(e)}},this.submethods=n.split(k),this.on("abort",(function(){o._cb&&o._cb(new Error("Authentication request aborted"))}))}function A(e,t,r,i,n,s){var o;if(S.call(this,e,t,r,i,s),this.key={algo:n.keyAlgo,data:n.key},this.signature=n.signature,this.signature)switch(n.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=n.blob}function U(e,t,r,i,n,s){var o;if(S.call(this,e,t,r,i,s),this.key={algo:n.keyAlgo,data:n.key},this.signature=n.signature,this.signature)switch(n.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=n.blob,this.localHostname=n.localHostname,this.localUsername=n.localUsername}function B(e,t,r,i,n,s){S.call(this,e,t,r,i,s),this.password=n}function N(e,t,r,i){var n=R(e),s=m.MAX_WINDOW,o=m.PACKET_SIZE,a=!0;if(!1===n)return i(new Error("No free channels available"));"function"==typeof r&&(i=r,r={}),e._channels[n]=!0;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+n,(function(r){c.removeAllListeners("CHANNEL_OPEN_FAILURE:"+n);var a={type:t,incoming:{id:n,window:s,packetSize:o,state:"open"},outgoing:{id:r.sender,window:r.window,packetSize:r.packetSize,state:"open"}};i(void 0,new m(a,e,{server:!0}))})).once("CHANNEL_OPEN_FAILURE:"+n,(function(t){c.removeAllListeners("CHANNEL_OPEN_CONFIRMATION:"+n),delete e._channels[n];var r=new Error("(SSH) Channel open failure: "+t.description);r.reason=t.reason,r.lang=t.lang,i(r)})),"forwarded-tcpip"===t?a=c.forwardedTcpip(n,s,o,r):"x11"===t?a=c.x11(n,s,o,r):"forwarded-streamlocal@openssh.com"===t&&(a=c.openssh_forwardedStreamLocal(n,s,o,r)),a}function R(e){if(e._curChan<y)return++e._curChan;for(var t=0,r=e._channels;t<y;++t)if(!r[t])return t;return!1}a(T,S),T.prototype._cleanup=function(){this._stream.removeListener("USERAUTH_INFO_RESPONSE",this._onInfoResponse)},T.prototype.prompt=function(e,t,r,i){Array.isArray(e)||(e=[e]),"function"==typeof t?(i=t,t=r=void 0):"function"==typeof r&&(i=r,r=void 0);for(var n=0;n<e.length;++n)"string"==typeof e[n]&&(e[n]={prompt:e[n],echo:!0});return this._cb=i,this._initialResponse=!0,this._stream.once("USERAUTH_INFO_RESPONSE",this._onInfoResponse),this._stream.authInfoReq(t,r,e)},a(A,S),A.prototype.accept=function(){this.signature?S.prototype.accept.call(this):(this._initialResponse=!0,this._stream.authPKOK(this.key.algo,this.key.data))},a(U,S),a(B,S),_.createServer=function(e,t){return new _(e,t)},_.KEEPALIVE_INTERVAL=1e3,_.KEEPALIVE_CLIENT_INTERVAL=15e3,_.KEEPALIVE_CLIENT_COUNT_MAX=3,e.exports=_,e.exports.IncomingClient=w},function(e,t){function r(e,t){for(var r=t,i=r+1,n=e.length;i<n;r+=1,i+=1)e[r]=e[i];e.pop()}function i(e,t,i){var n=this._streams=[];this._timer=void 0,this._timerInterval=e,this._timerfn=function(){for(var e,s,o=Date.now(),a=0,c=n.length;a<c;++a)if((s=(e=n[a])._kalast)&&o-s>=t)if(++e._kacnt>i){var h=new Error("Keepalive timeout");h.level="client-timeout",e.emit("error",h),e.disconnect(),r(n,a),--a,c=n.length}else e._kalast=o,e.ping()}}i.prototype.start=function(){this._timer&&this.stop(),this._timer=setInterval(this._timerfn,this._timerInterval)},i.prototype.stop=function(){this._timer&&(clearInterval(this._timer),this._timer=void 0)},i.prototype.add=function(e){var t=this._streams,r=this;function i(){e._kalast=Date.now(),e._kacnt=0}e.once("end",(function(){r.remove(e)})).on("packet",i),t[t.length]=e,i(),this._timer||this.start()},i.prototype.remove=function(e){var t=this._streams,i=t.indexOf(e);i>-1&&r(t,i),t.length||this.stop()},e.exports=i}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdXNseS1jb3JlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcImV2ZW50c1wiIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJzdHJlYW1cIiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3NzaDItc3RyZWFtcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyLXN0cmVhbXMvbGliL2J1ZmZlci1oZWxwZXJzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3NzaDIvbGliL2J1ZmZlci1oZWxwZXJzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJuZXRcIiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2Jhc2ljLWZ0cC9kaXN0L0ZpbGVJbmZvLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYmFzaWMtZnRwL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcInRsc1wiIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYmFzaWMtZnRwL2Rpc3QvcGFyc2VDb250cm9sUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy9zdHJhdGVnaWVzL3N0cmF0ZWd5LnRzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc3NoMi1zdHJlYW1zL2luZGV4LmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvZXJyb3JzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc3NoMi1zdHJlYW1zL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy91dGlscy9mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vc3JjL3N0cmF0ZWdpZXMvZnRwLnRzIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9iYXNpYy1mdHAvZGlzdC9GdHBDb250ZXh0LmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYmFzaWMtZnRwL2Rpc3QvcGFyc2VMaXN0LmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYmFzaWMtZnRwL2Rpc3QvcGFyc2VMaXN0TUxTRC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2Jhc2ljLWZ0cC9kaXN0L25ldFV0aWxzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYmFzaWMtZnRwL2Rpc3QvdHJhbnNmZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy91dGlscy9mdHAudHMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy9zdHJhdGVnaWVzL3NmdHAudHMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyL2xpYi9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcImFzc2VydFwiIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc2FmZXItYnVmZmVyL3NhZmVyLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc3NoMi1zdHJlYW1zL2xpYi9rZXlQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyL2xpYi9DaGFubmVsLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy9jbGllbnQudHMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy90YXNrcy50cyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2Jhc2ljLWZ0cC9kaXN0L0NsaWVudC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2Jhc2ljLWZ0cC9kaXN0L3BhcnNlTGlzdERPUy5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2Jhc2ljLWZ0cC9kaXN0L3BhcnNlTGlzdFVuaXguanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9iYXNpYy1mdHAvZGlzdC9Qcm9ncmVzc1RyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9iYXNpYy1mdHAvZGlzdC9TdHJpbmdXcml0ZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9iYXNpYy1mdHAvZGlzdC9TdHJpbmdFbmNvZGluZy5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vc3JjL3RyYW5zZmVyLnRzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9zcmMvdXRpbHMvYXJyYXkudHMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL3NyYy91dGlscy9maWxlLnRzIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJkbnNcIiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3NzaDItc3RyZWFtcy9saWIvc2Z0cC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9yZWFkZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcImJ1ZmZlclwiIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3dyaXRlci5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL2JjcnlwdC1wYmtkZi9pbmRleC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3R3ZWV0bmFjbC9uYWNsLWZhc3QuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyLXN0cmVhbXMvbGliL2pzYm4uanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyLXN0cmVhbXMvbGliL25vZGUtZnMtY29tcGF0LmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc3NoMi1zdHJlYW1zL2xpYi9zc2guanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcInpsaWJcIiIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3N0cmVhbXNlYXJjaC9saWIvc2JtaC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlLy4vbm9kZV9tb2R1bGVzL3NzaDIvbGliL2h0dHAtYWdlbnRzLmpzIiwid2VicGFjazovL3F1c2x5LWNvcmUvZXh0ZXJuYWwgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS9leHRlcm5hbCBcImh0dHBzXCIiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyL2xpYi9hZ2VudC5qcyIsIndlYnBhY2s6Ly9xdXNseS1jb3JlL2V4dGVybmFsIFwiY2hpbGRfcHJvY2Vzc1wiIiwid2VicGFjazovL3F1c2x5LWNvcmUvLi9ub2RlX21vZHVsZXMvc3NoMi9saWIvU0ZUUFdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyL2xpYi9zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vcXVzbHktY29yZS8uL25vZGVfbW9kdWxlcy9zc2gyL2xpYi9rZWVwYWxpdmVtZ3IuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZ2xvYmFsIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJCZXIiLCJyZWFkVUludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwicmVhZFN0cmluZyIsImJ1ZmZlciIsInN0YXJ0IiwiZW5jb2RpbmciLCJzdHJlYW0iLCJjYiIsIm1heExlbiIsIkJ1ZmZlciIsImlzQnVmZmVyIiwidW5kZWZpbmVkIiwibGVuIiwiZW5kIiwiYnVmZmVyTGVuIiwibGVuZ3RoIiwibGVmdCIsIkluZmluaXR5IiwiX2NsZWFudXAiLCJfcG9zIiwiY29weSIsInRvU3RyaW5nIiwic2xpY2UiLCJpdl9pbmMiLCJpdiIsInJlYWRJbnQiLCJwYXJzZUtleSIsInNpZ1NTSFRvQVNOMSIsInNpZyIsInR5cGUiLCJzZWxmIiwiY2FsbGJhY2siLCJhc25Xcml0ZXIiLCJXcml0ZXIiLCJzdGFydFNlcXVlbmNlIiwick5ldyIsImFsbG9jVW5zYWZlIiwic05ldyIsIndyaXRlQnVmZmVyIiwiSW50ZWdlciIsImVuZFNlcXVlbmNlIiwiRFNBU2lnQkVSVG9CYXJlIiwic2lnbmF0dXJlIiwiYXNuUmVhZGVyIiwiUmVhZGVyIiwicmVhZFNlcXVlbmNlIiwick9mZnNldCIsInNPZmZzZXQiLCJuZXdTaWciLCJFQ0RTQVNpZ0FTTjFUb1NTSCIsImJ1ZiIsIm9mZnNldCIsIndyaXRlVUludDMyTEUiLCJGaWxlVHlwZSIsIkZpbGVJbmZvIiwidGhpcyIsIlVua25vd24iLCJzaXplIiwicmF3TW9kaWZpZWRBdCIsIm1vZGlmaWVkQXQiLCJwZXJtaXNzaW9ucyIsImhhcmRMaW5rQ291bnQiLCJsaW5rIiwiZ3JvdXAiLCJ1c2VyIiwidW5pcXVlSUQiLCJEaXJlY3RvcnkiLCJTeW1ib2xpY0xpbmsiLCJGaWxlIiwiVW5peFBlcm1pc3Npb24iLCJSZWFkIiwiV3JpdGUiLCJFeGVjdXRlIiwiX19jcmVhdGVCaW5kaW5nIiwiayIsImsyIiwiX19leHBvcnRTdGFyIiwidHJhbnNmZXJfMSIsImVudGVyUGFzc2l2ZU1vZGVJUHY0IiwiZW50ZXJQYXNzaXZlTW9kZUlQdjYiLCJwb3NpdGl2ZUludGVybWVkaWF0ZSIsInBvc2l0aXZlQ29tcGxldGlvbiIsImlzTXVsdGlsaW5lIiwiaXNTaW5nbGVMaW5lIiwicGFyc2VDb250cm9sUmVzcG9uc2UiLCJsaW5lIiwidGVzdCIsInRleHQiLCJsaW5lcyIsInNwbGl0IiwibWVzc2FnZXMiLCJ0b2tlblJlZ2V4Iiwic3RhcnRBdCIsInB1c2giLCJqb2luIiwidG9rZW4iLCJzdWJzdHIiLCJSZWdFeHAiLCJyZXN0IiwiY29kZSIsIlN0cmF0ZWd5IiwiRXZlbnRFbWl0dGVyIiwiY29uZmlnIiwib3B0aW9ucyIsInN1cGVyIiwiZGlzY29ubmVjdCIsImNvbm5lY3QiLCJpbmZvIiwidHJhbnNmZXIiLCJUcmFuc2ZlciIsImRhdGEiLCJwcm9ncmVzcyIsImVtaXQiLCJoYW5kbGVQcm9ncmVzcyIsImNsZWFuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNsZWFuIiwicmVtb3ZlTGlzdGVuZXIiLCJvbkRpc2Nvbm5lY3QiLCJvblJlc29sdmUiLCJvblJlamVjdCIsImVyciIsIm9uY2UiLCJTRlRQU3RyZWFtIiwiU1NIMlN0cmVhbSIsInV0aWxzIiwiY29uc3RhbnRzIiwiQmVyUmVhZGVyIiwiQmVyV3JpdGVyIiwibmV3SW52YWxpZEFzbjFFcnJvciIsIm1zZyIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJFT0MiLCJCb29sZWFuIiwiQml0U3RyaW5nIiwiT2N0ZXRTdHJpbmciLCJOdWxsIiwiT0lEIiwiT2JqZWN0RGVzY3JpcHRvciIsIkV4dGVybmFsIiwiUmVhbCIsIkVudW1lcmF0aW9uIiwiUERWIiwiVXRmOFN0cmluZyIsIlJlbGF0aXZlT0lEIiwiU2VxdWVuY2UiLCJTZXQiLCJOdW1lcmljU3RyaW5nIiwiUHJpbnRhYmxlU3RyaW5nIiwiVDYxU3RyaW5nIiwiVmlkZW90ZXhTdHJpbmciLCJJQTVTdHJpbmciLCJVVENUaW1lIiwiR2VuZXJhbGl6ZWRUaW1lIiwiR3JhcGhpY1N0cmluZyIsIlZpc2libGVTdHJpbmciLCJHZW5lcmFsU3RyaW5nIiwiVW5pdmVyc2FsU3RyaW5nIiwiQ2hhcmFjdGVyU3RyaW5nIiwiQk1QU3RyaW5nIiwiQ29uc3RydWN0b3IiLCJDb250ZXh0Iiwia2V5cyIsImNyeXB0byIsImVkZHNhU3VwcG9ydGVkIiwic2lnbiIsInZlcmlmeSIsInZlcmlmaWVkIiwiZnJvbSIsImV4IiwiY3VydmUyNTUxOVN1cHBvcnRlZCIsImRpZmZpZUhlbGxtYW4iLCJnZW5lcmF0ZUtleVBhaXJTeW5jIiwiY3JlYXRlUHVibGljS2V5IiwiTUVTU0FHRSIsIkRJU0NPTk5FQ1QiLCJJR05PUkUiLCJVTklNUExFTUVOVEVEIiwiREVCVUciLCJTRVJWSUNFX1JFUVVFU1QiLCJTRVJWSUNFX0FDQ0VQVCIsIktFWElOSVQiLCJORVdLRVlTIiwiVVNFUkFVVEhfUkVRVUVTVCIsIlVTRVJBVVRIX0ZBSUxVUkUiLCJVU0VSQVVUSF9TVUNDRVNTIiwiVVNFUkFVVEhfQkFOTkVSIiwiR0xPQkFMX1JFUVVFU1QiLCJSRVFVRVNUX1NVQ0NFU1MiLCJSRVFVRVNUX0ZBSUxVUkUiLCJDSEFOTkVMX09QRU4iLCJDSEFOTkVMX09QRU5fQ09ORklSTUFUSU9OIiwiQ0hBTk5FTF9PUEVOX0ZBSUxVUkUiLCJDSEFOTkVMX1dJTkRPV19BREpVU1QiLCJDSEFOTkVMX0RBVEEiLCJDSEFOTkVMX0VYVEVOREVEX0RBVEEiLCJDSEFOTkVMX0VPRiIsIkNIQU5ORUxfQ0xPU0UiLCJDSEFOTkVMX1JFUVVFU1QiLCJDSEFOTkVMX1NVQ0NFU1MiLCJDSEFOTkVMX0ZBSUxVUkUiLCJLRVhESF9JTklUIiwiS0VYREhfUkVQTFkiLCJLRVhESF9HRVhfUkVRVUVTVCIsIktFWERIX0dFWF9HUk9VUCIsIktFWERIX0dFWF9JTklUIiwiS0VYREhfR0VYX1JFUExZIiwiS0VYRUNESF9JTklUIiwiS0VYRUNESF9SRVBMWSIsIlVTRVJBVVRIX1BBU1NXRF9DSEFOR0VSRVEiLCJVU0VSQVVUSF9QS19PSyIsIlVTRVJBVVRIX0lORk9fUkVRVUVTVCIsIlVTRVJBVVRIX0lORk9fUkVTUE9OU0UiLCJEWU5BTUlDX0tFWERIX01FU1NBR0UiLCJLRVhESF9NRVNTQUdFIiwiRElTQ09OTkVDVF9SRUFTT04iLCJIT1NUX05PVF9BTExPV0VEX1RPX0NPTk5FQ1QiLCJQUk9UT0NPTF9FUlJPUiIsIktFWV9FWENIQU5HRV9GQUlMRUQiLCJSRVNFUlZFRCIsIk1BQ19FUlJPUiIsIkNPTVBSRVNTSU9OX0VSUk9SIiwiU0VSVklDRV9OT1RfQVZBSUxBQkxFIiwiUFJPVE9DT0xfVkVSU0lPTl9OT1RfU1VQUE9SVEVEIiwiSE9TVF9LRVlfTk9UX1ZFUklGSUFCTEUiLCJDT05ORUNUSU9OX0xPU1QiLCJCWV9BUFBMSUNBVElPTiIsIlRPT19NQU5ZX0NPTk5FQ1RJT05TIiwiQVVUSF9DQU5DRUxFRF9CWV9VU0VSIiwiTk9fTU9SRV9BVVRIX01FVEhPRFNfQVZBSUxBQkxFIiwiSUxMRUdBTF9VU0VSX05BTUUiLCJBRE1JTklTVFJBVElWRUxZX1BST0hJQklURUQiLCJDT05ORUNUX0ZBSUxFRCIsIlVOS05PV05fQ0hBTk5FTF9UWVBFIiwiUkVTT1VSQ0VfU0hPUlRBR0UiLCJURVJNSU5BTF9NT0RFIiwiVFRZX09QX0VORCIsIlZJTlRSIiwiVlFVSVQiLCJWRVJBU0UiLCJWS0lMTCIsIlZFT0YiLCJWRU9MIiwiVkVPTDIiLCJWU1RBUlQiLCJWU1RPUCIsIlZTVVNQIiwiVkRTVVNQIiwiVlJFUFJJTlQiLCJWV0VSQVNFIiwiVkxORVhUIiwiVkZMVVNIIiwiVlNXVENIIiwiVlNUQVRVUyIsIlZESVNDQVJEIiwiSUdOUEFSIiwiUEFSTVJLIiwiSU5QQ0siLCJJU1RSSVAiLCJJTkxDUiIsIklHTkNSIiwiSUNSTkwiLCJJVUNMQyIsIklYT04iLCJJWEFOWSIsIklYT0ZGIiwiSU1BWEJFTCIsIklTSUciLCJJQ0FOT04iLCJYQ0FTRSIsIkVDSE8iLCJFQ0hPRSIsIkVDSE9LIiwiRUNIT05MIiwiTk9GTFNIIiwiVE9TVE9QIiwiSUVYVEVOIiwiRUNIT0NUTCIsIkVDSE9LRSIsIlBFTkRJTiIsIk9QT1NUIiwiT0xDVUMiLCJPTkxDUiIsIk9DUk5MIiwiT05PQ1IiLCJPTkxSRVQiLCJDUzciLCJDUzgiLCJQQVJFTkIiLCJQQVJPREQiLCJUVFlfT1BfSVNQRUVEIiwiVFRZX09QX09TUEVFRCIsIkNIQU5ORUxfRVhURU5ERURfREFUQVRZUEUiLCJTVERFUlIiLCJTSUdOQUxTIiwiREVGQVVMVF9LRVgiLCJ1bnNoaWZ0IiwiU1VQUE9SVEVEX0tFWCIsIktFWF9CVUYiLCJjb25jYXQiLCJERUZBVUxUX1NFUlZFUl9IT1NUX0tFWSIsIlNVUFBPUlRFRF9TRVJWRVJfSE9TVF9LRVkiLCJTRVJWRVJfSE9TVF9LRVlfQlVGIiwiREVGQVVMVF9DSVBIRVIiLCJTVVBQT1JURURfQ0lQSEVSIiwiQ0lQSEVSX0JVRiIsIkRFRkFVTFRfSE1BQyIsIlNVUFBPUlRFRF9ITUFDIiwiSE1BQ19CVUYiLCJERUZBVUxUX0NPTVBSRVNTIiwiU1VQUE9SVEVEX0NPTVBSRVNTIiwiQ09NUFJFU1NfQlVGIiwibWFrZUNpcGhlckluZm8iLCJibG9ja0xlbiIsImtleUxlbiIsIml2TGVuIiwiYXV0aExlbiIsImRpc2NhcmRMZW4iLCJtYWtlSE1BQ0luZm8iLCJhY3R1YWxMZW4iLCJDSVBIRVJfSU5GTyIsIkhNQUNfSU5GTyIsIkFMR09SSVRITVMiLCJLRVgiLCJTRVJWRVJfSE9TVF9LRVkiLCJDSVBIRVIiLCJITUFDIiwiQ09NUFJFU1MiLCJTU0hfVE9fT1BFTlNTTCIsIkJVR1MiLCJCQURfREhHRVgiLCJPTERfRVhJVCIsIkRZTl9SUE9SVF9CVUciLCJCVUdHWV9JTVBMUyIsIkVERFNBX1NVUFBPUlRFRCIsIkNVUlZFMjU1MTlfU1VQUE9SVEVEIiwiZXhlY0Z1bmN0aW9uIiwiZiIsImFyZ3MiLCJlcnJvciIsIkZ0cFN0cmF0ZWd5IiwiY29ubmVjdGVkIiwiY2xpZW50IiwiQ2xpZW50IiwiYWNjZXNzIiwic2VjdXJlIiwiaXNGVFBTIiwic2VjdXJlT3B0aW9ucyIsImNsb3NlIiwiZnRwIiwic29ja2V0IiwiZG93bmxvYWQiLCJkZXN0IiwiaGFuZGxlVHJhbnNmZXIiLCJkb3dubG9hZFRvIiwicmVtb3RlUGF0aCIsInVwbG9hZCIsInNvdXJjZSIsInVwbG9hZEZyb20iLCJsaXN0IiwicGF0aCIsImhhbmRsZSIsInRoZW4iLCJtYXAiLCJmb3JtYXRGaWxlIiwiZXhpc3RzIiwicmVuYW1lIiwibW92ZSIsInJlbW92ZUZpbGUiLCJyZW1vdmUiLCJyZW1vdmVFbXB0eUZvbGRlciIsInJlbW92ZUVtcHR5RGlyIiwicmVtb3ZlRm9sZGVyIiwicmVtb3ZlRGlyIiwiY3JlYXRlRm9sZGVyIiwic2VuZCIsImNyZWF0ZUVtcHR5RmlsZSIsIlJlYWRhYmxlIiwicXVpZXQiLCJwd2QiLCJjb21tYW5kIiwiZmlsZSIsIkZ0cFV0aWxzIiwibGFzdE1vZGlmaWVkIiwiZ2V0VmFsaWREYXRlIiwiZGF0ZSIsImZuIiwic3RhcnRzV2l0aCIsImhhbmRsZXIiLCJwcmVwYXJlVHJhbnNmZXIiLCJ0cmFja1Byb2dyZXNzIiwiYnl0ZXMiLCJmaW5pc2hUcmFuc2ZlciIsImNsb3NlZCIsInByb3RvY29sIiwiRlRQQ29udGV4dCIsIkZUUEVycm9yIiwibmV0XzEiLCJwYXJzZUNvbnRyb2xSZXNwb25zZV8xIiwicmVzIiwiY29uc3RydWN0b3IiLCJ0aW1lb3V0IiwidmVyYm9zZSIsImlwRmFtaWx5IiwidGxzT3B0aW9ucyIsIl9wYXJ0aWFsUmVzcG9uc2UiLCJfZW5jb2RpbmciLCJfc29ja2V0IiwiX25ld1NvY2tldCIsIl9kYXRhU29ja2V0IiwiX3Rhc2siLCJjbG9zZVdpdGhFcnJvciIsIl9jbG9zaW5nRXJyb3IiLCJfY2xvc2VTb2NrZXQiLCJfcGFzc1RvSGFuZGxlciIsIl9zdG9wVHJhY2tpbmdUYXNrIiwicmVtb3RlQWRkcmVzcyIsImRhdGFTb2NrZXQiLCJsb2NhbFBvcnQiLCJkZXN0cm95IiwiX3JlbW92ZVNvY2tldExpc3RlbmVycyIsInNldFRpbWVvdXQiLCJzZXRFbmNvZGluZyIsInNldEtlZXBBbGl2ZSIsIm9uIiwiX29uQ29udHJvbFNvY2tldERhdGEiLCJoYWRFcnJvciIsIl9zZXR1cERlZmF1bHRFcnJvckhhbmRsZXJzIiwibG9nIiwid3JpdGUiLCJ0YXNrIiwicmVzcG9uc2VIYW5kbGVyIiwic3RhY2siLCJyZXNvbHZlUHJvbWlzZSIsInJlamVjdFByb21pc2UiLCJyZXNvbHZlciIsImNvbnNvbGUiLCJjaHVuayIsInRyaW1tZWRDaHVuayIsInRyaW0iLCJjb21wbGV0ZVJlc3BvbnNlIiwicGFyc2VkIiwicGFyc2VJbnQiLCJyZXNwb25zZSIsImlkZW50aWZpZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJTb2NrZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicGFyc2VMaXN0IiwiYXZhaWxhYmxlUGFyc2VycyIsInN0cmluZ0lzTm90QmxhbmsiLCJzdHIiLCJSRUdFWF9ORVdMSU5FIiwicmF3TGlzdCIsImZpbHRlciIsInRlc3RMaW5lIiwicGFyc2VyIiwiZmluZCIsImZpbGVzIiwicGFyc2VMaW5lIiwidHJhbnNmb3JtTGlzdCIsInBhcnNlTUxTeERhdGUiLCJGaWxlSW5mb18xIiwicGFyc2VTaXplIiwiZmFjdEhhbmRsZXJzQnlOYW1lIiwidG9JU09TdHJpbmciLCJpbmRleE9mIiwiZGlnaXRzIiwid29ybGQiLCJzcGxpdFN0cmluZ09uY2UiLCJkZWxpbWl0ZXIiLCJwb3MiLCJmYWN0IiwiRGF0ZSIsIlVUQyIsInBhY2tlZEZhY3RzIiwiZmFjdHMiLCJmYWN0TmFtZSIsImZhY3RWYWx1ZSIsImZhY3RIYW5kbGVyIiwidG9Mb3dlckNhc2UiLCJub25MaW5rc0J5SUQiLCJNYXAiLCJpc1N5bWJvbGljTGluayIsInNldCIsInJlc29sdmVkRmlsZXMiLCJ0YXJnZXQiLCJpbmNsdWRlcyIsImlwSXNQcml2YXRlVjRBZGRyZXNzIiwidXBncmFkZVNvY2tldCIsImRlc2NyaWJlQWRkcmVzcyIsImRlc2NyaWJlVExTIiwidGxzXzEiLCJUTFNTb2NrZXQiLCJnZXRQcm90b2NvbCIsInJlbW90ZUZhbWlseSIsInJlbW90ZVBvcnQiLCJhc3NpZ24iLCJ0bHNTb2NrZXQiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJhdXRob3JpemVkIiwiYXV0aG9yaXphdGlvbkVycm9yIiwiaXAiLCJvY3RldHMiLCJjb25uZWN0Rm9yUGFzc2l2ZVRyYW5zZmVyIiwicGFyc2VQYXN2UmVzcG9uc2UiLCJwYXJzZUVwc3ZSZXNwb25zZSIsIm5ldFV0aWxzXzEiLCJncm91cHMiLCJtYXRjaCIsInBvcnQiLCJOdW1iZXIiLCJpc05hTiIsImhvc3QiLCJyZXBsYWNlIiwiaGFuZGxlQ29ubkVyciIsImZhbWlseSIsInNlc3Npb24iLCJnZXRTZXNzaW9uIiwiYXN5bmMiLCJyZXF1ZXN0IiwiY29udHJvbEhvc3QiLCJUcmFuc2ZlclJlc29sdmVyIiwiZGF0YVRyYW5zZmVyRG9uZSIsInVwZGF0ZUFuZFN0b3AiLCJ0cnlSZXNvbHZlIiwib25Db25kaXRpb25PckV2ZW50IiwiY29uZGl0aW9uIiwiZW1pdHRlciIsImV2ZW50TmFtZSIsImFjdGlvbiIsInRyYWNrZXIiLCJmdWxsQ29tbWFuZCIsIm9uRXJyb3IiLCJnZXRDaXBoZXIiLCJvbkRhdGFTdGFydCIsInBpcGUiLCJvbkRhdGFEb25lIiwib25Db250cm9sRG9uZSIsIm9uVW5leHBlY3RlZFJlcXVlc3QiLCJkZXN0aW5hdGlvbiIsIndyaXRhYmxlRmluaXNoZWQiLCJ3U3RhdGUiLCJfd3JpdGFibGVTdGF0ZSIsImVycm9yZWQiLCJmaW5pc2hlZCIsImVuZGVkIiwiaXNXcml0YWJsZUZpbmlzaGVkIiwiTVNET1NfREFURV9SRUdFWCIsImdldEZpbGVUeXBlIiwib3duZXIiLCJtb250aCIsImRheSIsInllYXIiLCJfaG91ciIsIm1pbnV0ZXMiLCJob3VyIiwidGltZSIsIlNmdHBTdHJhdGVneSIsIm9uUmVhZHkiLCJvbktleWJvYXJkSW50ZXJhY3RpdmUiLCJ3cmFwcGVyIiwiZ2V0V3JhcHBlciIsInRyeUtleWJvYXJkIiwidXNlcm5hbWUiLCJyZWFkeVRpbWVvdXQiLCJpbnN0cnVjdGlvbnMiLCJpbnN0cnVjdGlvbnNMYW5nIiwicHJvbXB0cyIsImZpbmlzaCIsInBhc3N3b3JkIiwiY3JlYXRlUmVhZFN0cmVhbSIsImF1dG9DbG9zZSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiX2xpc3QiLCJsb25nbmFtZSIsImVudHJ5IiwiZ2V0RGF0ZUZyb21Vbml4VGltZSIsImF0dHJzIiwibXRpbWUiLCJfc3RhdCIsInVubGluayIsInJtZGlyIiwiZmlsZVBhdGgiLCJmaWxlbmFtZSIsImlzRGlyZWN0b3J5IiwibWtkaXIiLCJfb3BlbiIsIl9jbG9zZSIsInJlYWxwYXRoIiwiaGFuZGxlTmV0d29yayIsImV4ZWMiLCJidWZmZXJlZCIsImJ5dGVMZW5ndGgiLCJ1bnBpcGUiLCJfc29jayIsInByb21pc2lmeSIsInNmdHAiLCJyZWFkZGlyIiwic3RhdCIsIm9wZW4iLCJkbnNMb29rdXAiLCJsb29rdXAiLCJpbmhlcml0cyIsIkhBU0hFUyIsImdldEhhc2hlcyIsInNzaDJfc3RyZWFtcyIsImNvbnN0cyIsIkhUVFBBZ2VudHMiLCJDaGFubmVsIiwiYWdlbnRRdWVyeSIsIlNGVFBXcmFwcGVyIiwiTUFYX0NIQU5ORUwiLCJNYXRoIiwicG93IiwiUkVfT1BFTlNTSCIsIkRFQlVHX05PT1AiLCJsb2NhbEFkZHJlc3MiLCJmb3JjZUlQdjQiLCJmb3JjZUlQdjYiLCJrZWVwYWxpdmVDb3VudE1heCIsImtlZXBhbGl2ZUludGVydmFsIiwicHJpdmF0ZUtleSIsImFnZW50IiwiYWxsb3dBZ2VudEZ3ZCIsImF1dGhIYW5kbGVyIiwiaG9zdEhhc2hBbGdvIiwiaG9zdEhhc2hDYiIsInN0cmljdFZlbmRvciIsImRlYnVnIiwiX3JlYWR5VGltZW91dCIsIl9jaGFubmVscyIsIl9jYWxsYmFja3MiLCJfZm9yd2FyZGluZyIsIl9mb3J3YXJkaW5nVW5peCIsIl9hY2NlcHRYMTEiLCJfYWdlbnRGd2RFbmFibGVkIiwiX2N1ckNoYW4iLCJfcmVtb3RlVmVyIiwiX3NzaHN0cmVhbSIsIl9yZXNldEtBIiwib3BlbkNoYW5uZWwiLCJvcHRzIiwibG9jYWxDaGFuIiwibmV4dENoYW5uZWwiLCJpbml0V2luZG93IiwiTUFYX1dJTkRPVyIsIm1heFBhY2tldCIsIlBBQ0tFVF9TSVpFIiwicmV0Iiwic3Noc3RyZWFtIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwiZGlyZWN0VGNwaXAiLCJvcGVuc3NoX2RpcmVjdFN0cmVhbUxvY2FsIiwiY2hhbmluZm8iLCJpbmNvbWluZyIsImlkIiwid2luZG93IiwicGFja2V0U2l6ZSIsInN0YXRlIiwib3V0Z29pbmciLCJzZW5kZXIiLCJkZXNjcmlwdGlvbiIsInJlYXNvbiIsImxhbmciLCJjaGFubmVscyIsInJlcVgxMSIsImNoYW4iLCJzY3JlZW4iLCJjZmciLCJzaW5nbGUiLCJjb29raWUiLCJyYW5kb21Db29raWUiLCJ3YW50UmVwbHkiLCJoYWRfZXJyIiwiX2hhc1gxMSIsIl9jbGllbnQiLCJ4MTFGb3J3YXJkIiwicmVxUHR5Iiwicm93cyIsImNvbHMiLCJ3aWR0aCIsImhlaWdodCIsInRlcm0iLCJtb2RlcyIsInB0eSIsInJlcUFnZW50RndkIiwib3BlbnNzaF9hZ2VudEZvcndhcmQiLCJyZXFFbnYiLCJlbnYiLCJ2YWwiLCJyZXFTdWJzeXN0ZW0iLCJzdWJ0eXBlIiwic3Vic3lzdGVtIiwid3JpdGFibGUiLCJob3N0bmFtZSIsImFsZ29yaXRobXMiLCJrZXgiLCJrZXhCdWYiLCJjaXBoZXIiLCJjaXBoZXJCdWYiLCJzZXJ2ZXJIb3N0S2V5Iiwic2VydmVySG9zdEtleUJ1ZiIsImhtYWMiLCJobWFjQnVmIiwiY29tcHJlc3MiLCJjb21wcmVzc0J1ZiIsImFsZ29zU3VwcG9ydGVkIiwiYWxnb0xpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJsb2NhbEhvc3RuYW1lIiwibG9jYWxVc2VybmFtZSIsImFnZW50Rm9yd2FyZCIsImNhbGxiYWNrcyIsInBhc3NwaHJhc2UiLCJnZXRQcml2YXRlUEVNIiwic29jayIsInN0ZGVyciIsInJlc3VtZSIsImthdGltZXIiLCJjdXJBdXRoIiwia2FpbnRlcnZhbCIsImthY291bnRtYXgiLCJrYWNvdW50Iiwic2VuZEtBIiwiY2xlYXJJbnRlcnZhbCIsInJlYWRhYmxlIiwibGV2ZWwiLCJyZXNldEtBIiwicGluZyIsInNldEludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiY2FsbGJhY2tzXyIsImNoYW5Ob3MiLCJlYXJseUNiIiwiZXYxIiwiZXYyIiwiaGVhZGVyIiwidmVyc2lvbnMiLCJzb2Z0d2FyZSIsImdyZWV0aW5nIiwiaG9zdFZlcmlmaWVyIiwiaG9zdEhhc2giLCJoYXNoQ2IiLCJoYXNoZXIiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiYWdlbnRLZXlzIiwiY3VyUGFydGlhbCIsImN1ckF1dGhzTGVmdCIsImFnZW50S2V5UG9zIiwiYXV0aHNBbGxvd2VkIiwiYXV0aFBvcyIsImF1dGhzTGVmdCIsInBhcnRpYWwiLCJoYXNTZW50QXV0aCIsImRvTmV4dEF1dGgiLCJhdXRoTmFtZSIsIm9uVVNFUkFVVEhfRkFJTFVSRSIsIm9uVVNFUkFVVEhfUEtfT0siLCJhdXRoUGFzc3dvcmQiLCJhdXRoUEsiLCJhdXRoSG9zdGJhc2VkIiwidHJ5TmV4dEF1dGgiLCJhdXRoS2V5Ym9hcmQiLCJvblVTRVJBVVRIX0lORk9fUkVRVUVTVCIsImF1dGhOb25lIiwiYXV0aCIsInRyeU5leHRBZ2VudEtleSIsImF1dGhJbmZvUmVzIiwiYW5zd2VycyIsImFnZW50S2V5IiwicHViS2V5RnVsbFR5cGUiLCJwdWJLZXlUeXBlIiwic2lnbmVkIiwic2lnRnVsbFR5cGVMZW4iLCJzZXJ2aWNlIiwic3ZjTmFtZSIsImFjY2VwdCIsImNoYW5uZWxPcGVuQ29uZmlybSIsImNoYW5uZWxPcGVuRmFpbCIsInJlamVjdENvbm4iLCJkZXN0SVAiLCJkZXN0UG9ydCIsInNvY2tldFBhdGgiLCJvbkNIQU5ORUxfT1BFTiIsInNoaWZ0IiwicmVxdWVzdEZhaWx1cmUiLCJzdGFydFRpbWVvdXQiLCJkb0Nvbm5lY3QiLCJzZXROb0RlbGF5Iiwic2V0TWF4TGlzdGVuZXJzIiwiYWRkcmVzcyIsImNtZCIsImFsbG93SGFsZk9wZW4iLCJ0b2RvIiwicmVxQ2IiLCJ4MTEiLCJyZXFFeGVjIiwic2hlbGwiLCJ3bmRvcHRzIiwicmVxU2hlbGwiLCJzdWJzeXMiLCJzZXJ2ZXJJZGVudFJhdyIsIl9zdGF0ZSIsImlkZW50UmF3Iiwib25FeGl0Iiwic2lnbmFsIiwiZm9yd2FyZEluIiwiYmluZEFkZHIiLCJiaW5kUG9ydCIsInJlYWxQb3J0IiwicmVtb3RlQnVncyIsInRjcGlwRm9yd2FyZCIsInVuZm9yd2FyZEluIiwiY2FuY2VsVGNwaXBGb3J3YXJkIiwiZm9yd2FyZE91dCIsInNyY0lQIiwic3JjUG9ydCIsImRzdElQIiwiZHN0UG9ydCIsIm9wZW5zc2hfbm9Nb3JlU2Vzc2lvbnMiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJvcGVuc3NoX2ZvcndhcmRJblN0cmVhbUxvY2FsIiwib3BlbnNzaF9zdHJlYW1Mb2NhbEZvcndhcmQiLCJvcGVuc3NoX3VuZm9yd2FyZEluU3RyZWFtTG9jYWwiLCJvcGVuc3NoX2NhbmNlbFN0cmVhbUxvY2FsRm9yd2FyZCIsIm9wZW5zc2hfZm9yd2FyZE91dFN0cmVhbUxvY2FsIiwicmFuZG9tRmlsbFN5bmMiLCJhbGxvYyIsInJhbmRvbUJ5dGVzIiwiU2VydmVyIiwiU0ZUUF9TVEFUVVNfQ09ERSIsIlNUQVRVU19DT0RFIiwiU0ZUUF9PUEVOX01PREUiLCJPUEVOX01PREUiLCJIVFRQQWdlbnQiLCJTU0hUVFBBZ2VudCIsIkhUVFBTQWdlbnQiLCJTU0hUVFBTQWdlbnQiLCJzYWZlciIsIlNhZmVyIiwiVWludDhBcnJheSIsImVuY29kaW5nT3JPZmZzZXQiLCJUeXBlRXJyb3IiLCJmaWxsIiwiUmFuZ2VFcnJvciIsImtTdHJpbmdNYXhMZW5ndGgiLCJiaW5kaW5nIiwiTUFYX0xFTkdUSCIsImtNYXhMZW5ndGgiLCJNQVhfU1RSSU5HX0xFTkdUSCIsImNyeXB0b1NpZ24iLCJjcnlwdG9WZXJpZnkiLCJjcmVhdGVTaWduIiwiY3JlYXRlVmVyaWZ5IiwiY3JlYXRlRGVjaXBoZXJpdiIsImNyZWF0ZUhtYWMiLCJzdXBwb3J0ZWRPcGVuU1NMQ2lwaGVycyIsImdldENpcGhlcnMiLCJiY3J5cHRfcGJrZGYiLCJwYmtkZiIsImJ1ZmZlckhlbHBlcnMiLCJTWU1fSEFTSF9BTEdPIiwiU1lNX1BSSVZfUEVNIiwiU1lNX1BVQl9QRU0iLCJTWU1fUFVCX1NTSCIsIlNZTV9ERUNSWVBURUQiLCJDSVBIRVJfSU5GT19PUEVOU1NMIiwiY2lwaGVyTmFtZSIsInRyaW1TdGFydCIsIlN0cmluZyIsImNoYXJDb2RlQXQiLCJtYWtlUEVNIiwiY29tYmluZUJ1ZmZlcnMiLCJidWYxIiwiYnVmMiIsInNraXBGaWVsZHMiLCJuZmllbGRzIiwiYnVmTGVuIiwiZ2VuT3BlblNTTFJTQVB1YiIsIndyaXRlT0lEIiwid3JpdGVOdWxsIiwid3JpdGVCeXRlIiwiZ2VuT3BlblNTSFJTQVB1YiIsInB1YmxpY0tleSIsImdlbk9wZW5TU0xSU0FQcml2IiwiZ2VuUlNBQVNOMUJ1ZiIsInEiLCJkbXAxIiwiZG1xMSIsImlxbXAiLCJ3cml0ZUludCIsIkZ1bmN0aW9uIiwiQmlnSW50IiwiYm4iLCJoZXgiLCJzaWdiaXQiLCJCaWdJbnRlZ2VyIiwicGJpIiwicWJpIiwiZGJpIiwiZG1wMWJpIiwic3VidHJhY3QiLCJPTkUiLCJkbXExYmkiLCJ0b0J5dGVBcnJheSIsImdlbk9wZW5TU0xEU0FQdWIiLCJnIiwieSIsImdlbk9wZW5TU0hEU0FQdWIiLCJnZW5PcGVuU1NMRFNBUHJpdiIsIngiLCJnZW5PcGVuU1NMRWRQdWIiLCJwdWIiLCJfZW5zdXJlIiwiX2J1ZiIsIl9vZmZzZXQiLCJnZW5PcGVuU1NIRWRQdWIiLCJnZW5PcGVuU1NMRUNEU0FQdWIiLCJvaWQiLCJRIiwiZ2VuT3BlblNTSEVDRFNBUHViIiwiY3VydmVOYW1lIiwiZ2VuT3BlblNTTEVDRFNBUHJpdiIsInByaXYiLCJyZWdleHAiLCJCYXNlS2V5IiwicGVtIiwicHJpdktleSIsInRyeVNpZ24iLCJ2ZXJpZmllciIsInB1YktleSIsInRyeVZlcmlmeSIsImdldFB1YmxpY1BFTSIsImdldFB1YmxpY1NTSCIsIk9wZW5TU0hfUHJpdmF0ZSIsImNvbW1lbnQiLCJwcml2UEVNIiwicHViUEVNIiwicHViU1NIIiwiYWxnbyIsImRlY3J5cHRlZCIsIk9wZW5TU0hfT2xkX1ByaXZhdGUiLCJQUEtfUHJpdmF0ZSIsInBhcnNlREVSIiwiYmFzZVR5cGUiLCJmdWxsVHlwZSIsImVkcHViIiwiZWNwdWIiLCJPcGVuU1NIX1B1YmxpYyIsIlJGQzQ3MTZfUHVibGljIiwicGFyc2UiLCJtYWdpYyIsImVuY0luZm8iLCJjaXBoZXJLZXkiLCJjaXBoZXJJViIsImtkZk5hbWUiLCJrZGZPcHRpb25zIiwic2FsdCIsInJvdW5kcyIsImdlbiIsImtleUNvdW50IiwicHViRGF0YSIsInByaXZCbG9iIiwiYXV0aFRhZ0xlbmd0aCIsImRlY2lwaGVyIiwic2V0QXV0aFRhZyIsImZpbmFsIiwibmtleXMiLCJjaGVjazEiLCJjaGVjazIiLCJlZHByaXYiLCJlY3ByaXYiLCJwcml2Q29tbWVudCIsImNudCIsInBhcnNlT3BlblNTSFByaXZLZXlzIiwicmVhZGVyIiwiaGVhZGVycyIsInNlcElkeCIsInNldEF1dG9QYWRkaW5nIiwidGVtcEVDREgiLCJlcnJNc2ciLCJlY1NTTE5hbWUiLCJlY1ByaXYiLCJyZWFkQnl0ZSIsInJlYWRMZW5ndGgiLCJyZWFkT0lEIiwicHViQmxvYiIsImNyZWF0ZUVDREgiLCJzZXRQcml2YXRlS2V5IiwiZ2V0UHVibGljS2V5IiwiRU1QVFlfUEFTU1BIUkFTRSIsIlBQS19JViIsIlBQS19QUDEiLCJQUEtfUFAyIiwiZW5jcnlwdGVkIiwibWFjIiwidHlwZUxlbiIsImNpcGhlck5hbWVMZW4iLCJjb21tZW50TGVuIiwicHViTGVuIiwicHJpdkxlbiIsIm1hY0RhdGEiLCJSRV9IRUFERVIiLCJSRV9IRUFERVJfRU5EUyIsInBhcnNlREVSS2V5IiwiRHVwbGV4U3RyZWFtIiwiRHVwbGV4IiwiUmVhZGFibGVTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsIldyaXRhYmxlIiwiQ1VTVE9NX0VWRU5UUyIsIkNVU1RPTV9FVkVOVFNfTEVOIiwic3RyZWFtT3B0cyIsImhpZ2hXYXRlck1hcmsiLCJzZXJ2ZXIiLCJleGl0Q29kZSIsImV4aXRTaWduYWwiLCJleGl0RHVtcCIsImV4aXREZXNjIiwiZXhpdExhbmciLCJpbmNvbWluZ0lkIiwib25kcmFpbiIsIl93YWl0Q2xpZW50RHJhaW4iLCJfd2FpdFdpbmRvdyIsIl9jaHVuayIsIl93cml0ZSIsIl9jaHVua2NiIiwiX2NodW5rRXJyIiwiX2NodW5rY2JFcnIiLCJvbkZpbmlzaCIsImVvZiIsIm9uRW5kIiwiZW5kaW5nIiwid2luZG93QWRqdXN0IiwiX3dhaXRDaGFuRHJhaW4iLCJhbXQiLCJfa2FsYXN0Iiwibm93IiwiX2thY250IiwiY29yZWR1bXAiLCJjaGFubmVsRmFpbHVyZSIsInN0ZGluIiwic3Rkb3V0IiwiU2VydmVyU3RkZXJyIiwiX3JlYWQiLCJjaGFubmVsV2luZG93QWRqdXN0IiwiY2hhbm5lbCIsIl9jaGFubmVsIiwiY2hhbm5lbEVPRiIsImNoYW5uZWxDbG9zZSIsInNsaWNlTGVuIiwiY2hhbm5lbERhdGEiLCJzZXRXaW5kb3ciLCJ3aW5kb3dDaGFuZ2UiLCJzaWduYWxOYW1lIiwiZXhpdCIsImNvcmVEdW1wZWQiLCJleGl0U3RhdHVzIiwiY2hhbm5lbEV4dERhdGEiLCJ3b3JrZXJzIiwidGFza3MiLCJUYXNrc01hbmFnZXIiLCJ0cmFuc2ZlcnMiLCJzdHJhdGVnaWVzIiwiZnRwcyIsImhhbmRsZVdvcmtlckV2ZW50cyIsImluc3RhbmNlIiwib25Db25uZWN0Iiwib25Qcm9ncmVzcyIsImNsZWFyV29ya2VyRXZlbnRzIiwiZ2V0V29ya2VySW5zdGFuY2UiLCJpbmRleCIsIndvcmtlckZpbHRlciIsIndvcmtlciIsInBvb2wiLCJfY29uZmlnIiwic3RyYXRlZ3kiLCJfY29ubmVjdGlvbk9wdGlvbnMiLCJmb3JFYWNoIiwiY3JlYXRlV29ya2VyIiwic2V0V29ya2VyR3JvdXBzIiwidHJhbnNmZXJQb29sIiwicmVwZWF0Iiwic2V0V29ya2VycyIsImFsbCIsImRlbGV0ZUFsbFRhc2tzIiwiYWJvcnQiLCJ0cmFuc2ZlcklkcyIsIndvcmtlckluZGV4ZXMiLCJpbnN0YW5jZXMiLCJ3b3JrZXJJbmRleCIsImRlbGV0ZVRhc2tzIiwicGF1c2VXb3JrZXJzIiwicmVzdW1lV29ya2VycyIsImxvY2FsUGF0aCIsImZsYWdzIiwiZ2V0UGF0aEZyb21TdHJlYW0iLCJ0YXNrSWQiLCJ0b3RhbEJ5dGVzIiwiZ2V0RmlsZVNpemUiLCJkaXJlY3Rpb24iLCJjcmVhdGVUYXNrSWQiLCJkZWxldGUiLCJERUZBVUxUX0dST1VQX0ZJTFRFUiIsInF1ZXVlIiwidGFza0NvdW50ZXIiLCJ1bmF2YWlsYWJsZVdvcmtlcnMiLCJnZXRXb3JrZXIiLCJidXN5IiwiZmluaXNoVGFzayIsInByb2Nlc3NOZXh0IiwicGF1c2VkIiwiaW5kZXhlcyIsIndvcmtlcnNDaGVjayIsImxpc3RlbmVyIiwiZ2V0V29ya2VycyIsImlkcyIsImZzXzEiLCJwYXRoXzEiLCJ1dGlsXzEiLCJGdHBDb250ZXh0XzEiLCJwYXJzZUxpc3RfMSIsIlByb2dyZXNzVHJhY2tlcl8xIiwiU3RyaW5nV3JpdGVyXzEiLCJwYXJzZUxpc3RNTFNEXzEiLCJmc1JlYWREaXIiLCJmc01rRGlyIiwiZnNTdGF0IiwiZnNPcGVuIiwiZnNDbG9zZSIsImZzVW5saW5rIiwiaWdub3JlRXJyb3IiLCJmdW5jIiwiYXZhaWxhYmxlTGlzdENvbW1hbmRzIiwiX2VudGVyRmlyc3RDb21wYXRpYmxlTW9kZSIsIl9wcm9ncmVzc1RyYWNrZXIiLCJQcm9ncmVzc1RyYWNrZXIiLCJzdG9wIiwicmVzZXQiLCJfaGFuZGxlQ29ubmVjdFJlc3BvbnNlIiwiaWdub3JlRXJyb3JDb2Rlc0RFUFJFQ0FURUQiLCJzZW5kSWdub3JpbmdFcnJvciIsImhhc1RMUyIsInVzZUV4cGxpY2l0VExTIiwid2VsY29tZSIsImNvbm5lY3RJbXBsaWNpdFRMUyIsInVzZVRMUyIsImxvZ2luIiwidXNlRGVmYXVsdFNldHRpbmdzIiwiZmVhdHVyZXMiLCJ2YWxpZFBhdGgiLCJwcm90ZWN0V2hpdGVzcGFjZSIsInNyY1BhdGgiLCJkZXN0UGF0aCIsInZhbGlkU3JjIiwidmFsaWREZXN0IiwiaWdub3JlRXJyb3JDb2RlcyIsImJ5dGVzT3ZlcmFsbCIsInJlcG9ydFRvIiwidG9SZW1vdGVQYXRoIiwiX3VwbG9hZFdpdGhDb21tYW5kIiwiX3VwbG9hZExvY2FsRmlsZSIsIl91cGxvYWRGcm9tU3RyZWFtIiwiZmQiLCJsb2NhbFN0YXJ0IiwibG9jYWxFbmRJbmNsdXNpdmUiLCJmcm9tUmVtb3RlUGF0aCIsIl9kb3dubG9hZFRvRmlsZSIsIl9kb3dubG9hZFRvU3RyZWFtIiwiYXBwZW5kaW5nVG9Mb2NhbEZpbGUiLCJmaWxlU3lzdGVtRmxhZ3MiLCJsb2NhbEZpbGVTdGF0cyIsImhhc0Rvd25sb2FkZWREYXRhIiwibGFzdEVycm9yIiwiY2FuZGlkYXRlIiwicGFyc2VkTGlzdCIsIl9yZXF1ZXN0TGlzdFdpdGhDb21tYW5kIiwiU3RyaW5nV3JpdGVyIiwiZ2V0VGV4dCIsInJlbW90ZURpclBhdGgiLCJfZXhpdEF0Q3VycmVudERpcmVjdG9yeSIsImNkIiwiY2xlYXJXb3JraW5nRGlyIiwiY2R1cCIsImxvY2FsRGlyUGF0aCIsImVuc3VyZURpciIsIl91cGxvYWRUb1dvcmtpbmdEaXIiLCJmdWxsUGF0aCIsInN0YXRzIiwiaXNGaWxlIiwiX29wZW5EaXIiLCJfZG93bmxvYWRGcm9tV29ya2luZ0RpciIsInJlY3Vyc2l2ZSIsImVuc3VyZUxvY2FsRGlyZWN0b3J5IiwibmFtZXMiLCJkaXJOYW1lIiwiZW5kc1dpdGgiLCJ1c2VyRGlyIiwiYXBwZW5kRnJvbSIsInVwbG9hZEZyb21EaXIiLCJkb3dubG9hZFRvRGlyIiwiUkVfTElORSIsInBhcnNlTW9kZSIsInciLCJleGVjVG9rZW4iLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIm5vb3AiLCJpbnRlcnZhbE1zIiwib25TdG9wIiwib25IYW5kbGUiLCJsYXN0Qnl0ZXMiLCJ1cGRhdGVGdW5jIiwic3RvcFdpdGhVcGRhdGUiLCJwb2xsIiwiYnl0ZXNSZWFkIiwiYnl0ZXNXcml0dGVuIiwic3RyZWFtXzEiLCJhcmd1bWVudHMiLCJfIiwic3BlZWQiLCJldGEiLCJwZXJjZW50Iiwic3RhcnRUaW1lIiwiZWxhcHNlZCIsInJvdW5kIiwicmF0ZSIsImNvdW50IiwiVHJhbnNmb3JtU3RyZWFtIiwiVHJhbnNmb3JtIiwidXRpbCIsImlzRGF0ZSIsImxpc3RlbmVyQ291bnQiLCJmcyIsIkFUVFIiLCJPSyIsIkVPRiIsIk5PX1NVQ0hfRklMRSIsIlBFUk1JU1NJT05fREVOSUVEIiwiRkFJTFVSRSIsIkJBRF9NRVNTQUdFIiwiTk9fQ09OTkVDVElPTiIsIk9QX1VOU1VQUE9SVEVEIiwiU1RBVFVTX0NPREVfU1RSIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiUkVRVUVTVCIsIklOSVQiLCJPUEVOIiwiQ0xPU0UiLCJSRUFEIiwiV1JJVEUiLCJMU1RBVCIsIkZTVEFUIiwiU0VUU1RBVCIsIkZTRVRTVEFUIiwiT1BFTkRJUiIsIlJFQURESVIiLCJSRU1PVkUiLCJNS0RJUiIsIlJNRElSIiwiUkVBTFBBVEgiLCJTVEFUIiwiUkVOQU1FIiwiUkVBRExJTksiLCJTWU1MSU5LIiwiRVhURU5ERUQiLCJSRVNQT05TRSIsIlZFUlNJT04iLCJTVEFUVVMiLCJIQU5ETEUiLCJEQVRBIiwiTkFNRSIsIkFUVFJTIiwiQVBQRU5EIiwiQ1JFQVQiLCJUUlVOQyIsIkVYQ0wiLCJNQVhfUkVRSUQiLCJDTElFTlRfVkVSU0lPTl9CVUZGRVIiLCJTRVJWRVJfVkVSU0lPTl9CVUZGRVIiLCJyZW1vdGVJZGVudFJhdyIsIl9pc09wZW5TU0giLCJfbmVlZENvbnRpbnVlIiwic3RhdHVzIiwid3JpdGVSZXFpZCIsInBrdExlZnQiLCJwa3RIZHJCdWYiLCJwa3RCdWYiLCJwa3RUeXBlIiwidmVyc2lvbiIsImV4dGVuc2lvbnMiLCJtYXhEYXRhTGVuIiwicmVxdWVzdHMiLCJmYXN0WGZlciIsInNyYyIsImRzdCIsImRzdFBhdGgiLCJvbnN0ZXAiLCJmaWxlU2l6ZSIsImZzaXplIiwiY29uY3VycmVuY3kiLCJjaHVua1NpemUiLCJzdGVwIiwibW9kZU51bSIsInNyY0hhbmRsZSIsImRzdEhhbmRsZSIsInJlYWRidWYiLCJwZHN0IiwidG90YWwiLCJidWZzaXplIiwib25lcnJvciIsImNiZmluYWwiLCJzb3VyY2VIYW5kbGUiLCJ0cnlTdGF0IiwiZXJyXyIsImF0dHJzXyIsImRlc3RIYW5kbGUiLCJ0cnlDcmVhdGVCdWZmZXIiLCJvbnJlYWQiLCJuYiIsImRzdHBvcyIsImRhdGFwb3MiLCJvcmlnQ2h1bmtMZW4iLCJ3cml0ZUNiIiwic2luZ2xlUmVhZCIsIndyaXRlRGF0YSIsIm1ha2VDYiIsInBzcmMiLCJyZWFkIiwicmVhZERhdGEiLCJzdGFydFJlYWRzIiwicmVhZHMiLCJmY2htb2QiLCJ0cnlBZ2FpbiIsImNobW9kIiwiZnN0YXQiLCJ3cml0ZUFsbCIsInBvc2l0aW9uIiwiY2FsbGJhY2tfIiwid3JpdGVFcnIiLCJ3cml0dGVuIiwicmVhZEF0dHJzIiwiU3RhdHMiLCJyZWFkVUludDY0QkUiLCJ1aWQiLCJnaWQiLCJhdGltZSIsImV4dGNvdW50IiwiYXR0cnNUb0J5dGVzIiwiYXR0ckJ5dGVzIiwibmJ5dGVzIiwic2l6ZUJ5dGVzIiwidG9Vbml4VGltZXN0YW1wIiwiZ2V0VGltZSIsIl9fcmVhZCIsIl9fcHVzaCIsIl9yZWFkYWJsZVN0YXRlIiwiZW5kRW1pdHRlZCIsImZsb3dpbmciLCJfdHJhbnNmb3JtIiwiY2h1bmtMZWZ0IiwiY2h1bmtMZW4iLCJjaHVua1BvcyIsImV4dG5hbWUiLCJleHRkYXRhIiwiYnVmbGVuIiwiZXZOYW1lIiwicGZsYWdzIiwic3RyMSIsInN0cjIiLCJyZXEiLCJkYXRhTGVuIiwicmVxQnVmTGVuIiwibmFtZXNMZW4iLCJleHRlbmRlZCIsImZfYnNpemUiLCJmX2Zyc2l6ZSIsImZfYmxvY2tzIiwiZl9iZnJlZSIsImZfYmF2YWlsIiwiZl9maWxlcyIsImZfZmZyZWUiLCJmX2ZhdmFpbCIsImZfc2lkIiwiZl9mbGFnIiwiZl9uYW1lbWF4IiwiZXJyQ29kZSIsIlJlYWRTdHJlYW0iLCJXcml0ZVN0cmVhbSIsImZsYWdzXyIsInN0cmluZ1RvRmxhZ3MiLCJhdHRyRmxhZ3MiLCJwYXRobGVuIiwicmVxaWQiLCJqIiwibGVuMiIsImhhbmRsZWxlbiIsIm9mZiIsIm91dCIsIl93YW50RU9GRXJyb3IiLCJvdmVyZmxvdyIsIm9yaWdQb3NpdGlvbiIsImZhc3RHZXQiLCJmYXN0UHV0IiwicmVhZEZpbGUiLCJmbGFnIiwiYnVmZmVycyIsImlzRW5jb2RpbmciLCJhZnRlclJlYWQiLCJlciIsImhhbmRsZV8iLCJzdCIsImVyXyIsInN0XyIsIndyaXRlRmlsZSIsIm9wZW5FcnIiLCJhcHBlbmRGaWxlIiwiX2V4dGVuZCIsImZuYW1lbGVuIiwib2xkUGF0aCIsIm5ld1BhdGgiLCJvbGRsZW4iLCJuZXdsZW4iLCJ3aGVyZSIsImRvRmlsdGVyIiwiZnVsbCIsImVudHJpZXMiLCJvcGVuZGlyIiwicmVyZWFkIiwic3BsaWNlIiwibHN0YXQiLCJzZXRzdGF0IiwiZnNldHN0YXQiLCJmdXRpbWVzIiwidXRpbWVzIiwiZmNob3duIiwiY2hvd24iLCJyZWFkbGluayIsInN5bWxpbmsiLCJ0YXJnZXRQYXRoIiwibGlua1BhdGgiLCJsaW5rbGVuIiwidGFyZ2V0bGVuIiwiZXh0X29wZW5zc2hfcmVuYW1lIiwiZXh0X29wZW5zc2hfc3RhdHZmcyIsImV4dF9vcGVuc3NoX2ZzdGF0dmZzIiwiZXh0X29wZW5zc2hfaGFyZGxpbmsiLCJleHRfb3BlbnNzaF9mc3luYyIsIm1zZ0xlbiIsImxhbmdMZW4iLCJoYW5kbGVMZW4iLCJuYW1lQXR0cnMiLCJhdHRyIiwic3RyaW5nRmxhZ01hcCIsInN0cmluZ0ZsYWdNYXBLZXlzIiwiaW5pdGlhbCIsImZsYWdzVG9TdHJpbmciLCJfY2hlY2tNb2RlUHJvcGVydHkiLCJTX0lGTVQiLCJTX0lGRElSIiwiU19JRlJFRyIsImlzQmxvY2tEZXZpY2UiLCJTX0lGQkxLIiwiaXNDaGFyYWN0ZXJEZXZpY2UiLCJTX0lGQ0hSIiwiU19JRkxOSyIsImlzRklGTyIsIlNfSUZJRk8iLCJpc1NvY2tldCIsIlNfSUZTT0NLIiwiZnNDb21wYXQiLCJ2YWxpZGF0ZU51bWJlciIsImRlc3Ryb3lJbXBsIiwiRVJSX09VVF9PRl9SQU5HRSIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwicG9vbEZyYWdtZW50cyIsImNoZWNrUG9zaXRpb24iLCJpc1NhZmVJbnRlZ2VyIiwiaXNJbnRlZ2VyIiwicm91bmRVcFRvTXVsdGlwbGVPZjgiLCJlbWl0Q2xvc2UiLCJfb3BlbmluZyIsImNsb3NlU3RyZWFtIiwib25jbG9zZSIsInNldERlZmF1bHRFbmNvZGluZyIsImZpbmFsQ2FsbGVkIiwiZGVzdHJveWVkIiwicG9vbFNpemUiLCJ1c2VkIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicG9wIiwidGhpc1Bvb2wiLCJ0b1JlYWQiLCJtaW4iLCJiIiwibmV3VXNlZCIsImFsaWduZWRFbmQiLCJhbGlnbmVkU3RhcnQiLCJfZGVzdHJveSIsImNvbmZpZ3VyYWJsZSIsIl9maW5hbCIsIl93cml0ZXYiLCJ3cml0ZXNMZWZ0Iiwib253cml0ZSIsImRlc3Ryb3lTb29uIiwiZXJyb3JzIiwidHlwZXMiLCJhc3NlcnQiLCJBU04xIiwiX3NpemUiLCJfbGVuIiwicGVlayIsImxlbkIiLCJ0YWciLCJzZXEiLCJfcmVhZFRhZyIsInJlYWRCb29sZWFuIiwicmVhZEVudW1lcmF0aW9uIiwicmV0YnVmIiwidmFsdWVzIiwiYnl0ZSIsIm9rIiwiZmIiLCJERUZBVUxUX09QVFMiLCJncm93dGhGYWN0b3IiLCJ0byIsImVxdWFsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vcHRpb25zIiwiX3NlcSIsInN6Iiwid3JpdGVFbnVtZXJhdGlvbiIsIndyaXRlQm9vbGVhbiIsIndyaXRlU3RyaW5nIiwid3JpdGVMZW5ndGgiLCJ3cml0ZVN0cmluZ0FycmF5Iiwic3RyaW5ncyIsInRtcCIsIm9jdGV0IiwiZW5jb2RlT2N0ZXQiLCJfc2hpZnQiLCJjcnlwdG9faGFzaF9zaGE1MTIiLCJsb3dsZXZlbCIsImNyeXB0b19oYXNoIiwiQkxGX0oiLCJCbG93ZmlzaCIsIlMiLCJVaW50MzJBcnJheSIsIlAiLCJGIiwieDgiLCJzdHJlYW0yd29yZCIsImRhdGFieXRlcyIsInRlbXAiLCJlbmNpcGhlciIsImJ5dGVPZmZzZXQiLCJzdWJhcnJheSIsImV4cGFuZDBzdGF0ZSIsImtleWJ5dGVzIiwiZDgiLCJleHBhbmRzdGF0ZSIsImVuYyIsImJsb2NrcyIsImRlYyIsImJjcnlwdF9oYXNoIiwic2hhMnBhc3MiLCJzaGEyc2FsdCIsImNkYXRhIiwiY2lwaGVydGV4dCIsIkJMT0NLUyIsIkhBU0hTSVpFIiwiaGFzaCIsInBhc3MiLCJwYXNzbGVuIiwic2FsdGxlbiIsImtleWxlbiIsInN0cmlkZSIsInRtcG91dCIsImNvdW50c2FsdCIsIm9yaWdrZXlsZW4iLCJmbG9vciIsIm5hY2wiLCJnZiIsImluaXQiLCJGbG9hdDY0QXJyYXkiLCJyYW5kb21ieXRlcyIsIl8wIiwiXzkiLCJnZjAiLCJnZjEiLCJfMTIxNjY1IiwiRCIsIkQyIiwiWCIsIlkiLCJJIiwidHM2NCIsImgiLCJ2biIsInhpIiwieWkiLCJjcnlwdG9fdmVyaWZ5XzE2IiwiY3J5cHRvX3ZlcmlmeV8zMiIsImNyeXB0b19jb3JlX3NhbHNhMjAiLCJpbnAiLCJ1IiwiajAiLCJqMSIsImoyIiwiajMiLCJqNCIsImo1IiwiajYiLCJqNyIsImo4IiwiajkiLCJqMTAiLCJqMTEiLCJqMTIiLCJqMTMiLCJqMTQiLCJqMTUiLCJ4MCIsIngxIiwieDIiLCJ4MyIsIng0IiwieDUiLCJ4NiIsIng3IiwieDkiLCJ4MTAiLCJ4MTIiLCJ4MTMiLCJ4MTQiLCJ4MTUiLCJjb3JlX3NhbHNhMjAiLCJjcnlwdG9fY29yZV9oc2Fsc2EyMCIsImNvcmVfaHNhbHNhMjAiLCJzaWdtYSIsImNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3IiLCJjcG9zIiwibXBvcyIsInoiLCJjcnlwdG9fc3RyZWFtX3NhbHNhMjAiLCJjcnlwdG9fc3RyZWFtIiwic24iLCJjcnlwdG9fc3RyZWFtX3hvciIsInBvbHkxMzA1IiwidDAiLCJ0MSIsInQyIiwidDMiLCJ0NCIsInQ1IiwidDYiLCJ0NyIsIlVpbnQxNkFycmF5IiwicGFkIiwibGVmdG92ZXIiLCJmaW4iLCJjcnlwdG9fb25ldGltZWF1dGgiLCJvdXRwb3MiLCJjcnlwdG9fb25ldGltZWF1dGhfdmVyaWZ5IiwiaHBvcyIsImNyeXB0b19zZWNyZXRib3giLCJjcnlwdG9fc2VjcmV0Ym94X29wZW4iLCJzZXQyNTUxOSIsImEiLCJjYXIyNTUxOSIsInNlbDI1NTE5IiwicGFjazI1NTE5IiwibmVxMjU1MTkiLCJwYXIyNTUxOSIsInVucGFjazI1NTE5IiwiQSIsIloiLCJNIiwidDgiLCJ0OSIsInQxMCIsInQxMSIsInQxMiIsInQxMyIsInQxNCIsInQxNSIsInQxNiIsInQxNyIsInQxOCIsInQxOSIsInQyMCIsInQyMSIsInQyMiIsInQyMyIsInQyNCIsInQyNSIsInQyNiIsInQyNyIsInQyOCIsInQyOSIsInQzMCIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYjEwIiwiYjExIiwiYjEyIiwiYjEzIiwiYjE0IiwiYjE1IiwiaW52MjU1MTkiLCJjcnlwdG9fc2NhbGFybXVsdCIsIngzMiIsIngxNiIsImNyeXB0b19zY2FsYXJtdWx0X2Jhc2UiLCJjcnlwdG9fYm94X2tleXBhaXIiLCJjcnlwdG9fYm94X2JlZm9yZW5tIiwiZDAiLCJkMSIsImQyIiwiZDMiLCJkNCIsImQ1IiwiZDYiLCJkNyIsImQ5IiwiaGliaXQiLCJoMCIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImg3IiwiaDgiLCJoOSIsInIwIiwicjEiLCJyMiIsInIzIiwicjQiLCJyNSIsInI2IiwicjciLCJyOCIsInI5IiwibWFjcG9zIiwibWFzayIsIndhbnQiLCJjcnlwdG9fYm94X2FmdGVybm0iLCJjcnlwdG9fYm94X29wZW5fYWZ0ZXJubSIsIksiLCJjcnlwdG9faGFzaGJsb2Nrc19obCIsImhoIiwiaGwiLCJiaDAiLCJiaDEiLCJiaDIiLCJiaDMiLCJiaDQiLCJiaDUiLCJiaDYiLCJiaDciLCJibDAiLCJibDEiLCJibDIiLCJibDMiLCJibDQiLCJibDUiLCJibDYiLCJibDciLCJ0aCIsInRsIiwid2giLCJJbnQzMkFycmF5Iiwid2wiLCJhaDAiLCJhaDEiLCJhaDIiLCJhaDMiLCJhaDQiLCJhaDUiLCJhaDYiLCJhaDciLCJhbDAiLCJhbDEiLCJhbDIiLCJhbDMiLCJhbDQiLCJhbDUiLCJhbDYiLCJhbDciLCJhZGQiLCJjc3dhcCIsInBhY2siLCJ0eCIsInR5IiwiemkiLCJzY2FsYXJtdWx0Iiwic2NhbGFyYmFzZSIsImNyeXB0b19zaWduX2tleXBhaXIiLCJwayIsInNrIiwic2VlZGVkIiwiTCIsIm1vZEwiLCJjYXJyeSIsInJlZHVjZSIsImNyeXB0b19zaWduIiwic20iLCJzbWxlbiIsInVucGFja25lZyIsImNoayIsIm51bSIsImRlbiIsImRlbjIiLCJkZW40IiwiZGVuNiIsInBvdzI1MjMiLCJjcnlwdG9fc2lnbl9vcGVuIiwiY2hlY2tMZW5ndGhzIiwiY2hlY2tBcnJheVR5cGVzIiwiY2xlYW51cCIsImFyciIsImNyeXB0b19ib3giLCJjcnlwdG9fYm94X29wZW4iLCJjcnlwdG9fc2VjcmV0Ym94X0tFWUJZVEVTIiwiY3J5cHRvX3NlY3JldGJveF9OT05DRUJZVEVTIiwiY3J5cHRvX3NlY3JldGJveF9aRVJPQllURVMiLCJjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFUyIsImNyeXB0b19zY2FsYXJtdWx0X0JZVEVTIiwiY3J5cHRvX3NjYWxhcm11bHRfU0NBTEFSQllURVMiLCJjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTIiwiY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUyIsImNyeXB0b19ib3hfQkVGT1JFTk1CWVRFUyIsImNyeXB0b19ib3hfTk9OQ0VCWVRFUyIsImNyeXB0b19ib3hfWkVST0JZVEVTIiwiY3J5cHRvX2JveF9CT1haRVJPQllURVMiLCJjcnlwdG9fc2lnbl9CWVRFUyIsImNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTIiwiY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMiLCJjcnlwdG9fc2lnbl9TRUVEQllURVMiLCJjcnlwdG9faGFzaF9CWVRFUyIsImRlY29kZVVURjgiLCJlbmNvZGVVVEY4IiwiZW5jb2RlQmFzZTY0IiwiZGVjb2RlQmFzZTY0Iiwic2VjcmV0Ym94Iiwibm9uY2UiLCJib3giLCJrZXlMZW5ndGgiLCJub25jZUxlbmd0aCIsIm92ZXJoZWFkTGVuZ3RoIiwic2NhbGFyTXVsdCIsImJhc2UiLCJzY2FsYXJMZW5ndGgiLCJncm91cEVsZW1lbnRMZW5ndGgiLCJzZWNyZXRLZXkiLCJiZWZvcmUiLCJjaGVja0JveExlbmd0aHMiLCJhZnRlciIsImtleVBhaXIiLCJmcm9tU2VjcmV0S2V5IiwicHVibGljS2V5TGVuZ3RoIiwic2VjcmV0S2V5TGVuZ3RoIiwic2hhcmVkS2V5TGVuZ3RoIiwic2lnbmVkTXNnIiwibWxlbiIsImRldGFjaGVkIiwiZnJvbVNlZWQiLCJzZWVkIiwic2VlZExlbmd0aCIsInNpZ25hdHVyZUxlbmd0aCIsImhhc2hMZW5ndGgiLCJzZXRQUk5HIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIm5iaSIsImFtIiwieGwiLCJ4aCIsIkRCIiwiRE0iLCJEViIsIkZWIiwiRjEiLCJCSV9GUCIsIkYyIiwicnIiLCJ2diIsIkJJX1JDIiwiaW50MmNoYXIiLCJpbnRBdCIsIm5idiIsImZyb21JbnQiLCJuYml0cyIsIkNsYXNzaWMiLCJNb250Z29tZXJ5IiwibXAiLCJpbnZEaWdpdCIsIm1wbCIsIm1waCIsInVtIiwibXQyIiwib3BfYW5kIiwib3Bfb3IiLCJvcF94b3IiLCJvcF9hbmRub3QiLCJsYml0IiwiY2JpdCIsIk51bGxFeHAiLCJuTm9wIiwiQmFycmV0dCIsInEzIiwiZGxTaGlmdFRvIiwibXUiLCJkaXZpZGUiLCJjb252ZXJ0IiwiY29tcGFyZVRvIiwicmV2ZXJ0IiwiZGl2UmVtVG8iLCJtdWxUbyIsIm11bHRpcGx5VG8iLCJzcXJUbyIsInNxdWFyZVRvIiwiYWJzIiwiWkVSTyIsInN1YlRvIiwiY29weVRvIiwidTAiLCJjbGFtcCIsImRyU2hpZnRUbyIsImZyb21SYWRpeCIsIm1pIiwic2giLCJtYXgiLCJsU2hpZnRUbyIsImJzIiwiY2JzIiwiYm0iLCJkcyIsInJTaGlmdFRvIiwicG0iLCJwdCIsInRzIiwibXMiLCJuc2giLCJ5cyIsInkwIiwieXQiLCJxZCIsImlzRXZlbiIsImV4cCIsIm5lZ2F0ZSIsInRvUmFkaXgiLCJrbSIsImJpdExlbmd0aCIsIm1vZFBvd0ludCIsIm11bHRpcGx5VXBwZXJUbyIsIm11bHRpcGx5TG93ZXJUbyIsImRBZGRPZmZzZXQiLCJsb3dwcmltZXMiLCJscGxpbSIsIkxOMiIsInNpZ251bSIsImNzIiwiaW50VmFsdWUiLCJkTXVsdGlwbHkiLCJ0ZXN0Qml0IiwiYml0d2lzZVRvIiwic2hpZnRMZWZ0IiwiaXNQcm9iYWJsZVByaW1lIiwibmV4dEJ5dGVzIiwib3AiLCJjaGFuZ2VCaXQiLCJhZGRUbyIsIm1vZEludCIsIm1pbGxlclJhYmluIiwibjEiLCJnZXRMb3dlc3RTZXRCaXQiLCJzaGlmdFJpZ2h0IiwicmFuZG9tIiwibW9kUG93IiwiY2xvbmUiLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwiZXF1YWxzIiwiYW5kIiwib3IiLCJ4b3IiLCJhbmROb3QiLCJub3QiLCJiaXRDb3VudCIsInNldEJpdCIsImNsZWFyQml0IiwiZmxpcEJpdCIsIm11bHRpcGx5IiwicmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwiazEiLCJnMiIsImlzMSIsIm1vZEludmVyc2UiLCJhYyIsImdjZCIsInNxdWFyZSIsImluc3BlY3QiLCJFUlJfSU5URVJOQUxfQVNTRVJUSU9OIiwiYWRkTnVtZXJpY2FsU2VwYXJhdG9yIiwib25lT2YiLCJleHBlY3RlZCIsInRoaW5nIiwiZmFpbCIsImNhcHR1cmVTdGFja1RyYWNlIiwic3VmZml4IiwiTUFYXzMyQklUX0lOVCIsIk1BWF8zMkJJVF9CSUdJTlQiLCJlbWl0RXJyb3JBbmRDbG9zZU5UIiwiZW1pdEVycm9yTlQiLCJlbWl0Q2xvc2VOVCIsInJhbmdlIiwiaW5wdXQiLCJyZXBsYWNlRGVmYXVsdEJvb2xlYW4iLCJyZWNlaXZlZCIsImFjdHVhbCIsImRldGVybWluZXIiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiZXJyb3JFbWl0dGVkIiwiemxpYiIsIlN0cmVhbVNlYXJjaCIsIkJVR0dZX0lNUExTX0xFTiIsIk1PRFVMRV9WRVIiLCJJTl9JTklUIiwiSU5fR1JFRVRJTkciLCJJTl9IRUFERVIiLCJJTl9QQUNLRVRCRUZPUkUiLCJJTl9QQUNLRVQiLCJJTl9QQUNLRVREQVRBIiwiSU5fUEFDS0VUREFUQVZFUklGWSIsIklOX1BBQ0tFVERBVEFBRlRFUiIsIk9VVF9JTklUIiwiT1VUX1JFQURZIiwiT1VUX1JFS0VZSU5HIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWkxJQl9PUFRTIiwiZmx1c2giLCJSRV9OVUxMIiwiSURFTlRfUFJFRklYX0JVRkZFUiIsIkVNUFRZX0JVRkZFUiIsIkhNQUNfQ09NUFVURSIsIlBJTkdfUEFDS0VUIiwiTkVXS0VZU19QQUNLRVQiLCJVU0VSQVVUSF9TVUNDRVNTX1BBQ0tFVCIsIlJFUVVFU1RfU1VDQ0VTU19QQUNLRVQiLCJSRVFVRVNUX0ZBSUxVUkVfUEFDS0VUIiwiTk9fVEVSTUlOQUxfTU9ERVNfQlVGRkVSIiwiS0VYREhfR0VYX1JFUV9QQUNLRVQiLCJieXRlc1NlbnQiLCJieXRlc1JlY2VpdmVkIiwibWF4UGFja2V0U2l6ZSIsImhvc3RLZXlzIiwiaWRlbnQiLCJhbGdvcyIsImJ1ZlNlcW5vIiwiZGVzYyIsIm9uRElTQ09OTkVDVCIsImZpcnN0Rm9sbG93cyIsIm91dHN0YXRlIiwia2V4aW5pdCIsImNoZWNrIiwic2VydmVyTGlzdCIsImNsaWVudExpc3QiLCJpbnN0YXRlIiwia2V4TGlzdCIsImNvcGllZCIsImtleF9hbGdvcml0aG0iLCJpZ25vcmVOZXh0Iiwic3J2SG9zdEtleSIsImhvc3RrZXlGb3JtYXQiLCJlbmNyeXB0IiwiZGVjcnlwdCIsInNjIiwiZGVjb21wcmVzcyIsIktleUV4Y2hhbmdlIiwiZ2VuZXJhdGVLZXlzIiwicHVia2V5IiwiY2hlY2tfS0VYSU5JVCIsImV4cGVjdGVkUGFja2V0IiwicGt0SW5pdCIsIktFWERIX0dFWF9SRVEiLCJvbktFWElOSVQiLCJvbk5FV0tFWVMiLCJjdXJIb3N0S2V5IiwiaG9zdGtleSIsImhvc3RrZXlBbGdvIiwiY29udmVydFB1YmxpY0tleSIsInNlY3JldCIsImNvbXB1dGVTZWNyZXQiLCJsZW5fZ2V4X3ByaW1lIiwibGVuX2dleF9nZW4iLCJnZXhfcHJpbWUiLCJnZXhfZ2VuIiwibGVuX2lkZW50IiwibGVuX3NpZGVudCIsImxlbl9pbml0IiwibGVuX3Npbml0IiwibGVuX2hvc3RrZXkiLCJsZW5fcHVia2V5IiwibGVuX3NwdWJrZXkiLCJsZW5fc2VjcmV0IiwiZXhjaGFuZ2VCdWZMZW4iLCJkaFBhcmFtcyIsImdldERIUGFyYW1zIiwicHJpbWUiLCJnZW5lcmF0b3IiLCJicCIsImV4Y2hhbmdlQnVmIiwiZXhjaGFuZ2VIYXNoIiwic2Vzc2lvbklkIiwia2V4c2VjcmV0IiwiY29udmVydFNpZ25hdHVyZSIsInNpZ2xlbiIsInBrdFJlcGx5Iiwic2VudE5FV0tFWVMiLCJvbktFWERIX0lOSVQiLCJvbktFWERIX1JFUExZIiwidmVyaWZpZWRIb3N0IiwiaG9zdGtleV9mb3JtYXQiLCJzaWdfZm9ybWF0Iiwic3luYyIsImVtaXR0ZWQiLCJwZXJtaXR0ZWQiLCJyYXdzaWciLCJob3N0UHViS2V5Iiwic2V0REhQYXJhbXMiLCJvbktFWERIX0dFWF9HUk9VUCIsImJhbm5lciIsIm91dENpcGhlckluZm8iLCJkaEhhc2hBbGdvIiwiYXV0aHNRdWV1ZSIsImNpcGhlckFsZ28iLCJjcmVhdGVDaXBoZXJpdiIsImluQ2lwaGVySW5mbyIsImVtcHR5QnVmIiwiZGVjaXBoZXJBbGdvIiwib3V0SE1BQ0luZm8iLCJpbkhNQUNJbmZvIiwiaW5ITUFDU2l6ZSIsImNyZWF0ZURlZmxhdGUiLCJjcmVhdGVJbmZsYXRlIiwicmVrZXlRdWV1ZSIsInFsZW4iLCJjdXJTZXFubyIsInNlcW5vIiwicGF5bG9hZCIsInBhcnNlUGFja2V0IiwiZXhwZWN0RGF0YSIsImdldFBhY2tldFR5cGUiLCJzZXJ2aWNlTmFtZSIsInJlY2lwaWVudCIsImRhdGFUeXBlIiwiYnl0ZXNUb0FkZCIsImNoYW5UeXBlIiwicmVhc29uQ29kZSIsInJlYXNvblRleHQiLCJtZXRob2REYXRhIiwibWV0aG9kRGVzYyIsIm1ldGhvZCIsInBrU2lnbmVkIiwia2V5QWxnbyIsImJsb2IiLCJ1c2VybG9jYWwiLCJibG9iRW5kIiwic2tpcExlbiIsImF1dGhzIiwicGFydFN1Y2Nlc3MiLCJyZXFEYXRhIiwibGFuZ3VhZ2VzIiwicmVhZExpc3QiLCJwYXJzZV9LRVhJTklUIiwib3Bjb2RlIiwiYnl0ZXNUb01vZGVzIiwiY2xpZW50Q29udHJvbCIsInBhcnNlX0NIQU5ORUxfUkVRVUVTVCIsInBhcnNlX0tFWERIX1JFUExZIiwicGFyc2VfS0VYIiwiYXV0aE1ldGhvZCIsImluc3RyIiwibnByb21wdHMiLCJwcm9tcHQiLCJlY2hvIiwibnJlc3BvbnNlcyIsInJlc3BvbnNlcyIsInBhcnNlX1VTRVJBVVRIIiwidW5pbXBsIiwiaG1hY1ZlcmlmeSIsInBhY2tldCIsImNhbGNIbWFjIiwicGt0TGVuIiwicGFkTGVuIiwidGltaW5nU2FmZUVxdWFsIiwiZGVjcnlwdERhdGEiLCJhbW91bnQiLCJleHBlY3QiLCJwdHIiLCJyZXRyeSIsInJhbmRCeXRlcyIsIm15Q29va2llIiwiaG9zdEtleUJ1ZiIsImtleEluaXRTaXplIiwiY29tcHJlc3NQYXlsb2FkIiwiY29tcHJlc3NGbHVzaENiIiwic2VuZF8iLCJieXBhc3MiLCJwdGxlbiIsImNvcHlSYW5kUGFkQnl0ZXMiLCJlbmNEYXRhIiwiZW5jcnlwdGVyIiwibGVuYnVmIiwic2V0QUFEIiwiYXV0aFRhZyIsImdldEF1dGhUYWciLCJkZWNvbXAiLCJza2lwRGVjcnlwdCIsImRlY3J5cHRBdXRoTW9kZSIsImNobGVuIiwiY2hsZWZ0Iiwic2VhcmNoIiwic3MiLCJvbkluZm8iLCJtYXRjaGVkIiwibWF4TWF0Y2hlcyIsImlkeERhc2giLCJpZHhTcGFjZSIsImNvbW1lbnRzIiwicnVsZSIsIm1hY1NpemUiLCJobWFjSW5mbyIsImZ1bGxQYWNrZXRMZW4iLCJtYXhQYXlsb2FkTGVuIiwicmVtYWluTGVuIiwicGt0RXh0cmEiLCJwYWRTdGFydCIsImRlY29tcEJ1ZiIsImRlY29tcEJ1ZkxlbiIsIm5leHRTbGljZSIsInB0eXBlIiwibXNnUGFja2V0IiwibXNnUGt0VHlwZSIsIm5vZW5kIiwicmVrZXkiLCJyZXF1ZXN0U3VjY2VzcyIsImNoYW5uZWxTdWNjZXNzIiwiZGF0YUlzQnVmZmVyIiwicmVtb3RlQ2hhbiIsImRlc2NMZW4iLCJzdmNOYW1lTGVuIiwiYWRkcmxlbiIsInNyY2xlbiIsImRzdGxlbiIsIlJFX0lTX05VTSIsIm1vZGVzVG9CeXRlcyIsInRlcm1MZW4iLCJtb2Rlc0xlbiIsImNtZGxlbiIsInNpZ25hbExlbiIsInZhbExlbiIsInByb3RvbGVuIiwiY29va2llbGVuIiwibmFtZUxlbiIsInVzZXJMZW4iLCJwYXNzTGVuIiwiY2JTaWduIiwia2V5VHlwZSIsImFsZ29MZW4iLCJwdWJLZXlMZW4iLCJzZXNMZW4iLCJzaWdMZW4iLCJzaWdidWYiLCJob3N0bmFtZUxlbiIsInVzZXJsb2NhbExlbiIsInJlc0xlbiIsInJlc3BvbnNlc0xlbiIsInNlcnZpY2VBY2NlcHQiLCJiYW5uZXJMZW4iLCJwYWNrZXRMZW4iLCJmb3J3YXJkZWRUY3BpcCIsImJvdW5kQWRkckxlbiIsImJvdW5kQWRkciIsInJlbW90ZUFkZHJMZW4iLCJyZW1vdGVBZGRyIiwiYm91bmRQb3J0IiwiYWRkckxlbiIsIm9yaWdpbkFkZHIiLCJvcmlnaW5Qb3J0Iiwib3BlbnNzaF9hdXRoQWdlbnQiLCJvcGVuc3NoX2ZvcndhcmRlZFN0cmVhbUxvY2FsIiwiYXV0aEZhaWx1cmUiLCJhdXRoTWV0aG9kcyIsImlzUGFydGlhbCIsIm1ldGhvZHMiLCJtZXRob2RzTGVuIiwiYXV0aFN1Y2Nlc3MiLCJhdXRoUEtPSyIsImtleUFsZ29MZW4iLCJhdXRoUGFzc3dkQ2hnIiwicHJvbXB0TGVuIiwiYXV0aEluZm9SZXEiLCJwcm9tcHRzTGVuIiwiaW5zdHJMZW4iLCJfcHJpbWUiLCJfZ2VuZXJhdG9yIiwiY29udmVydFRvTXBpbnQiLCJuZXdCdWYiLCJpZHgiLCJfa2V4IiwiZ2V0UHJpbWUiLCJnZXRHZW5lcmF0b3IiLCJfa2V5cyIsIl9wdWJsaWMiLCJjcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAiLCJjcmVhdGVEaWZmaWVIZWxsbWFuIiwiZXhwb3J0IiwiZm9ybWF0IiwibmV3S2V5Iiwib3RoZXJQdWJsaWNLZXkiLCJfc2VuZCIsImpzbWVtY21wIiwicG9zMSIsInBvczIiLCJTQk1IIiwibmVlZGxlIiwibmVlZGxlX2xlbiIsIm1hdGNoZXMiLCJfb2NjIiwiX2xvb2tiZWhpbmRfc2l6ZSIsIl9uZWVkbGUiLCJfYnVmcG9zIiwiX2xvb2tiZWhpbmQiLCJfc2JtaF9mZWVkIiwibGFzdF9uZWVkbGVfY2hhciIsIm9jYyIsImxvb2tiZWhpbmQiLCJjaCIsIl9zYm1oX2xvb2t1cF9jaGFyIiwiX3NibWhfbWVtY21wIiwiYnl0ZXNUb0N1dE9mZiIsIkh0dHBBZ2VudCIsIkFnZW50IiwiSHR0cHNBZ2VudCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJfZGVmYXVsdFNyY0lQIiwidHJpZWRGb3J3YXJkIiwicmVmIiwidW5yZWYiLCJkZWNvcmF0ZVN0cmVhbSIsIl9jb25uZWN0Q2ZnIiwiY3RvciIsIlNTSEFnZW50IiwiY29ubmVjdENmZyIsImFnZW50T3B0aW9ucyIsImNwIiwiUkVfQ1lHV0lOX1NPQ0siLCJXSU5ET1dTX1BJUEVfUkVHRVgiLCJzb2NrUGF0aCIsImRhdGFsZW4iLCJpc1NpZ25pbmciLCJjb21sZW4iLCJvbmNvbm5lY3QiLCJvbmRhdGEiLCJwbGF0Zm9ybSIsInRyaWVkQ3lncGF0aCIsInJlYWRDeWdzb2NrZXQiLCJzZWNyZXRidWYiLCJiYyIsImlzUmV0cnlpbmciLCJpbmJ1ZiIsImNyZWRzYnVmIiwiX29uY29ubmVjdCIsIl9vbmRhdGEiLCJfb25jbG9zZSIsImFkZFNvY2tMaXN0ZW5lcnMiLCJwaWQiLCJ0cnlDb25uZWN0IiwiUGFnZWFudFNvY2siLCJpc0RvbmUiLCJvbkRvbmUiLCJFUlJPUiIsIkVYRVBBVEgiLCJfX2Rpcm5hbWUiLCJwcm9jIiwic3Bhd24iLCJraWxsIiwiX3N0cmVhbSIsImthTWdyIiwibmV0IiwiS2VlcGFsaXZlTWFuYWdlciIsImhvc3RLZXlzXyIsImhvc3RLZXlBbGdvcyIsIktFRVBBTElWRV9JTlRFUlZBTCIsIktFRVBBTElWRV9DTElFTlRfSU5URVJWQUwiLCJLRUVQQUxJVkVfQ0xJRU5UX0NPVU5UX01BWCIsInN0cmVhbWNmZyIsIm9sZERlYnVnIiwiY2ZnS2V5cyIsIl9zcnYiLCJfY29ubmVjdGlvbnMiLCJtYXhDb25uZWN0aW9ucyIsImNvbm5jZmciLCJkZWJ1Z1ByZWZpeCIsImhydGltZSIsIm9uQ2xpZW50UHJlSGVhZGVyRXJyb3IiLCJub01vcmVTZXNzaW9ucyIsImF1dGhlbnRpY2F0ZWQiLCJoYXNFcnIiLCJhdXRoQ3R4IiwiZXhjaGFuZ2VzIiwiYWNjZXB0ZWRBdXRoU3ZjIiwicGVuZGluZ0F1dGhzIiwib25VU0VSQVVUSF9SRVFVRVNUIiwiY3R4IiwiS2V5Ym9hcmRBdXRoQ29udGV4dCIsIm9uQXV0aERlY2lkZSIsIlBLQXV0aENvbnRleHQiLCJIb3N0YmFzZWRBdXRoQ29udGV4dCIsIlB3ZEF1dGhDb250ZXh0IiwiQXV0aENvbnRleHQiLCJfaW5pdGlhbFJlc3BvbnNlIiwiX211bHRpc3RlcCIsIl9maW5hbFJlc3BvbnNlIiwiYWxsb3dlZCIsIm1ldGhvZHNMZWZ0IiwidW5zZW50R2xvYmFsUmVxdWVzdHNSZXBsaWVzIiwicmVwbHkiLCJzZXRSZXBseSIsInNlbmRSZXBsaWVzIiwicmVwbGllZCIsImNob3NlblBvcnQiLCJidWZQb3J0IiwiU2Vzc2lvbiIsIm91dGdvaW5nSWQiLCJfY2JmaW5hbCIsImxpc3RlbiIsImFwcGx5IiwiZ2V0Q29ubmVjdGlvbnMiLCJSRV9LQklOVF9TVUJNRVRIT0RTIiwic3VibWV0aG9kcyIsIl9jYiIsIl9vbkluZm9SZXNwb25zZSIsInBrSW5mbyIsInNpZ0FsZ28iLCJ0aXRsZSIsImNyZWF0ZVNlcnZlciIsIkluY29taW5nQ2xpZW50Iiwic3BsaWNlT25lIiwiTWFuYWdlciIsImludGVydmFsIiwic3RyZWFtSW50ZXJ2YWwiLCJrYUNvdW50TWF4Iiwic3RyZWFtcyIsIl9zdHJlYW1zIiwiX3RpbWVyIiwiX3RpbWVySW50ZXJ2YWwiLCJfdGltZXJmbiIsImxhc3QiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBUSxjQUFnQkQsSUFFeEJELEVBQUssY0FBZ0JDLElBUnZCLENBU0dLLFFBQVEsV0FDWCxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVAsUUFHbkMsSUFBSUMsRUFBU0ksRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFQsUUFBUyxJQVVWLE9BTkFVLEVBQVFILEdBQVVJLEtBQUtWLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNNLEdBRy9ETCxFQUFPUSxHQUFJLEVBR0pSLEVBQU9ELFFBMERmLE9BckRBTSxFQUFvQk0sRUFBSUYsRUFHeEJKLEVBQW9CTyxFQUFJUixFQUd4QkMsRUFBb0JRLEVBQUksU0FBU2QsRUFBU2UsRUFBTUMsR0FDM0NWLEVBQW9CVyxFQUFFakIsRUFBU2UsSUFDbENHLE9BQU9DLGVBQWVuQixFQUFTZSxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVWLEVBQW9CZ0IsRUFBSSxTQUFTdEIsR0FDWCxvQkFBWHVCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZW5CLEVBQVN1QixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sS0FRdkRuQixFQUFvQm9CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRbkIsRUFBb0JtQixJQUMvQixFQUFQRSxFQUFV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QUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksU0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFVBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsUUFBWSxVQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksU0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksYUFDdEMsSUFBSUEsWUFBWSxDQUNkLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFNBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFVBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFNBQ3BDLFVBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFNBQ3BDLFdBQVksV0FBWSxVQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFVBQ3BDLFVBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFVBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFVBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFVBQ3BDLFVBQVksVUFBWSxXQUFZLFVBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFNBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFVBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFVBQ3BDLFdBQVksVUFBWSxVQUFZLFVBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFNBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFdBQ3BDLFVBQVksVUFBWSxXQUFZLFdBQ3BDLFVBQVksV0FBWSxTQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxVQUFZLFVBQ3BDLFVBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFVBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFVBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFVBQVksV0FBWSxVQUFZLFVBQ3BDLFdBQVksVUFBWSxVQUFZLFVBQ3BDLFVBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFVBQ3BDLFdBQVksVUFBWSxXQUFZLFdBQ3BDLFdBQVksV0FBWSxXQUFZLFdBQ3BDLFVBQVksV0FBWSxXQUFZLGFBQ3RDLElBQUlBLFlBQVksQ0FDZCxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFNBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxVQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFNBQVksV0FBWSxTQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxVQUNwQyxVQUFZLFNBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxVQUNwQyxVQUFZLFVBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksUUFBWSxVQUNwQyxVQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxhQUN0QyxJQUFJQSxZQUFZLENBQ2QsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFVBQVksU0FDcEMsV0FBWSxTQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFNBQVksU0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxVQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFNBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFVBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksU0FDcEMsVUFBWSxXQUFZLFVBQVksV0FDcEMsV0FBWSxVQUFZLFNBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxX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QUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxVQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksVUFBWSxVQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxVQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxXQUNwQyxVQUFZLFdBQVksVUFBWSxVQUNwQyxVQUFZLFVBQVksVUFBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxXQUNwQyxXQUFZLFVBQVksV0FBWSxZQUd0QyxTQUFTQyxFQUFxQkMsRUFBSUMsRUFBSXh4RCxFQUFHcUIsR0F5QnZDLElBeEJBLElBQ0lvd0QsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0Ms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RUFBUWg4RSxVQUFVMlgsT0FBUyxTQUFTL1csR0FDbEMsSUFBSXc3RSxFQUFVdjRFLEtBQUt3NEUsU0FDZmw0QyxFQUFRaTRDLEVBQVFwK0QsUUFBUXBkLEdBQ3hCdWpDLEdBQVMsR0FDWDQzQyxFQUFVSyxFQUFTajRDLEdBQ2hCaTRDLEVBQVEvNkUsUUFDWHdDLEtBQUt3a0MsUUFHVHhxQyxFQUFPRCxRQUFVbytFIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicXVzbHktY29yZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJxdXNseS1jb3JlXCJdID0gZmFjdG9yeSgpO1xufSkoZ2xvYmFsLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzQpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXRpbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3RyZWFtXCIpOyIsInZhciBCZXIgPSByZXF1aXJlKCdhc24xJykuQmVyO1xuXG52YXIgcmVhZFVJbnQzMkJFID0gcmVxdWlyZSgnLi9idWZmZXItaGVscGVycycpLnJlYWRVSW50MzJCRTtcbnZhciB3cml0ZVVJbnQzMkJFID0gcmVxdWlyZSgnLi9idWZmZXItaGVscGVycycpLndyaXRlVUludDMyQkU7XG5cbi8vIFhYWCB0aGUgdmFsdWUgb2YgMjQwMCBmcm9tIGRyb3BiZWFyIGlzIG9ubHkgZm9yIGNlcnRhaW4gc3RyaW5ncywgbm90IGFsbFxuLy8gc3RyaW5ncy4gZm9yIGV4YW1wbGUgdGhlIGxpc3Qgc3RyaW5ncyB1c2VkIGR1cmluZyBoYW5kc2hha2VzXG52YXIgTUFYX1NUUklOR19MRU4gPSBJbmZpbml0eTsvLzI0MDA7IC8vIHRha2VuIGZyb20gZHJvcGJlYXJcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGl2X2luYzogaXZfaW5jLFxuICByZWFkSW50OiByZWFkSW50LFxuICByZWFkU3RyaW5nOiByZWFkU3RyaW5nLFxuICBwYXJzZUtleTogcmVxdWlyZSgnLi9rZXlQYXJzZXInKS5wYXJzZUtleSxcbiAgc2lnU1NIVG9BU04xOiBzaWdTU0hUb0FTTjEsXG4gIERTQVNpZ0JFUlRvQmFyZTogRFNBU2lnQkVSVG9CYXJlLFxuICBFQ0RTQVNpZ0FTTjFUb1NTSDogRUNEU0FTaWdBU04xVG9TU0hcbn07XG5cbmZ1bmN0aW9uIGl2X2luYyhpdikge1xuICB2YXIgbiA9IDEyO1xuICB2YXIgYyA9IDA7XG4gIGRvIHtcbiAgICAtLW47XG4gICAgYyA9IGl2W25dO1xuICAgIGlmIChjID09PSAyNTUpXG4gICAgICBpdltuXSA9IDA7XG4gICAgZWxzZSB7XG4gICAgICBpdltuXSA9ICsrYztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gd2hpbGUgKG4gPiA0KTtcbn1cblxuZnVuY3Rpb24gcmVhZEludChidWZmZXIsIHN0YXJ0LCBzdHJlYW0sIGNiKSB7XG4gIHZhciBidWZmZXJMZW4gPSBidWZmZXIubGVuZ3RoO1xuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IGJ1ZmZlckxlbiB8fCAoYnVmZmVyTGVuIC0gc3RhcnQpIDwgNCkge1xuICAgIHN0cmVhbSAmJiBzdHJlYW0uX2NsZWFudXAoY2IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByZWFkVUludDMyQkUoYnVmZmVyLCBzdGFydCk7XG59XG5cbmZ1bmN0aW9uIERTQVNpZ0JFUlRvQmFyZShzaWduYXR1cmUpIHtcbiAgaWYgKHNpZ25hdHVyZS5sZW5ndGggPD0gNDApXG4gICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgLy8gVGhpcyBpcyBhIHF1aWNrIGFuZCBkaXJ0eSB3YXkgdG8gZ2V0IGZyb20gQkVSIGVuY29kZWQgciBhbmQgcyB0aGF0XG4gIC8vIE9wZW5TU0wgZ2l2ZXMgdXMsIHRvIGp1c3QgdGhlIGJhcmUgdmFsdWVzIGJhY2sgdG8gYmFjayAoNDAgYnl0ZXNcbiAgLy8gdG90YWwpIGxpa2UgT3BlblNTSCAoYW5kIHBvc3NpYmx5IG90aGVycykgYXJlIGV4cGVjdGluZ1xuICB2YXIgYXNuUmVhZGVyID0gbmV3IEJlci5SZWFkZXIoc2lnbmF0dXJlKTtcbiAgYXNuUmVhZGVyLnJlYWRTZXF1ZW5jZSgpO1xuICB2YXIgciA9IGFzblJlYWRlci5yZWFkU3RyaW5nKEJlci5JbnRlZ2VyLCB0cnVlKTtcbiAgdmFyIHMgPSBhc25SZWFkZXIucmVhZFN0cmluZyhCZXIuSW50ZWdlciwgdHJ1ZSk7XG4gIHZhciByT2Zmc2V0ID0gMDtcbiAgdmFyIHNPZmZzZXQgPSAwO1xuICBpZiAoci5sZW5ndGggPCAyMCkge1xuICAgIHZhciByTmV3ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKTtcbiAgICByLmNvcHkock5ldywgMSk7XG4gICAgciA9IHJOZXc7XG4gICAgclswXSA9IDA7XG4gIH1cbiAgaWYgKHMubGVuZ3RoIDwgMjApIHtcbiAgICB2YXIgc05ldyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMCk7XG4gICAgcy5jb3B5KHNOZXcsIDEpO1xuICAgIHMgPSBzTmV3O1xuICAgIHNbMF0gPSAwO1xuICB9XG4gIGlmIChyLmxlbmd0aCA+IDIwICYmIHJbMF0gPT09IDB4MDApXG4gICAgck9mZnNldCA9IDE7XG4gIGlmIChzLmxlbmd0aCA+IDIwICYmIHNbMF0gPT09IDB4MDApXG4gICAgc09mZnNldCA9IDE7XG4gIHZhciBuZXdTaWcgPSBCdWZmZXIuYWxsb2NVbnNhZmUoKHIubGVuZ3RoIC0gck9mZnNldCkgKyAocy5sZW5ndGggLSBzT2Zmc2V0KSk7XG4gIHIuY29weShuZXdTaWcsIDAsIHJPZmZzZXQpO1xuICBzLmNvcHkobmV3U2lnLCByLmxlbmd0aCAtIHJPZmZzZXQsIHNPZmZzZXQpO1xuICByZXR1cm4gbmV3U2lnO1xufVxuXG5mdW5jdGlvbiBFQ0RTQVNpZ0FTTjFUb1NTSChzaWduYXR1cmUpIHtcbiAgaWYgKHNpZ25hdHVyZVswXSA9PT0gMHgwMClcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICAvLyBDb252ZXJ0IFNTSCBzaWduYXR1cmUgcGFyYW1ldGVycyB0byBBU04uMSBCRVIgdmFsdWVzIGZvciBPcGVuU1NMXG4gIHZhciBhc25SZWFkZXIgPSBuZXcgQmVyLlJlYWRlcihzaWduYXR1cmUpO1xuICBhc25SZWFkZXIucmVhZFNlcXVlbmNlKCk7XG4gIHZhciByID0gYXNuUmVhZGVyLnJlYWRTdHJpbmcoQmVyLkludGVnZXIsIHRydWUpO1xuICB2YXIgcyA9IGFzblJlYWRlci5yZWFkU3RyaW5nKEJlci5JbnRlZ2VyLCB0cnVlKTtcbiAgaWYgKHIgPT09IG51bGwgfHwgcyA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBuZXdTaWcgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIHIubGVuZ3RoICsgNCArIHMubGVuZ3RoKTtcbiAgd3JpdGVVSW50MzJCRShuZXdTaWcsIHIubGVuZ3RoLCAwKTtcbiAgci5jb3B5KG5ld1NpZywgNCk7XG4gIHdyaXRlVUludDMyQkUobmV3U2lnLCBzLmxlbmd0aCwgNCArIHIubGVuZ3RoKTtcbiAgcy5jb3B5KG5ld1NpZywgNCArIDQgKyByLmxlbmd0aCk7XG4gIHJldHVybiBuZXdTaWc7XG59XG5cbmZ1bmN0aW9uIHNpZ1NTSFRvQVNOMShzaWcsIHR5cGUsIHNlbGYsIGNhbGxiYWNrKSB7XG4gIHZhciBhc25Xcml0ZXI7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3NzaC1kc3MnOlxuICAgICAgaWYgKHNpZy5sZW5ndGggPiA0MClcbiAgICAgICAgcmV0dXJuIHNpZztcbiAgICAgIC8vIENoYW5nZSBiYXJlIHNpZ25hdHVyZSByIGFuZCBzIHZhbHVlcyB0byBBU04uMSBCRVIgdmFsdWVzIGZvciBPcGVuU1NMXG4gICAgICBhc25Xcml0ZXIgPSBuZXcgQmVyLldyaXRlcigpO1xuICAgICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAgIHZhciByID0gc2lnLnNsaWNlKDAsIDIwKTtcbiAgICAgIHZhciBzID0gc2lnLnNsaWNlKDIwKTtcbiAgICAgIGlmIChyWzBdICYgMHg4MCkge1xuICAgICAgICB2YXIgck5ldyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMSk7XG4gICAgICAgIHJOZXdbMF0gPSAweDAwO1xuICAgICAgICByLmNvcHkock5ldywgMSk7XG4gICAgICAgIHIgPSByTmV3O1xuICAgICAgfSBlbHNlIGlmIChyWzBdID09PSAweDAwICYmICEoclsxXSAmIDB4ODApKSB7XG4gICAgICAgIHIgPSByLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgaWYgKHNbMF0gJiAweDgwKSB7XG4gICAgICAgIHZhciBzTmV3ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIxKTtcbiAgICAgICAgc05ld1swXSA9IDB4MDA7XG4gICAgICAgIHMuY29weShzTmV3LCAxKTtcbiAgICAgICAgcyA9IHNOZXc7XG4gICAgICB9IGVsc2UgaWYgKHNbMF0gPT09IDB4MDAgJiYgIShzWzFdICYgMHg4MCkpIHtcbiAgICAgICAgcyA9IHMuc2xpY2UoMSk7XG4gICAgICB9XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIociwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKHMsIEJlci5JbnRlZ2VyKTtcbiAgICAgIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICAgICAgcmV0dXJuIGFzbldyaXRlci5idWZmZXI7XG4gICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDI1Nic6XG4gICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDM4NCc6XG4gICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6XG4gICAgICB2YXIgciA9IHJlYWRTdHJpbmcoc2lnLCAwLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAociA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBzID0gcmVhZFN0cmluZyhzaWcsIHNpZy5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAocyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgYXNuV3JpdGVyID0gbmV3IEJlci5Xcml0ZXIoKTtcbiAgICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIociwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKHMsIEJlci5JbnRlZ2VyKTtcbiAgICAgIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICAgICAgcmV0dXJuIGFzbldyaXRlci5idWZmZXI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzaWc7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZFN0cmluZyhidWZmZXIsIHN0YXJ0LCBlbmNvZGluZywgc3RyZWFtLCBjYiwgbWF4TGVuKSB7XG4gIGlmIChlbmNvZGluZyAmJiAhQnVmZmVyLmlzQnVmZmVyKGVuY29kaW5nKSAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBjYiA9PT0gJ251bWJlcicpXG4gICAgICBtYXhMZW4gPSBjYjtcbiAgICBjYiA9IHN0cmVhbTtcbiAgICBzdHJlYW0gPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHN0YXJ0IHx8IChzdGFydCA9IDApO1xuICB2YXIgYnVmZmVyTGVuID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGxlZnQgPSAoYnVmZmVyTGVuIC0gc3RhcnQpO1xuICB2YXIgbGVuO1xuICB2YXIgZW5kO1xuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IGJ1ZmZlckxlbiB8fCBsZWZ0IDwgNCkge1xuICAgIHN0cmVhbSAmJiBzdHJlYW0uX2NsZWFudXAoY2IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxlbiA9IHJlYWRVSW50MzJCRShidWZmZXIsIHN0YXJ0KTtcbiAgaWYgKGxlbiA+IChtYXhMZW4gfHwgTUFYX1NUUklOR19MRU4pIHx8IGxlZnQgPCAoNCArIGxlbikpIHtcbiAgICBzdHJlYW0gJiYgc3RyZWFtLl9jbGVhbnVwKGNiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGFydCArPSA0O1xuICBlbmQgPSBzdGFydCArIGxlbjtcbiAgYnVmZmVyLl9wb3MgPSBlbmQ7XG5cbiAgaWYgKGVuY29kaW5nKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmNvZGluZykpIHtcbiAgICAgIGJ1ZmZlci5jb3B5KGVuY29kaW5nLCAwLCBzdGFydCwgZW5kKTtcbiAgICAgIHJldHVybiBlbmNvZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZyhlbmNvZGluZywgc3RhcnQsIGVuZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gIH1cbn1cblxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlYWRVSW50MzJCRTogZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGJ1ZltvZmZzZXQrK10gKiAxNjc3NzIxNlxuICAgICAgICAgICArIGJ1ZltvZmZzZXQrK10gKiA2NTUzNlxuICAgICAgICAgICArIGJ1ZltvZmZzZXQrK10gKiAyNTZcbiAgICAgICAgICAgKyBidWZbb2Zmc2V0XTtcbiAgfSxcbiAgd3JpdGVVSW50MzJCRTogZnVuY3Rpb24gd3JpdGVVSW50MzJCRShidWYsIHZhbHVlLCBvZmZzZXQpIHtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiAyNCk7XG4gICAgYnVmW29mZnNldCsrXSA9ICh2YWx1ZSA+Pj4gMTYpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodmFsdWUgPj4+IDgpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSB2YWx1ZTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9LFxuICB3cml0ZVVJbnQzMkxFOiBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFKGJ1ZiwgdmFsdWUsIG9mZnNldCkge1xuICAgIGJ1ZltvZmZzZXQrK10gPSB2YWx1ZTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiA4KTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiAxNik7XG4gICAgYnVmW29mZnNldCsrXSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlYWRVSW50MzJCRTogZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGJ1ZltvZmZzZXQrK10gKiAxNjc3NzIxNlxuICAgICAgICAgICArIGJ1ZltvZmZzZXQrK10gKiA2NTUzNlxuICAgICAgICAgICArIGJ1ZltvZmZzZXQrK10gKiAyNTZcbiAgICAgICAgICAgKyBidWZbb2Zmc2V0XTtcbiAgfSxcbiAgd3JpdGVVSW50MzJCRTogZnVuY3Rpb24gd3JpdGVVSW50MzJCRShidWYsIHZhbHVlLCBvZmZzZXQpIHtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiAyNCk7XG4gICAgYnVmW29mZnNldCsrXSA9ICh2YWx1ZSA+Pj4gMTYpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodmFsdWUgPj4+IDgpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSB2YWx1ZTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9LFxuICB3cml0ZVVJbnQzMkxFOiBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFKGJ1ZiwgdmFsdWUsIG9mZnNldCkge1xuICAgIGJ1ZltvZmZzZXQrK10gPSB2YWx1ZTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiA4KTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHZhbHVlID4+PiAxNik7XG4gICAgYnVmW29mZnNldCsrXSA9ICh2YWx1ZSA+Pj4gMjQpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXRcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGVJbmZvID0gZXhwb3J0cy5GaWxlVHlwZSA9IHZvaWQgMDtcbnZhciBGaWxlVHlwZTtcbihmdW5jdGlvbiAoRmlsZVR5cGUpIHtcbiAgICBGaWxlVHlwZVtGaWxlVHlwZVtcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xuICAgIEZpbGVUeXBlW0ZpbGVUeXBlW1wiRmlsZVwiXSA9IDFdID0gXCJGaWxlXCI7XG4gICAgRmlsZVR5cGVbRmlsZVR5cGVbXCJEaXJlY3RvcnlcIl0gPSAyXSA9IFwiRGlyZWN0b3J5XCI7XG4gICAgRmlsZVR5cGVbRmlsZVR5cGVbXCJTeW1ib2xpY0xpbmtcIl0gPSAzXSA9IFwiU3ltYm9saWNMaW5rXCI7XG59KShGaWxlVHlwZSA9IGV4cG9ydHMuRmlsZVR5cGUgfHwgKGV4cG9ydHMuRmlsZVR5cGUgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgYSBmaWxlLCBkaXJlY3Rvcnkgb3Igc3ltYm9saWMgbGluay5cbiAqL1xuY2xhc3MgRmlsZUluZm8ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50eXBlID0gRmlsZVR5cGUuVW5rbm93bjtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVucGFyc2VkLCByYXcgbW9kaWZpY2F0aW9uIGRhdGUgYXMgYSBzdHJpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGBtb2RpZmllZEF0YCBpcyB1bmRlZmluZWQsIHRoZSBGVFAgc2VydmVyIHlvdSdyZSBjb25uZWN0ZWQgdG8gZG9lc24ndCBzdXBwb3J0IHRoZSBtb3JlIG1vZGVyblxuICAgICAgICAgKiBNTFNEIGNvbW1hbmQgZm9yIG1hY2hpbmUtcmVhZGFibGUgZGlyZWN0b3J5IGxpc3RpbmdzLiBUaGUgb2xkZXIgY29tbWFuZCBMSVNUIGlzIHRoZW4gdXNlZCByZXR1cm5pbmdcbiAgICAgICAgICogcmVzdWx0cyB0aGF0IHZhcnkgYSBsb3QgYmV0d2VlbiBzZXJ2ZXJzIGFzIHRoZSBmb3JtYXQgaGFzbid0IGJlZW4gc3RhbmRhcmRpemVkLiBIZXJlLCBkaXJlY3RvcnkgbGlzdGluZ3NcbiAgICAgICAgICogYW5kIGVzcGVjaWFsbHkgbW9kaWZpY2F0aW9uIGRhdGVzIHdlcmUgbWVhbnQgdG8gYmUgaHVtYW4tcmVhZGFibGUgZmlyc3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJlIGNhcmVmdWwgd2hlbiBzdGlsbCB0cnlpbmcgdG8gcGFyc2UgdGhpcyBieSB5b3Vyc2VsZi4gUGFyc2luZyBkYXRlcyBmcm9tIGxpc3RpbmdzIHVzaW5nIExJU1QgaXNcbiAgICAgICAgICogdW5yZWxpYWJsZS4gVGhpcyBsaWJyYXJ5IGRlY2lkZXMgdG8gb2ZmZXIgcGFyc2VkIGRhdGVzIG9ubHkgd2hlbiB0aGV5J3JlIGFic29sdXRlbHkgcmVsaWFibGUgYW5kIHNhZmUgdG9cbiAgICAgICAgICogdXNlIGUuZy4gZm9yIGNvbXBhcmlzb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYXdNb2RpZmllZEF0ID0gXCJcIjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhcnNlZCBtb2RpZmljYXRpb24gZGF0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQXZhaWxhYmxlIGlmIHRoZSBGVFAgc2VydmVyIHN1cHBvcnRzIHRoZSBNTFNEIGNvbW1hbmQuIE9ubHkgTUxTRCBndWFyYW50ZWVzIGRhdGVzIHRoYW4gY2FuIGJlIHJlbGlhYmx5XG4gICAgICAgICAqIHBhcnNlZCB3aXRoIHRoZSBjb3JyZWN0IHRpbWV6b25lIGFuZCBhIHJlc29sdXRpb24gZG93biB0byBzZWNvbmRzLiBTZWUgYHJhd01vZGlmaWVkQXRgIHByb3BlcnR5IGZvciB0aGUgdW5wYXJzZWRcbiAgICAgICAgICogZGF0ZSB0aGF0IGlzIGFsd2F5cyBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vZGlmaWVkQXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbml4IHBlcm1pc3Npb25zIGlmIHByZXNlbnQuIElmIHRoZSB1bmRlcmx5aW5nIEZUUCBzZXJ2ZXIgaXMgbm90IHJ1bm5pbmcgb24gVW5peCB0aGlzIHdpbGwgYmUgdW5kZWZpbmVkLlxuICAgICAgICAgKiBJZiBzZXQsIHlvdSBtaWdodCBiZSBhYmxlIHRvIGVkaXQgcGVybWlzc2lvbnMgd2l0aCB0aGUgRlRQIGNvbW1hbmQgYFNJVEUgQ0hNT0RgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhcmQgbGluayBjb3VudCBpZiBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhcmRMaW5rQ291bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5rIG5hbWUgZm9yIHN5bWJvbGljIGxpbmtzIGlmIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGluayA9IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuaXggZ3JvdXAgaWYgYXZhaWxhYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ncm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuaXggdXNlciBpZiBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVzZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmlxdWUgSUQgaWYgYXZhaWxhYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bmlxdWVJRCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGlzRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBGaWxlVHlwZS5EaXJlY3Rvcnk7XG4gICAgfVxuICAgIGdldCBpc1N5bWJvbGljTGluaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gRmlsZVR5cGUuU3ltYm9saWNMaW5rO1xuICAgIH1cbiAgICBnZXQgaXNGaWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBGaWxlVHlwZS5GaWxlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXByZWNhdGVkLCBsZWdhY3kgQVBJLiBVc2UgYHJhd01vZGlmaWVkQXRgIGluc3RlYWQuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBnZXQgZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3TW9kaWZpZWRBdDtcbiAgICB9XG4gICAgc2V0IGRhdGUocmF3TW9kaWZpZWRBdCkge1xuICAgICAgICB0aGlzLnJhd01vZGlmaWVkQXQgPSByYXdNb2RpZmllZEF0O1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZUluZm8gPSBGaWxlSW5mbztcbkZpbGVJbmZvLlVuaXhQZXJtaXNzaW9uID0ge1xuICAgIFJlYWQ6IDQsXG4gICAgV3JpdGU6IDIsXG4gICAgRXhlY3V0ZTogMVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQdWJsaWMgQVBJXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9DbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Z0cENvbnRleHRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0ZpbGVJbmZvXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wYXJzZUxpc3RcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1N0cmluZ0VuY29kaW5nXCIpLCBleHBvcnRzKTtcbnZhciB0cmFuc2Zlcl8xID0gcmVxdWlyZShcIi4vdHJhbnNmZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbnRlclBhc3NpdmVNb2RlSVB2NFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJhbnNmZXJfMS5lbnRlclBhc3NpdmVNb2RlSVB2NDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVudGVyUGFzc2l2ZU1vZGVJUHY2XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cmFuc2Zlcl8xLmVudGVyUGFzc2l2ZU1vZGVJUHY2OyB9IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidGxzXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wb3NpdGl2ZUludGVybWVkaWF0ZSA9IGV4cG9ydHMucG9zaXRpdmVDb21wbGV0aW9uID0gZXhwb3J0cy5pc011bHRpbGluZSA9IGV4cG9ydHMuaXNTaW5nbGVMaW5lID0gZXhwb3J0cy5wYXJzZUNvbnRyb2xSZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IExGID0gXCJcXG5cIjtcbi8qKlxuICogUGFyc2UgYW4gRlRQIGNvbnRyb2wgcmVzcG9uc2UgYXMgYSBjb2xsZWN0aW9uIG9mIG1lc3NhZ2VzLiBBIG1lc3NhZ2UgaXMgYSBjb21wbGV0ZVxuICogc2luZ2xlLSBvciBtdWx0aWxpbmUgcmVzcG9uc2UuIEEgcmVzcG9uc2UgY2FuIGFsc28gY29udGFpbiBtdWx0aXBsZSBtdWx0aWxpbmUgcmVzcG9uc2VzXG4gKiB0aGF0IHdpbGwgZWFjaCBiZSByZXByZXNlbnRlZCBieSBhIG1lc3NhZ2UuIEEgcmVzcG9uc2UgY2FuIGFsc28gYmUgaW5jb21wbGV0ZVxuICogYW5kIGJlIGNvbXBsZXRlZCBvbiB0aGUgbmV4dCBpbmNvbWluZyBkYXRhIGNodW5rIGZvciB3aGljaCBjYXNlIHRoaXMgZnVuY3Rpb24gYWxzb1xuICogZGVzY3JpYmVzIGEgYHJlc3RgLiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGFsbCBDUkxGIHRvIExGLlxuICovXG5mdW5jdGlvbiBwYXJzZUNvbnRyb2xSZXNwb25zZSh0ZXh0KSB7XG4gICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KC9cXHI/XFxuLyk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICBsZXQgc3RhcnRBdCA9IDA7XG4gICAgbGV0IHRva2VuUmVnZXg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgIC8vIE5vIGdyb3VwIGhhcyBiZWVuIG9wZW5lZC5cbiAgICAgICAgaWYgKCF0b2tlblJlZ2V4KSB7XG4gICAgICAgICAgICBpZiAoaXNNdWx0aWxpbmUobGluZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBPcGVuIGEgZ3JvdXAgYnkgc2V0dGluZyBhbiBleHBlY3RlZCB0b2tlbi5cbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGxpbmUuc3Vic3RyKDAsIDMpO1xuICAgICAgICAgICAgICAgIHRva2VuUmVnZXggPSBuZXcgUmVnRXhwKGBeJHt0b2tlbn0oPzokfCApYCk7XG4gICAgICAgICAgICAgICAgc3RhcnRBdCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1NpbmdsZUxpbmUobGluZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5nbGUgbGluZXMgY2FuIGJlIGdyb3VwZWQgaW1tZWRpYXRlbHkuXG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBHcm91cCBoYXMgYmVlbiBvcGVuZWQsIGV4cGVjdCBjbG9zaW5nIHRva2VuLlxuICAgICAgICBlbHNlIGlmICh0b2tlblJlZ2V4LnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgIHRva2VuUmVnZXggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKGxpbmVzLnNsaWNlKHN0YXJ0QXQsIGkgKyAxKS5qb2luKExGKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhlIGxhc3QgZ3JvdXAgbWlnaHQgbm90IGhhdmUgYmVlbiBjbG9zZWQsIHJlcG9ydCBpdCBhcyBhIHJlc3QuXG4gICAgY29uc3QgcmVzdCA9IHRva2VuUmVnZXggPyBsaW5lcy5zbGljZShzdGFydEF0KS5qb2luKExGKSArIExGIDogXCJcIjtcbiAgICByZXR1cm4geyBtZXNzYWdlcywgcmVzdCB9O1xufVxuZXhwb3J0cy5wYXJzZUNvbnRyb2xSZXNwb25zZSA9IHBhcnNlQ29udHJvbFJlc3BvbnNlO1xuZnVuY3Rpb24gaXNTaW5nbGVMaW5lKGxpbmUpIHtcbiAgICByZXR1cm4gL15cXGRcXGRcXGQoPzokfCApLy50ZXN0KGxpbmUpO1xufVxuZXhwb3J0cy5pc1NpbmdsZUxpbmUgPSBpc1NpbmdsZUxpbmU7XG5mdW5jdGlvbiBpc011bHRpbGluZShsaW5lKSB7XG4gICAgcmV0dXJuIC9eXFxkXFxkXFxkLS8udGVzdChsaW5lKTtcbn1cbmV4cG9ydHMuaXNNdWx0aWxpbmUgPSBpc011bHRpbGluZTtcbi8qKlxuICogUmV0dXJuIHRydWUgaWYgYW4gRlRQIHJldHVybiBjb2RlIGRlc2NyaWJlcyBhIHBvc2l0aXZlIGNvbXBsZXRpb24uXG4gKi9cbmZ1bmN0aW9uIHBvc2l0aXZlQ29tcGxldGlvbihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gMjAwICYmIGNvZGUgPCAzMDA7XG59XG5leHBvcnRzLnBvc2l0aXZlQ29tcGxldGlvbiA9IHBvc2l0aXZlQ29tcGxldGlvbjtcbi8qKlxuICogUmV0dXJuIHRydWUgaWYgYW4gRlRQIHJldHVybiBjb2RlIGRlc2NyaWJlcyBhIHBvc2l0aXZlIGludGVybWVkaWF0ZSByZXNwb25zZS5cbiAqL1xuZnVuY3Rpb24gcG9zaXRpdmVJbnRlcm1lZGlhdGUoY29kZSkge1xuICAgIHJldHVybiBjb2RlID49IDMwMCAmJiBjb2RlIDwgNDAwO1xufVxuZXhwb3J0cy5wb3NpdGl2ZUludGVybWVkaWF0ZSA9IHBvc2l0aXZlSW50ZXJtZWRpYXRlO1xuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFdyaXRhYmxlLCBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cbmltcG9ydCB7XG4gIElGaWxlLFxuICBJVHJhbnNmZXJPcHRpb25zLFxuICBJVHJhbnNmZXJQcm9ncmVzc0xpc3RlbmVyLFxuICBJVHJhbnNmZXJJbmZvLFxufSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFRyYW5zZmVyIH0gZnJvbSAnLi4vdHJhbnNmZXInO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3RyYXRlZ3kge1xuICBvbihldmVudDogJ2Nvbm5lY3QnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHRoaXM7XG4gIG9uKGV2ZW50OiAnZGlzY29ubmVjdCcsIGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogdGhpcztcbiAgb24oZXZlbnQ6ICdwcm9ncmVzcycsIGxpc3RlbmVyOiBJVHJhbnNmZXJQcm9ncmVzc0xpc3RlbmVyKTogdGhpcztcblxuICBvbmNlKGV2ZW50OiAnY29ubmVjdCcsIGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogdGhpcztcbiAgb25jZShldmVudDogJ2Rpc2Nvbm5lY3QnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHRoaXM7XG59XG5cbi8qKlxuICogQW4gYWJzdHJhY3QgY2xhc3MsIHdoaWNoIGFsbG93cyB0byBjcmVhdGUgYSBjdXN0b20gcHJvdG9jb2wuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHJhdGVneSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBjb25uZWN0ZWQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB0cmFuc2ZlcjogVHJhbnNmZXI7XG5cbiAgcHVibGljIGFic3RyYWN0IGNvbm5lY3Q6ICgpID0+IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGFic3RyYWN0IGRpc2Nvbm5lY3Q6ICgpID0+IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGFzeW5jIGFib3J0KCkge1xuICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdCgpO1xuICAgIGF3YWl0IHRoaXMuY29ubmVjdCgpO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IGRvd25sb2FkOiAoXG4gICAgZGVzdDogV3JpdGFibGUsXG4gICAgaW5mbzogSVRyYW5zZmVySW5mbyxcbiAgICBvcHRpb25zPzogSVRyYW5zZmVyT3B0aW9ucyxcbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCB1cGxvYWQ6IChcbiAgICBzb3VyY2U6IFJlYWRhYmxlLFxuICAgIGluZm86IElUcmFuc2ZlckluZm8sXG4gICAgb3B0aW9ucz86IElUcmFuc2Zlck9wdGlvbnMsXG4gICkgPT4gUHJvbWlzZTx2b2lkPjtcblxuICBwdWJsaWMgYWJzdHJhY3QgbGlzdDogKHBhdGg/OiBzdHJpbmcpID0+IFByb21pc2U8SUZpbGVbXT47XG5cbiAgcHVibGljIGFic3RyYWN0IHNpemU6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8bnVtYmVyPjtcblxuICBwdWJsaWMgYWJzdHJhY3QgZXhpc3RzOiAocGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBtb3ZlOiAoc291cmNlOiBzdHJpbmcsIGRlc3Q6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcblxuICBwdWJsaWMgYWJzdHJhY3QgcmVtb3ZlRmlsZTogKHBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcblxuICBwdWJsaWMgYWJzdHJhY3QgcmVtb3ZlRW1wdHlGb2xkZXI6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGFic3RyYWN0IHJlbW92ZUZvbGRlcjogKHBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcblxuICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlRm9sZGVyOiAocGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVFbXB0eUZpbGU6IChwYXRoOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGFic3RyYWN0IHB3ZDogKCkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBzZW5kOiAoY29tbWFuZDogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbmZpZzogYW55LFxuICAgIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zPzogYW55LFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByZXBhcmVUcmFuc2ZlcihpbmZvOiBJVHJhbnNmZXJJbmZvLCBvcHRpb25zPzogSVRyYW5zZmVyT3B0aW9ucykge1xuICAgIHRoaXMudHJhbnNmZXIgPSBuZXcgVHJhbnNmZXIoaW5mbywgb3B0aW9ucywgKGRhdGEsIHByb2dyZXNzKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgZGF0YSwgcHJvZ3Jlc3MpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmZXIuaGFuZGxlUHJvZ3Jlc3M7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmluaXNoVHJhbnNmZXIoKSB7XG4gICAgdGhpcy50cmFuc2ZlciA9IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgaGFuZGxlTmV0d29yazxUID0gdm9pZD4oY2I6IGFueSwgY2xlYW4/OiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3Qgb25DbGVhbiA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcignZGlzY29ubmVjdCcsIG9uRGlzY29ubmVjdCk7XG5cbiAgICAgICAgaWYgKGNsZWFuKSB7XG4gICAgICAgICAgY2xlYW4ob25SZXNvbHZlLCBvblJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG9uRGlzY29ubmVjdCA9ICgpID0+IG9uUmVzb2x2ZShudWxsKTtcblxuICAgICAgY29uc3Qgb25SZXNvbHZlID0gKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBvbkNsZWFuKCk7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBvblJlamVjdCA9IChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgIG9uQ2xlYW4oKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9uY2UoJ2Rpc2Nvbm5lY3QnLCBvbkRpc2Nvbm5lY3QpO1xuXG4gICAgICBjYihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgICB9KTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNGVFBTdHJlYW06IHJlcXVpcmUoJy4vbGliL3NmdHAnKSxcbiAgU1NIMlN0cmVhbTogcmVxdWlyZSgnLi9saWIvc3NoJyksXG4gIHV0aWxzOiByZXF1aXJlKCcuL2xpYi91dGlscycpLFxuICBjb25zdGFudHM6IHJlcXVpcmUoJy4vbGliL2NvbnN0YW50cycpXG59OyIsIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuLy8gSWYgeW91IGhhdmUgbm8gaWRlYSB3aGF0IEFTTi4xIG9yIEJFUiBpcywgc2VlIHRoaXM6XG4vLyBmdHA6Ly9mdHAucnNhLmNvbS9wdWIvcGtjcy9hc2NpaS9sYXltYW4uYXNjXG5cbnZhciBCZXIgPSByZXF1aXJlKCcuL2Jlci9pbmRleCcpO1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBCZXI6IEJlcixcblxuICBCZXJSZWFkZXI6IEJlci5SZWFkZXIsXG5cbiAgQmVyV3JpdGVyOiBCZXIuV3JpdGVyXG5cbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgbmV3SW52YWxpZEFzbjFFcnJvcjogZnVuY3Rpb24gKG1zZykge1xuICAgIHZhciBlID0gbmV3IEVycm9yKCk7XG4gICAgZS5uYW1lID0gJ0ludmFsaWRBc24xRXJyb3InO1xuICAgIGUubWVzc2FnZSA9IG1zZyB8fCAnJztcbiAgICByZXR1cm4gZTtcbiAgfVxuXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFT0M6IDAsXG4gIEJvb2xlYW46IDEsXG4gIEludGVnZXI6IDIsXG4gIEJpdFN0cmluZzogMyxcbiAgT2N0ZXRTdHJpbmc6IDQsXG4gIE51bGw6IDUsXG4gIE9JRDogNixcbiAgT2JqZWN0RGVzY3JpcHRvcjogNyxcbiAgRXh0ZXJuYWw6IDgsXG4gIFJlYWw6IDksIC8vIGZsb2F0XG4gIEVudW1lcmF0aW9uOiAxMCxcbiAgUERWOiAxMSxcbiAgVXRmOFN0cmluZzogMTIsXG4gIFJlbGF0aXZlT0lEOiAxMyxcbiAgU2VxdWVuY2U6IDE2LFxuICBTZXQ6IDE3LFxuICBOdW1lcmljU3RyaW5nOiAxOCxcbiAgUHJpbnRhYmxlU3RyaW5nOiAxOSxcbiAgVDYxU3RyaW5nOiAyMCxcbiAgVmlkZW90ZXhTdHJpbmc6IDIxLFxuICBJQTVTdHJpbmc6IDIyLFxuICBVVENUaW1lOiAyMyxcbiAgR2VuZXJhbGl6ZWRUaW1lOiAyNCxcbiAgR3JhcGhpY1N0cmluZzogMjUsXG4gIFZpc2libGVTdHJpbmc6IDI2LFxuICBHZW5lcmFsU3RyaW5nOiAyOCxcbiAgVW5pdmVyc2FsU3RyaW5nOiAyOSxcbiAgQ2hhcmFjdGVyU3RyaW5nOiAzMCxcbiAgQk1QU3RyaW5nOiAzMSxcbiAgQ29uc3RydWN0b3I6IDMyLFxuICBDb250ZXh0OiAxMjhcbn07XG4iLCJ2YXIgaTtcbnZhciBrZXlzO1xudmFyIGxlbjtcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIGVkZHNhU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIGNyeXB0by5zaWduID09PSAnZnVuY3Rpb24nXG4gICAgICAmJiB0eXBlb2YgY3J5cHRvLnZlcmlmeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBrZXkgPSAnLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuTUM0Q0FRQXdCUVlESzJWd0JDSUVJSEtqK3NWYTlXY0QnXG4gICAgICAgICAgICAgICsgJy9xMkRKVUphZjQzS3B0Yzh4WXVVUUE0Yk9Gajl2QzhUXFxyXFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLSc7XG4gICAgdmFyIGRhdGEgPSBCdWZmZXIuZnJvbSgnYScpO1xuICAgIHZhciBzaWc7XG4gICAgdmFyIHZlcmlmaWVkO1xuICAgIHRyeSB7XG4gICAgICBzaWcgPSBjcnlwdG8uc2lnbihudWxsLCBkYXRhLCBrZXkpO1xuICAgICAgdmVyaWZpZWQgPSBjcnlwdG8udmVyaWZ5KG51bGwsIGRhdGEsIGtleSwgc2lnKTtcbiAgICB9IGNhdGNoIChleCkge31cbiAgICByZXR1cm4gKEJ1ZmZlci5pc0J1ZmZlcihzaWcpICYmIHNpZy5sZW5ndGggPT09IDY0ICYmIHZlcmlmaWVkID09PSB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBjdXJ2ZTI1NTE5U3VwcG9ydGVkID0gKHR5cGVvZiBjcnlwdG8uZGlmZmllSGVsbG1hbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGNyeXB0by5nZW5lcmF0ZUtleVBhaXJTeW5jID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgY3J5cHRvLmNyZWF0ZVB1YmxpY0tleSA9PT0gJ2Z1bmN0aW9uJyk7XG5cbnZhciBNRVNTQUdFID0gZXhwb3J0cy5NRVNTQUdFID0ge1xuICAvLyBUcmFuc3BvcnQgbGF5ZXIgcHJvdG9jb2wgLS0gZ2VuZXJpYyAoMS0xOSlcbiAgRElTQ09OTkVDVDogMSxcbiAgSUdOT1JFOiAyLFxuICBVTklNUExFTUVOVEVEOiAzLFxuICBERUJVRzogNCxcbiAgU0VSVklDRV9SRVFVRVNUOiA1LFxuICBTRVJWSUNFX0FDQ0VQVDogNixcblxuICAvLyBUcmFuc3BvcnQgbGF5ZXIgcHJvdG9jb2wgLS0gYWxnb3JpdGhtIG5lZ290aWF0aW9uICgyMC0yOSlcbiAgS0VYSU5JVDogMjAsXG4gIE5FV0tFWVM6IDIxLFxuXG4gIC8vIFRyYW5zcG9ydCBsYXllciBwcm90b2NvbCAtLSBrZXkgZXhjaGFuZ2UgbWV0aG9kLXNwZWNpZmljICgzMC00OSlcblxuICAvLyBVc2VyIGF1dGggcHJvdG9jb2wgLS0gZ2VuZXJpYyAoNTAtNTkpXG4gIFVTRVJBVVRIX1JFUVVFU1Q6IDUwLFxuICBVU0VSQVVUSF9GQUlMVVJFOiA1MSxcbiAgVVNFUkFVVEhfU1VDQ0VTUzogNTIsXG4gIFVTRVJBVVRIX0JBTk5FUjogNTMsXG5cbiAgLy8gVXNlciBhdXRoIHByb3RvY29sIC0tIHVzZXIgYXV0aCBtZXRob2Qtc3BlY2lmaWMgKDYwLTc5KVxuXG4gIC8vIENvbm5lY3Rpb24gcHJvdG9jb2wgLS0gZ2VuZXJpYyAoODAtODkpXG4gIEdMT0JBTF9SRVFVRVNUOiA4MCxcbiAgUkVRVUVTVF9TVUNDRVNTOiA4MSxcbiAgUkVRVUVTVF9GQUlMVVJFOiA4MixcblxuICAvLyBDb25uZWN0aW9uIHByb3RvY29sIC0tIGNoYW5uZWwtcmVsYXRlZCAoOTAtMTI3KVxuICBDSEFOTkVMX09QRU46IDkwLFxuICBDSEFOTkVMX09QRU5fQ09ORklSTUFUSU9OOiA5MSxcbiAgQ0hBTk5FTF9PUEVOX0ZBSUxVUkU6IDkyLFxuICBDSEFOTkVMX1dJTkRPV19BREpVU1Q6IDkzLFxuICBDSEFOTkVMX0RBVEE6IDk0LFxuICBDSEFOTkVMX0VYVEVOREVEX0RBVEE6IDk1LFxuICBDSEFOTkVMX0VPRjogOTYsXG4gIENIQU5ORUxfQ0xPU0U6IDk3LFxuICBDSEFOTkVMX1JFUVVFU1Q6IDk4LFxuICBDSEFOTkVMX1NVQ0NFU1M6IDk5LFxuICBDSEFOTkVMX0ZBSUxVUkU6IDEwMFxuXG4gIC8vIFJlc2VydmVkIGZvciBjbGllbnQgcHJvdG9jb2xzICgxMjgtMTkxKVxuXG4gIC8vIExvY2FsIGV4dGVuc2lvbnMgKDE5Mi0xNTUpXG59O1xuZm9yIChpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKE1FU1NBR0UpLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgKytpKVxuICBNRVNTQUdFW01FU1NBR0Vba2V5c1tpXV1dID0ga2V5c1tpXTtcbi8vIGNvbnRleHQtc3BlY2lmaWMgbWVzc2FnZSBjb2Rlczpcbk1FU1NBR0UuS0VYREhfSU5JVCA9IDMwO1xuTUVTU0FHRS5LRVhESF9SRVBMWSA9IDMxO1xuTUVTU0FHRS5LRVhESF9HRVhfUkVRVUVTVCA9IDM0O1xuTUVTU0FHRS5LRVhESF9HRVhfR1JPVVAgPSAzMTtcbk1FU1NBR0UuS0VYREhfR0VYX0lOSVQgPSAzMjtcbk1FU1NBR0UuS0VYREhfR0VYX1JFUExZID0gMzM7XG5NRVNTQUdFLktFWEVDREhfSU5JVCA9IDMwOyAvLyBpbmNsdWRlZCBoZXJlIGZvciBjb21wbGV0ZW5lc3Ncbk1FU1NBR0UuS0VYRUNESF9SRVBMWSA9IDMxOyAvLyBpbmNsdWRlZCBoZXJlIGZvciBjb21wbGV0ZW5lc3Ncbk1FU1NBR0UuVVNFUkFVVEhfUEFTU1dEX0NIQU5HRVJFUSA9IDYwO1xuTUVTU0FHRS5VU0VSQVVUSF9QS19PSyA9IDYwO1xuTUVTU0FHRS5VU0VSQVVUSF9JTkZPX1JFUVVFU1QgPSA2MDtcbk1FU1NBR0UuVVNFUkFVVEhfSU5GT19SRVNQT05TRSA9IDYxO1xuXG52YXIgRFlOQU1JQ19LRVhESF9NRVNTQUdFID0gZXhwb3J0cy5EWU5BTUlDX0tFWERIX01FU1NBR0UgPSB7fTtcbkRZTkFNSUNfS0VYREhfTUVTU0FHRVtNRVNTQUdFLktFWERIX0dFWF9HUk9VUF0gPSAnS0VYREhfR0VYX0dST1VQJztcbkRZTkFNSUNfS0VYREhfTUVTU0FHRVtNRVNTQUdFLktFWERIX0dFWF9SRVBMWV0gPSAnS0VYREhfR0VYX1JFUExZJztcblxudmFyIEtFWERIX01FU1NBR0UgPSBleHBvcnRzLktFWERIX01FU1NBR0UgPSB7fTtcbktFWERIX01FU1NBR0VbTUVTU0FHRS5LRVhESF9JTklUXSA9ICdLRVhESF9JTklUJztcbktFWERIX01FU1NBR0VbTUVTU0FHRS5LRVhESF9SRVBMWV0gPSAnS0VYREhfUkVQTFknO1xuXG52YXIgRElTQ09OTkVDVF9SRUFTT04gPSBleHBvcnRzLkRJU0NPTk5FQ1RfUkVBU09OID0ge1xuICBIT1NUX05PVF9BTExPV0VEX1RPX0NPTk5FQ1Q6IDEsXG4gIFBST1RPQ09MX0VSUk9SOiAyLFxuICBLRVlfRVhDSEFOR0VfRkFJTEVEOiAzLFxuICBSRVNFUlZFRDogNCxcbiAgTUFDX0VSUk9SOiA1LFxuICBDT01QUkVTU0lPTl9FUlJPUjogNixcbiAgU0VSVklDRV9OT1RfQVZBSUxBQkxFOiA3LFxuICBQUk9UT0NPTF9WRVJTSU9OX05PVF9TVVBQT1JURUQ6IDgsXG4gIEhPU1RfS0VZX05PVF9WRVJJRklBQkxFOiA5LFxuICBDT05ORUNUSU9OX0xPU1Q6IDEwLFxuICBCWV9BUFBMSUNBVElPTjogMTEsXG4gIFRPT19NQU5ZX0NPTk5FQ1RJT05TOiAxMixcbiAgQVVUSF9DQU5DRUxFRF9CWV9VU0VSOiAxMyxcbiAgTk9fTU9SRV9BVVRIX01FVEhPRFNfQVZBSUxBQkxFOiAxNCxcbiAgSUxMRUdBTF9VU0VSX05BTUU6IDE1XG59O1xuZm9yIChpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKERJU0NPTk5FQ1RfUkVBU09OKSwgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgIGkgPCBsZW47XG4gICAgICsraSkge1xuICBESVNDT05ORUNUX1JFQVNPTltESVNDT05ORUNUX1JFQVNPTltrZXlzW2ldXV0gPSBrZXlzW2ldO1xufVxuXG52YXIgQ0hBTk5FTF9PUEVOX0ZBSUxVUkUgPSBleHBvcnRzLkNIQU5ORUxfT1BFTl9GQUlMVVJFID0ge1xuICBBRE1JTklTVFJBVElWRUxZX1BST0hJQklURUQ6IDEsXG4gIENPTk5FQ1RfRkFJTEVEOiAyLFxuICBVTktOT1dOX0NIQU5ORUxfVFlQRTogMyxcbiAgUkVTT1VSQ0VfU0hPUlRBR0U6IDRcbn07XG5mb3IgKGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMoQ0hBTk5FTF9PUEVOX0ZBSUxVUkUpLCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgaSA8IGxlbjtcbiAgICAgKytpKSB7XG4gIENIQU5ORUxfT1BFTl9GQUlMVVJFW0NIQU5ORUxfT1BFTl9GQUlMVVJFW2tleXNbaV1dXSA9IGtleXNbaV07XG59XG5cbnZhciBURVJNSU5BTF9NT0RFID0gZXhwb3J0cy5URVJNSU5BTF9NT0RFID0ge1xuICBUVFlfT1BfRU5EOiAwLCAgICAgICAgLy8gSW5kaWNhdGVzIGVuZCBvZiBvcHRpb25zLlxuICBWSU5UUjogMSwgICAgICAgICAgICAgLy8gSW50ZXJydXB0IGNoYXJhY3RlcjsgMjU1IGlmIG5vbmUuIFNpbWlsYXJseSBmb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgb3RoZXIgY2hhcmFjdGVycy4gIE5vdCBhbGwgb2YgdGhlc2UgY2hhcmFjdGVycyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBzdXBwb3J0ZWQgb24gYWxsIHN5c3RlbXMuXG4gIFZRVUlUOiAyLCAgICAgICAgICAgICAvLyBUaGUgcXVpdCBjaGFyYWN0ZXIgKHNlbmRzIFNJR1FVSVQgc2lnbmFsIG9uIFBPU0lYXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgc3lzdGVtcykuXG4gIFZFUkFTRTogMywgICAgICAgICAgICAvLyBFcmFzZSB0aGUgY2hhcmFjdGVyIHRvIGxlZnQgb2YgdGhlIGN1cnNvci5cbiAgVktJTEw6IDQsICAgICAgICAgICAgIC8vIEtpbGwgdGhlIGN1cnJlbnQgaW5wdXQgbGluZS5cbiAgVkVPRjogNSwgICAgICAgICAgICAgIC8vIEVuZC1vZi1maWxlIGNoYXJhY3RlciAoc2VuZHMgRU9GIGZyb20gdGhlIHRlcm1pbmFsKS5cbiAgVkVPTDogNiwgICAgICAgICAgICAgIC8vIEVuZC1vZi1saW5lIGNoYXJhY3RlciBpbiBhZGRpdGlvbiB0byBjYXJyaWFnZSByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBhbmQvb3IgbGluZWZlZWQuXG4gIFZFT0wyOiA3LCAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIGVuZC1vZi1saW5lIGNoYXJhY3Rlci5cbiAgVlNUQVJUOiA4LCAgICAgICAgICAgIC8vIENvbnRpbnVlcyBwYXVzZWQgb3V0cHV0IChub3JtYWxseSBjb250cm9sLVEpLlxuICBWU1RPUDogOSwgICAgICAgICAgICAgLy8gUGF1c2VzIG91dHB1dCAobm9ybWFsbHkgY29udHJvbC1TKS5cbiAgVlNVU1A6IDEwLCAgICAgICAgICAgIC8vIFN1c3BlbmRzIHRoZSBjdXJyZW50IHByb2dyYW0uXG4gIFZEU1VTUDogMTEsICAgICAgICAgICAvLyBBbm90aGVyIHN1c3BlbmQgY2hhcmFjdGVyLlxuICBWUkVQUklOVDogMTIsICAgICAgICAgLy8gUmVwcmludHMgdGhlIGN1cnJlbnQgaW5wdXQgbGluZS5cbiAgVldFUkFTRTogMTMsICAgICAgICAgIC8vIEVyYXNlcyBhIHdvcmQgbGVmdCBvZiBjdXJzb3IuXG4gIFZMTkVYVDogMTQsICAgICAgICAgICAvLyBFbnRlciB0aGUgbmV4dCBjaGFyYWN0ZXIgdHlwZWQgbGl0ZXJhbGx5LCBldmVuIGlmIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgaXMgYSBzcGVjaWFsIGNoYXJhY3RlclxuICBWRkxVU0g6IDE1LCAgICAgICAgICAgLy8gQ2hhcmFjdGVyIHRvIGZsdXNoIG91dHB1dC5cbiAgVlNXVENIOiAxNiwgICAgICAgICAgIC8vIFN3aXRjaCB0byBhIGRpZmZlcmVudCBzaGVsbCBsYXllci5cbiAgVlNUQVRVUzogMTcsICAgICAgICAgIC8vIFByaW50cyBzeXN0ZW0gc3RhdHVzIGxpbmUgKGxvYWQsIGNvbW1hbmQsIHBpZCwgZXRjKS5cbiAgVkRJU0NBUkQ6IDE4LCAgICAgICAgIC8vIFRvZ2dsZXMgdGhlIGZsdXNoaW5nIG9mIHRlcm1pbmFsIG91dHB1dC5cbiAgSUdOUEFSOiAzMCwgICAgICAgICAgIC8vIFRoZSBpZ25vcmUgcGFyaXR5IGZsYWcuICBUaGUgcGFyYW1ldGVyIFNIT1VMRCBiZSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgaWYgdGhpcyBmbGFnIGlzIEZBTFNFLCBhbmQgMSBpZiBpdCBpcyBUUlVFLlxuICBQQVJNUks6IDMxLCAgICAgICAgICAgLy8gTWFyayBwYXJpdHkgYW5kIGZyYW1pbmcgZXJyb3JzLlxuICBJTlBDSzogMzIsICAgICAgICAgICAgLy8gRW5hYmxlIGNoZWNraW5nIG9mIHBhcml0eSBlcnJvcnMuXG4gIElTVFJJUDogMzMsICAgICAgICAgICAvLyBTdHJpcCA4dGggYml0IG9mZiBjaGFyYWN0ZXJzLlxuICBJTkxDUjogMzQsICAgICAgICAgICAgLy8gTWFwIE5MIGludG8gQ1Igb24gaW5wdXQuXG4gIElHTkNSOiAzNSwgICAgICAgICAgICAvLyBJZ25vcmUgQ1Igb24gaW5wdXQuXG4gIElDUk5MOiAzNiwgICAgICAgICAgICAvLyBNYXAgQ1IgdG8gTkwgb24gaW5wdXQuXG4gIElVQ0xDOiAzNywgICAgICAgICAgICAvLyBUcmFuc2xhdGUgdXBwZXJjYXNlIGNoYXJhY3RlcnMgdG8gbG93ZXJjYXNlLlxuICBJWE9OOiAzOCwgICAgICAgICAgICAgLy8gRW5hYmxlIG91dHB1dCBmbG93IGNvbnRyb2wuXG4gIElYQU5ZOiAzOSwgICAgICAgICAgICAvLyBBbnkgY2hhciB3aWxsIHJlc3RhcnQgYWZ0ZXIgc3RvcC5cbiAgSVhPRkY6IDQwLCAgICAgICAgICAgIC8vIEVuYWJsZSBpbnB1dCBmbG93IGNvbnRyb2wuXG4gIElNQVhCRUw6IDQxLCAgICAgICAgICAvLyBSaW5nIGJlbGwgb24gaW5wdXQgcXVldWUgZnVsbC5cbiAgSVNJRzogNTAsICAgICAgICAgICAgIC8vIEVuYWJsZSBzaWduYWxzIElOVFIsIFFVSVQsIFtEXVNVU1AuXG4gIElDQU5PTjogNTEsICAgICAgICAgICAvLyBDYW5vbmljYWxpemUgaW5wdXQgbGluZXMuXG4gIFhDQVNFOiA1MiwgICAgICAgICAgICAvLyBFbmFibGUgaW5wdXQgYW5kIG91dHB1dCBvZiB1cHBlcmNhc2UgY2hhcmFjdGVycyBieVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHByZWNlZGluZyB0aGVpciBsb3dlcmNhc2UgZXF1aXZhbGVudHMgd2l0aCBcIlxcXCIuXG4gIEVDSE86IDUzLCAgICAgICAgICAgICAvLyBFbmFibGUgZWNob2luZy5cbiAgRUNIT0U6IDU0LCAgICAgICAgICAgIC8vIFZpc3VhbGx5IGVyYXNlIGNoYXJzLlxuICBFQ0hPSzogNTUsICAgICAgICAgICAgLy8gS2lsbCBjaGFyYWN0ZXIgZGlzY2FyZHMgY3VycmVudCBsaW5lLlxuICBFQ0hPTkw6IDU2LCAgICAgICAgICAgLy8gRWNobyBOTCBldmVuIGlmIEVDSE8gaXMgb2ZmLlxuICBOT0ZMU0g6IDU3LCAgICAgICAgICAgLy8gRG9uJ3QgZmx1c2ggYWZ0ZXIgaW50ZXJydXB0LlxuICBUT1NUT1A6IDU4LCAgICAgICAgICAgLy8gU3RvcCBiYWNrZ3JvdW5kIGpvYnMgZnJvbSBvdXRwdXQuXG4gIElFWFRFTjogNTksICAgICAgICAgICAvLyBFbmFibGUgZXh0ZW5zaW9ucy5cbiAgRUNIT0NUTDogNjAsICAgICAgICAgIC8vIEVjaG8gY29udHJvbCBjaGFyYWN0ZXJzIGFzIF4oQ2hhcikuXG4gIEVDSE9LRTogNjEsICAgICAgICAgICAvLyBWaXN1YWwgZXJhc2UgZm9yIGxpbmUga2lsbC5cbiAgUEVORElOOiA2MiwgICAgICAgICAgIC8vIFJldHlwZSBwZW5kaW5nIGlucHV0LlxuICBPUE9TVDogNzAsICAgICAgICAgICAgLy8gRW5hYmxlIG91dHB1dCBwcm9jZXNzaW5nLlxuICBPTENVQzogNzEsICAgICAgICAgICAgLy8gQ29udmVydCBsb3dlcmNhc2UgdG8gdXBwZXJjYXNlLlxuICBPTkxDUjogNzIsICAgICAgICAgICAgLy8gTWFwIE5MIHRvIENSLU5MLlxuICBPQ1JOTDogNzMsICAgICAgICAgICAgLy8gVHJhbnNsYXRlIGNhcnJpYWdlIHJldHVybiB0byBuZXdsaW5lIChvdXRwdXQpLlxuICBPTk9DUjogNzQsICAgICAgICAgICAgLy8gVHJhbnNsYXRlIG5ld2xpbmUgdG8gY2FycmlhZ2UgcmV0dXJuLW5ld2xpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvdXRwdXQpLlxuICBPTkxSRVQ6IDc1LCAgICAgICAgICAgLy8gTmV3bGluZSBwZXJmb3JtcyBhIGNhcnJpYWdlIHJldHVybiAob3V0cHV0KS5cbiAgQ1M3OiA5MCwgICAgICAgICAgICAgIC8vIDcgYml0IG1vZGUuXG4gIENTODogOTEsICAgICAgICAgICAgICAvLyA4IGJpdCBtb2RlLlxuICBQQVJFTkI6IDkyLCAgICAgICAgICAgLy8gUGFyaXR5IGVuYWJsZS5cbiAgUEFST0REOiA5MywgICAgICAgICAgIC8vIE9kZCBwYXJpdHksIGVsc2UgZXZlbi5cbiAgVFRZX09QX0lTUEVFRDogMTI4LCAgIC8vIFNwZWNpZmllcyB0aGUgaW5wdXQgYmF1ZCByYXRlIGluIGJpdHMgcGVyIHNlY29uZC5cbiAgVFRZX09QX09TUEVFRDogMTI5ICAgIC8vIFNwZWNpZmllcyB0aGUgb3V0cHV0IGJhdWQgcmF0ZSBpbiBiaXRzIHBlciBzZWNvbmQuXG59O1xuZm9yIChpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKFRFUk1JTkFMX01PREUpLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgKytpKVxuICBURVJNSU5BTF9NT0RFW1RFUk1JTkFMX01PREVba2V5c1tpXV1dID0ga2V5c1tpXTtcblxudmFyIENIQU5ORUxfRVhURU5ERURfREFUQVRZUEUgPSBleHBvcnRzLkNIQU5ORUxfRVhURU5ERURfREFUQVRZUEUgPSB7XG4gIFNUREVSUjogMVxufTtcbmZvciAoaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhDSEFOTkVMX0VYVEVOREVEX0RBVEFUWVBFKSwgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgIGkgPCBsZW47XG4gICAgICsraSkge1xuICBDSEFOTkVMX0VYVEVOREVEX0RBVEFUWVBFW0NIQU5ORUxfRVhURU5ERURfREFUQVRZUEVba2V5c1tpXV1dID0ga2V5c1tpXTtcbn1cblxuZXhwb3J0cy5TSUdOQUxTID0gWydBQlJUJywgJ0FMUk0nLCAnRlBFJywgJ0hVUCcsICdJTEwnLCAnSU5UJyxcbiAgICAgICAgICAgICAgICAgICAnUVVJVCcsICdTRUdWJywgJ1RFUk0nLCAnVVNSMScsICdVU1IyJywgJ0tJTEwnLFxuICAgICAgICAgICAgICAgICAgICdQSVBFJ107XG5cbnZhciBERUZBVUxUX0tFWCA9IFtcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU2NTYjc2VjdGlvbi0xMC4xXG4gICdlY2RoLXNoYTItbmlzdHAyNTYnLFxuICAnZWNkaC1zaGEyLW5pc3RwMzg0JyxcbiAgJ2VjZGgtc2hhMi1uaXN0cDUyMScsXG5cbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0MTkjc2VjdGlvbi00XG4gICdkaWZmaWUtaGVsbG1hbi1ncm91cC1leGNoYW5nZS1zaGEyNTYnLFxuXG4gICdkaWZmaWUtaGVsbG1hbi1ncm91cDE0LXNoYTI1NicsXG4gICdkaWZmaWUtaGVsbG1hbi1ncm91cDE2LXNoYTUxMicsXG4gICdkaWZmaWUtaGVsbG1hbi1ncm91cDE4LXNoYTUxMicsXG5cbiAgJ2RpZmZpZS1oZWxsbWFuLWdyb3VwMTQtc2hhMScsIC8vIFJFUVVJUkVEXG5dO1xuaWYgKGN1cnZlMjU1MTlTdXBwb3J0ZWQpIHtcbiAgREVGQVVMVF9LRVgudW5zaGlmdCgnY3VydmUyNTUxOS1zaGEyNTYnKTtcbiAgREVGQVVMVF9LRVgudW5zaGlmdCgnY3VydmUyNTUxOS1zaGEyNTZAbGlic3NoLm9yZycpO1xufVxudmFyIFNVUFBPUlRFRF9LRVggPSBbXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0NDE5I3NlY3Rpb24tNFxuICAnZGlmZmllLWhlbGxtYW4tZ3JvdXAtZXhjaGFuZ2Utc2hhMScsXG5cbiAgJ2RpZmZpZS1oZWxsbWFuLWdyb3VwMS1zaGExJyAgLy8gUkVRVUlSRURcbl07XG52YXIgS0VYX0JVRiA9IEJ1ZmZlci5mcm9tKERFRkFVTFRfS0VYLmpvaW4oJywnKSwgJ2FzY2lpJyk7XG5TVVBQT1JURURfS0VYID0gREVGQVVMVF9LRVguY29uY2F0KFNVUFBPUlRFRF9LRVgpO1xuXG52YXIgREVGQVVMVF9TRVJWRVJfSE9TVF9LRVkgPSBbXG4gICdlY2RzYS1zaGEyLW5pc3RwMjU2JyxcbiAgJ2VjZHNhLXNoYTItbmlzdHAzODQnLFxuICAnZWNkc2Etc2hhMi1uaXN0cDUyMScsXG4gICdzc2gtcnNhJyxcbl07XG5pZiAoZWRkc2FTdXBwb3J0ZWQpXG4gIERFRkFVTFRfU0VSVkVSX0hPU1RfS0VZLnVuc2hpZnQoJ3NzaC1lZDI1NTE5Jyk7XG52YXIgU1VQUE9SVEVEX1NFUlZFUl9IT1NUX0tFWSA9IFtcbiAgJ3NzaC1kc3MnXG5dO1xudmFyIFNFUlZFUl9IT1NUX0tFWV9CVUYgPSBCdWZmZXIuZnJvbShERUZBVUxUX1NFUlZFUl9IT1NUX0tFWS5qb2luKCcsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhc2NpaScpO1xuU1VQUE9SVEVEX1NFUlZFUl9IT1NUX0tFWSA9IERFRkFVTFRfU0VSVkVSX0hPU1RfS0VZLmNvbmNhdChcbiAgU1VQUE9SVEVEX1NFUlZFUl9IT1NUX0tFWVxuKTtcblxudmFyIERFRkFVTFRfQ0lQSEVSID0gW1xuICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MzQ0I3NlY3Rpb24tNFxuICAnYWVzMTI4LWN0cicsXG4gICdhZXMxOTItY3RyJyxcbiAgJ2FlczI1Ni1jdHInLFxuXG4gIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU2NDdcbiAgJ2FlczEyOC1nY20nLFxuICAnYWVzMTI4LWdjbUBvcGVuc3NoLmNvbScsXG4gICdhZXMyNTYtZ2NtJyxcbiAgJ2FlczI1Ni1nY21Ab3BlbnNzaC5jb20nXG5dO1xudmFyIFNVUFBPUlRFRF9DSVBIRVIgPSBbXG4gICdhZXMyNTYtY2JjJyxcbiAgJ2FlczE5Mi1jYmMnLFxuICAnYWVzMTI4LWNiYycsXG4gICdibG93ZmlzaC1jYmMnLFxuICAnM2Rlcy1jYmMnLFxuXG4gIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQzNDUjc2VjdGlvbi00OlxuICAnYXJjZm91cjI1NicsXG4gICdhcmNmb3VyMTI4JyxcblxuICAnY2FzdDEyOC1jYmMnLFxuICAnYXJjZm91cidcbl07XG52YXIgQ0lQSEVSX0JVRiA9IEJ1ZmZlci5mcm9tKERFRkFVTFRfQ0lQSEVSLmpvaW4oJywnKSwgJ2FzY2lpJyk7XG5TVVBQT1JURURfQ0lQSEVSID0gREVGQVVMVF9DSVBIRVIuY29uY2F0KFNVUFBPUlRFRF9DSVBIRVIpO1xuXG52YXIgREVGQVVMVF9ITUFDID0gW1xuICAnaG1hYy1zaGEyLTI1NicsXG4gICdobWFjLXNoYTItNTEyJyxcbiAgJ2htYWMtc2hhMScsXG5dO1xudmFyIFNVUFBPUlRFRF9ITUFDID0gW1xuICAnaG1hYy1tZDUnLFxuICAnaG1hYy1zaGEyLTI1Ni05NicsIC8vIGZpcnN0IDk2IGJpdHMgb2YgSE1BQy1TSEEyNTZcbiAgJ2htYWMtc2hhMi01MTItOTYnLCAvLyBmaXJzdCA5NiBiaXRzIG9mIEhNQUMtU0hBNTEyXG4gICdobWFjLXJpcGVtZDE2MCcsXG4gICdobWFjLXNoYTEtOTYnLCAgICAgLy8gZmlyc3QgOTYgYml0cyBvZiBITUFDLVNIQTFcbiAgJ2htYWMtbWQ1LTk2JyAgICAgICAvLyBmaXJzdCA5NiBiaXRzIG9mIEhNQUMtTUQ1XG5dO1xudmFyIEhNQUNfQlVGID0gQnVmZmVyLmZyb20oREVGQVVMVF9ITUFDLmpvaW4oJywnKSwgJ2FzY2lpJyk7XG5TVVBQT1JURURfSE1BQyA9IERFRkFVTFRfSE1BQy5jb25jYXQoU1VQUE9SVEVEX0hNQUMpO1xuXG52YXIgREVGQVVMVF9DT01QUkVTUyA9IFtcbiAgJ25vbmUnLFxuICAnemxpYkBvcGVuc3NoLmNvbScsIC8vIFpMSUIgKExaNzcpIGNvbXByZXNzaW9uLCBleGNlcHRcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGRvZXMgbm90IHN0YXJ0IHVudGlsIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc2Z1bCB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICd6bGliJyAgICAgICAgICAgICAgLy8gWkxJQiAoTFo3NykgY29tcHJlc3Npb25cbl07XG52YXIgU1VQUE9SVEVEX0NPTVBSRVNTID0gW107XG52YXIgQ09NUFJFU1NfQlVGID0gQnVmZmVyLmZyb20oREVGQVVMVF9DT01QUkVTUy5qb2luKCcsJyksICdhc2NpaScpO1xuU1VQUE9SVEVEX0NPTVBSRVNTID0gREVGQVVMVF9DT01QUkVTUy5jb25jYXQoU1VQUE9SVEVEX0NPTVBSRVNTKTtcblxuZnVuY3Rpb24gbWFrZUNpcGhlckluZm8oYmxvY2tMZW4sIGtleUxlbiwgaXZMZW4sIGF1dGhMZW4sIGRpc2NhcmRMZW4sIHN0cmVhbSkge1xuICByZXR1cm4ge1xuICAgIGJsb2NrTGVuOiBibG9ja0xlbixcbiAgICBrZXlMZW46IGtleUxlbixcbiAgICBpdkxlbjogaXZMZW4gPT09IDAgPyBibG9ja0xlbiA6IGl2TGVuLFxuICAgIGF1dGhMZW46IGF1dGhMZW4sXG4gICAgZGlzY2FyZExlbjogZGlzY2FyZExlbixcbiAgICBzdHJlYW06IHN0cmVhbSxcbiAgfTtcbn1cbmV4cG9ydHMuQ0lQSEVSX0lORk8gPSB7XG4gICdhZXMxMjgtZ2NtJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAxMiwgMTYsIDAsIGZhbHNlKSxcbiAgJ2FlczI1Ni1nY20nOiBtYWtlQ2lwaGVySW5mbygxNiwgMzIsIDEyLCAxNiwgMCwgZmFsc2UpLFxuICAnYWVzMTI4LWdjbUBvcGVuc3NoLmNvbSc6IG1ha2VDaXBoZXJJbmZvKDE2LCAxNiwgMTIsIDE2LCAwLCBmYWxzZSksXG4gICdhZXMyNTYtZ2NtQG9wZW5zc2guY29tJzogbWFrZUNpcGhlckluZm8oMTYsIDMyLCAxMiwgMTYsIDAsIGZhbHNlKSxcblxuICAnYWVzMTI4LWNiYyc6IG1ha2VDaXBoZXJJbmZvKDE2LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnYWVzMTkyLWNiYyc6IG1ha2VDaXBoZXJJbmZvKDE2LCAyNCwgMCwgMCwgMCwgZmFsc2UpLFxuICAnYWVzMjU2LWNiYyc6IG1ha2VDaXBoZXJJbmZvKDE2LCAzMiwgMCwgMCwgMCwgZmFsc2UpLFxuICAncmlqbmRhZWwtY2JjQGx5c2F0b3IubGl1LnNlJzogbWFrZUNpcGhlckluZm8oMTYsIDMyLCAwLCAwLCAwLCBmYWxzZSksXG4gICczZGVzLWNiYyc6IG1ha2VDaXBoZXJJbmZvKDgsIDI0LCAwLCAwLCAwLCBmYWxzZSksXG4gICdibG93ZmlzaC1jYmMnOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnaWRlYS1jYmMnOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FzdDEyOC1jYmMnOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FtZWxsaWExMjgtY2JjJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAwLCAwLCAwLCBmYWxzZSksXG4gICdjYW1lbGxpYTE5Mi1jYmMnOiBtYWtlQ2lwaGVySW5mbygxNiwgMjQsIDAsIDAsIDAsIGZhbHNlKSxcbiAgJ2NhbWVsbGlhMjU2LWNiYyc6IG1ha2VDaXBoZXJJbmZvKDE2LCAzMiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FtZWxsaWExMjgtY2JjQG9wZW5zc2guY29tJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAwLCAwLCAwLCBmYWxzZSksXG4gICdjYW1lbGxpYTE5Mi1jYmNAb3BlbnNzaC5jb20nOiBtYWtlQ2lwaGVySW5mbygxNiwgMjQsIDAsIDAsIDAsIGZhbHNlKSxcbiAgJ2NhbWVsbGlhMjU2LWNiY0BvcGVuc3NoLmNvbSc6IG1ha2VDaXBoZXJJbmZvKDE2LCAzMiwgMCwgMCwgMCwgZmFsc2UpLFxuXG4gICdhZXMxMjgtY3RyJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAwLCAwLCAwLCBmYWxzZSksXG4gICdhZXMxOTItY3RyJzogbWFrZUNpcGhlckluZm8oMTYsIDI0LCAwLCAwLCAwLCBmYWxzZSksXG4gICdhZXMyNTYtY3RyJzogbWFrZUNpcGhlckluZm8oMTYsIDMyLCAwLCAwLCAwLCBmYWxzZSksXG4gICczZGVzLWN0cic6IG1ha2VDaXBoZXJJbmZvKDgsIDI0LCAwLCAwLCAwLCBmYWxzZSksXG4gICdibG93ZmlzaC1jdHInOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FzdDEyOC1jdHInOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FtZWxsaWExMjgtY3RyJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAwLCAwLCAwLCBmYWxzZSksXG4gICdjYW1lbGxpYTE5Mi1jdHInOiBtYWtlQ2lwaGVySW5mbygxNiwgMjQsIDAsIDAsIDAsIGZhbHNlKSxcbiAgJ2NhbWVsbGlhMjU2LWN0cic6IG1ha2VDaXBoZXJJbmZvKDE2LCAzMiwgMCwgMCwgMCwgZmFsc2UpLFxuICAnY2FtZWxsaWExMjgtY3RyQG9wZW5zc2guY29tJzogbWFrZUNpcGhlckluZm8oMTYsIDE2LCAwLCAwLCAwLCBmYWxzZSksXG4gICdjYW1lbGxpYTE5Mi1jdHJAb3BlbnNzaC5jb20nOiBtYWtlQ2lwaGVySW5mbygxNiwgMjQsIDAsIDAsIDAsIGZhbHNlKSxcbiAgJ2NhbWVsbGlhMjU2LWN0ckBvcGVuc3NoLmNvbSc6IG1ha2VDaXBoZXJJbmZvKDE2LCAzMiwgMCwgMCwgMCwgZmFsc2UpLFxuXG4gIC8qIFRoZSBcImFyY2ZvdXIxMjhcIiBhbGdvcml0aG0gaXMgdGhlIFJDNCBjaXBoZXIsIGFzIGRlc2NyaWJlZCBpblxuICAgICBbU0NITkVJRVJdLCB1c2luZyBhIDEyOC1iaXQga2V5LiAgVGhlIGZpcnN0IDE1MzYgYnl0ZXMgb2Yga2V5c3RyZWFtXG4gICAgIGdlbmVyYXRlZCBieSB0aGUgY2lwaGVyIE1VU1QgYmUgZGlzY2FyZGVkLCBhbmQgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlXG4gICAgIGZpcnN0IGVuY3J5cHRlZCBwYWNrZXQgTVVTVCBiZSBlbmNyeXB0ZWQgdXNpbmcgdGhlIDE1Mzd0aCBieXRlIG9mXG4gICAgIGtleXN0cmVhbS5cblxuICAgICAtLSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MzQ1I3NlY3Rpb24tNCAqL1xuICAnYXJjZm91cic6IG1ha2VDaXBoZXJJbmZvKDgsIDE2LCAwLCAwLCAxNTM2LCB0cnVlKSxcbiAgJ2FyY2ZvdXIxMjgnOiBtYWtlQ2lwaGVySW5mbyg4LCAxNiwgMCwgMCwgMTUzNiwgdHJ1ZSksXG4gICdhcmNmb3VyMjU2JzogbWFrZUNpcGhlckluZm8oOCwgMzIsIDAsIDAsIDE1MzYsIHRydWUpLFxuICAnYXJjZm91cjUxMic6IG1ha2VDaXBoZXJJbmZvKDgsIDY0LCAwLCAwLCAxNTM2LCB0cnVlKSxcbn07XG5cbmZ1bmN0aW9uIG1ha2VITUFDSW5mbyhsZW4sIGFjdHVhbExlbikge1xuICByZXR1cm4geyBsZW46IGxlbiwgYWN0dWFsTGVuOiBhY3R1YWxMZW4gfTtcbn1cbmV4cG9ydHMuSE1BQ19JTkZPID0ge1xuICAnaG1hYy1tZDUnOiBtYWtlSE1BQ0luZm8oMTYsIDE2KSxcbiAgJ2htYWMtbWQ1LTk2JzogbWFrZUhNQUNJbmZvKDE2LCAxMiksXG4gICdobWFjLXJpcGVtZDE2MCc6IG1ha2VITUFDSW5mbygyMCwgMjApLFxuICAnaG1hYy1zaGExJzogbWFrZUhNQUNJbmZvKDIwLCAyMCksXG4gICdobWFjLXNoYTEtOTYnOiBtYWtlSE1BQ0luZm8oMjAsIDEyKSxcbiAgJ2htYWMtc2hhMi0yNTYnOiBtYWtlSE1BQ0luZm8oMzIsIDMyKSxcbiAgJ2htYWMtc2hhMi0yNTYtOTYnOiBtYWtlSE1BQ0luZm8oMzIsIDEyKSxcbiAgJ2htYWMtc2hhMi01MTInOiBtYWtlSE1BQ0luZm8oNjQsIDY0KSxcbiAgJ2htYWMtc2hhMi01MTItOTYnOiBtYWtlSE1BQ0luZm8oNjQsIDEyKSxcbn07XG5cbmV4cG9ydHMuQUxHT1JJVEhNUyA9IHtcbiAgS0VYOiBERUZBVUxUX0tFWCxcbiAgS0VYX0JVRjogS0VYX0JVRixcbiAgU1VQUE9SVEVEX0tFWDogU1VQUE9SVEVEX0tFWCxcblxuICBTRVJWRVJfSE9TVF9LRVk6IERFRkFVTFRfU0VSVkVSX0hPU1RfS0VZLFxuICBTRVJWRVJfSE9TVF9LRVlfQlVGOiBTRVJWRVJfSE9TVF9LRVlfQlVGLFxuICBTVVBQT1JURURfU0VSVkVSX0hPU1RfS0VZOiBTVVBQT1JURURfU0VSVkVSX0hPU1RfS0VZLFxuXG4gIENJUEhFUjogREVGQVVMVF9DSVBIRVIsXG4gIENJUEhFUl9CVUY6IENJUEhFUl9CVUYsXG4gIFNVUFBPUlRFRF9DSVBIRVI6IFNVUFBPUlRFRF9DSVBIRVIsXG5cbiAgSE1BQzogREVGQVVMVF9ITUFDLFxuICBITUFDX0JVRjogSE1BQ19CVUYsXG4gIFNVUFBPUlRFRF9ITUFDOiBTVVBQT1JURURfSE1BQyxcblxuICBDT01QUkVTUzogREVGQVVMVF9DT01QUkVTUyxcbiAgQ09NUFJFU1NfQlVGOiBDT01QUkVTU19CVUYsXG4gIFNVUFBPUlRFRF9DT01QUkVTUzogU1VQUE9SVEVEX0NPTVBSRVNTXG59O1xuZXhwb3J0cy5TU0hfVE9fT1BFTlNTTCA9IHtcbiAgLy8gRUNESCBrZXkgZXhjaGFuZ2VcbiAgJ2VjZGgtc2hhMi1uaXN0cDI1Nic6ICdwcmltZTI1NnYxJywgLy8gT3BlblNTTCdzIG5hbWUgZm9yICdzZWNwMjU2cjEnXG4gICdlY2RoLXNoYTItbmlzdHAzODQnOiAnc2VjcDM4NHIxJyxcbiAgJ2VjZGgtc2hhMi1uaXN0cDUyMSc6ICdzZWNwNTIxcjEnLFxuICAvLyBDaXBoZXJzXG4gICdhZXMxMjgtZ2NtJzogJ2Flcy0xMjgtZ2NtJyxcbiAgJ2FlczI1Ni1nY20nOiAnYWVzLTI1Ni1nY20nLFxuICAnYWVzMTI4LWdjbUBvcGVuc3NoLmNvbSc6ICdhZXMtMTI4LWdjbScsXG4gICdhZXMyNTYtZ2NtQG9wZW5zc2guY29tJzogJ2Flcy0yNTYtZ2NtJyxcbiAgJzNkZXMtY2JjJzogJ2Rlcy1lZGUzLWNiYycsXG4gICdibG93ZmlzaC1jYmMnOiAnYmYtY2JjJyxcbiAgJ2FlczI1Ni1jYmMnOiAnYWVzLTI1Ni1jYmMnLFxuICAnYWVzMTkyLWNiYyc6ICdhZXMtMTkyLWNiYycsXG4gICdhZXMxMjgtY2JjJzogJ2Flcy0xMjgtY2JjJyxcbiAgJ2lkZWEtY2JjJzogJ2lkZWEtY2JjJyxcbiAgJ2Nhc3QxMjgtY2JjJzogJ2Nhc3QtY2JjJyxcbiAgJ3Jpam5kYWVsLWNiY0BseXNhdG9yLmxpdS5zZSc6ICdhZXMtMjU2LWNiYycsXG4gICdhcmNmb3VyMTI4JzogJ3JjNCcsXG4gICdhcmNmb3VyMjU2JzogJ3JjNCcsXG4gICdhcmNmb3VyNTEyJzogJ3JjNCcsXG4gICdhcmNmb3VyJzogJ3JjNCcsXG4gICdjYW1lbGxpYTEyOC1jYmMnOiAnY2FtZWxsaWEtMTI4LWNiYycsXG4gICdjYW1lbGxpYTE5Mi1jYmMnOiAnY2FtZWxsaWEtMTkyLWNiYycsXG4gICdjYW1lbGxpYTI1Ni1jYmMnOiAnY2FtZWxsaWEtMjU2LWNiYycsXG4gICdjYW1lbGxpYTEyOC1jYmNAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMTI4LWNiYycsXG4gICdjYW1lbGxpYTE5Mi1jYmNAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMTkyLWNiYycsXG4gICdjYW1lbGxpYTI1Ni1jYmNAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMjU2LWNiYycsXG4gICczZGVzLWN0cic6ICdkZXMtZWRlMycsXG4gICdibG93ZmlzaC1jdHInOiAnYmYtZWNiJyxcbiAgJ2FlczI1Ni1jdHInOiAnYWVzLTI1Ni1jdHInLFxuICAnYWVzMTkyLWN0cic6ICdhZXMtMTkyLWN0cicsXG4gICdhZXMxMjgtY3RyJzogJ2Flcy0xMjgtY3RyJyxcbiAgJ2Nhc3QxMjgtY3RyJzogJ2Nhc3Q1LWVjYicsXG4gICdjYW1lbGxpYTEyOC1jdHInOiAnY2FtZWxsaWEtMTI4LWVjYicsXG4gICdjYW1lbGxpYTE5Mi1jdHInOiAnY2FtZWxsaWEtMTkyLWVjYicsXG4gICdjYW1lbGxpYTI1Ni1jdHInOiAnY2FtZWxsaWEtMjU2LWVjYicsXG4gICdjYW1lbGxpYTEyOC1jdHJAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMTI4LWVjYicsXG4gICdjYW1lbGxpYTE5Mi1jdHJAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMTkyLWVjYicsXG4gICdjYW1lbGxpYTI1Ni1jdHJAb3BlbnNzaC5jb20nOiAnY2FtZWxsaWEtMjU2LWVjYicsXG4gIC8vIEhNQUNcbiAgJ2htYWMtc2hhMS05Nic6ICdzaGExJyxcbiAgJ2htYWMtc2hhMSc6ICdzaGExJyxcbiAgJ2htYWMtc2hhMi0yNTYnOiAnc2hhMjU2JyxcbiAgJ2htYWMtc2hhMi0yNTYtOTYnOiAnc2hhMjU2JyxcbiAgJ2htYWMtc2hhMi01MTInOiAnc2hhNTEyJyxcbiAgJ2htYWMtc2hhMi01MTItOTYnOiAnc2hhNTEyJyxcbiAgJ2htYWMtbWQ1LTk2JzogJ21kNScsXG4gICdobWFjLW1kNSc6ICdtZDUnLFxuICAnaG1hYy1yaXBlbWQxNjAnOiAncmlwZW1kMTYwJ1xufTtcblxudmFyIEJVR1MgPSBleHBvcnRzLkJVR1MgPSB7XG4gIEJBRF9ESEdFWDogMSxcbiAgT0xEX0VYSVQ6IDIsXG4gIERZTl9SUE9SVF9CVUc6IDRcbn07XG5cbmV4cG9ydHMuQlVHR1lfSU1QTFMgPSBbXG4gIFsgJ0Npc2NvLTEuMjUnLCBCVUdTLkJBRF9ESEdFWCBdLFxuICBbIC9eWzAtOS5dKyQvLCBCVUdTLk9MRF9FWElUIF0sIC8vIG9sZCBTU0guY29tIGltcGxlbWVudGF0aW9uc1xuICBbIC9eT3BlblNTSF81XFwuXFxkKy8sIEJVR1MuRFlOX1JQT1JUX0JVRyBdXG5dO1xuXG5leHBvcnRzLkVERFNBX1NVUFBPUlRFRCA9IGVkZHNhU3VwcG9ydGVkO1xuZXhwb3J0cy5DVVJWRTI1NTE5X1NVUFBPUlRFRCA9IGN1cnZlMjU1MTlTdXBwb3J0ZWQ7XG4iLCJpbXBvcnQgeyBJVGFza1Jlc3BvbnNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBleGVjRnVuY3Rpb24gPSBhc3luYyAoXG4gIGY6IEZ1bmN0aW9uLFxuICAuLi5hcmdzOiBhbnlcbik6IFByb21pc2U8SVRhc2tSZXNwb25zZT4gPT4ge1xuICBsZXQgZGF0YTogYW55O1xuICBsZXQgZXJyb3I6IEVycm9yO1xuXG4gIHRyeSB7XG4gICAgZGF0YSA9IGF3YWl0IGYoLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyO1xuICB9XG5cbiAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfTtcbn07XG4iLCJpbXBvcnQgeyBDbGllbnQsIEZpbGVJbmZvIH0gZnJvbSAnYmFzaWMtZnRwJztcbmltcG9ydCB7IFdyaXRhYmxlLCBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cbmltcG9ydCB7IFN0cmF0ZWd5IH0gZnJvbSAnLi9zdHJhdGVneSc7XG5pbXBvcnQge1xuICBJRmlsZSxcbiAgSUZ0cENvbmZpZyxcbiAgSVRyYW5zZmVyT3B0aW9ucyxcbiAgSUZ0cE9wdGlvbnMsXG4gIElUcmFuc2ZlckluZm8sXG59IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRnRwVXRpbHMgfSBmcm9tICcuLi91dGlscy9mdHAnO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRnRwU3RyYXRlZ3kge1xuICBjb25maWc6IElGdHBDb25maWc7XG4gIG9wdGlvbnM6IElGdHBPcHRpb25zO1xufVxuXG5leHBvcnQgY2xhc3MgRnRwU3RyYXRlZ3kgZXh0ZW5kcyBTdHJhdGVneSB7XG4gIHByb3RlY3RlZCBjbGllbnQ6IENsaWVudDtcblxuICBwdWJsaWMgZ2V0IGNvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQ/LmNsb3NlZCA9PT0gZmFsc2U7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGlzRlRQUygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdG9jb2wgPT09ICdmdHBzJztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgc29ja2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudD8uZnRwPy5zb2NrZXQ7XG4gIH1cblxuICBjb25uZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuO1xuXG4gICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KCk7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5jbGllbnQuYWNjZXNzKHtcbiAgICAgIHNlY3VyZTogdGhpcy5pc0ZUUFMsXG4gICAgICBzZWN1cmVPcHRpb25zOiB0aGlzLm9wdGlvbnM/LnNlY3VyZU9wdGlvbnMsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICB9KTtcblxuICAgIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB9O1xuXG4gIGRpc2Nvbm5lY3QgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnKTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7XG5cbiAgICAgICAgdGhpcy5jbGllbnQuZnRwLnNvY2tldC5vbmNlKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsaWVudCA9IG51bGw7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGRvd25sb2FkID0gYXN5bmMgKFxuICAgIGRlc3Q6IFdyaXRhYmxlLFxuICAgIGluZm86IElUcmFuc2ZlckluZm8sXG4gICAgb3B0aW9ucz86IElUcmFuc2Zlck9wdGlvbnMsXG4gICkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKFxuICAgICAgKCkgPT4gdGhpcy5jbGllbnQuZG93bmxvYWRUbyhkZXN0LCBpbmZvLnJlbW90ZVBhdGgsIGluZm8uc3RhcnRBdCksXG4gICAgICBpbmZvLFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuICB9O1xuXG4gIHVwbG9hZCA9IGFzeW5jIChcbiAgICBzb3VyY2U6IFJlYWRhYmxlLFxuICAgIGluZm86IElUcmFuc2ZlckluZm8sXG4gICAgb3B0aW9ucz86IElUcmFuc2Zlck9wdGlvbnMsXG4gICkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKFxuICAgICAgKCkgPT4gdGhpcy5jbGllbnQudXBsb2FkRnJvbShzb3VyY2UsIGluZm8ucmVtb3RlUGF0aCksXG4gICAgICBpbmZvLFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuICB9O1xuXG4gIGxpc3QgPSAocGF0aCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZTxJRmlsZVtdPigoKSA9PlxuICAgICAgdGhpcy5jbGllbnQubGlzdChwYXRoKS50aGVuKChyKSA9PiByLm1hcCh0aGlzLmZvcm1hdEZpbGUpKSxcbiAgICApO1xuICB9O1xuXG4gIHNpemUgPSAocGF0aCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZTxudW1iZXI+KCgpID0+IHRoaXMuY2xpZW50LnNpemUocGF0aCkpO1xuICB9O1xuXG4gIGV4aXN0cyA9IGFzeW5jIChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5jbGllbnQucmVuYW1lKHBhdGgsIHBhdGgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIG1vdmUgPSAoc291cmNlLCBkZXN0KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlKCgpID0+IHRoaXMuY2xpZW50LnJlbmFtZShzb3VyY2UsIGRlc3QpKTtcbiAgfTtcblxuICByZW1vdmVGaWxlID0gKHBhdGgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGUoKCkgPT4gdGhpcy5jbGllbnQucmVtb3ZlKHBhdGgpKTtcbiAgfTtcblxuICByZW1vdmVFbXB0eUZvbGRlciA9IChwYXRoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlKCgpID0+IHRoaXMuY2xpZW50LnJlbW92ZUVtcHR5RGlyKHBhdGgpKTtcbiAgfTtcblxuICByZW1vdmVGb2xkZXIgPSAocGF0aCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZSgoKSA9PiB0aGlzLmNsaWVudC5yZW1vdmVEaXIocGF0aCkpO1xuICB9O1xuXG4gIGNyZWF0ZUZvbGRlciA9IGFzeW5jIChwYXRoKSA9PiB7XG4gICAgYXdhaXQgdGhpcy5zZW5kKGBNS0QgJHtwYXRofWApO1xuICB9O1xuXG4gIGNyZWF0ZUVtcHR5RmlsZSA9IGFzeW5jIChwYXRoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gUmVhZGFibGUuZnJvbSgnXFxuJyk7XG5cbiAgICBhd2FpdCB0aGlzLnVwbG9hZChzb3VyY2UsIHsgcmVtb3RlUGF0aDogcGF0aCB9LCB7IHF1aWV0OiB0cnVlIH0pO1xuICB9O1xuXG4gIHB3ZCA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGU8c3RyaW5nPigoKSA9PiB0aGlzLmNsaWVudC5wd2QoKSk7XG4gIH07XG5cbiAgc2VuZCA9IChjb21tYW5kKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlPHN0cmluZz4oKCkgPT5cbiAgICAgIHRoaXMuY2xpZW50LnNlbmQoY29tbWFuZCkudGhlbigocikgPT4gci5tZXNzYWdlKSxcbiAgICApO1xuICB9O1xuXG4gIHByb3RlY3RlZCBmb3JtYXRGaWxlID0gKGZpbGU6IEZpbGVJbmZvKTogSUZpbGUgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5GdHBVdGlscy5mb3JtYXRGaWxlKGZpbGUpLFxuICAgICAgbGFzdE1vZGlmaWVkOiBGdHBVdGlscy5nZXRWYWxpZERhdGUoZmlsZS5kYXRlKSxcbiAgICB9O1xuICB9O1xuXG4gIHByb3RlY3RlZCBoYW5kbGUgPSBhc3luYyA8VCA9IHZvaWQ+KGZuOiBGdW5jdGlvbik6IFByb21pc2U8VD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnIubWVzc2FnZSBhcyBzdHJpbmc7XG5cbiAgICAgIGlmIChcbiAgICAgICAgbWVzc2FnZSAhPT0gJ0NsaWVudCBpcyBjbG9zZWQnICYmXG4gICAgICAgICFtZXNzYWdlLnN0YXJ0c1dpdGgoJ1VzZXIgY2xvc2VkIGNsaWVudCBkdXJpbmcgdGFzaycpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHByb3RlY3RlZCBoYW5kbGVUcmFuc2ZlciA9IGFzeW5jIChcbiAgICBmbjogRnVuY3Rpb24sXG4gICAgaW5mbzogSVRyYW5zZmVySW5mbyxcbiAgICBvcHRpb25zOiBJVHJhbnNmZXJPcHRpb25zLFxuICApID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcmVwYXJlVHJhbnNmZXIoaW5mbywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmNsaWVudC50cmFja1Byb2dyZXNzKChpbmZvKSA9PiBoYW5kbGVyKGluZm8uYnl0ZXMpKTtcblxuICAgIGF3YWl0IHRoaXMuaGFuZGxlKGZuKTtcblxuICAgIHRoaXMuY2xpZW50Py50cmFja1Byb2dyZXNzKHVuZGVmaW5lZCk7XG4gICAgdGhpcy5maW5pc2hUcmFuc2ZlcigpO1xuICB9O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRlRQQ29udGV4dCA9IGV4cG9ydHMuRlRQRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XG5jb25zdCBwYXJzZUNvbnRyb2xSZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcGFyc2VDb250cm9sUmVzcG9uc2VcIik7XG4vKipcbiAqIERlc2NyaWJlcyBhbiBGVFAgc2VydmVyIGVycm9yIHJlc3BvbnNlIGluY2x1ZGluZyB0aGUgRlRQIHJlc3BvbnNlIGNvZGUuXG4gKi9cbmNsYXNzIEZUUEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcykge1xuICAgICAgICBzdXBlcihyZXMubWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgdGhpcy5jb2RlID0gcmVzLmNvZGU7XG4gICAgfVxufVxuZXhwb3J0cy5GVFBFcnJvciA9IEZUUEVycm9yO1xuLyoqXG4gKiBGVFBDb250ZXh0IGhvbGRzIHRoZSBjb250cm9sIGFuZCBkYXRhIHNvY2tldHMgb2YgYW4gRlRQIGNvbm5lY3Rpb24gYW5kIHByb3ZpZGVzIGFcbiAqIHNpbXBsaWZpZWQgd2F5IHRvIGludGVyYWN0IHdpdGggYW4gRlRQIHNlcnZlciwgaGFuZGxlIHJlc3BvbnNlcywgZXJyb3JzIGFuZCB0aW1lb3V0cy5cbiAqXG4gKiBJdCBkb2Vzbid0IGltcGxlbWVudCBvciB1c2UgYW55IEZUUCBjb21tYW5kcy4gSXQncyBvbmx5IGEgZm91bmRhdGlvbiB0byBtYWtlIHdyaXRpbmcgYW4gRlRQXG4gKiBjbGllbnQgYXMgZWFzeSBhcyBwb3NzaWJsZS4gWW91IHdvbid0IHVzdWFsbHkgaW5zdGFudGlhdGUgdGhpcywgYnV0IHVzZSBgQ2xpZW50YC5cbiAqL1xuY2xhc3MgRlRQQ29udGV4dCB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgYW4gRlRQIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGltZW91dCAtIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFwcGx5IHRvIGNvbnRyb2wgYW5kIGRhdGEgY29ubmVjdGlvbnMuIFVzZSAwIGZvciBubyB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSBlbmNvZGluZyAtIEVuY29kaW5nIHRvIHVzZSBmb3IgY29udHJvbCBjb25uZWN0aW9uLiBVVEYtOCBieSBkZWZhdWx0LiBVc2UgXCJsYXRpbjFcIiBmb3Igb2xkZXIgc2VydmVycy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gMCwgZW5jb2RpbmcgPSBcInV0ZjhcIikge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICAvKiogRGVidWctbGV2ZWwgbG9nZ2luZyBvZiBhbGwgc29ja2V0IGNvbW11bmljYXRpb24uICovXG4gICAgICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlO1xuICAgICAgICAvKiogSVAgdmVyc2lvbiB0byBwcmVmZXIgKDQ6IElQdjQsIDY6IElQdjYsIHVuZGVmaW5lZDogYXV0b21hdGljKS4gKi9cbiAgICAgICAgdGhpcy5pcEZhbWlseSA9IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqIE9wdGlvbnMgZm9yIFRMUyBjb25uZWN0aW9ucy4gKi9cbiAgICAgICAgdGhpcy50bHNPcHRpb25zID0ge307XG4gICAgICAgIC8qKiBBIG11bHRpbGluZSByZXNwb25zZSBtaWdodCBiZSByZWNlaXZlZCBhcyBtdWx0aXBsZSBjaHVua3MuICovXG4gICAgICAgIHRoaXMuX3BhcnRpYWxSZXNwb25zZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgIC8vIEhlbHAgVHlwZXNjcmlwdCB1bmRlcnN0YW5kIHRoYXQgd2UgZG8gaW5kZWVkIHNldCBfc29ja2V0IGluIHRoZSBjb25zdHJ1Y3RvciBidXQgdXNlIHRoZSBzZXR0ZXIgbWV0aG9kIHRvIGRvIHNvLlxuICAgICAgICB0aGlzLl9zb2NrZXQgPSB0aGlzLnNvY2tldCA9IHRoaXMuX25ld1NvY2tldCgpO1xuICAgICAgICB0aGlzLl9kYXRhU29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY29udGV4dC5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgLy8gSW50ZXJuYWxseSwgY2xvc2luZyBhIGNvbnRleHQgaXMgYWx3YXlzIGRlc2NyaWJlZCB3aXRoIGFuIGVycm9yLiBJZiB0aGVyZSBpcyBzdGlsbCBhIHRhc2sgcnVubmluZywgaXQgd2lsbFxuICAgICAgICAvLyBhYm9ydCB3aXRoIGFuIGV4Y2VwdGlvbiB0aGF0IHRoZSB1c2VyIGNsb3NlZCB0aGUgY2xpZW50IGR1cmluZyBhIHRhc2suIElmIG5vIHRhc2sgaXMgcnVubmluZywgbm8gZXhjZXB0aW9uIGlzXG4gICAgICAgIC8vIHRocm93biBidXQgYWxsIG5ld2x5IHN1Ym1pdHRlZCB0YXNrcyBhZnRlciB0aGF0IHdpbGwgYWJvcnQgdGhlIGV4Y2VwdGlvbiB0aGF0IHRoZSBjbGllbnQgaGFzIGJlZW4gY2xvc2VkLlxuICAgICAgICAvLyBJbiBhZGRpdGlvbiB0aGUgdXNlciB3aWxsIGdldCBhIHN0YWNrIHRyYWNlIHBvaW50aW5nIHRvIHdoZXJlIGV4YWN0bHkgdGhlIGNsaWVudCBoYXMgYmVlbiBjbG9zZWQuIFNvIGluIGFueVxuICAgICAgICAvLyBjYXNlIHVzZSBfY2xvc2luZ0Vycm9yIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29udGV4dCBpcyBjbG9zZWQuIFRoaXMgYWxzbyBhbGxvd3MgdXMgdG8gaGF2ZSBhIHNpbmdsZSBjb2RlLXBhdGhcbiAgICAgICAgLy8gZm9yIGNsb3NpbmcgYSBjb250ZXh0IG1ha2luZyB0aGUgaW1wbGVtZW50YXRpb24gZWFzaWVyLlxuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5fdGFzayA/IFwiVXNlciBjbG9zZWQgY2xpZW50IGR1cmluZyB0YXNrXCIgOiBcIlVzZXIgY2xvc2VkIGNsaWVudFwiO1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY2xvc2VXaXRoRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGNvbnRleHQgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBjbG9zZVdpdGhFcnJvcihlcnIpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBjb250ZXh0IGFscmVhZHkgaGFzIGJlZW4gY2xvc2VkLCBkb24ndCBvdmVyd3JpdGUgdGhlIHJlYXNvbi5cbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NpbmdFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nsb3NpbmdFcnJvciA9IGVycjtcbiAgICAgICAgLy8gQmVmb3JlIGdpdmluZyB0aGUgdXNlcidzIHRhc2sgYSBjaGFuY2UgdG8gcmVhY3QsIG1ha2Ugc3VyZSB3ZSB3b24ndCBiZSBib3RoZXJlZCB3aXRoIGFueSBpbnB1dHMuXG4gICAgICAgIHRoaXMuX2Nsb3NlU29ja2V0KHRoaXMuX3NvY2tldCk7XG4gICAgICAgIHRoaXMuX2Nsb3NlU29ja2V0KHRoaXMuX2RhdGFTb2NrZXQpO1xuICAgICAgICAvLyBHaXZlIHRoZSB1c2VyJ3MgdGFzayBhIGNoYW5jZSB0byByZWFjdCwgbWF5YmUgY2xlYW51cCByZXNvdXJjZXMuXG4gICAgICAgIHRoaXMuX3Bhc3NUb0hhbmRsZXIoZXJyKTtcbiAgICAgICAgLy8gVGhlIHRhc2sgbWlnaHQgbm90IGhhdmUgYmVlbiByZWplY3RlZCBieSB0aGUgdXNlciBhZnRlciByZWNlaXZpbmcgdGhlIGVycm9yLlxuICAgICAgICB0aGlzLl9zdG9wVHJhY2tpbmdUYXNrKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbnRleHQgaGFzIGJlZW4gY2xvc2VkIG9yIGhhc24ndCBiZWVuIGNvbm5lY3RlZCB5ZXQuIFlvdSBjYW4gcmVvcGVuIGl0IHdpdGggYGFjY2Vzc2AuXG4gICAgICovXG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LnJlbW90ZUFkZHJlc3MgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9jbG9zaW5nRXJyb3IgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhpcyBjb250ZXggYW5kIGFsbCBvZiBpdHMgc3RhdGUuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gdGhpcy5fbmV3U29ja2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgRlRQIGNvbnRyb2wgc29ja2V0LlxuICAgICAqL1xuICAgIGdldCBzb2NrZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc29ja2V0IGZvciB0aGUgY29udHJvbCBjb25uZWN0aW9uLiBUaGlzIHdpbGwgb25seSBjbG9zZSB0aGUgY3VycmVudCBjb250cm9sIHNvY2tldFxuICAgICAqIGlmIHRoZSBuZXcgb25lIGlzIG5vdCBhbiB1cGdyYWRlIHRvIHRoZSBjdXJyZW50IG9uZS5cbiAgICAgKi9cbiAgICBzZXQgc29ja2V0KHNvY2tldCkge1xuICAgICAgICAvLyBObyBkYXRhIHNvY2tldCBzaG91bGQgYmUgb3BlbiBpbiBhbnkgY2FzZSB3aGVyZSB0aGUgY29udHJvbCBzb2NrZXQgaXMgc2V0IG9yIHVwZ3JhZGVkLlxuICAgICAgICB0aGlzLmRhdGFTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGxzT3B0aW9ucyA9IHt9O1xuICAgICAgICAvLyBUaGlzIGJlaW5nIGEgc29mdCByZXNldCwgcmVtb3ZlIGFueSByZW1haW5pbmcgcGFydGlhbCByZXNwb25zZS5cbiAgICAgICAgdGhpcy5fcGFydGlhbFJlc3BvbnNlID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuX3NvY2tldCkge1xuICAgICAgICAgICAgLy8gT25seSBjbG9zZSB0aGUgY3VycmVudCBjb25uZWN0aW9uIGlmIHRoZSBuZXcgaXMgbm90IGFuIHVwZ3JhZGUuXG4gICAgICAgICAgICBjb25zdCBpc1VwZ3JhZGUgPSBzb2NrZXQubG9jYWxQb3J0ID09PSB0aGlzLl9zb2NrZXQubG9jYWxQb3J0O1xuICAgICAgICAgICAgaWYgKCFpc1VwZ3JhZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXQuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU29ja2V0TGlzdGVuZXJzKHRoaXMuX3NvY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvY2tldCkge1xuICAgICAgICAgICAgLy8gU2V0dGluZyBhIGNvbXBsZXRlbHkgbmV3IGNvbnRyb2wgc29ja2V0IGlzIGluIGVzc2VuY2Ugc29tZXRoaW5nIGxpa2UgYSByZXNldC4gVGhhdCdzXG4gICAgICAgICAgICAvLyB3aHkgd2UgYWxzbyBjbG9zZSBhbnkgb3BlbiBkYXRhIGNvbm5lY3Rpb24gYWJvdmUuIFdlIGNhbiBnbyBvbmUgc3RlcCBmdXJ0aGVyIGFuZCByZXNldFxuICAgICAgICAgICAgLy8gYSBwb3NzaWJsZSBjbG9zaW5nIGVycm9yLiBUaGF0IG1lYW5zIHRoYXQgYSBjbG9zZWQgRlRQQ29udGV4dCBjYW4gYmUgXCJyZW9wZW5lZFwiIGJ5XG4gICAgICAgICAgICAvLyBzZXR0aW5nIGEgbmV3IGNvbnRyb2wgc29ja2V0LlxuICAgICAgICAgICAgdGhpcy5fY2xvc2luZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gRG9uJ3Qgc2V0IGEgdGltZW91dCB5ZXQuIFRpbWVvdXQgZm9yIGNvbnRyb2wgc29ja2V0cyBpcyBvbmx5IGFjdGl2ZSBkdXJpbmcgYSB0YXNrLCBzZWUgaGFuZGxlKCkgYmVsb3cuXG4gICAgICAgICAgICBzb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICAgICAgICAgIHNvY2tldC5zZXRFbmNvZGluZyh0aGlzLl9lbmNvZGluZyk7XG4gICAgICAgICAgICBzb2NrZXQuc2V0S2VlcEFsaXZlKHRydWUpO1xuICAgICAgICAgICAgc29ja2V0Lm9uKFwiZGF0YVwiLCBkYXRhID0+IHRoaXMuX29uQ29udHJvbFNvY2tldERhdGEoZGF0YSkpO1xuICAgICAgICAgICAgLy8gU2VydmVyIHNlbmRpbmcgYSBGSU4gcGFja2V0IGlzIHRyZWF0ZWQgYXMgYW4gZXJyb3IuXG4gICAgICAgICAgICBzb2NrZXQub24oXCJlbmRcIiwgKCkgPT4gdGhpcy5jbG9zZVdpdGhFcnJvcihuZXcgRXJyb3IoXCJTZXJ2ZXIgc2VudCBGSU4gcGFja2V0IHVuZXhwZWN0ZWRseSwgY2xvc2luZyBjb25uZWN0aW9uLlwiKSkpO1xuICAgICAgICAgICAgLy8gQ29udHJvbCBiZWluZyBjbG9zZWQgd2l0aG91dCBlcnJvciBieSBzZXJ2ZXIgaXMgdHJlYXRlZCBhcyBhbiBlcnJvci5cbiAgICAgICAgICAgIHNvY2tldC5vbihcImNsb3NlXCIsIGhhZEVycm9yID0+IHsgaWYgKCFoYWRFcnJvcilcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlV2l0aEVycm9yKG5ldyBFcnJvcihcIlNlcnZlciBjbG9zZWQgY29ubmVjdGlvbiB1bmV4cGVjdGVkbHkuXCIpKTsgfSk7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cERlZmF1bHRFcnJvckhhbmRsZXJzKHNvY2tldCwgXCJjb250cm9sIHNvY2tldFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb2NrZXQgPSBzb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBGVFAgZGF0YSBjb25uZWN0aW9uIGlmIHByZXNlbnQuXG4gICAgICovXG4gICAgZ2V0IGRhdGFTb2NrZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhU29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNvY2tldCBmb3IgdGhlIGRhdGEgY29ubmVjdGlvbi4gVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgY2xvc2UgdGhlIGZvcm1lciBkYXRhIHNvY2tldC5cbiAgICAgKi9cbiAgICBzZXQgZGF0YVNvY2tldChzb2NrZXQpIHtcbiAgICAgICAgdGhpcy5fY2xvc2VTb2NrZXQodGhpcy5fZGF0YVNvY2tldCk7XG4gICAgICAgIGlmIChzb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHNldCBhIHRpbWVvdXQgeWV0LiBUaW1lb3V0IGRhdGEgc29ja2V0IHNob3VsZCBiZSBhY3RpdmF0ZWQgd2hlbiBkYXRhIHRyYW5zbWlzc2lvbiBzdGFydHNcbiAgICAgICAgICAgIC8vIGFuZCB0aW1lb3V0IG9uIGNvbnRyb2wgc29ja2V0IGlzIGRlYWN0aXZhdGVkLlxuICAgICAgICAgICAgc29ja2V0LnNldFRpbWVvdXQoMCk7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cERlZmF1bHRFcnJvckhhbmRsZXJzKHNvY2tldCwgXCJkYXRhIHNvY2tldFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhU29ja2V0ID0gc29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnRseSB1c2VkIGVuY29kaW5nLlxuICAgICAqL1xuICAgIGdldCBlbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGVuY29kaW5nIHVzZWQgZm9yIHRoZSBjb250cm9sIHNvY2tldC5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL25vZGVqcy5vcmcvYXBpL2J1ZmZlci5odG1sI2J1ZmZlcl9idWZmZXJzX2FuZF9jaGFyYWN0ZXJfZW5jb2RpbmdzIGZvciB3aGF0IGVuY29kaW5nc1xuICAgICAqIGFyZSBzdXBwb3J0ZWQgYnkgTm9kZS5cbiAgICAgKi9cbiAgICBzZXQgZW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICAgICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZXRFbmNvZGluZyhlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBGVFAgY29tbWFuZCB3aXRob3V0IHdhaXRpbmcgZm9yIG9yIGhhbmRsaW5nIHRoZSByZXN1bHQuXG4gICAgICovXG4gICAgc2VuZChjb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5zUGFzc3dvcmQgPSBjb21tYW5kLnN0YXJ0c1dpdGgoXCJQQVNTXCIpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY29udGFpbnNQYXNzd29yZCA/IFwiPiBQQVNTICMjI1wiIDogYD4gJHtjb21tYW5kfWA7XG4gICAgICAgIHRoaXMubG9nKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9zb2NrZXQud3JpdGUoY29tbWFuZCArIFwiXFxyXFxuXCIsIHRoaXMuZW5jb2RpbmcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIEZUUCBjb21tYW5kIGFuZCBoYW5kbGUgdGhlIGZpcnN0IHJlc3BvbnNlLiBVc2UgdGhpcyBpZiB5b3UgaGF2ZSBhIHNpbXBsZVxuICAgICAqIHJlcXVlc3QtcmVzcG9uc2Ugc2l0dWF0aW9uLlxuICAgICAqL1xuICAgIHJlcXVlc3QoY29tbWFuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUoY29tbWFuZCwgKHJlcywgdGFzaykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGFzay5yZWplY3QocmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhc2sucmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBGVFAgY29tbWFuZCBhbmQgaGFuZGxlIGFueSByZXNwb25zZSB1bnRpbCB5b3UgcmVzb2x2ZS9yZWplY3QuIFVzZSB0aGlzIGlmIHlvdSBleHBlY3QgbXVsdGlwbGUgcmVzcG9uc2VzXG4gICAgICogdG8gYSByZXF1ZXN0LiBUaGlzIHJldHVybnMgYSBQcm9taXNlIHRoYXQgd2lsbCBob2xkIHdoYXRldmVyIHRoZSByZXNwb25zZSBoYW5kbGVyIHBhc3NlZCBvbiB3aGVuIHJlc29sdmluZy9yZWplY3RpbmcgaXRzIHRhc2suXG4gICAgICovXG4gICAgaGFuZGxlKGNvbW1hbmQsIHJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5fdGFzaykge1xuICAgICAgICAgICAgLy8gVGhlIHVzZXIgb3IgY2xpZW50IGluc3RhbmNlIGNhbGxlZCBgaGFuZGxlKClgIHdoaWxlIGEgdGFzayBpcyBzdGlsbCBydW5uaW5nLlxuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwiVXNlciBsYXVuY2hlZCBhIHRhc2sgd2hpbGUgYW5vdGhlciBvbmUgaXMgc3RpbGwgcnVubmluZy4gRm9yZ290IHRvIHVzZSAnYXdhaXQnIG9yICcudGhlbigpJz9cIik7XG4gICAgICAgICAgICBlcnIuc3RhY2sgKz0gYFxcblJ1bm5pbmcgdGFzayBsYXVuY2hlZCBhdDogJHt0aGlzLl90YXNrLnN0YWNrfWA7XG4gICAgICAgICAgICB0aGlzLmNsb3NlV2l0aEVycm9yKGVycik7XG4gICAgICAgICAgICAvLyBEb24ndCByZXR1cm4gaGVyZSwgY29udGludWUgd2l0aCByZXR1cm5pbmcgdGhlIFByb21pc2UgdGhhdCB3aWxsIHRoZW4gYmUgcmVqZWN0ZWRcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIGNvbnRleHQgY2xvc2VkIGFscmVhZHkuIFRoYXQgd2F5LCB1c2VycyB3aWxsIHJlY2VpdmUgYW4gZXhjZXB0aW9uIHdoZXJlXG4gICAgICAgICAgICAvLyB0aGV5IGNhbGxlZCB0aGlzIG1ldGhvZCBieSBtaXN0YWtlLlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZVByb21pc2UsIHJlamVjdFByb21pc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2sgfHwgXCJVbmtub3duIGNhbGwgc3RhY2tcIjtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0ge1xuICAgICAgICAgICAgICAgIHJlc29sdmU6ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BUcmFja2luZ1Rhc2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWplY3Q6IGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BUcmFja2luZ1Rhc2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZShlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl90YXNrID0ge1xuICAgICAgICAgICAgICAgIHN0YWNrLFxuICAgICAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGFuZGxlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jbG9zaW5nRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNsaWVudCBoYXMgYmVlbiBjbG9zZWQuIFByb3ZpZGUgYW4gZXJyb3IgdGhhdCBkZXNjcmliZXMgdGhpcyBvbmUgYXMgYmVpbmcgY2F1c2VkXG4gICAgICAgICAgICAgICAgLy8gYnkgYF9jbG9zaW5nRXJyb3JgLCBpbmNsdWRlIHN0YWNrIHRyYWNlcyBmb3IgYm90aC5cbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJDbGllbnQgaXMgY2xvc2VkXCIpOyAvLyBUeXBlICdFcnJvcicgaXMgbm90IGNvcnJlY3RseSBkZWZpbmVkLCBkb2Vzbid0IGhhdmUgJ2NvZGUnLlxuICAgICAgICAgICAgICAgIGVyci5zdGFjayArPSBgXFxuQ2xvc2luZyByZWFzb246ICR7dGhpcy5fY2xvc2luZ0Vycm9yLnN0YWNrfWA7XG4gICAgICAgICAgICAgICAgZXJyLmNvZGUgPSB0aGlzLl9jbG9zaW5nRXJyb3IuY29kZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5fY2xvc2luZ0Vycm9yLmNvZGUgOiBcIjBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXNzVG9IYW5kbGVyKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT25seSB0cmFjayBjb250cm9sIHNvY2tldCB0aW1lb3V0IGR1cmluZyB0aGUgbGlmZWN5Y2xlIG9mIGEgdGFzay4gVGhpcyBhdm9pZHMgdGltZW91dHMgb24gaWRsZSBzb2NrZXRzLFxuICAgICAgICAgICAgLy8gdGhlIGRlZmF1bHQgc29ja2V0IGJlaGF2aW91ciB3aGljaCBpcyBub3QgZXhwZWN0ZWQgYnkgbW9zdCB1c2Vycy5cbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNldFRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9nIG1lc3NhZ2UgaWYgc2V0IHRvIGJlIHZlcmJvc2UuXG4gICAgICovXG4gICAgbG9nKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSBjb250cm9sIHNvY2tldCBpcyB1c2luZyBUTFMuIFRoaXMgZG9lcyBub3QgbWVhbiB0aGF0IGEgc2Vzc2lvblxuICAgICAqIGhhcyBhbHJlYWR5IGJlZW4gbmVnb3RpYXRlZC5cbiAgICAgKi9cbiAgICBnZXQgaGFzVExTKCkge1xuICAgICAgICByZXR1cm4gXCJlbmNyeXB0ZWRcIiBpbiB0aGlzLl9zb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgcmVmZXJlbmNlIHRvIGN1cnJlbnQgdGFzayBhbmQgaGFuZGxlci4gVGhpcyB3b24ndCByZXNvbHZlIG9yIHJlamVjdCB0aGUgdGFzay5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3N0b3BUcmFja2luZ1Rhc2soKSB7XG4gICAgICAgIC8vIERpc2FibGUgdGltZW91dCBvbiBjb250cm9sIHNvY2tldCBpZiB0aGVyZSBpcyBubyB0YXNrIGFjdGl2ZS5cbiAgICAgICAgdGhpcy5zb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICAgICAgdGhpcy5fdGFzayA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGluY29taW5nIGRhdGEgb24gdGhlIGNvbnRyb2wgc29ja2V0LiBUaGUgY2h1bmsgaXMgZ29pbmcgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYFxuICAgICAqIGJlY2F1c2Ugd2UgbGV0IGBzb2NrZXRgIGhhbmRsZSBlbmNvZGluZyB3aXRoIGBzZXRFbmNvZGluZ2AuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9vbkNvbnRyb2xTb2NrZXREYXRhKGNodW5rKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRDaHVuayA9IGNodW5rLnRyaW0oKTtcbiAgICAgICAgdGhpcy5sb2coYDwgJHt0cmltbWVkQ2h1bmt9YCk7XG4gICAgICAgIC8vIFRoaXMgY2h1bmsgbWlnaHQgY29tcGxldGUgYW4gZWFybGllciBwYXJ0aWFsIHJlc3BvbnNlLlxuICAgICAgICBjb25zdCBjb21wbGV0ZVJlc3BvbnNlID0gdGhpcy5fcGFydGlhbFJlc3BvbnNlICsgdHJpbW1lZENodW5rO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUNvbnRyb2xSZXNwb25zZV8xLnBhcnNlQ29udHJvbFJlc3BvbnNlKGNvbXBsZXRlUmVzcG9uc2UpO1xuICAgICAgICAvLyBSZW1lbWJlciBhbnkgaW5jb21wbGV0ZSByZW1haW5kZXIuXG4gICAgICAgIHRoaXMuX3BhcnRpYWxSZXNwb25zZSA9IHBhcnNlZC5yZXN0O1xuICAgICAgICAvLyBFYWNoIHJlc3BvbnNlIGdyb3VwIGlzIHBhc3NlZCBhbG9uZyBpbmRpdmlkdWFsbHkuXG4gICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwYXJzZWQubWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXJzZUludChtZXNzYWdlLnN1YnN0cigwLCAzKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7IGNvZGUsIG1lc3NhZ2UgfTtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGNvZGUgPj0gNDAwID8gbmV3IEZUUEVycm9yKHJlc3BvbnNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3Bhc3NUb0hhbmRsZXIoZXJyID8gZXJyIDogcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIGN1cnJlbnQgaGFuZGxlciBhIHJlc3BvbnNlLiBUaGlzIGlzIHVzdWFsbHkgYSBjb250cm9sIHNvY2tldCByZXNwb25zZVxuICAgICAqIG9yIGEgc29ja2V0IGV2ZW50LCBsaWtlIGFuIGVycm9yIG9yIHRpbWVvdXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9wYXNzVG9IYW5kbGVyKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0aGlzLl90YXNrKSB7XG4gICAgICAgICAgICB0aGlzLl90YXNrLnJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSwgdGhpcy5fdGFzay5yZXNvbHZlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXJyb3JzIG90aGVyIHRoYW4gRlRQRXJyb3IgYWx3YXlzIGNsb3NlIHRoZSBjbGllbnQuIElmIHRoZXJlIGlzbid0IGFuIGFjdGl2ZSB0YXNrIHRvIGhhbmRsZSB0aGUgZXJyb3IsXG4gICAgICAgIC8vIHRoZSBuZXh0IG9uZSBzdWJtaXR0ZWQgd2lsbCByZWNlaXZlIGl0IHVzaW5nIGBfY2xvc2luZ0Vycm9yYC5cbiAgICAgICAgLy8gVGhlcmUgaXMgb25seSBvbmUgZWRnZS1jYXNlOiBJZiB0aGVyZSBpcyBhbiBGVFBFcnJvciB3aGlsZSBubyB0YXNrIGlzIGFjdGl2ZSwgdGhlIGVycm9yIHdpbGwgYmUgZHJvcHBlZC5cbiAgICAgICAgLy8gQnV0IHRoYXQgbWVhbnMgdGhhdCB0aGUgdXNlciBzZW50IGFuIEZUUCBjb21tYW5kIHdpdGggbm8gaW50ZW50aW9uIG9mIGhhbmRsaW5nIHRoZSByZXN1bHQuIFNvIHdoeSBzaG91bGQgdGhlXG4gICAgICAgIC8vIGVycm9yIGJlIGhhbmRsZWQ/IE1heWJlIGxvZyBpdCBhdCBsZWFzdD8gRGVidWcgbG9nZ2luZyB3aWxsIGFscmVhZHkgZG8gdGhhdCBhbmQgdGhlIGNsaWVudCBzdGF5cyB1c2VhYmxlIGFmdGVyXG4gICAgICAgIC8vIEZUUEVycm9yLiBTbyBtYXliZSBubyBuZWVkIHRvIGRvIGFueXRoaW5nIGhlcmUuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHVwIGFsbCBlcnJvciBoYW5kbGVycyBmb3IgYSBzb2NrZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zZXR1cERlZmF1bHRFcnJvckhhbmRsZXJzKHNvY2tldCwgaWRlbnRpZmllcikge1xuICAgICAgICBzb2NrZXQub25jZShcImVycm9yXCIsIGVycm9yID0+IHtcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gYCAoJHtpZGVudGlmaWVyfSlgO1xuICAgICAgICAgICAgdGhpcy5jbG9zZVdpdGhFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBzb2NrZXQub25jZShcImNsb3NlXCIsIGhhZEVycm9yID0+IHtcbiAgICAgICAgICAgIGlmIChoYWRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaXRoRXJyb3IobmV3IEVycm9yKGBTb2NrZXQgY2xvc2VkIGR1ZSB0byB0cmFuc21pc3Npb24gZXJyb3IgKCR7aWRlbnRpZmllcn0pYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc29ja2V0Lm9uY2UoXCJ0aW1lb3V0XCIsICgpID0+IHRoaXMuY2xvc2VXaXRoRXJyb3IobmV3IEVycm9yKGBUaW1lb3V0ICgke2lkZW50aWZpZXJ9KWApKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIGEgc29ja2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY2xvc2VTb2NrZXQoc29ja2V0KSB7XG4gICAgICAgIGlmIChzb2NrZXQpIHtcbiAgICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoc29ja2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGRlZmF1bHQgbGlzdGVuZXJzIGZvciBzb2NrZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9yZW1vdmVTb2NrZXRMaXN0ZW5lcnMoc29ja2V0KSB7XG4gICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgLy8gQmVmb3JlIE5vZGUuanMgMTAuMy4wLCB1c2luZyBgc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpYCB3aXRob3V0IGFueSBuYW1lIGRpZCBub3Qgd29yazogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy8yMDkyMy5cbiAgICAgICAgc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycyhcInRpbWVvdXRcIik7XG4gICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJkYXRhXCIpO1xuICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiZW5kXCIpO1xuICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiZXJyb3JcIik7XG4gICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcbiAgICAgICAgc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycyhcImNvbm5lY3RcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb3ZpZGUgYSBuZXcgc29ja2V0IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogSW50ZXJuYWwgdXNlIG9ubHksIHJlcGxhY2VkIGZvciB1bml0IHRlc3RzLlxuICAgICAqL1xuICAgIF9uZXdTb2NrZXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgbmV0XzEuU29ja2V0KCk7XG4gICAgfVxufVxuZXhwb3J0cy5GVFBDb250ZXh0ID0gRlRQQ29udGV4dDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VMaXN0ID0gdm9pZCAwO1xuY29uc3QgZG9zUGFyc2VyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhcnNlTGlzdERPU1wiKSk7XG5jb25zdCB1bml4UGFyc2VyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhcnNlTGlzdFVuaXhcIikpO1xuY29uc3QgbWxzZFBhcnNlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9wYXJzZUxpc3RNTFNEXCIpKTtcbi8qKlxuICogQXZhaWxhYmxlIGRpcmVjdG9yeSBsaXN0aW5nIHBhcnNlcnMuIFRoZXNlIGFyZSBjYW5kaWRhdGVzIHRoYXQgd2lsbCBiZSB0ZXN0ZWRcbiAqIGluIHRoZSBvcmRlciBwcmVzZW50ZWQuIFRoZSBmaXJzdCBjYW5kaWRhdGUgd2lsbCBiZSB1c2VkIHRvIHBhcnNlIHRoZSB3aG9sZSBsaXN0LlxuICovXG5jb25zdCBhdmFpbGFibGVQYXJzZXJzID0gW1xuICAgIGRvc1BhcnNlcixcbiAgICB1bml4UGFyc2VyLFxuICAgIG1sc2RQYXJzZXIgLy8gS2VlcCBNTFNEIGxhc3QsIG1heSBhY2NlcHQgZmlsZW5hbWUgb25seVxuXTtcbmZ1bmN0aW9uIGZpcnN0Q29tcGF0aWJsZVBhcnNlcihsaW5lLCBwYXJzZXJzKSB7XG4gICAgcmV0dXJuIHBhcnNlcnMuZmluZChwYXJzZXIgPT4gcGFyc2VyLnRlc3RMaW5lKGxpbmUpID09PSB0cnVlKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ0lzTm90Qmxhbmsoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkgIT09IFwiXCI7XG59XG5jb25zdCBSRUdFWF9ORVdMSU5FID0gL1xccj9cXG4vO1xuLyoqXG4gKiBQYXJzZSByYXcgZGlyZWN0b3J5IGxpc3RpbmcuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTGlzdChyYXdMaXN0KSB7XG4gICAgY29uc3QgbGluZXMgPSByYXdMaXN0XG4gICAgICAgIC5zcGxpdChSRUdFWF9ORVdMSU5FKVxuICAgICAgICAuZmlsdGVyKHN0cmluZ0lzTm90QmxhbmspO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCB0ZXN0TGluZSA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHBhcnNlciA9IGZpcnN0Q29tcGF0aWJsZVBhcnNlcih0ZXN0TGluZSwgYXZhaWxhYmxlUGFyc2Vycyk7XG4gICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBsaWJyYXJ5IG9ubHkgc3VwcG9ydHMgTUxTRCwgVW5peC0gb3IgRE9TLXN0eWxlIGRpcmVjdG9yeSBsaXN0aW5nLiBZb3VyIEZUUCBzZXJ2ZXIgc2VlbXMgdG8gYmUgdXNpbmcgYW5vdGhlciBmb3JtYXQuIFlvdSBjYW4gc2VlIHRoZSB0cmFuc21pdHRlZCBsaXN0aW5nIHdoZW4gc2V0dGluZyBgY2xpZW50LmZ0cC52ZXJib3NlID0gdHJ1ZWAuIFlvdSBjYW4gdGhlbiBwcm92aWRlIGEgY3VzdG9tIHBhcnNlciB0byBgY2xpZW50LnBhcnNlTGlzdGAsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscy5cIik7XG4gICAgfVxuICAgIGNvbnN0IGZpbGVzID0gbGluZXNcbiAgICAgICAgLm1hcChwYXJzZXIucGFyc2VMaW5lKVxuICAgICAgICAuZmlsdGVyKChpbmZvKSA9PiBpbmZvICE9PSB1bmRlZmluZWQpO1xuICAgIHJldHVybiBwYXJzZXIudHJhbnNmb3JtTGlzdChmaWxlcyk7XG59XG5leHBvcnRzLnBhcnNlTGlzdCA9IHBhcnNlTGlzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZU1MU3hEYXRlID0gZXhwb3J0cy50cmFuc2Zvcm1MaXN0ID0gZXhwb3J0cy5wYXJzZUxpbmUgPSBleHBvcnRzLnRlc3RMaW5lID0gdm9pZCAwO1xuY29uc3QgRmlsZUluZm9fMSA9IHJlcXVpcmUoXCIuL0ZpbGVJbmZvXCIpO1xuZnVuY3Rpb24gcGFyc2VTaXplKHZhbHVlLCBpbmZvKSB7XG4gICAgaW5mby5zaXplID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbn1cbi8qKlxuICogUGFyc2VycyBmb3IgTUxTRCBmYWN0cy5cbiAqL1xuY29uc3QgZmFjdEhhbmRsZXJzQnlOYW1lID0ge1xuICAgIFwic2l6ZVwiOiBwYXJzZVNpemUsXG4gICAgXCJzaXpkXCI6IHBhcnNlU2l6ZSxcbiAgICBcInVuaXF1ZVwiOiAodmFsdWUsIGluZm8pID0+IHtcbiAgICAgICAgaW5mby51bmlxdWVJRCA9IHZhbHVlO1xuICAgIH0sXG4gICAgXCJtb2RpZnlcIjogKHZhbHVlLCBpbmZvKSA9PiB7XG4gICAgICAgIGluZm8ubW9kaWZpZWRBdCA9IHBhcnNlTUxTeERhdGUodmFsdWUpO1xuICAgICAgICBpbmZvLnJhd01vZGlmaWVkQXQgPSBpbmZvLm1vZGlmaWVkQXQudG9JU09TdHJpbmcoKTtcbiAgICB9LFxuICAgIFwidHlwZVwiOiAodmFsdWUsIGluZm8pID0+IHtcbiAgICAgICAgLy8gVGhlcmUgc2VlbXMgdG8gYmUgY29uZnVzaW9uIG9uIGhvdyB0byBoYW5kbGUgc3ltYm9saWMgbGlua3MgZm9yIFVuaXguIFJGQyAzNjU5IGRvZXNuJ3QgZGVzY3JpYmVcbiAgICAgICAgLy8gdGhpcyBidXQgbWVudGlvbnMgc29tZSBleGFtcGxlcyB1c2luZyB0aGUgc3ludGF4IGB0eXBlPU9TLnVuaXg9c2xpbms6PHRhcmdldD5gLiBCdXQgYWNjb3JkaW5nIHRvXG4gICAgICAgIC8vIGFuIGVudHJ5IGluIHRoZSBFcnJhdGEgKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL2VycmF0YS9laWQxNTAwKSB0aGlzIHN5bnRheCBjYW4ndCBiZSB2YWxpZC5cbiAgICAgICAgLy8gSW5zdGVhZCBpdCBwcm9wb3NlcyB0byB1c2UgYHR5cGU9T1MudW5peD1zeW1saW5rYCBhbmQgdG8gdGhlbiBsaXN0IHRoZSBhY3R1YWwgdGFyZ2V0IG9mIHRoZVxuICAgICAgICAvLyBzeW1ib2xpYyBsaW5rIGFzIGFub3RoZXIgZW50cnkgaW4gdGhlIGRpcmVjdG9yeSBsaXN0aW5nLiBUaGUgdW5pcXVlIGlkZW50aWZpZXJzIGNhbiB0aGVuIGJlIHVzZWRcbiAgICAgICAgLy8gdG8gZGVyaXZlIHRoZSBjb25uZWN0aW9uIGJldHdlZW4gbGluayhzKSBhbmQgdGFyZ2V0LiBXZSdsbCBoYXZlIHRvIGhhbmRsZSBib3RoIGNhc2VzIGFzIHRoZXJlXG4gICAgICAgIC8vIGFyZSBkaWZmZXJpbmcgb3BpbmlvbnMgb24gaG93IHRvIGRlYWwgd2l0aCB0aGlzLiBIZXJlIGFyZSBzb21lIGxpbmtzIG9uIHRoaXMgdG9waWM6XG4gICAgICAgIC8vIC0gUHJvRlRQRCBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9mdHBkL3Byb2Z0cGQvYmxvYi81NmU2ZGZhNTk4Y2JkNGVmNWM2Y2JhNDM5YmNiY2Q1M2E2M2UzYjIxL21vZHVsZXMvbW9kX2ZhY3RzLmMjTDUzMVxuICAgICAgICAvLyAtIFByb0ZUUEQgYnVnOiBodHRwOi8vYnVncy5wcm9mdHBkLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzMxOFxuICAgICAgICAvLyAtIFByb0ZUUEQgc3RhdGVtZW50OiBodHRwOi8vd3d3LnByb2Z0cGQub3JnL2RvY3MvbW9kdWxlcy9tb2RfZmFjdHMuaHRtbFxuICAgICAgICAvLyDigJMgRmlsZVppbGxhIGJ1ZzogaHR0cHM6Ly90cmFjLmZpbGV6aWxsYS1wcm9qZWN0Lm9yZy90aWNrZXQvOTMxMFxuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aChcIk9TLnVuaXg9c2xpbmtcIikpIHtcbiAgICAgICAgICAgIGluZm8udHlwZSA9IEZpbGVJbmZvXzEuRmlsZVR5cGUuU3ltYm9saWNMaW5rO1xuICAgICAgICAgICAgaW5mby5saW5rID0gdmFsdWUuc3Vic3RyKHZhbHVlLmluZGV4T2YoXCI6XCIpICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBDb250aW51ZSAqLztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICAgICAgICAgIGluZm8udHlwZSA9IEZpbGVJbmZvXzEuRmlsZVR5cGUuRmlsZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkaXJcIjpcbiAgICAgICAgICAgICAgICBpbmZvLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLkRpcmVjdG9yeTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJPUy51bml4PXN5bWxpbmtcIjpcbiAgICAgICAgICAgICAgICBpbmZvLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLlN5bWJvbGljTGluaztcbiAgICAgICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IG9mIHRoZSBzeW1ib2xpYyBsaW5rIG1pZ2h0IGJlIGRlZmluZWQgaW4gYW5vdGhlciBsaW5lIGluIHRoZSBkaXJlY3RvcnkgbGlzdGluZy5cbiAgICAgICAgICAgICAgICAvLyBXZSdsbCBoYW5kbGUgdGhpcyBpbiBgdHJhbnNmb3JtTGlzdCgpYCBiZWxvdy5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjZGlyXCI6IC8vIEN1cnJlbnQgZGlyZWN0b3J5IGJlaW5nIGxpc3RlZFxuICAgICAgICAgICAgY2FzZSBcInBkaXJcIjogLy8gUGFyZW50IGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgIHJldHVybiAyIC8qIElnbm9yZUZpbGUgKi87IC8vIERvbid0IGluY2x1ZGUgdGhlc2UgZW50cmllcyBpbiB0aGUgbGlzdGluZ1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmZvLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLlVua25vd247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDEgLyogQ29udGludWUgKi87XG4gICAgfSxcbiAgICBcInVuaXgubW9kZVwiOiAodmFsdWUsIGluZm8pID0+IHtcbiAgICAgICAgY29uc3QgZGlnaXRzID0gdmFsdWUuc3Vic3RyKC0zKTtcbiAgICAgICAgaW5mby5wZXJtaXNzaW9ucyA9IHtcbiAgICAgICAgICAgIHVzZXI6IHBhcnNlSW50KGRpZ2l0c1swXSwgMTApLFxuICAgICAgICAgICAgZ3JvdXA6IHBhcnNlSW50KGRpZ2l0c1sxXSwgMTApLFxuICAgICAgICAgICAgd29ybGQ6IHBhcnNlSW50KGRpZ2l0c1syXSwgMTApXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcInVuaXgub3duZXJuYW1lXCI6ICh2YWx1ZSwgaW5mbykgPT4ge1xuICAgICAgICBpbmZvLnVzZXIgPSB2YWx1ZTtcbiAgICB9LFxuICAgIFwidW5peC5vd25lclwiOiAodmFsdWUsIGluZm8pID0+IHtcbiAgICAgICAgaWYgKGluZm8udXNlciA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgaW5mby51c2VyID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgXCJ1bml4LnVpZFwiKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tcInVuaXgub3duZXJcIl07XG4gICAgfSxcbiAgICBcInVuaXguZ3JvdXBuYW1lXCI6ICh2YWx1ZSwgaW5mbykgPT4ge1xuICAgICAgICBpbmZvLmdyb3VwID0gdmFsdWU7XG4gICAgfSxcbiAgICBcInVuaXguZ3JvdXBcIjogKHZhbHVlLCBpbmZvKSA9PiB7XG4gICAgICAgIGlmIChpbmZvLmdyb3VwID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBpbmZvLmdyb3VwID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgXCJ1bml4LmdpZFwiKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tcInVuaXguZ3JvdXBcIl07XG4gICAgfVxuICAgIC8vIFJlZ2FyZGluZyB0aGUgZmFjdCBcInBlcm1cIjpcbiAgICAvLyBXZSBkb24ndCBoYW5kbGUgcGVybWlzc2lvbiBpbmZvcm1hdGlvbiBzdG9yZWQgaW4gXCJwZXJtXCIgYmVjYXVzZSBpdHMgaW5mb3JtYXRpb24gaXMgY29uY2VwdHVhbGx5XG4gICAgLy8gZGlmZmVyZW50IGZyb20gd2hhdCB1c2VycyBvZiBGVFAgY2xpZW50cyB1c3VhbGx5IGFzc29jaWF0ZSB3aXRoIFwicGVybWlzc2lvbnNcIi4gVGhvc2UgdGhhdCBoYXZlXG4gICAgLy8gc29tZSBleHBlY3RhdGlvbnMgKGFuZCBwcm9iYWJseSB3YW50IHRvIGVkaXQgdGhlbSB3aXRoIGEgU0lURSBjb21tYW5kKSBvZnRlbiB1bmtub3dpbmdseSBleHBlY3RcbiAgICAvLyB0aGUgVW5peCBwZXJtaXNzaW9uIHN5c3RlbS4gVGhlIGluZm9ybWF0aW9uIHBhc3NlZCBieSBcInBlcm1cIiBkZXNjcmliZXMgd2hhdCBGVFAgY29tbWFuZHMgY2FuIGJlXG4gICAgLy8gZXhlY3V0ZWQgd2l0aCBhIGZpbGUvZGlyZWN0b3J5LiBCdXQgZXZlbiB0aGlzIGNhbiBiZSBlaXRoZXIgaW5jb21wbGV0ZSBvciBqdXN0IG1lYW50IGFzIGEgXCJndWlkZVwiXG4gICAgLy8gYXMgdGhlIHNwZWMgbWVudGlvbnMuIEZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM2NTkjc2VjdGlvbi03LjUuNTogXCJUaGUgcGVybWlzc2lvbnMgYXJlXG4gICAgLy8gZGVzY3JpYmVkIGhlcmUgYXMgdGhleSBhcHBseSB0byBGVFAgY29tbWFuZHMuIFRoZXkgbWF5IG5vdCBtYXAgZWFzaWx5IGludG8gcGFydGljdWxhciBwZXJtaXNzaW9uc1xuICAgIC8vIGF2YWlsYWJsZSBvbiB0aGUgc2VydmVyJ3Mgb3BlcmF0aW5nIHN5c3RlbS5cIiBUaGUgcGFyc2VyIGJ5IEFwYWNoZSBDb21tb25zIHRyaWVzIHRvIHRyYW5zbGF0ZSB0aGVzZVxuICAgIC8vIHRvIFVuaXggcGVybWlzc2lvbnMg4oCTIHRoaXMgaXMgbWlzbGVhZGluZyB1c2VycyBhbmQgbWlnaHQgbm90IGV2ZW4gYmUgY29ycmVjdC5cbn07XG4vKipcbiAqIFNwbGl0IGEgc3RyaW5nIG9uY2UgYXQgdGhlIGZpcnN0IHBvc2l0aW9uIG9mIGEgZGVsaW1pdGVyLiBGb3IgZXhhbXBsZVxuICogYHNwbGl0U3RyaW5nT25jZShcImEgYiBjIGRcIiwgXCIgXCIpYCByZXR1cm5zIGBbXCJhXCIsIFwiYiBjIGRcIl1gLlxuICovXG5mdW5jdGlvbiBzcGxpdFN0cmluZ09uY2Uoc3RyLCBkZWxpbWl0ZXIpIHtcbiAgICBjb25zdCBwb3MgPSBzdHIuaW5kZXhPZihkZWxpbWl0ZXIpO1xuICAgIGNvbnN0IGEgPSBzdHIuc3Vic3RyKDAsIHBvcyk7XG4gICAgY29uc3QgYiA9IHN0ci5zdWJzdHIocG9zICsgZGVsaW1pdGVyLmxlbmd0aCk7XG4gICAgcmV0dXJuIFthLCBiXTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gbGluZSBtaWdodCBiZSBwYXJ0IG9mIGFuIE1MU0QgbGlzdGluZy5cbiAqXG4gKiAtIEV4YW1wbGUgMTogYHNpemU9MTUyMjc7dHlwZT1kaXI7cGVybT1lbDttb2RpZnk9MjAxOTA0MTkwNjU3MzA7IHRlc3Qgb25lYFxuICogLSBFeGFtcGxlIDI6IGAgZmlsZSBuYW1lYCAobGVhZGluZyBzcGFjZSlcbiAqL1xuZnVuY3Rpb24gdGVzdExpbmUobGluZSkge1xuICAgIHJldHVybiAvXlxcUys9XFxTKzsvLnRlc3QobGluZSkgfHwgbGluZS5zdGFydHNXaXRoKFwiIFwiKTtcbn1cbmV4cG9ydHMudGVzdExpbmUgPSB0ZXN0TGluZTtcbi8qKlxuICogUGFyc2Ugc2luZ2xlIGxpbmUgYXMgTUxTRCBsaXN0aW5nLCBzZWUgc3BlY2lmaWNhdGlvbiBhdCBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzY1OSNzZWN0aW9uLTcuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTGluZShsaW5lKSB7XG4gICAgY29uc3QgW3BhY2tlZEZhY3RzLCBuYW1lXSA9IHNwbGl0U3RyaW5nT25jZShsaW5lLCBcIiBcIik7XG4gICAgaWYgKG5hbWUgPT09IFwiXCIgfHwgbmFtZSA9PT0gXCIuXCIgfHwgbmFtZSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGluZm8gPSBuZXcgRmlsZUluZm9fMS5GaWxlSW5mbyhuYW1lKTtcbiAgICBjb25zdCBmYWN0cyA9IHBhY2tlZEZhY3RzLnNwbGl0KFwiO1wiKTtcbiAgICBmb3IgKGNvbnN0IGZhY3Qgb2YgZmFjdHMpIHtcbiAgICAgICAgY29uc3QgW2ZhY3ROYW1lLCBmYWN0VmFsdWVdID0gc3BsaXRTdHJpbmdPbmNlKGZhY3QsIFwiPVwiKTtcbiAgICAgICAgaWYgKCFmYWN0VmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZhY3RIYW5kbGVyID0gZmFjdEhhbmRsZXJzQnlOYW1lW2ZhY3ROYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICBpZiAoIWZhY3RIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBmYWN0SGFuZGxlcihmYWN0VmFsdWUsIGluZm8pO1xuICAgICAgICBpZiAocmVzdWx0ID09PSAyIC8qIElnbm9yZUZpbGUgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnRzLnBhcnNlTGluZSA9IHBhcnNlTGluZTtcbmZ1bmN0aW9uIHRyYW5zZm9ybUxpc3QoZmlsZXMpIHtcbiAgICAvLyBDcmVhdGUgYSBtYXAgb2YgYWxsIGZpbGVzIHRoYXQgYXJlIG5vdCBzeW1ib2xpYyBsaW5rcyBieSB0aGVpciB1bmlxdWUgSURcbiAgICBjb25zdCBub25MaW5rc0J5SUQgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGlmICghZmlsZS5pc1N5bWJvbGljTGluayAmJiBmaWxlLnVuaXF1ZUlEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5vbkxpbmtzQnlJRC5zZXQoZmlsZS51bmlxdWVJRCwgZmlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWRGaWxlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAvLyBUcnkgdG8gYXNzb2NpYXRlIHVucmVzb2x2ZWQgc3ltYm9saWMgbGlua3Mgd2l0aCBhIHRhcmdldCBmaWxlL2RpcmVjdG9yeS5cbiAgICAgICAgaWYgKGZpbGUuaXNTeW1ib2xpY0xpbmsgJiYgZmlsZS51bmlxdWVJRCAhPT0gdW5kZWZpbmVkICYmIGZpbGUubGluayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBub25MaW5rc0J5SUQuZ2V0KGZpbGUudW5pcXVlSUQpO1xuICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZmlsZS5saW5rID0gdGFyZ2V0Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHRhcmdldCBvZiBhIHN5bWJvbGljIGxpbmsgaXMgbGlzdGVkIGFzIGFuIGVudHJ5IGluIHRoZSBkaXJlY3RvcnkgbGlzdGluZyBidXQgbWlnaHRcbiAgICAgICAgLy8gaGF2ZSBhIHBhdGggcG9pbnRpbmcgb3V0c2lkZSBvZiB0aGlzIGRpcmVjdG9yeS4gSW4gdGhhdCBjYXNlIHdlIGRvbid0IHdhbnQgdGhpcyBlbnRyeVxuICAgICAgICAvLyB0byBiZSBwYXJ0IG9mIHRoZSBsaXN0aW5nLiBXZSBnZW5lcmFsbHkgZG9uJ3Qgd2FudCB0aGVzZSBraW5kIG9mIGVudHJpZXMgYXQgYWxsLlxuICAgICAgICBjb25zdCBpc1BhcnRPZkRpcmVjdG9yeSA9ICFmaWxlLm5hbWUuaW5jbHVkZXMoXCIvXCIpO1xuICAgICAgICBpZiAoaXNQYXJ0T2ZEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRGaWxlcztcbn1cbmV4cG9ydHMudHJhbnNmb3JtTGlzdCA9IHRyYW5zZm9ybUxpc3Q7XG4vKipcbiAqIFBhcnNlIGRhdGUgYXMgc3BlY2lmaWVkIGluIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNjU5I3NlY3Rpb24tMi4zLlxuICpcbiAqIE1lc3NhZ2UgY29udGFpbnMgcmVzcG9uc2UgY29kZSBhbmQgbW9kaWZpZWQgdGltZSBpbiB0aGUgZm9ybWF0OiBZWVlZTU1EREhITU1TU1suc3NzXVxuICogRm9yIGV4YW1wbGUgYDE5OTkxMDA1MjEzMTAyYCBvciBgMTk5ODA2MTUxMDAwNDUuMDE0YC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VNTFN4RGF0ZShmYWN0KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKCtmYWN0LnNsaWNlKDAsIDQpLCAvLyBZZWFyXG4gICAgK2ZhY3Quc2xpY2UoNCwgNikgLSAxLCAvLyBNb250aFxuICAgICtmYWN0LnNsaWNlKDYsIDgpLCAvLyBEYXRlXG4gICAgK2ZhY3Quc2xpY2UoOCwgMTApLCAvLyBIb3Vyc1xuICAgICtmYWN0LnNsaWNlKDEwLCAxMiksIC8vIE1pbnV0ZXNcbiAgICArZmFjdC5zbGljZSgxMiwgMTQpLCAvLyBTZWNvbmRzXG4gICAgK2ZhY3Quc2xpY2UoMTUsIDE4KSAvLyBNaWxsaXNlY29uZHNcbiAgICApKTtcbn1cbmV4cG9ydHMucGFyc2VNTFN4RGF0ZSA9IHBhcnNlTUxTeERhdGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXBJc1ByaXZhdGVWNEFkZHJlc3MgPSBleHBvcnRzLnVwZ3JhZGVTb2NrZXQgPSBleHBvcnRzLmRlc2NyaWJlQWRkcmVzcyA9IGV4cG9ydHMuZGVzY3JpYmVUTFMgPSB2b2lkIDA7XG5jb25zdCB0bHNfMSA9IHJlcXVpcmUoXCJ0bHNcIik7XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgZW5jcnlwdGlvbiBvbiBhIGdpdmVuIHNvY2tldCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZGVzY3JpYmVUTFMoc29ja2V0KSB7XG4gICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIHRsc18xLlRMU1NvY2tldCkge1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHNvY2tldC5nZXRQcm90b2NvbCgpO1xuICAgICAgICByZXR1cm4gcHJvdG9jb2wgPyBwcm90b2NvbCA6IFwiU2VydmVyIHNvY2tldCBvciBkaXNjb25uZWN0ZWQgY2xpZW50IHNvY2tldFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJObyBlbmNyeXB0aW9uXCI7XG59XG5leHBvcnRzLmRlc2NyaWJlVExTID0gZGVzY3JpYmVUTFM7XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgcmVtb3RlIGFkZHJlc3Mgb2YgYSBzb2NrZXQuXG4gKi9cbmZ1bmN0aW9uIGRlc2NyaWJlQWRkcmVzcyhzb2NrZXQpIHtcbiAgICBpZiAoc29ja2V0LnJlbW90ZUZhbWlseSA9PT0gXCJJUHY2XCIpIHtcbiAgICAgICAgcmV0dXJuIGBbJHtzb2NrZXQucmVtb3RlQWRkcmVzc31dOiR7c29ja2V0LnJlbW90ZVBvcnR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3NvY2tldC5yZW1vdGVBZGRyZXNzfToke3NvY2tldC5yZW1vdGVQb3J0fWA7XG59XG5leHBvcnRzLmRlc2NyaWJlQWRkcmVzcyA9IGRlc2NyaWJlQWRkcmVzcztcbi8qKlxuICogVXBncmFkZSBhIHNvY2tldCBjb25uZWN0aW9uIHdpdGggVExTLlxuICovXG5mdW5jdGlvbiB1cGdyYWRlU29ja2V0KHNvY2tldCwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHRsc09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICBzb2NrZXRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRsc1NvY2tldCA9IHRsc18xLmNvbm5lY3QodGxzT3B0aW9ucywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0Q2VydGlmaWNhdGUgPSB0bHNPcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCAhPT0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXhwZWN0Q2VydGlmaWNhdGUgJiYgIXRsc1NvY2tldC5hdXRob3JpemVkKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHRsc1NvY2tldC5hdXRob3JpemF0aW9uRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGVycm9yIGxpc3RlbmVyIGFkZGVkIGJlbG93LlxuICAgICAgICAgICAgICAgIHRsc1NvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJlcnJvclwiKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRsc1NvY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9uY2UoXCJlcnJvclwiLCBlcnJvciA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudXBncmFkZVNvY2tldCA9IHVwZ3JhZGVTb2NrZXQ7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbiBJUCBpcyBhIHByaXZhdGUgYWRkcmVzcyBhY2NvcmRpbmcgdG8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE5MTgjc2VjdGlvbi0zLlxuICogVGhpcyB3aWxsIGhhbmRsZSBJUHY0LW1hcHBlZCBJUHY2IGFkZHJlc3NlcyBjb3JyZWN0bHkgYnV0IHJldHVybiBmYWxzZSBmb3IgYWxsIG90aGVyIElQdjYgYWRkcmVzc2VzLlxuICpcbiAqIEBwYXJhbSBpcCAgVGhlIElQIGFzIGEgc3RyaW5nLCBlLmcuIFwiMTkyLjE2OC4wLjFcIlxuICovXG5mdW5jdGlvbiBpcElzUHJpdmF0ZVY0QWRkcmVzcyhpcCA9IFwiXCIpIHtcbiAgICAvLyBIYW5kbGUgSVB2NC1tYXBwZWQgSVB2NiBhZGRyZXNzZXMgbGlrZSA6OmZmZmY6MTkyLjE2OC4wLjFcbiAgICBpZiAoaXAuc3RhcnRzV2l0aChcIjo6ZmZmZjpcIikpIHtcbiAgICAgICAgaXAgPSBpcC5zdWJzdHIoNyk7IC8vIFN0cmlwIDo6ZmZmZjogcHJlZml4XG4gICAgfVxuICAgIGNvbnN0IG9jdGV0cyA9IGlwLnNwbGl0KFwiLlwiKS5tYXAobyA9PiBwYXJzZUludChvLCAxMCkpO1xuICAgIHJldHVybiBvY3RldHNbMF0gPT09IDEwIC8vIDEwLjAuMC4wIC0gMTAuMjU1LjI1NS4yNTVcbiAgICAgICAgfHwgKG9jdGV0c1swXSA9PT0gMTcyICYmIG9jdGV0c1sxXSA+PSAxNiAmJiBvY3RldHNbMV0gPD0gMzEpIC8vIDE3Mi4xNi4wLjAgLSAxNzIuMzEuMjU1LjI1NVxuICAgICAgICB8fCAob2N0ZXRzWzBdID09PSAxOTIgJiYgb2N0ZXRzWzFdID09PSAxNjgpOyAvLyAxOTIuMTY4LjAuMCAtIDE5Mi4xNjguMjU1LjI1NVxufVxuZXhwb3J0cy5pcElzUHJpdmF0ZVY0QWRkcmVzcyA9IGlwSXNQcml2YXRlVjRBZGRyZXNzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRvd25sb2FkVG8gPSBleHBvcnRzLnVwbG9hZEZyb20gPSBleHBvcnRzLmNvbm5lY3RGb3JQYXNzaXZlVHJhbnNmZXIgPSBleHBvcnRzLnBhcnNlUGFzdlJlc3BvbnNlID0gZXhwb3J0cy5lbnRlclBhc3NpdmVNb2RlSVB2NCA9IGV4cG9ydHMucGFyc2VFcHN2UmVzcG9uc2UgPSBleHBvcnRzLmVudGVyUGFzc2l2ZU1vZGVJUHY2ID0gdm9pZCAwO1xuY29uc3QgbmV0VXRpbHNfMSA9IHJlcXVpcmUoXCIuL25ldFV0aWxzXCIpO1xuY29uc3QgdGxzXzEgPSByZXF1aXJlKFwidGxzXCIpO1xuY29uc3QgcGFyc2VDb250cm9sUmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL3BhcnNlQ29udHJvbFJlc3BvbnNlXCIpO1xuLyoqXG4gKiBQcmVwYXJlIGEgZGF0YSBzb2NrZXQgdXNpbmcgcGFzc2l2ZSBtb2RlIG92ZXIgSVB2Ni5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW50ZXJQYXNzaXZlTW9kZUlQdjYoZnRwKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZnRwLnJlcXVlc3QoXCJFUFNWXCIpO1xuICAgIGNvbnN0IHBvcnQgPSBwYXJzZUVwc3ZSZXNwb25zZShyZXMubWVzc2FnZSk7XG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHBhcnNlIEVQU1YgcmVzcG9uc2U6IFwiICsgcmVzLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBjb25zdCBjb250cm9sSG9zdCA9IGZ0cC5zb2NrZXQucmVtb3RlQWRkcmVzcztcbiAgICBpZiAoY29udHJvbEhvc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb250cm9sIHNvY2tldCBpcyBkaXNjb25uZWN0ZWQsIGNhbid0IGdldCByZW1vdGUgYWRkcmVzcy5cIik7XG4gICAgfVxuICAgIGF3YWl0IGNvbm5lY3RGb3JQYXNzaXZlVHJhbnNmZXIoY29udHJvbEhvc3QsIHBvcnQsIGZ0cCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZW50ZXJQYXNzaXZlTW9kZUlQdjYgPSBlbnRlclBhc3NpdmVNb2RlSVB2Njtcbi8qKlxuICogUGFyc2UgYW4gRVBTViByZXNwb25zZS4gUmV0dXJucyBvbmx5IHRoZSBwb3J0IGFzIGluIEVQU1YgdGhlIGhvc3Qgb2YgdGhlIGNvbnRyb2wgY29ubmVjdGlvbiBpcyB1c2VkLlxuICovXG5mdW5jdGlvbiBwYXJzZUVwc3ZSZXNwb25zZShtZXNzYWdlKSB7XG4gICAgLy8gR2V0IHBvcnQgZnJvbSBFUFNWIHJlc3BvbnNlLCBlLmcuIFwiMjI5IEVudGVyaW5nIEV4dGVuZGVkIFBhc3NpdmUgTW9kZSAofHx8NjQ0NnwpXCJcbiAgICAvLyBTb21lIEZUUCBTZXJ2ZXJzIHN1Y2ggYXMgdGhlIG9uZSBvbiBJQk0gaSAoT1MvNDAwKSB1c2UgISBpbnN0ZWFkIG9mIHwgaW4gdGhlaXIgRVBTViByZXNwb25zZS5cbiAgICBjb25zdCBncm91cHMgPSBtZXNzYWdlLm1hdGNoKC9bfCFdezN9KC4rKVt8IV0vKTtcbiAgICBpZiAoZ3JvdXBzID09PSBudWxsIHx8IGdyb3Vwc1sxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgcGFyc2UgcmVzcG9uc2UgdG8gJ0VQU1YnOiAke21lc3NhZ2V9YCk7XG4gICAgfVxuICAgIGNvbnN0IHBvcnQgPSBwYXJzZUludChncm91cHNbMV0sIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHBvcnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgcGFyc2UgcmVzcG9uc2UgdG8gJ0VQU1YnLCBwb3J0IGlzIG5vdCBhIG51bWJlcjogJHttZXNzYWdlfWApO1xuICAgIH1cbiAgICByZXR1cm4gcG9ydDtcbn1cbmV4cG9ydHMucGFyc2VFcHN2UmVzcG9uc2UgPSBwYXJzZUVwc3ZSZXNwb25zZTtcbi8qKlxuICogUHJlcGFyZSBhIGRhdGEgc29ja2V0IHVzaW5nIHBhc3NpdmUgbW9kZSBvdmVyIElQdjQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVudGVyUGFzc2l2ZU1vZGVJUHY0KGZ0cCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZ0cC5yZXF1ZXN0KFwiUEFTVlwiKTtcbiAgICBjb25zdCB0YXJnZXQgPSBwYXJzZVBhc3ZSZXNwb25zZShyZXMubWVzc2FnZSk7XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgcGFyc2UgUEFTViByZXNwb25zZTogXCIgKyByZXMubWVzc2FnZSk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBob3N0IGluIHRoZSBQQVNWIHJlc3BvbnNlIGhhcyBhIGxvY2FsIGFkZHJlc3Mgd2hpbGUgdGhlIGNvbnRyb2wgY29ubmVjdGlvbiBoYXNuJ3QsXG4gICAgLy8gd2UgYXNzdW1lIGEgTkFUIGlzc3VlIGFuZCB1c2UgdGhlIElQIG9mIHRoZSBjb250cm9sIGNvbm5lY3Rpb24gYXMgdGhlIHRhcmdldCBmb3IgdGhlIGRhdGEgY29ubmVjdGlvbi5cbiAgICAvLyBXZSBjYW4ndCBhbHdheXMgcGVyZm9ybSB0aGlzIHJlcGxhY2VtZW50IGJlY2F1c2UgaXQncyBwb3NzaWJsZSAoYWx0aG91Z2ggdW5saWtlbHkpIHRoYXQgdGhlIEZUUCBzZXJ2ZXJcbiAgICAvLyBpbmRlZWQgdXNlcyBhIGRpZmZlcmVudCBob3N0IGZvciBkYXRhIGNvbm5lY3Rpb25zLlxuICAgIGNvbnN0IGNvbnRyb2xIb3N0ID0gZnRwLnNvY2tldC5yZW1vdGVBZGRyZXNzO1xuICAgIGlmIChuZXRVdGlsc18xLmlwSXNQcml2YXRlVjRBZGRyZXNzKHRhcmdldC5ob3N0KSAmJiBjb250cm9sSG9zdCAmJiAhbmV0VXRpbHNfMS5pcElzUHJpdmF0ZVY0QWRkcmVzcyhjb250cm9sSG9zdCkpIHtcbiAgICAgICAgdGFyZ2V0Lmhvc3QgPSBjb250cm9sSG9zdDtcbiAgICB9XG4gICAgYXdhaXQgY29ubmVjdEZvclBhc3NpdmVUcmFuc2Zlcih0YXJnZXQuaG9zdCwgdGFyZ2V0LnBvcnQsIGZ0cCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZW50ZXJQYXNzaXZlTW9kZUlQdjQgPSBlbnRlclBhc3NpdmVNb2RlSVB2NDtcbi8qKlxuICogUGFyc2UgYSBQQVNWIHJlc3BvbnNlLlxuICovXG5mdW5jdGlvbiBwYXJzZVBhc3ZSZXNwb25zZShtZXNzYWdlKSB7XG4gICAgLy8gR2V0IGhvc3QgYW5kIHBvcnQgZnJvbSBQQVNWIHJlc3BvbnNlLCBlLmcuIFwiMjI3IEVudGVyaW5nIFBhc3NpdmUgTW9kZSAoMTkyLDE2OCwxLDEwMCwxMCwyMjkpXCJcbiAgICBjb25zdCBncm91cHMgPSBtZXNzYWdlLm1hdGNoKC8oWy1cXGRdKyxbLVxcZF0rLFstXFxkXSssWy1cXGRdKyksKFstXFxkXSspLChbLVxcZF0rKS8pO1xuICAgIGlmIChncm91cHMgPT09IG51bGwgfHwgZ3JvdXBzLmxlbmd0aCAhPT0gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHBhcnNlIHJlc3BvbnNlIHRvICdQQVNWJzogJHttZXNzYWdlfWApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBob3N0OiBncm91cHNbMV0ucmVwbGFjZSgvLC9nLCBcIi5cIiksXG4gICAgICAgIHBvcnQ6IChwYXJzZUludChncm91cHNbMl0sIDEwKSAmIDI1NSkgKiAyNTYgKyAocGFyc2VJbnQoZ3JvdXBzWzNdLCAxMCkgJiAyNTUpXG4gICAgfTtcbn1cbmV4cG9ydHMucGFyc2VQYXN2UmVzcG9uc2UgPSBwYXJzZVBhc3ZSZXNwb25zZTtcbmZ1bmN0aW9uIGNvbm5lY3RGb3JQYXNzaXZlVHJhbnNmZXIoaG9zdCwgcG9ydCwgZnRwKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlQ29ubkVyciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGVyci5tZXNzYWdlID0gXCJDYW4ndCBvcGVuIGRhdGEgY29ubmVjdGlvbiBpbiBwYXNzaXZlIG1vZGU6IFwiICsgZXJyLm1lc3NhZ2U7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHNvY2tldCA9IGZ0cC5fbmV3U29ja2V0KCk7XG4gICAgICAgIHNvY2tldC5vbihcImVycm9yXCIsIGhhbmRsZUNvbm5FcnIpO1xuICAgICAgICBzb2NrZXQuY29ubmVjdCh7IHBvcnQsIGhvc3QsIGZhbWlseTogZnRwLmlwRmFtaWx5IH0sICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmdHAuc29ja2V0IGluc3RhbmNlb2YgdGxzXzEuVExTU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgc29ja2V0ID0gdGxzXzEuY29ubmVjdChPYmplY3QuYXNzaWduKHt9LCBmdHAudGxzT3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXQsXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldXNlIHRoZSBUTFMgc2Vzc2lvbiBuZWdvdGlhdGVkIGVhcmxpZXIgd2hlbiB0aGUgY29udHJvbCBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcyB1cGdyYWRlZC4gU2VydmVycyBleHBlY3QgdGhpcyBiZWNhdXNlIGl0IHByb3ZpZGVzIGFkZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VjdXJpdHk6IElmIGEgY29tcGxldGVseSBuZXcgc2Vzc2lvbiB3b3VsZCBiZSBuZWdvdGlhdGVkLCBhIGhhY2tlclxuICAgICAgICAgICAgICAgICAgICAvLyBjb3VsZCBndWVzcyB0aGUgcG9ydCBhbmQgY29ubmVjdCB0byB0aGUgbmV3IGRhdGEgY29ubmVjdGlvbiBiZWZvcmUgd2UgZG9cbiAgICAgICAgICAgICAgICAgICAgLy8gYnkganVzdCBzdGFydGluZyBoaXMvaGVyIG93biBUTFMgc2Vzc2lvbi5cbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbjogZnRwLnNvY2tldC5nZXRTZXNzaW9uKClcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIHRyYW5zZmVyIHRhc2sgdG8gd2FpdCB1bnRpbCB0aGVcbiAgICAgICAgICAgICAgICAvLyBUTFMgc29ja2V0IGlzc3VlZCB0aGUgZXZlbnQgJ3NlY3VyZUNvbm5lY3QnLiBXZSBjYW4ndCBkbyB0aGlzXG4gICAgICAgICAgICAgICAgLy8gaGVyZSBiZWNhdXNlIHNvbWUgc2VydmVycyB3aWxsIHN0YXJ0IHVwZ3JhZGluZyBhZnRlciB0aGVcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWZpYyB0cmFuc2ZlciByZXF1ZXN0IGhhcyBiZWVuIG1hZGUuIExpc3QgYW5kIGRvd25sb2FkIGRvbid0XG4gICAgICAgICAgICAgICAgLy8gaGF2ZSB0byB3YWl0IGZvciB0aGlzIGV2ZW50IGJlY2F1c2UgdGhlIHNlcnZlciBzZW5kcyB3aGVuZXZlciBpdFxuICAgICAgICAgICAgICAgIC8vIGlzIHJlYWR5LiBCdXQgZm9yIHVwbG9hZCB0aGlzIGhhcyB0byBiZSB0YWtlbiBpbnRvIGFjY291bnQsXG4gICAgICAgICAgICAgICAgLy8gc2VlIHRoZSBkZXRhaWxzIGluIHRoZSB1cGxvYWQoKSBmdW5jdGlvbiBiZWxvdy5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIExldCB0aGUgRlRQQ29udGV4dCBsaXN0ZW4gdG8gZXJyb3JzIGZyb20gbm93IG9uLCByZW1vdmUgbG9jYWwgaGFuZGxlci5cbiAgICAgICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIGhhbmRsZUNvbm5FcnIpO1xuICAgICAgICAgICAgZnRwLmRhdGFTb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5jb25uZWN0Rm9yUGFzc2l2ZVRyYW5zZmVyID0gY29ubmVjdEZvclBhc3NpdmVUcmFuc2Zlcjtcbi8qKlxuICogSGVscHMgcmVzb2x2aW5nL3JlamVjdGluZyB0cmFuc2ZlcnMuXG4gKlxuICogVGhpcyBpcyB1c2VkIGludGVybmFsbHkgZm9yIGFsbCBGVFAgdHJhbnNmZXJzLiBGb3IgZXhhbXBsZSB3aGVuIGRvd25sb2FkaW5nLCB0aGUgc2VydmVyIG1pZ2h0IGNvbmZpcm1cbiAqIHdpdGggXCIyMjYgVHJhbnNmZXIgY29tcGxldGVcIiB3aGVuIGluIGZhY3QgdGhlIGRvd25sb2FkIG9uIHRoZSBkYXRhIGNvbm5lY3Rpb24gaGFzIG5vdCBmaW5pc2hlZFxuICogeWV0LiBXaXRoIGFsbCB0cmFuc2ZlcnMgd2UgbWFrZSBzdXJlIHRoYXQgYSkgdGhlIHJlc3VsdCBhcnJpdmVkIGFuZCBiKSBoYXMgYmVlbiBjb25maXJtZWQgYnlcbiAqIGUuZy4gdGhlIGNvbnRyb2wgY29ubmVjdGlvbi4gV2UganVzdCBkb24ndCBrbm93IGluIHdoaWNoIG9yZGVyIHRoaXMgd2lsbCBoYXBwZW4uXG4gKi9cbmNsYXNzIFRyYW5zZmVyUmVzb2x2ZXIge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIGEgVHJhbnNmZXJSZXNvbHZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZ0cCwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5mdHAgPSBmdHA7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kYXRhVHJhbnNmZXJEb25lID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hcmsgdGhlIGJlZ2lubmluZyBvZiBhIHRyYW5zZmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSB0cmFuc2ZlciwgdXN1YWxseSB0aGUgZmlsZW5hbWUuXG4gICAgICogQHBhcmFtIHR5cGUgLSBUeXBlIG9mIHRyYW5zZmVyLCB1c3VhbGx5IFwidXBsb2FkXCIgb3IgXCJkb3dubG9hZFwiLlxuICAgICAqL1xuICAgIG9uRGF0YVN0YXJ0KG5hbWUsIHR5cGUpIHtcbiAgICAgICAgLy8gTGV0IHRoZSBkYXRhIHNvY2tldCBiZSBpbiBjaGFyZ2Ugb2YgdHJhY2tpbmcgdGltZW91dHMgZHVyaW5nIHRyYW5zZmVyLlxuICAgICAgICAvLyBUaGUgY29udHJvbCBzb2NrZXQgc2l0cyBpZGxlIGR1cmluZyB0aGlzIHRpbWUgYW55d2F5IGFuZCBtaWdodCBwcm92b2tlXG4gICAgICAgIC8vIGEgdGltZW91dCB1bm5lY2Vzc2FyaWx5LiBUaGUgY29udHJvbCBjb25uZWN0aW9uIHdpbGwgdGFrZSBjYXJlXG4gICAgICAgIC8vIG9mIHRpbWVvdXRzIGFnYWluIG9uY2UgZGF0YSB0cmFuc2ZlciBpcyBjb21wbGV0ZSBvciBmYWlsZWQuXG4gICAgICAgIGlmICh0aGlzLmZ0cC5kYXRhU29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgdHJhbnNmZXIgc2hvdWxkIHN0YXJ0IGJ1dCB0aGVyZSBpcyBubyBkYXRhIGNvbm5lY3Rpb24uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZnRwLnNvY2tldC5zZXRUaW1lb3V0KDApO1xuICAgICAgICB0aGlzLmZ0cC5kYXRhU29ja2V0LnNldFRpbWVvdXQodGhpcy5mdHAudGltZW91dCk7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3Muc3RhcnQodGhpcy5mdHAuZGF0YVNvY2tldCwgbmFtZSwgdHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhIGNvbm5lY3Rpb24gaGFzIGZpbmlzaGVkIHRoZSB0cmFuc2Zlci5cbiAgICAgKi9cbiAgICBvbkRhdGFEb25lKHRhc2spIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcy51cGRhdGVBbmRTdG9wKCk7XG4gICAgICAgIC8vIEhhbmQtb3ZlciB0aW1lb3V0IHRyYWNraW5nIGJhY2sgdG8gdGhlIGNvbnRyb2wgY29ubmVjdGlvbi4gSXQncyBwb3NzaWJsZSB0aGF0XG4gICAgICAgIC8vIHdlIGRvbid0IHJlY2VpdmUgdGhlIHJlc3BvbnNlIG92ZXIgdGhlIGNvbnRyb2wgY29ubmVjdGlvbiB0aGF0IHRoZSB0cmFuc2ZlciBpc1xuICAgICAgICAvLyBkb25lLiBJbiB0aGlzIGNhc2UsIHdlIHdhbnQgdG8gY29ycmVjdGx5IGFzc29jaWF0ZSB0aGUgcmVzdWx0aW5nIHRpbWVvdXQgd2l0aFxuICAgICAgICAvLyB0aGUgY29udHJvbCBjb25uZWN0aW9uLlxuICAgICAgICB0aGlzLmZ0cC5zb2NrZXQuc2V0VGltZW91dCh0aGlzLmZ0cC50aW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMuZnRwLmRhdGFTb2NrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuZnRwLmRhdGFTb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFUcmFuc2ZlckRvbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyeVJlc29sdmUodGFzayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjb250cm9sIGNvbm5lY3Rpb24gcmVwb3J0cyB0aGUgdHJhbnNmZXIgYXMgZmluaXNoZWQuXG4gICAgICovXG4gICAgb25Db250cm9sRG9uZSh0YXNrLCByZXNwb25zZSkge1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMudHJ5UmVzb2x2ZSh0YXNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gZXJyb3IgaGFzIGJlZW4gcmVwb3J0ZWQgYW5kIHRoZSB0YXNrIHNob3VsZCBiZSByZWplY3RlZC5cbiAgICAgKi9cbiAgICBvbkVycm9yKHRhc2ssIGVycikge1xuICAgICAgICB0aGlzLnByb2dyZXNzLnVwZGF0ZUFuZFN0b3AoKTtcbiAgICAgICAgdGhpcy5mdHAuc29ja2V0LnNldFRpbWVvdXQodGhpcy5mdHAudGltZW91dCk7XG4gICAgICAgIHRoaXMuZnRwLmRhdGFTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRhc2sucmVqZWN0KGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2wgY29ubmVjdGlvbiBzZW50IGFuIHVuZXhwZWN0ZWQgcmVxdWVzdCByZXF1aXJpbmcgYSByZXNwb25zZSBmcm9tIG91ciBwYXJ0LiBXZVxuICAgICAqIGNhbid0IHByb3ZpZGUgdGhhdCAoYmVjYXVzZSB1bmtub3duKSBhbmQgaGF2ZSB0byBjbG9zZSB0aGUgY29udHJleHQgd2l0aCBhbiBlcnJvciBiZWNhdXNlXG4gICAgICogdGhlIEZUUCBzZXJ2ZXIgaXMgbm93IGNhdWdodCB1cCBpbiBhIHN0YXRlIHdlIGNhbid0IHJlc29sdmUuXG4gICAgICovXG4gICAgb25VbmV4cGVjdGVkUmVxdWVzdChyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgRlRQIHJlc3BvbnNlIGlzIHJlcXVlc3RpbmcgYW4gYW5zd2VyOiAke3Jlc3BvbnNlLm1lc3NhZ2V9YCk7XG4gICAgICAgIHRoaXMuZnRwLmNsb3NlV2l0aEVycm9yKGVycik7XG4gICAgfVxuICAgIHRyeVJlc29sdmUodGFzaykge1xuICAgICAgICAvLyBUbyByZXNvbHZlLCB3ZSBuZWVkIGJvdGggY29udHJvbCBhbmQgZGF0YSBjb25uZWN0aW9uIHRvIHJlcG9ydCB0aGF0IHRoZSB0cmFuc2ZlciBpcyBkb25lLlxuICAgICAgICBjb25zdCBjYW5SZXNvbHZlID0gdGhpcy5kYXRhVHJhbnNmZXJEb25lICYmIHRoaXMucmVzcG9uc2UgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNhblJlc29sdmUpIHtcbiAgICAgICAgICAgIHRoaXMuZnRwLmRhdGFTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0YXNrLnJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1cGxvYWRGcm9tKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgVHJhbnNmZXJSZXNvbHZlcihjb25maWcuZnRwLCBjb25maWcudHJhY2tlcik7XG4gICAgY29uc3QgZnVsbENvbW1hbmQgPSBgJHtjb25maWcuY29tbWFuZH0gJHtjb25maWcucmVtb3RlUGF0aH1gO1xuICAgIHJldHVybiBjb25maWcuZnRwLmhhbmRsZShmdWxsQ29tbWFuZCwgKHJlcywgdGFzaykgPT4ge1xuICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmVyLm9uRXJyb3IodGFzaywgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXMuY29kZSA9PT0gMTUwIHx8IHJlcy5jb2RlID09PSAxMjUpIHsgLy8gUmVhZHkgdG8gdXBsb2FkXG4gICAgICAgICAgICBjb25zdCBkYXRhU29ja2V0ID0gY29uZmlnLmZ0cC5kYXRhU29ja2V0O1xuICAgICAgICAgICAgaWYgKCFkYXRhU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZXIub25FcnJvcih0YXNrLCBuZXcgRXJyb3IoXCJVcGxvYWQgc2hvdWxkIGJlZ2luIGJ1dCBubyBkYXRhIGNvbm5lY3Rpb24gaXMgYXZhaWxhYmxlLlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIFRMUywgd2UgaGF2ZSB0byB3YWl0IHVudGlsIHRoZSBkYXRhU29ja2V0IGlzc3VlZFxuICAgICAgICAgICAgLy8gJ3NlY3VyZUNvbm5lY3QnLiBJZiB0aGlzIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGdldENpcGhlcigpIHJldHVybnMgdW5kZWZpbmVkLlxuICAgICAgICAgICAgY29uc3QgY2FuVXBsb2FkID0gXCJnZXRDaXBoZXJcIiBpbiBkYXRhU29ja2V0ID8gZGF0YVNvY2tldC5nZXRDaXBoZXIoKSAhPT0gdW5kZWZpbmVkIDogdHJ1ZTtcbiAgICAgICAgICAgIG9uQ29uZGl0aW9uT3JFdmVudChjYW5VcGxvYWQsIGRhdGFTb2NrZXQsIFwic2VjdXJlQ29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmZ0cC5sb2coYFVwbG9hZGluZyB0byAke25ldFV0aWxzXzEuZGVzY3JpYmVBZGRyZXNzKGRhdGFTb2NrZXQpfSAoJHtuZXRVdGlsc18xLmRlc2NyaWJlVExTKGRhdGFTb2NrZXQpfSlgKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlci5vbkRhdGFTdGFydChjb25maWcucmVtb3RlUGF0aCwgY29uZmlnLnR5cGUpO1xuICAgICAgICAgICAgICAgIHNvdXJjZS5waXBlKGRhdGFTb2NrZXQpLm9uY2UoXCJmaW5pc2hcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhU29ja2V0LmRlc3Ryb3koKTsgLy8gRXhwbGljaXRseSBjbG9zZS9kZXN0cm95IHRoZSBzb2NrZXQgdG8gc2lnbmFsIHRoZSBlbmQuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVyLm9uRGF0YURvbmUodGFzayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJzZUNvbnRyb2xSZXNwb25zZV8xLnBvc2l0aXZlQ29tcGxldGlvbihyZXMuY29kZSkpIHsgLy8gVHJhbnNmZXIgY29tcGxldGVcbiAgICAgICAgICAgIHJlc29sdmVyLm9uQ29udHJvbERvbmUodGFzaywgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJzZUNvbnRyb2xSZXNwb25zZV8xLnBvc2l0aXZlSW50ZXJtZWRpYXRlKHJlcy5jb2RlKSkge1xuICAgICAgICAgICAgcmVzb2x2ZXIub25VbmV4cGVjdGVkUmVxdWVzdChyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElnbm9yZSBhbGwgb3RoZXIgcG9zaXRpdmUgcHJlbGltaW5hcnkgcmVzcG9uc2UgY29kZXMgKDwgMjAwKVxuICAgIH0pO1xufVxuZXhwb3J0cy51cGxvYWRGcm9tID0gdXBsb2FkRnJvbTtcbmZ1bmN0aW9uIGRvd25sb2FkVG8oZGVzdGluYXRpb24sIGNvbmZpZykge1xuICAgIGlmICghY29uZmlnLmZ0cC5kYXRhU29ja2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvd25sb2FkIHdpbGwgYmUgaW5pdGlhdGVkIGJ1dCBubyBkYXRhIGNvbm5lY3Rpb24gaXMgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IGRhdGEgdHJhbnNtaXNzaW9uIGJlZ2lucyBiZWZvcmUgdGhlIGNvbnRyb2wgc29ja2V0XG4gICAgLy8gcmVjZWl2ZXMgdGhlIGFubm91bmNlbWVudC4gU3RhcnQgbGlzdGVuaW5nIGZvciBkYXRhIGltbWVkaWF0ZWx5LlxuICAgIGNvbmZpZy5mdHAuZGF0YVNvY2tldC5waXBlKGRlc3RpbmF0aW9uKTtcbiAgICBjb25zdCByZXNvbHZlciA9IG5ldyBUcmFuc2ZlclJlc29sdmVyKGNvbmZpZy5mdHAsIGNvbmZpZy50cmFja2VyKTtcbiAgICByZXR1cm4gY29uZmlnLmZ0cC5oYW5kbGUoY29uZmlnLmNvbW1hbmQsIChyZXMsIHRhc2spID0+IHtcbiAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXNvbHZlci5vbkVycm9yKHRhc2ssIHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzLmNvZGUgPT09IDE1MCB8fCByZXMuY29kZSA9PT0gMTI1KSB7IC8vIFJlYWR5IHRvIGRvd25sb2FkXG4gICAgICAgICAgICBjb25zdCBkYXRhU29ja2V0ID0gY29uZmlnLmZ0cC5kYXRhU29ja2V0O1xuICAgICAgICAgICAgaWYgKCFkYXRhU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZXIub25FcnJvcih0YXNrLCBuZXcgRXJyb3IoXCJEb3dubG9hZCBzaG91bGQgYmVnaW4gYnV0IG5vIGRhdGEgY29ubmVjdGlvbiBpcyBhdmFpbGFibGUuXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuZnRwLmxvZyhgRG93bmxvYWRpbmcgZnJvbSAke25ldFV0aWxzXzEuZGVzY3JpYmVBZGRyZXNzKGRhdGFTb2NrZXQpfSAoJHtuZXRVdGlsc18xLmRlc2NyaWJlVExTKGRhdGFTb2NrZXQpfSlgKTtcbiAgICAgICAgICAgIHJlc29sdmVyLm9uRGF0YVN0YXJ0KGNvbmZpZy5yZW1vdGVQYXRoLCBjb25maWcudHlwZSk7XG4gICAgICAgICAgICBvbkNvbmRpdGlvbk9yRXZlbnQoaXNXcml0YWJsZUZpbmlzaGVkKGRlc3RpbmF0aW9uKSwgZGVzdGluYXRpb24sIFwiZmluaXNoXCIsICgpID0+IHJlc29sdmVyLm9uRGF0YURvbmUodGFzaykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlcy5jb2RlID09PSAzNTApIHsgLy8gUmVzdGFydGluZyBhdCBzdGFydEF0LlxuICAgICAgICAgICAgY29uZmlnLmZ0cC5zZW5kKFwiUkVUUiBcIiArIGNvbmZpZy5yZW1vdGVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJzZUNvbnRyb2xSZXNwb25zZV8xLnBvc2l0aXZlQ29tcGxldGlvbihyZXMuY29kZSkpIHsgLy8gVHJhbnNmZXIgY29tcGxldGVcbiAgICAgICAgICAgIHJlc29sdmVyLm9uQ29udHJvbERvbmUodGFzaywgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJzZUNvbnRyb2xSZXNwb25zZV8xLnBvc2l0aXZlSW50ZXJtZWRpYXRlKHJlcy5jb2RlKSkge1xuICAgICAgICAgICAgcmVzb2x2ZXIub25VbmV4cGVjdGVkUmVxdWVzdChyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElnbm9yZSBhbGwgb3RoZXIgcG9zaXRpdmUgcHJlbGltaW5hcnkgcmVzcG9uc2UgY29kZXMgKDwgMjAwKVxuICAgIH0pO1xufVxuZXhwb3J0cy5kb3dubG9hZFRvID0gZG93bmxvYWRUbztcbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBpbW1lZGlhdGVseSBpZiBhIGNvbmRpdGlvbiBpcyBtZXQgb3Igc3Vic2NyaWJlcyB0byBhbiBldmVudCBhbmQgY2FsbHNcbiAqIGl0IG9uY2UgdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gKlxuICogQHBhcmFtIGNvbmRpdGlvbiAgVGhlIGNvbmRpdGlvbiB0byB0ZXN0LlxuICogQHBhcmFtIGVtaXR0ZXIgIFRoZSBlbWl0dGVyIHRvIHVzZSBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBAcGFyYW0gZXZlbnROYW1lICBUaGUgZXZlbnQgdG8gc3Vic2NyaWJlIHRvIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIEBwYXJhbSBhY3Rpb24gIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICovXG5mdW5jdGlvbiBvbkNvbmRpdGlvbk9yRXZlbnQoY29uZGl0aW9uLCBlbWl0dGVyLCBldmVudE5hbWUsIGFjdGlvbikge1xuICAgIGlmIChjb25kaXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgYWN0aW9uKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbWl0dGVyLm9uY2UoZXZlbnROYW1lLCAoKSA9PiBhY3Rpb24oKSk7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlY3Qgd2hldGhlciBhIHdyaXRhYmxlIHN0cmVhbSBpcyBmaW5pc2hlZCwgc3VwcG9ydGluZyBOb2RlIDguXG4gKiBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzNlMmEzMDA3MTA3YjdhMTAwNzk0ZjRlNGFkYmRlMTkyNjNmYzc0NjQvbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcyNMMjgtTDMzXG4gKi9cbmZ1bmN0aW9uIGlzV3JpdGFibGVGaW5pc2hlZChzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtLndyaXRhYmxlRmluaXNoZWQpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgICBpZiAoIXdTdGF0ZSB8fCB3U3RhdGUuZXJyb3JlZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB3U3RhdGUuZmluaXNoZWQgfHwgKHdTdGF0ZS5lbmRlZCAmJiB3U3RhdGUubGVuZ3RoID09PSAwKTtcbn1cbiIsImltcG9ydCB7IEZpbGVJbmZvLCBGaWxlVHlwZSB9IGZyb20gJ2Jhc2ljLWZ0cCc7XG5cbmltcG9ydCB7IElGaWxlLCBJRmlsZVR5cGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuY29uc3QgTVNET1NfREFURV9SRUdFWCA9IC9bMC05XVswLTldLVswLTldWzAtOV0tWzAtOV1bMC05XVxcc1swLTldWzAtOV1cXDpbMC05XVswLTldW1BBXU0vZ2k7XG5cbmV4cG9ydCBjbGFzcyBGdHBVdGlscyB7XG4gIC8qKlxuICAgKiBGb3JtYXRzIHJhdyBmaWxlIGluZm8uXG4gICAqIERvZXNuJ3QgaW5jbHVkZSBgbGFzdE1vZGlmaWVkYC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9ybWF0RmlsZShmaWxlOiBGaWxlSW5mbyk6IElGaWxlIHtcbiAgICBjb25zdCB7IHBlcm1pc3Npb25zLCBuYW1lLCBzaXplLCB1c2VyLCBncm91cCwgdHlwZSB9ID0gZmlsZTtcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lLFxuICAgICAgdHlwZTogdGhpcy5nZXRGaWxlVHlwZSh0eXBlKSxcbiAgICAgIHNpemUsXG4gICAgICBvd25lcjogdXNlcixcbiAgICAgIGdyb3VwLFxuICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgb3duZXI6IHBlcm1pc3Npb25zPy51c2VyLFxuICAgICAgICBncm91cDogcGVybWlzc2lvbnM/Lmdyb3VwLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRGaWxlVHlwZSh0eXBlOiBGaWxlVHlwZSk6IElGaWxlVHlwZSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEZpbGVUeXBlLkRpcmVjdG9yeToge1xuICAgICAgICByZXR1cm4gJ2ZvbGRlcic7XG4gICAgICB9XG4gICAgICBjYXNlIEZpbGVUeXBlLkZpbGU6IHtcbiAgICAgICAgcmV0dXJuICdmaWxlJztcbiAgICAgIH1cbiAgICAgIGNhc2UgRmlsZVR5cGUuU3ltYm9saWNMaW5rOiB7XG4gICAgICAgIHJldHVybiAnc3ltYm9saWMtbGluayc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIG1zLWRvcyBkYXRlIGFuZCBKUyBkYXRlIG9iamVjdCBmb3JtYXRzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRWYWxpZERhdGUoc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkYXRlID0gc3RyLnRyaW0oKTtcblxuICAgIGNvbnN0IG1hdGNoID0gZGF0ZS5tYXRjaChNU0RPU19EQVRFX1JFR0VYKTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICB9XG5cbiAgICBjb25zdCBbbW9udGgsIGRheSwgeWVhciwgX2hvdXIsIG1pbnV0ZXNdID0gZGF0ZS5tYXRjaCgvWzAtOV1bMC05XS9nKTtcblxuICAgIGxldCBob3VyID0gcGFyc2VJbnQoX2hvdXIpO1xuXG4gICAgaWYgKGRhdGVbZGF0ZS5sZW5ndGggLSAyXSA9PT0gJ1AnKSB7XG4gICAgICBob3VyICs9IDEyO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgIHBhcnNlSW50KGAyMCR7eWVhcn1gKSxcbiAgICAgIHBhcnNlSW50KG1vbnRoKSAtIDEsXG4gICAgICBwYXJzZUludChkYXkpLFxuICAgICAgaG91cixcbiAgICAgIHBhcnNlSW50KG1pbnV0ZXMpLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldERhdGVGcm9tVW5peFRpbWUodGltZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWUgKiAxMDAwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgV3JpdGFibGUsIFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSAnbmV0JztcbmltcG9ydCB7IENsaWVudCwgU0ZUUFdyYXBwZXIsIENsaWVudENoYW5uZWwgfSBmcm9tICdzc2gyJztcbmltcG9ydCB7IFN0YXRzLCBGaWxlRW50cnkgfSBmcm9tICdzc2gyLXN0cmVhbXMnO1xuaW1wb3J0IHsgRmlsZUluZm8sIHBhcnNlTGlzdCB9IGZyb20gJ2Jhc2ljLWZ0cCc7XG5cbmltcG9ydCB7IFN0cmF0ZWd5IH0gZnJvbSAnLi9zdHJhdGVneSc7XG5pbXBvcnQge1xuICBJRmlsZSxcbiAgSVRyYW5zZmVyT3B0aW9ucyxcbiAgSUZ0cENvbmZpZyxcbiAgSVNGdHBPcHRpb25zLFxuICBJVHJhbnNmZXJJbmZvLFxufSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEZ0cFV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvZnRwJztcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNmdHBTdHJhdGVneSB7XG4gIGNvbmZpZzogSUZ0cENvbmZpZztcbiAgb3B0aW9uczogSVNGdHBPcHRpb25zO1xufVxuXG5leHBvcnQgY2xhc3MgU2Z0cFN0cmF0ZWd5IGV4dGVuZHMgU3RyYXRlZ3kge1xuICBwcm90ZWN0ZWQgY2xpZW50OiBDbGllbnQ7XG5cbiAgcHJvdGVjdGVkIHdyYXBwZXI6IFNGVFBXcmFwcGVyO1xuXG4gIHB1YmxpYyBjb25uZWN0ZWQgPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgZ2V0IHNvY2tldCgpOiBTb2NrZXQge1xuICAgIHJldHVybiAodGhpcy5jbGllbnQgYXMgYW55KS5fc29jaztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRXcmFwcGVyKCk6IFNGVFBXcmFwcGVyIHtcbiAgICByZXR1cm4gcHJvbWlzaWZ5KHRoaXMuY2xpZW50LnNmdHApLmJpbmQodGhpcy5jbGllbnQpKCk7XG4gIH1cblxuICBjb25uZWN0ID0gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KCk7XG5cbiAgICAgIGNvbnN0IGNsZWFuID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoJ3JlYWR5Jywgb25SZWFkeSk7XG4gICAgICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKFxuICAgICAgICAgICdrZXlib2FyZC1pbnRlcmFjdGl2ZScsXG4gICAgICAgICAgdGhpcy5vbktleWJvYXJkSW50ZXJhY3RpdmUsXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBvbkVycm9yID0gKGUpID0+IHtcbiAgICAgICAgY2xlYW4oKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgb25SZWFkeSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY2xlYW4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMud3JhcHBlciA9IGF3YWl0IHRoaXMuZ2V0V3JhcHBlcigpO1xuICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcblxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY2xlYW4oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5jbGllbnQub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2UoJ3JlYWR5Jywgb25SZWFkeSk7XG4gICAgICB0aGlzLmNsaWVudC5vbmNlKCdlbmQnLCB0aGlzLm9uRGlzY29ubmVjdCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnM/LnRyeUtleWJvYXJkKSB7XG4gICAgICAgIHRoaXMuY2xpZW50Lm9uY2UoJ2tleWJvYXJkLWludGVyYWN0aXZlJywgdGhpcy5vbktleWJvYXJkSW50ZXJhY3RpdmUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsaWVudC5jb25uZWN0KHtcbiAgICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICAgIHVzZXJuYW1lOiB0aGlzLmNvbmZpZy51c2VyLFxuICAgICAgICByZWFkeVRpbWVvdXQ6IHRoaXMub3B0aW9ucz8udGltZW91dCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHByb3RlY3RlZCBvbktleWJvYXJkSW50ZXJhY3RpdmUgPSAoXG4gICAgbmFtZSxcbiAgICBpbnN0cnVjdGlvbnMsXG4gICAgaW5zdHJ1Y3Rpb25zTGFuZyxcbiAgICBwcm9tcHRzLFxuICAgIGZpbmlzaCxcbiAgKSA9PiB7XG4gICAgZmluaXNoKFt0aGlzLmNvbmZpZy5wYXNzd29yZF0pO1xuICB9O1xuXG4gIHByb3RlY3RlZCBvbkRpc2Nvbm5lY3QgPSAoKSA9PiB7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuY2xpZW50ID0gbnVsbDtcbiAgICB0aGlzLndyYXBwZXIgPSBudWxsO1xuXG4gICAgdGhpcy5lbWl0KCdkaXNjb25uZWN0Jyk7XG4gIH07XG5cbiAgZGlzY29ubmVjdCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLnNvY2tldC5vbmNlKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2xpZW50LmVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgZG93bmxvYWQgPSBhc3luYyAoXG4gICAgZGVzdDogV3JpdGFibGUsXG4gICAgaW5mbzogSVRyYW5zZmVySW5mbyxcbiAgICBvcHRpb25zPzogSVRyYW5zZmVyT3B0aW9ucyxcbiAgKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gdGhpcy53cmFwcGVyPy5jcmVhdGVSZWFkU3RyZWFtKGluZm8ucmVtb3RlUGF0aCwge1xuICAgICAgc3RhcnQ6IGluZm8uc3RhcnRBdCxcbiAgICAgIGF1dG9DbG9zZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKHNvdXJjZSwgZGVzdCwgaW5mbywgb3B0aW9ucyk7XG4gIH07XG5cbiAgdXBsb2FkID0gYXN5bmMgKFxuICAgIHNvdXJjZTogUmVhZGFibGUsXG4gICAgaW5mbzogSVRyYW5zZmVySW5mbyxcbiAgICBvcHRpb25zPzogSVRyYW5zZmVyT3B0aW9ucyxcbiAgKSA9PiB7XG4gICAgY29uc3QgZGVzdCA9IHRoaXMud3JhcHBlcj8uY3JlYXRlV3JpdGVTdHJlYW0oaW5mby5yZW1vdGVQYXRoKTtcblxuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKHNvdXJjZSwgZGVzdCwgaW5mbywgb3B0aW9ucyk7XG4gIH07XG5cbiAgbGlzdCA9IChwYXRoID0gJy4vJykgPT4ge1xuICAgIHJldHVybiB0aGlzLl9saXN0KHBhdGgpLnRoZW4oKGZpbGVzKSA9PlxuICAgICAgZmlsZXM/Lm1hcCgocikgPT4gdGhpcy5mb3JtYXRGaWxlKHBhcnNlTGlzdChyLmxvbmduYW1lKVswXSwgcikpLFxuICAgICk7XG4gIH07XG5cbiAgcHJvdGVjdGVkIGZvcm1hdEZpbGUgPSAoZmlsZTogRmlsZUluZm8sIGVudHJ5OiBGaWxlRW50cnkpOiBJRmlsZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLkZ0cFV0aWxzLmZvcm1hdEZpbGUoZmlsZSksXG4gICAgICBsYXN0TW9kaWZpZWQ6IEZ0cFV0aWxzLmdldERhdGVGcm9tVW5peFRpbWUoZW50cnkuYXR0cnMubXRpbWUpLFxuICAgIH07XG4gIH07XG5cbiAgcHJvdGVjdGVkIF9saXN0KHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZTxGaWxlRW50cnlbXT4odGhpcy53cmFwcGVyPy5yZWFkZGlyLCBwYXRoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfc3RhdChwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGU8U3RhdHM+KHRoaXMud3JhcHBlcj8uc3RhdCwgcGF0aCk7XG4gIH1cblxuICBzaXplID0gKHBhdGgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdChwYXRoKS50aGVuKChyKSA9PiByPy5zaXplKTtcbiAgfTtcblxuICBleGlzdHMgPSBhc3luYyAocGF0aDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuX3N0YXQocGF0aCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgbW92ZSA9IChzb3VyY2UsIGRlc3QpID0+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGUodGhpcy53cmFwcGVyPy5yZW5hbWUsIHNvdXJjZSwgZGVzdCk7XG4gIH07XG5cbiAgcmVtb3ZlRmlsZSA9IChwYXRoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlKHRoaXMud3JhcHBlcj8udW5saW5rLCBwYXRoKTtcbiAgfTtcblxuICByZW1vdmVFbXB0eUZvbGRlciA9IChwYXRoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlKHRoaXMud3JhcHBlcj8ucm1kaXIsIHBhdGgpO1xuICB9O1xuXG4gIHJlbW92ZUZvbGRlciA9IGFzeW5jIChwYXRoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLl9saXN0KHBhdGgpO1xuXG4gICAgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aCArICcvJyArIGZpbGUuZmlsZW5hbWU7XG5cbiAgICAgICAgaWYgKChmaWxlLmF0dHJzIGFzIGFueSkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlRm9sZGVyKGZpbGVQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZUZpbGUoZmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5yZW1vdmVFbXB0eUZvbGRlcihwYXRoKTtcbiAgfTtcblxuICBjcmVhdGVGb2xkZXIgPSAocGF0aCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZSh0aGlzLndyYXBwZXI/Lm1rZGlyLCBwYXRoKTtcbiAgfTtcblxuICBjcmVhdGVFbXB0eUZpbGUgPSBhc3luYyAocGF0aCkgPT4ge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHRoaXMuX29wZW4ocGF0aCwgJ3cnKTtcblxuICAgIGlmIChidWZmZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuX2Nsb3NlKGJ1ZmZlcik7XG4gICAgfVxuICB9O1xuXG4gIHByb3RlY3RlZCBfb3BlbihwYXRoOiBzdHJpbmcsIG1vZGU6IHN0cmluZyB8IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZTxCdWZmZXI+KHRoaXMud3JhcHBlcj8ub3BlbiwgcGF0aCwgbW9kZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2Nsb3NlKGJ1ZmZlcjogQnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlKHRoaXMud3JhcHBlcj8uY2xvc2UsIGJ1ZmZlcik7XG4gIH1cblxuICBwd2QgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlPHN0cmluZz4odGhpcy53cmFwcGVyPy5yZWFscGF0aCwgJy4vJyk7XG4gIH07XG5cbiAgc2VuZCA9IGFzeW5jIChjb21tYW5kKSA9PiB7XG4gICAgbGV0IHN0cmVhbTogQ2xpZW50Q2hhbm5lbDtcbiAgICBsZXQgZGF0YSA9ICcnO1xuXG4gICAgYXdhaXQgdGhpcy5oYW5kbGVOZXR3b3JrKFxuICAgICAgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudC5leGVjKGNvbW1hbmQsIChlcnIsIHN0cmVhbSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcblxuICAgICAgICAgIHN0cmVhbS5vbignZGF0YScsIChjaHVuazogQnVmZmVyKSA9PiB7XG4gICAgICAgICAgICBkYXRhICs9IGNodW5rO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc3RyZWFtLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgICBzdHJlYW0ub25jZSgnY2xvc2UnLCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgc3RyZWFtLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHByb3RlY3RlZCBoYW5kbGUgPSA8VCA9IHZvaWQ+KGZuOiBGdW5jdGlvbiwgLi4uYXJnczogYW55W10pID0+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVOZXR3b3JrPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghZm4pIHJldHVybiByZXNvbHZlKG51bGwpO1xuXG4gICAgICBmbi5iaW5kKHRoaXMud3JhcHBlcikoLi4uYXJncywgKGVyciwgLi4uZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIHJlc29sdmUoLi4uZGF0YSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgaGFuZGxlVHJhbnNmZXIgPSAoXG4gICAgc291cmNlOiBSZWFkYWJsZSxcbiAgICBkZXN0OiBXcml0YWJsZSxcbiAgICBpbmZvOiBJVHJhbnNmZXJJbmZvLFxuICAgIG9wdGlvbnM6IElUcmFuc2Zlck9wdGlvbnMsXG4gICkgPT4ge1xuICAgIGlmICghc291cmNlIHx8ICFkZXN0KSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnByZXBhcmVUcmFuc2ZlcihpbmZvLCBvcHRpb25zKTtcblxuICAgIHJldHVybiB0aGlzLmhhbmRsZU5ldHdvcmsoXG4gICAgICAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBidWZmZXJlZCA9IDA7XG5cbiAgICAgICAgc291cmNlLm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICBidWZmZXJlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGhhbmRsZXIoYnVmZmVyZWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzb3VyY2Uub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgICBzb3VyY2Uub25jZSgnY2xvc2UnLCByZXNvbHZlKTtcblxuICAgICAgICBzb3VyY2UucGlwZShkZXN0KTtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHNvdXJjZS51bnBpcGUoZGVzdCk7XG4gICAgICAgIHNvdXJjZS5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5maW5pc2hUcmFuc2ZlcigpO1xuICAgICAgfSxcbiAgICApO1xuICB9O1xufVxuIiwidmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJ25ldCcpLlNvY2tldDtcbnZhciBkbnNMb29rdXAgPSByZXF1aXJlKCdkbnMnKS5sb29rdXA7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzO1xudmFyIEhBU0hFUyA9IGNyeXB0by5nZXRIYXNoZXMoKTtcblxudmFyIHNzaDJfc3RyZWFtcyA9IHJlcXVpcmUoJ3NzaDItc3RyZWFtcycpO1xudmFyIFNTSDJTdHJlYW0gPSBzc2gyX3N0cmVhbXMuU1NIMlN0cmVhbTtcbnZhciBTRlRQU3RyZWFtID0gc3NoMl9zdHJlYW1zLlNGVFBTdHJlYW07XG52YXIgY29uc3RzID0gc3NoMl9zdHJlYW1zLmNvbnN0YW50cztcbnZhciBCVUdTID0gY29uc3RzLkJVR1M7XG52YXIgQUxHT1JJVEhNUyA9IGNvbnN0cy5BTEdPUklUSE1TO1xudmFyIEVERFNBX1NVUFBPUlRFRCA9IGNvbnN0cy5FRERTQV9TVVBQT1JURUQ7XG52YXIgcGFyc2VLZXkgPSBzc2gyX3N0cmVhbXMudXRpbHMucGFyc2VLZXk7XG5cbnZhciBIVFRQQWdlbnRzID0gcmVxdWlyZSgnLi9odHRwLWFnZW50cycpO1xudmFyIENoYW5uZWwgPSByZXF1aXJlKCcuL0NoYW5uZWwnKTtcbnZhciBhZ2VudFF1ZXJ5ID0gcmVxdWlyZSgnLi9hZ2VudCcpO1xudmFyIFNGVFBXcmFwcGVyID0gcmVxdWlyZSgnLi9TRlRQV3JhcHBlcicpO1xudmFyIHJlYWRVSW50MzJCRSA9IHJlcXVpcmUoJy4vYnVmZmVyLWhlbHBlcnMnKS5yZWFkVUludDMyQkU7XG5cbnZhciBNQVhfQ0hBTk5FTCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG52YXIgUkVfT1BFTlNTSCA9IC9eT3BlblNTSF8oPzooPyFbMC00XSlcXGQpfCg/OlxcZHsyLH0pLztcbnZhciBERUJVR19OT09QID0gZnVuY3Rpb24obXNnKSB7fTtcblxuZnVuY3Rpb24gQ2xpZW50KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2xpZW50KSlcbiAgICByZXR1cm4gbmV3IENsaWVudCgpO1xuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuY29uZmlnID0ge1xuICAgIGhvc3Q6IHVuZGVmaW5lZCxcbiAgICBwb3J0OiB1bmRlZmluZWQsXG4gICAgbG9jYWxBZGRyZXNzOiB1bmRlZmluZWQsXG4gICAgbG9jYWxQb3J0OiB1bmRlZmluZWQsXG4gICAgZm9yY2VJUHY0OiB1bmRlZmluZWQsXG4gICAgZm9yY2VJUHY2OiB1bmRlZmluZWQsXG4gICAga2VlcGFsaXZlQ291bnRNYXg6IHVuZGVmaW5lZCxcbiAgICBrZWVwYWxpdmVJbnRlcnZhbDogdW5kZWZpbmVkLFxuICAgIHJlYWR5VGltZW91dDogdW5kZWZpbmVkLFxuXG4gICAgdXNlcm5hbWU6IHVuZGVmaW5lZCxcbiAgICBwYXNzd29yZDogdW5kZWZpbmVkLFxuICAgIHByaXZhdGVLZXk6IHVuZGVmaW5lZCxcbiAgICB0cnlLZXlib2FyZDogdW5kZWZpbmVkLFxuICAgIGFnZW50OiB1bmRlZmluZWQsXG4gICAgYWxsb3dBZ2VudEZ3ZDogdW5kZWZpbmVkLFxuICAgIGF1dGhIYW5kbGVyOiB1bmRlZmluZWQsXG5cbiAgICBob3N0SGFzaEFsZ286IHVuZGVmaW5lZCxcbiAgICBob3N0SGFzaENiOiB1bmRlZmluZWQsXG4gICAgc3RyaWN0VmVuZG9yOiB1bmRlZmluZWQsXG4gICAgZGVidWc6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHRoaXMuX3JlYWR5VGltZW91dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY2hhbm5lbHMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZm9yd2FyZGluZyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZm9yd2FyZGluZ1VuaXggPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2FjY2VwdFgxMSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fYWdlbnRGd2RFbmFibGVkID0gdW5kZWZpbmVkO1xuICB0aGlzLl9jdXJDaGFuID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZW1vdGVWZXIgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5fc3Noc3RyZWFtID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zb2NrID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZXNldEtBID0gdW5kZWZpbmVkO1xufVxuaW5oZXJpdHMoQ2xpZW50LCBFdmVudEVtaXR0ZXIpO1xuXG5DbGllbnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjZmcpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLl9zb2NrICYmIHRoaXMuX3NvY2sud3JpdGFibGUpIHtcbiAgICB0aGlzLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmNvbm5lY3QoY2ZnKTtcbiAgICB9KTtcbiAgICB0aGlzLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuY29uZmlnLmhvc3QgPSBjZmcuaG9zdG5hbWUgfHwgY2ZnLmhvc3QgfHwgJ2xvY2FsaG9zdCc7XG4gIHRoaXMuY29uZmlnLnBvcnQgPSBjZmcucG9ydCB8fCAyMjtcbiAgdGhpcy5jb25maWcubG9jYWxBZGRyZXNzID0gKHR5cGVvZiBjZmcubG9jYWxBZGRyZXNzID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcubG9jYWxBZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gIHRoaXMuY29uZmlnLmxvY2FsUG9ydCA9ICh0eXBlb2YgY2ZnLmxvY2FsUG9ydCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHR5cGVvZiBjZmcubG9jYWxQb3J0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcubG9jYWxQb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gIHRoaXMuY29uZmlnLmZvcmNlSVB2NCA9IGNmZy5mb3JjZUlQdjQgfHwgZmFsc2U7XG4gIHRoaXMuY29uZmlnLmZvcmNlSVB2NiA9IGNmZy5mb3JjZUlQdjYgfHwgZmFsc2U7XG4gIHRoaXMuY29uZmlnLmtlZXBhbGl2ZUNvdW50TWF4ID0gKHR5cGVvZiBjZmcua2VlcGFsaXZlQ291bnRNYXggPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGNmZy5rZWVwYWxpdmVDb3VudE1heCA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2ZnLmtlZXBhbGl2ZUNvdW50TWF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMyk7XG4gIHRoaXMuY29uZmlnLmtlZXBhbGl2ZUludGVydmFsID0gKHR5cGVvZiBjZmcua2VlcGFsaXZlSW50ZXJ2YWwgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGNmZy5rZWVwYWxpdmVJbnRlcnZhbCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcua2VlcGFsaXZlSW50ZXJ2YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKTtcbiAgdGhpcy5jb25maWcucmVhZHlUaW1lb3V0ID0gKHR5cGVvZiBjZmcucmVhZHlUaW1lb3V0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY2ZnLnJlYWR5VGltZW91dCA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNmZy5yZWFkeVRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMjAwMDApO1xuXG4gIHZhciBhbGdvcml0aG1zID0ge1xuICAgIGtleDogdW5kZWZpbmVkLFxuICAgIGtleEJ1ZjogdW5kZWZpbmVkLFxuICAgIGNpcGhlcjogdW5kZWZpbmVkLFxuICAgIGNpcGhlckJ1ZjogdW5kZWZpbmVkLFxuICAgIHNlcnZlckhvc3RLZXk6IHVuZGVmaW5lZCxcbiAgICBzZXJ2ZXJIb3N0S2V5QnVmOiB1bmRlZmluZWQsXG4gICAgaG1hYzogdW5kZWZpbmVkLFxuICAgIGhtYWNCdWY6IHVuZGVmaW5lZCxcbiAgICBjb21wcmVzczogdW5kZWZpbmVkLFxuICAgIGNvbXByZXNzQnVmOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIGk7XG4gIGlmICh0eXBlb2YgY2ZnLmFsZ29yaXRobXMgPT09ICdvYmplY3QnICYmIGNmZy5hbGdvcml0aG1zICE9PSBudWxsKSB7XG4gICAgdmFyIGFsZ29zU3VwcG9ydGVkO1xuICAgIHZhciBhbGdvTGlzdDtcblxuICAgIGFsZ29MaXN0ID0gY2ZnLmFsZ29yaXRobXMua2V4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFsZ29MaXN0KSAmJiBhbGdvTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBhbGdvc1N1cHBvcnRlZCA9IEFMR09SSVRITVMuU1VQUE9SVEVEX0tFWDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhbGdvTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYWxnb3NTdXBwb3J0ZWQuaW5kZXhPZihhbGdvTGlzdFtpXSkgPT09IC0xKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQga2V5IGV4Y2hhbmdlIGFsZ29yaXRobTogJyArIGFsZ29MaXN0W2ldKTtcbiAgICAgIH1cbiAgICAgIGFsZ29yaXRobXMua2V4ID0gYWxnb0xpc3Q7XG4gICAgfVxuXG4gICAgYWxnb0xpc3QgPSBjZmcuYWxnb3JpdGhtcy5jaXBoZXI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb0xpc3QpICYmIGFsZ29MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGFsZ29zU3VwcG9ydGVkID0gQUxHT1JJVEhNUy5TVVBQT1JURURfQ0lQSEVSO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFsZ29MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhbGdvc1N1cHBvcnRlZC5pbmRleE9mKGFsZ29MaXN0W2ldKSA9PT0gLTEpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjaXBoZXIgYWxnb3JpdGhtOiAnICsgYWxnb0xpc3RbaV0pO1xuICAgICAgfVxuICAgICAgYWxnb3JpdGhtcy5jaXBoZXIgPSBhbGdvTGlzdDtcbiAgICB9XG5cbiAgICBhbGdvTGlzdCA9IGNmZy5hbGdvcml0aG1zLnNlcnZlckhvc3RLZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb0xpc3QpICYmIGFsZ29MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGFsZ29zU3VwcG9ydGVkID0gQUxHT1JJVEhNUy5TVVBQT1JURURfU0VSVkVSX0hPU1RfS0VZO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFsZ29MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhbGdvc1N1cHBvcnRlZC5pbmRleE9mKGFsZ29MaXN0W2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHNlcnZlciBob3N0IGtleSBhbGdvcml0aG06ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYWxnb0xpc3RbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhbGdvcml0aG1zLnNlcnZlckhvc3RLZXkgPSBhbGdvTGlzdDtcbiAgICB9XG5cbiAgICBhbGdvTGlzdCA9IGNmZy5hbGdvcml0aG1zLmhtYWM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb0xpc3QpICYmIGFsZ29MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGFsZ29zU3VwcG9ydGVkID0gQUxHT1JJVEhNUy5TVVBQT1JURURfSE1BQztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhbGdvTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYWxnb3NTdXBwb3J0ZWQuaW5kZXhPZihhbGdvTGlzdFtpXSkgPT09IC0xKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgSE1BQyBhbGdvcml0aG06ICcgKyBhbGdvTGlzdFtpXSk7XG4gICAgICB9XG4gICAgICBhbGdvcml0aG1zLmhtYWMgPSBhbGdvTGlzdDtcbiAgICB9XG5cbiAgICBhbGdvTGlzdCA9IGNmZy5hbGdvcml0aG1zLmNvbXByZXNzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFsZ29MaXN0KSAmJiBhbGdvTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBhbGdvc1N1cHBvcnRlZCA9IEFMR09SSVRITVMuU1VQUE9SVEVEX0NPTVBSRVNTO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFsZ29MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhbGdvc1N1cHBvcnRlZC5pbmRleE9mKGFsZ29MaXN0W2ldKSA9PT0gLTEpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjb21wcmVzc2lvbiBhbGdvcml0aG06ICcgKyBhbGdvTGlzdFtpXSk7XG4gICAgICB9XG4gICAgICBhbGdvcml0aG1zLmNvbXByZXNzID0gYWxnb0xpc3Q7XG4gICAgfVxuICB9XG4gIGlmIChhbGdvcml0aG1zLmNvbXByZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoY2ZnLmNvbXByZXNzKSB7XG4gICAgICBhbGdvcml0aG1zLmNvbXByZXNzID0gWyd6bGliQG9wZW5zc2guY29tJywgJ3psaWInXTtcbiAgICAgIGlmIChjZmcuY29tcHJlc3MgIT09ICdmb3JjZScpXG4gICAgICAgIGFsZ29yaXRobXMuY29tcHJlc3MucHVzaCgnbm9uZScpO1xuICAgIH0gZWxzZSBpZiAoY2ZnLmNvbXByZXNzID09PSBmYWxzZSlcbiAgICAgIGFsZ29yaXRobXMuY29tcHJlc3MgPSBbJ25vbmUnXTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2ZnLnVzZXJuYW1lID09PSAnc3RyaW5nJylcbiAgICB0aGlzLmNvbmZpZy51c2VybmFtZSA9IGNmZy51c2VybmFtZTtcbiAgZWxzZSBpZiAodHlwZW9mIGNmZy51c2VyID09PSAnc3RyaW5nJylcbiAgICB0aGlzLmNvbmZpZy51c2VybmFtZSA9IGNmZy51c2VyO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVzZXJuYW1lJyk7XG5cbiAgdGhpcy5jb25maWcucGFzc3dvcmQgPSAodHlwZW9mIGNmZy5wYXNzd29yZCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcucGFzc3dvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICB0aGlzLmNvbmZpZy5wcml2YXRlS2V5ID0gKHR5cGVvZiBjZmcucHJpdmF0ZUtleSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBCdWZmZXIuaXNCdWZmZXIoY2ZnLnByaXZhdGVLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcucHJpdmF0ZUtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgdGhpcy5jb25maWcubG9jYWxIb3N0bmFtZSA9ICh0eXBlb2YgY2ZnLmxvY2FsSG9zdG5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY2ZnLmxvY2FsSG9zdG5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcubG9jYWxIb3N0bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgdGhpcy5jb25maWcubG9jYWxVc2VybmFtZSA9ICh0eXBlb2YgY2ZnLmxvY2FsVXNlcm5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgY2ZnLmxvY2FsVXNlcm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcubG9jYWxVc2VybmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgdGhpcy5jb25maWcudHJ5S2V5Ym9hcmQgPSAoY2ZnLnRyeUtleWJvYXJkID09PSB0cnVlKTtcbiAgdGhpcy5jb25maWcuYWdlbnQgPSAodHlwZW9mIGNmZy5hZ2VudCA9PT0gJ3N0cmluZycgJiYgY2ZnLmFnZW50Lmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICA/IGNmZy5hZ2VudFxuICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gIHRoaXMuY29uZmlnLmFsbG93QWdlbnRGd2QgPSAoY2ZnLmFnZW50Rm9yd2FyZCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHRoaXMuY29uZmlnLmFnZW50ICE9PSB1bmRlZmluZWQpO1xuICB2YXIgYXV0aEhhbmRsZXIgPSB0aGlzLmNvbmZpZy5hdXRoSGFuZGxlciA9IChcbiAgICB0eXBlb2YgY2ZnLmF1dGhIYW5kbGVyID09PSAnZnVuY3Rpb24nID8gY2ZnLmF1dGhIYW5kbGVyIDogdW5kZWZpbmVkXG4gICk7XG5cbiAgdGhpcy5jb25maWcuc3RyaWN0VmVuZG9yID0gKHR5cGVvZiBjZmcuc3RyaWN0VmVuZG9yID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2ZnLnN0cmljdFZlbmRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlKTtcblxuICB2YXIgZGVidWcgPSB0aGlzLmNvbmZpZy5kZWJ1ZyA9ICh0eXBlb2YgY2ZnLmRlYnVnID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2ZnLmRlYnVnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogREVCVUdfTk9PUCk7XG5cbiAgaWYgKGNmZy5hZ2VudEZvcndhcmQgPT09IHRydWUgJiYgIXRoaXMuY29uZmlnLmFsbG93QWdlbnRGd2QpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBzZXQgYSB2YWxpZCBhZ2VudCBwYXRoIHRvIGFsbG93IGFnZW50IGZvcndhcmRpbmcnKTtcblxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzID0gW107XG4gIHRoaXMuX2NoYW5uZWxzID0ge307XG4gIHRoaXMuX2ZvcndhcmRpbmcgPSB7fTtcbiAgdGhpcy5fZm9yd2FyZGluZ1VuaXggPSB7fTtcbiAgdGhpcy5fYWNjZXB0WDExID0gMDtcbiAgdGhpcy5fYWdlbnRGd2RFbmFibGVkID0gZmFsc2U7XG4gIHRoaXMuX2N1ckNoYW4gPSAtMTtcbiAgdGhpcy5fcmVtb3RlVmVyID0gdW5kZWZpbmVkO1xuICB2YXIgcHJpdmF0ZUtleTtcblxuICBpZiAodGhpcy5jb25maWcucHJpdmF0ZUtleSkge1xuICAgIHByaXZhdGVLZXkgPSBwYXJzZUtleSh0aGlzLmNvbmZpZy5wcml2YXRlS2V5LCBjZmcucGFzc3BocmFzZSk7XG4gICAgaWYgKHByaXZhdGVLZXkgaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHBhcnNlIHByaXZhdGVLZXk6ICcgKyBwcml2YXRlS2V5Lm1lc3NhZ2UpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByaXZhdGVLZXkpKVxuICAgICAgcHJpdmF0ZUtleSA9IHByaXZhdGVLZXlbMF07IC8vIE9wZW5TU0gncyBuZXdlciBmb3JtYXQgb25seSBzdG9yZXMgMSBrZXkgZm9yIG5vd1xuICAgIGlmIChwcml2YXRlS2V5LmdldFByaXZhdGVQRU0oKSA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZUtleSB2YWx1ZSBkb2VzIG5vdCBjb250YWluIGEgKHZhbGlkKSBwcml2YXRlIGtleScpO1xuICB9XG5cbiAgdmFyIHN0cmVhbSA9IHRoaXMuX3NzaHN0cmVhbSA9IG5ldyBTU0gyU3RyZWFtKHtcbiAgICBhbGdvcml0aG1zOiBhbGdvcml0aG1zLFxuICAgIGRlYnVnOiAoZGVidWcgPT09IERFQlVHX05PT1AgPyB1bmRlZmluZWQgOiBkZWJ1ZylcbiAgfSk7XG4gIHZhciBzb2NrID0gdGhpcy5fc29jayA9IChjZmcuc29jayB8fCBuZXcgU29ja2V0KCkpO1xuXG4gIC8vIGRyYWluIHN0ZGVyciBpZiB3ZSBhcmUgY29ubmVjdGlvbiBob3BwaW5nIHVzaW5nIGFuIGV4ZWMgc3RyZWFtXG4gIGlmICh0aGlzLl9zb2NrLnN0ZGVyciAmJiB0eXBlb2YgdGhpcy5fc29jay5zdGRlcnIucmVzdW1lID09PSAnZnVuY3Rpb24nKVxuICAgIHRoaXMuX3NvY2suc3RkZXJyLnJlc3VtZSgpO1xuXG4gIC8vIGtlZXBhbGl2ZS1yZWxhdGVkXG4gIHZhciBrYWludGVydmFsID0gdGhpcy5jb25maWcua2VlcGFsaXZlSW50ZXJ2YWw7XG4gIHZhciBrYWNvdW50bWF4ID0gdGhpcy5jb25maWcua2VlcGFsaXZlQ291bnRNYXg7XG4gIHZhciBrYWNvdW50ID0gMDtcbiAgdmFyIGthdGltZXI7XG4gIGZ1bmN0aW9uIHNlbmRLQSgpIHtcbiAgICBpZiAoKytrYWNvdW50ID4ga2Fjb3VudG1heCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChrYXRpbWVyKTtcbiAgICAgIGlmIChzb2NrLnJlYWRhYmxlKSB7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0tlZXBhbGl2ZSB0aW1lb3V0Jyk7XG4gICAgICAgIGVyci5sZXZlbCA9ICdjbGllbnQtdGltZW91dCc7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICBzb2NrLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNvY2sud3JpdGFibGUpIHtcbiAgICAgIC8vIGFwcGVuZCBkdW1teSBjYWxsYmFjayB0byBrZWVwIGNvcnJlY3QgY2FsbGJhY2sgb3JkZXJcbiAgICAgIGNhbGxiYWNrcy5wdXNoKHJlc2V0S0EpO1xuICAgICAgc3RyZWFtLnBpbmcoKTtcbiAgICB9IGVsc2VcbiAgICAgIGNsZWFySW50ZXJ2YWwoa2F0aW1lcik7XG4gIH1cbiAgZnVuY3Rpb24gcmVzZXRLQSgpIHtcbiAgICBpZiAoa2FpbnRlcnZhbCA+IDApIHtcbiAgICAgIGthY291bnQgPSAwO1xuICAgICAgY2xlYXJJbnRlcnZhbChrYXRpbWVyKTtcbiAgICAgIGlmIChzb2NrLndyaXRhYmxlKVxuICAgICAgICBrYXRpbWVyID0gc2V0SW50ZXJ2YWwoc2VuZEtBLCBrYWludGVydmFsKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5fcmVzZXRLQSA9IHJlc2V0S0E7XG5cbiAgc3RyZWFtLm9uKCdVU0VSQVVUSF9CQU5ORVInLCBmdW5jdGlvbihtc2cpIHtcbiAgICBzZWxmLmVtaXQoJ2Jhbm5lcicsIG1zZyk7XG4gIH0pO1xuXG4gIHNvY2sub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygnREVCVUc6IENsaWVudDogQ29ubmVjdGVkJyk7XG4gICAgc2VsZi5lbWl0KCdjb25uZWN0Jyk7XG4gICAgaWYgKCFjZmcuc29jaylcbiAgICAgIHN0cmVhbS5waXBlKHNvY2spLnBpcGUoc3RyZWFtKTtcbiAgfSkub24oJ3RpbWVvdXQnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ3RpbWVvdXQnKTtcbiAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNlbGYuX3JlYWR5VGltZW91dCk7XG4gICAgZXJyLmxldmVsID0gJ2NsaWVudC1zb2NrZXQnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9KS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgc3RyZWFtLnVucGlwZShzb2NrKTtcbiAgICBjbGVhclRpbWVvdXQoc2VsZi5fcmVhZHlUaW1lb3V0KTtcbiAgICBjbGVhckludGVydmFsKGthdGltZXIpO1xuICAgIHNlbGYuZW1pdCgnZW5kJyk7XG4gIH0pLm9uKCdjbG9zZScsIGZ1bmN0aW9uKCkge1xuICAgIHN0cmVhbS51bnBpcGUoc29jayk7XG4gICAgY2xlYXJUaW1lb3V0KHNlbGYuX3JlYWR5VGltZW91dCk7XG4gICAgY2xlYXJJbnRlcnZhbChrYXRpbWVyKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG5cbiAgICAvLyBub3RpZnkgb3V0c3RhbmRpbmcgY2hhbm5lbCByZXF1ZXN0cyBvZiBkaXNjb25uZWN0aW9uIC4uLlxuICAgIHZhciBjYWxsYmFja3NfID0gY2FsbGJhY2tzO1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ05vIHJlc3BvbnNlIGZyb20gc2VydmVyJyk7XG4gICAgY2FsbGJhY2tzID0gc2VsZi5fY2FsbGJhY2tzID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGNhbGxiYWNrc18ubGVuZ3RoOyArK2kpXG4gICAgICBjYWxsYmFja3NfW2ldKGVycik7XG5cbiAgICAvLyBzaW11bGF0ZSBlcnJvciBmb3IgYW55IGNoYW5uZWxzIHdhaXRpbmcgdG8gYmUgb3BlbmVkLiB0aGlzIGlzIHNhZmVcbiAgICAvLyBhZ2FpbnN0IHN1Y2Nlc3NmdWxseSBvcGVuZWQgY2hhbm5lbHMgYmVjYXVzZSB0aGUgc3VjY2VzcyBhbmQgZmFpbHVyZVxuICAgIC8vIGV2ZW50IGhhbmRsZXJzIGFyZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgd2hlbiBhIHN1Y2Nlc3MvZmFpbHVyZSByZXNwb25zZVxuICAgIC8vIGlzIHJlY2VpdmVkXG4gICAgdmFyIGNoYW5uZWxzID0gc2VsZi5fY2hhbm5lbHM7XG4gICAgdmFyIGNoYW5Ob3MgPSBPYmplY3Qua2V5cyhjaGFubmVscyk7XG4gICAgc2VsZi5fY2hhbm5lbHMgPSB7fTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hhbk5vcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGV2MSA9IHN0cmVhbS5lbWl0KCdDSEFOTkVMX09QRU5fRkFJTFVSRTonICsgY2hhbk5vc1tpXSwgZXJyKTtcbiAgICAgIC8vIGVtaXR0aW5nIENIQU5ORUxfQ0xPU0Ugc2hvdWxkIGJlIHNhZmUgdG9vIGFuZCBzaG91bGQgaGVscCBmb3IgYW55XG4gICAgICAvLyBzcGVjaWFsIGNoYW5uZWxzIHdoaWNoIG1pZ2h0IG90aGVyd2lzZSBrZWVwIHRoZSBwcm9jZXNzIGFsaXZlLCBzdWNoXG4gICAgICAvLyBhcyBhZ2VudCBmb3J3YXJkaW5nIGNoYW5uZWxzIHdoaWNoIGhhdmUgb3BlbiB1bml4IHNvY2tldHMgLi4uXG4gICAgICB2YXIgZXYyID0gc3RyZWFtLmVtaXQoJ0NIQU5ORUxfQ0xPU0U6JyArIGNoYW5Ob3NbaV0pO1xuICAgICAgdmFyIGVhcmx5Q2I7XG4gICAgICBpZiAoIWV2MSAmJiAhZXYyICYmIChlYXJseUNiID0gY2hhbm5lbHNbY2hhbk5vc1tpXV0pXG4gICAgICAgICAgJiYgdHlwZW9mIGVhcmx5Q2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWFybHlDYihlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHN0cmVhbS5vbignZHJhaW4nLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gIH0pLm9uY2UoJ2hlYWRlcicsIGZ1bmN0aW9uKGhlYWRlcikge1xuICAgIHNlbGYuX3JlbW90ZVZlciA9IGhlYWRlci52ZXJzaW9ucy5zb2Z0d2FyZTtcbiAgICBpZiAoaGVhZGVyLmdyZWV0aW5nKVxuICAgICAgc2VsZi5lbWl0KCdncmVldGluZycsIGhlYWRlci5ncmVldGluZyk7XG4gIH0pLm9uKCdjb250aW51ZScsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnY29udGludWUnKTtcbiAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgaWYgKGVyci5sZXZlbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgZXJyLmxldmVsID0gJ3Byb3RvY29sJztcbiAgICBlbHNlIGlmIChlcnIubGV2ZWwgPT09ICdoYW5kc2hha2UnKVxuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3JlYWR5VGltZW91dCk7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gIH0pLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICBzb2NrLnJlc3VtZSgpO1xuICB9KTtcblxuICBpZiAodHlwZW9mIGNmZy5ob3N0VmVyaWZpZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoSEFTSEVTLmluZGV4T2YoY2ZnLmhvc3RIYXNoKSA9PT0gLTEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaG9zdCBoYXNoIGFsZ29yaXRobTogJyArIGNmZy5ob3N0SGFzaCk7XG4gICAgdmFyIGhhc2hDYiA9IGNmZy5ob3N0VmVyaWZpZXI7XG4gICAgdmFyIGhhc2hlciA9IGNyeXB0by5jcmVhdGVIYXNoKGNmZy5ob3N0SGFzaCk7XG4gICAgc3RyZWFtLm9uY2UoJ2ZpbmdlcnByaW50JywgZnVuY3Rpb24oa2V5LCB2ZXJpZnkpIHtcbiAgICAgIGhhc2hlci51cGRhdGUoa2V5KTtcbiAgICAgIHZhciByZXQgPSBoYXNoQ2IoaGFzaGVyLmRpZ2VzdCgnaGV4JyksIHZlcmlmeSk7XG4gICAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHZlcmlmeShyZXQpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gYmVnaW4gYXV0aGVudGljYXRpb24gaGFuZGxpbmcgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBjdXJBdXRoO1xuICB2YXIgY3VyUGFydGlhbCA9IG51bGw7XG4gIHZhciBjdXJBdXRoc0xlZnQgPSBudWxsO1xuICB2YXIgYWdlbnRLZXlzO1xuICB2YXIgYWdlbnRLZXlQb3MgPSAwO1xuICB2YXIgYXV0aHNBbGxvd2VkID0gWydub25lJ107XG4gIGlmICh0aGlzLmNvbmZpZy5wYXNzd29yZCAhPT0gdW5kZWZpbmVkKVxuICAgIGF1dGhzQWxsb3dlZC5wdXNoKCdwYXNzd29yZCcpO1xuICBpZiAocHJpdmF0ZUtleSAhPT0gdW5kZWZpbmVkKVxuICAgIGF1dGhzQWxsb3dlZC5wdXNoKCdwdWJsaWNrZXknKTtcbiAgaWYgKHRoaXMuY29uZmlnLmFnZW50ICE9PSB1bmRlZmluZWQpXG4gICAgYXV0aHNBbGxvd2VkLnB1c2goJ2FnZW50Jyk7XG4gIGlmICh0aGlzLmNvbmZpZy50cnlLZXlib2FyZClcbiAgICBhdXRoc0FsbG93ZWQucHVzaCgna2V5Ym9hcmQtaW50ZXJhY3RpdmUnKTtcbiAgaWYgKHByaXZhdGVLZXkgIT09IHVuZGVmaW5lZFxuICAgICAgJiYgdGhpcy5jb25maWcubG9jYWxIb3N0bmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAmJiB0aGlzLmNvbmZpZy5sb2NhbFVzZXJuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICBhdXRoc0FsbG93ZWQucHVzaCgnaG9zdGJhc2VkJyk7XG4gIH1cblxuICBpZiAoYXV0aEhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBhdXRoUG9zID0gMDtcbiAgICBhdXRoSGFuZGxlciA9IGZ1bmN0aW9uIGF1dGhIYW5kbGVyKGF1dGhzTGVmdCwgcGFydGlhbCwgY2IpIHtcbiAgICAgIGlmIChhdXRoUG9zID09PSBhdXRoc0FsbG93ZWQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gYXV0aHNBbGxvd2VkW2F1dGhQb3MrK107XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoYXNTZW50QXV0aCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkb05leHRBdXRoKGF1dGhOYW1lKSB7XG4gICAgaGFzU2VudEF1dGggPSB0cnVlO1xuICAgIGlmIChhdXRoTmFtZSA9PT0gZmFsc2UpIHtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignVVNFUkFVVEhfRkFJTFVSRScsIG9uVVNFUkFVVEhfRkFJTFVSRSk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ1VTRVJBVVRIX1BLX09LJywgb25VU0VSQVVUSF9QS19PSyk7XG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdBbGwgY29uZmlndXJlZCBhdXRoZW50aWNhdGlvbiBtZXRob2RzIGZhaWxlZCcpO1xuICAgICAgZXJyLmxldmVsID0gJ2NsaWVudC1hdXRoZW50aWNhdGlvbic7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIGlmIChzdHJlYW0ud3JpdGFibGUpXG4gICAgICAgIHNlbGYuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhdXRoc0FsbG93ZWQuaW5kZXhPZihhdXRoTmFtZSkgPT09IC0xKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRoZW50aWNhdGlvbiBtZXRob2Qgbm90IGFsbG93ZWQ6ICcgKyBhdXRoTmFtZSk7XG4gICAgY3VyQXV0aCA9IGF1dGhOYW1lO1xuICAgIHN3aXRjaCAoY3VyQXV0aCkge1xuICAgICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgICBzdHJlYW0uYXV0aFBhc3N3b3JkKHNlbGYuY29uZmlnLnVzZXJuYW1lLCBzZWxmLmNvbmZpZy5wYXNzd29yZCk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3B1YmxpY2tleSc6XG4gICAgICAgIHN0cmVhbS5hdXRoUEsoc2VsZi5jb25maWcudXNlcm5hbWUsIHByaXZhdGVLZXkpO1xuICAgICAgICBzdHJlYW0ub25jZSgnVVNFUkFVVEhfUEtfT0snLCBvblVTRVJBVVRIX1BLX09LKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaG9zdGJhc2VkJzpcbiAgICAgICAgZnVuY3Rpb24gaG9zdGJhc2VkQ2IoYnVmLCBjYikge1xuICAgICAgICAgIHZhciBzaWduYXR1cmUgPSBwcml2YXRlS2V5LnNpZ24oYnVmKTtcbiAgICAgICAgICBpZiAoc2lnbmF0dXJlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5tZXNzYWdlID0gJ0Vycm9yIHdoaWxlIHNpZ25pbmcgZGF0YSB3aXRoIHByaXZhdGVLZXk6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzaWduYXR1cmUubWVzc2FnZTtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5sZXZlbCA9ICdjbGllbnQtYXV0aGVudGljYXRpb24nO1xuICAgICAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIHNpZ25hdHVyZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ5TmV4dEF1dGgoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYihzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5hdXRoSG9zdGJhc2VkKHNlbGYuY29uZmlnLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5sb2NhbEhvc3RuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5sb2NhbFVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0YmFzZWRDYik7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2FnZW50JzpcbiAgICAgICAgYWdlbnRRdWVyeShzZWxmLmNvbmZpZy5hZ2VudCwgZnVuY3Rpb24oZXJyLCBrZXlzKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZXJyLmxldmVsID0gJ2FnZW50JztcbiAgICAgICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgYWdlbnRLZXlzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIHRyeU5leHRBdXRoKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVidWcoJ0RFQlVHOiBBZ2VudDogTm8ga2V5cyBzdG9yZWQgaW4gYWdlbnQnKTtcbiAgICAgICAgICAgIGFnZW50S2V5cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiB0cnlOZXh0QXV0aCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFnZW50S2V5cyA9IGtleXM7XG4gICAgICAgICAgYWdlbnRLZXlQb3MgPSAwO1xuXG4gICAgICAgICAgc3RyZWFtLmF1dGhQSyhzZWxmLmNvbmZpZy51c2VybmFtZSwga2V5c1swXSk7XG4gICAgICAgICAgc3RyZWFtLm9uY2UoJ1VTRVJBVVRIX1BLX09LJywgb25VU0VSQVVUSF9QS19PSyk7XG4gICAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdrZXlib2FyZC1pbnRlcmFjdGl2ZSc6XG4gICAgICAgIHN0cmVhbS5hdXRoS2V5Ym9hcmQoc2VsZi5jb25maWcudXNlcm5hbWUpO1xuICAgICAgICBzdHJlYW0ub24oJ1VTRVJBVVRIX0lORk9fUkVRVUVTVCcsIG9uVVNFUkFVVEhfSU5GT19SRVFVRVNUKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgIHN0cmVhbS5hdXRoTm9uZShzZWxmLmNvbmZpZy51c2VybmFtZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJ5TmV4dEF1dGgoKSB7XG4gICAgaGFzU2VudEF1dGggPSBmYWxzZTtcbiAgICB2YXIgYXV0aCA9IGF1dGhIYW5kbGVyKGN1ckF1dGhzTGVmdCwgY3VyUGFydGlhbCwgZG9OZXh0QXV0aCk7XG4gICAgaWYgKGhhc1NlbnRBdXRoIHx8IGF1dGggPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcbiAgICBkb05leHRBdXRoKGF1dGgpO1xuICB9XG4gIGZ1bmN0aW9uIHRyeU5leHRBZ2VudEtleSgpIHtcbiAgICBpZiAoY3VyQXV0aCA9PT0gJ2FnZW50Jykge1xuICAgICAgaWYgKGFnZW50S2V5UG9zID49IGFnZW50S2V5cy5sZW5ndGgpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmICgrK2FnZW50S2V5UG9zID49IGFnZW50S2V5cy5sZW5ndGgpIHtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBBZ2VudDogTm8gbW9yZSBrZXlzIGxlZnQgdG8gdHJ5Jyk7XG4gICAgICAgIGRlYnVnKCdERUJVRzogQ2xpZW50OiBhZ2VudCBhdXRoIGZhaWxlZCcpO1xuICAgICAgICBhZ2VudEtleXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRyeU5leHRBdXRoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygnREVCVUc6IEFnZW50OiBUcnlpbmcga2V5ICMnICsgKGFnZW50S2V5UG9zICsgMSkpO1xuICAgICAgICBzdHJlYW0uYXV0aFBLKHNlbGYuY29uZmlnLnVzZXJuYW1lLCBhZ2VudEtleXNbYWdlbnRLZXlQb3NdKTtcbiAgICAgICAgc3RyZWFtLm9uY2UoJ1VTRVJBVVRIX1BLX09LJywgb25VU0VSQVVUSF9QS19PSyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uVVNFUkFVVEhfSU5GT19SRVFVRVNUKG5hbWUsIGluc3RydWN0aW9ucywgbGFuZywgcHJvbXB0cykge1xuICAgIHZhciBucHJvbXB0cyA9IChBcnJheS5pc0FycmF5KHByb21wdHMpID8gcHJvbXB0cy5sZW5ndGggOiAwKTtcbiAgICBpZiAobnByb21wdHMgPT09IDApIHtcbiAgICAgIGRlYnVnKCdERUJVRzogQ2xpZW50OiBTZW5kaW5nIGF1dG9tYXRpYyBVU0VSQVVUSF9JTkZPX1JFU1BPTlNFJyk7XG4gICAgICByZXR1cm4gc3RyZWFtLmF1dGhJbmZvUmVzKCk7XG4gICAgfVxuICAgIC8vIHdlIHNlbnQgYSBrZXlib2FyZC1pbnRlcmFjdGl2ZSB1c2VyIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgYW5kIG5vdyB0aGVcbiAgICAvLyBzZXJ2ZXIgaXMgc2VuZGluZyB1cyB0aGUgcHJvbXB0cyB3ZSBuZWVkIHRvIHByZXNlbnQgdG8gdGhlIHVzZXJcbiAgICBzZWxmLmVtaXQoJ2tleWJvYXJkLWludGVyYWN0aXZlJyxcbiAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zLFxuICAgICAgICAgICAgICBsYW5nLFxuICAgICAgICAgICAgICBwcm9tcHRzLFxuICAgICAgICAgICAgICBmdW5jdGlvbihhbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmF1dGhJbmZvUmVzKGFuc3dlcnMpO1xuICAgICAgICAgICAgICB9XG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiBvblVTRVJBVVRIX1BLX09LKCkge1xuICAgIGlmIChjdXJBdXRoID09PSAnYWdlbnQnKSB7XG4gICAgICB2YXIgYWdlbnRLZXkgPSBhZ2VudEtleXNbYWdlbnRLZXlQb3NdO1xuICAgICAgdmFyIGtleUxlbiA9IHJlYWRVSW50MzJCRShhZ2VudEtleSwgMCk7XG4gICAgICB2YXIgcHViS2V5RnVsbFR5cGUgPSBhZ2VudEtleS50b1N0cmluZygnYXNjaWknLCA0LCA0ICsga2V5TGVuKTtcbiAgICAgIHZhciBwdWJLZXlUeXBlID0gcHViS2V5RnVsbFR5cGUuc2xpY2UoNCk7XG4gICAgICAvLyBDaGVjayB0aGF0IHdlIHN1cHBvcnQgdGhlIGtleSB0eXBlIGZpcnN0XG4gICAgICAvLyBUT0RPOiBtb3ZlIGtleSB0eXBlIGNoZWNraW5nIGxvZ2ljIHRvIHNzaDItc3RyZWFtc1xuICAgICAgc3dpdGNoIChwdWJLZXlGdWxsVHlwZSkge1xuICAgICAgICBjYXNlICdzc2gtcnNhJzpcbiAgICAgICAgY2FzZSAnc3NoLWRzcyc6XG4gICAgICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAyNTYnOlxuICAgICAgICBjYXNlICdlY2RzYS1zaGEyLW5pc3RwMzg0JzpcbiAgICAgICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKEVERFNBX1NVUFBPUlRFRCAmJiBwdWJLZXlGdWxsVHlwZSA9PT0gJ3NzaC1lZDI1NTE5JylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlYnVnKCdERUJVRzogQWdlbnQ6IFNraXBwaW5nIHVuc3VwcG9ydGVkIGtleSB0eXBlOiAnXG4gICAgICAgICAgICAgICAgKyBwdWJLZXlGdWxsVHlwZSk7XG4gICAgICAgICAgcmV0dXJuIHRyeU5leHRBZ2VudEtleSgpO1xuICAgICAgfVxuICAgICAgc3RyZWFtLmF1dGhQSyhzZWxmLmNvbmZpZy51c2VybmFtZSwgXG4gICAgICAgICAgICAgICAgICAgIGFnZW50S2V5LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihidWYsIGNiKSB7XG4gICAgICAgIGFnZW50UXVlcnkoc2VsZi5jb25maWcuYWdlbnQsXG4gICAgICAgICAgICAgICAgICAgYWdlbnRLZXksXG4gICAgICAgICAgICAgICAgICAgcHViS2V5VHlwZSxcbiAgICAgICAgICAgICAgICAgICBidWYsXG4gICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyLCBzaWduZWQpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBlcnIubGV2ZWwgPSAnYWdlbnQnO1xuICAgICAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzaWdGdWxsVHlwZUxlbiA9IHJlYWRVSW50MzJCRShzaWduZWQsIDApO1xuICAgICAgICAgICAgaWYgKDQgKyBzaWdGdWxsVHlwZUxlbiArIDQgPCBzaWduZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBzaWdGdWxsVHlwZSA9IHNpZ25lZC50b1N0cmluZygnYXNjaWknLCA0LCA0ICsgc2lnRnVsbFR5cGVMZW4pO1xuICAgICAgICAgICAgICBpZiAoc2lnRnVsbFR5cGUgIT09IHB1YktleUZ1bGxUeXBlKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKCdBZ2VudCBrZXkvc2lnbmF0dXJlIHR5cGUgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICBlcnIubGV2ZWwgPSAnYWdlbnQnO1xuICAgICAgICAgICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgYWxnb0xlbiArIGFsZ28gKyBzaWdMZW5cbiAgICAgICAgICAgICAgICByZXR1cm4gY2Ioc2lnbmVkLnNsaWNlKDQgKyBzaWdGdWxsVHlwZUxlbiArIDQpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeU5leHRBZ2VudEtleSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY3VyQXV0aCA9PT0gJ3B1YmxpY2tleScpIHtcbiAgICAgIHN0cmVhbS5hdXRoUEsoc2VsZi5jb25maWcudXNlcm5hbWUsIHByaXZhdGVLZXksIGZ1bmN0aW9uKGJ1ZiwgY2IpIHtcbiAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHByaXZhdGVLZXkuc2lnbihidWYpO1xuICAgICAgICBpZiAoc2lnbmF0dXJlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBzaWduYXR1cmUubWVzc2FnZSA9ICdFcnJvciB3aGlsZSBzaWduaW5nIGRhdGEgd2l0aCBwcml2YXRlS2V5OiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHNpZ25hdHVyZS5tZXNzYWdlO1xuICAgICAgICAgIHNpZ25hdHVyZS5sZXZlbCA9ICdjbGllbnQtYXV0aGVudGljYXRpb24nO1xuICAgICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBzaWduYXR1cmUpO1xuICAgICAgICAgIHJldHVybiB0cnlOZXh0QXV0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGNiKHNpZ25hdHVyZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25VU0VSQVVUSF9GQUlMVVJFKGF1dGhzTGVmdCwgcGFydGlhbCkge1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignVVNFUkFVVEhfUEtfT0snLCBvblVTRVJBVVRIX1BLX09LKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ1VTRVJBVVRIX0lORk9fUkVRVUVTVCcsIG9uVVNFUkFVVEhfSU5GT19SRVFVRVNUKTtcbiAgICBpZiAoY3VyQXV0aCA9PT0gJ2FnZW50Jykge1xuICAgICAgZGVidWcoJ0RFQlVHOiBDbGllbnQ6IEFnZW50IGtleSAjJyArIChhZ2VudEtleVBvcyArIDEpICsgJyBmYWlsZWQnKTtcbiAgICAgIHJldHVybiB0cnlOZXh0QWdlbnRLZXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ0RFQlVHOiBDbGllbnQ6ICcgKyBjdXJBdXRoICsgJyBhdXRoIGZhaWxlZCcpO1xuICAgIH1cblxuICAgIGN1clBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGN1ckF1dGhzTGVmdCA9IGF1dGhzTGVmdDtcbiAgICB0cnlOZXh0QXV0aCgpO1xuICB9XG4gIHN0cmVhbS5vbmNlKCdVU0VSQVVUSF9TVUNDRVNTJywgZnVuY3Rpb24oKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdVU0VSQVVUSF9GQUlMVVJFJywgb25VU0VSQVVUSF9GQUlMVVJFKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ1VTRVJBVVRIX0lORk9fUkVRVUVTVCcsIG9uVVNFUkFVVEhfSU5GT19SRVFVRVNUKTtcblxuICAgIC8vIHN0YXJ0IGtlZXBhbGl2ZSBtZWNoYW5pc21cbiAgICByZXNldEtBKCk7XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi5fcmVhZHlUaW1lb3V0KTtcblxuICAgIHNlbGYuZW1pdCgncmVhZHknKTtcbiAgfSkub24oJ1VTRVJBVVRIX0ZBSUxVUkUnLCBvblVTRVJBVVRIX0ZBSUxVUkUpO1xuICAvLyBlbmQgYXV0aGVudGljYXRpb24gaGFuZGxpbmcgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAvLyBoYW5kbGUgaW5pdGlhbCBoYW5kc2hha2UgY29tcGxldGlvblxuICBzdHJlYW0ub25jZSgncmVhZHknLCBmdW5jdGlvbigpIHtcbiAgICBzdHJlYW0uc2VydmljZSgnc3NoLXVzZXJhdXRoJyk7XG4gICAgc3RyZWFtLm9uY2UoJ1NFUlZJQ0VfQUNDRVBUJywgZnVuY3Rpb24oc3ZjTmFtZSkge1xuICAgICAgaWYgKHN2Y05hbWUgPT09ICdzc2gtdXNlcmF1dGgnKVxuICAgICAgICB0cnlOZXh0QXV0aCgpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBoYW5kbGUgaW5jb21pbmcgcmVxdWVzdHMgZnJvbSBzZXJ2ZXIsIHR5cGljYWxseSBhIGZvcndhcmRlZCBUQ1Agb3IgWDExXG4gIC8vIGNvbm5lY3Rpb25cbiAgc3RyZWFtLm9uKCdDSEFOTkVMX09QRU4nLCBmdW5jdGlvbihpbmZvKSB7XG4gICAgb25DSEFOTkVMX09QRU4oc2VsZiwgaW5mbyk7XG4gIH0pO1xuXG4gIC8vIGhhbmRsZSByZXNwb25zZXMgZm9yIHRjcGlwLWZvcndhcmQgYW5kIG90aGVyIGdsb2JhbCByZXF1ZXN0c1xuICBzdHJlYW0ub24oJ1JFUVVFU1RfU1VDQ0VTUycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgIGNhbGxiYWNrcy5zaGlmdCgpKGZhbHNlLCBkYXRhKTtcbiAgfSkub24oJ1JFUVVFU1RfRkFJTFVSRScsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChjYWxsYmFja3MubGVuZ3RoKVxuICAgICAgY2FsbGJhY2tzLnNoaWZ0KCkodHJ1ZSk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignR0xPQkFMX1JFUVVFU1QnLCBmdW5jdGlvbihuYW1lLCB3YW50UmVwbHksIGRhdGEpIHtcbiAgICAvLyBhdXRvLXJlamVjdCBhbGwgZ2xvYmFsIHJlcXVlc3RzLCB0aGlzIGNhbiBiZSBlc3BlY2lhbGx5IHVzZWZ1bCBpZiB0aGVcbiAgICAvLyBzZXJ2ZXIgaXMgc2VuZGluZyB1cyBkdW1teSBrZWVwYWxpdmUgZ2xvYmFsIHJlcXVlc3RzXG4gICAgaWYgKHdhbnRSZXBseSlcbiAgICAgIHN0cmVhbS5yZXF1ZXN0RmFpbHVyZSgpO1xuICB9KTtcblxuICBpZiAoIWNmZy5zb2NrKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmNvbmZpZy5ob3N0O1xuICAgIHZhciBmb3JjZUlQdjQgPSB0aGlzLmNvbmZpZy5mb3JjZUlQdjQ7XG4gICAgdmFyIGZvcmNlSVB2NiA9IHRoaXMuY29uZmlnLmZvcmNlSVB2NjtcblxuICAgIGRlYnVnKCdERUJVRzogQ2xpZW50OiBUcnlpbmcgJ1xuICAgICAgICAgICsgaG9zdFxuICAgICAgICAgICsgJyBvbiBwb3J0ICdcbiAgICAgICAgICArIHRoaXMuY29uZmlnLnBvcnRcbiAgICAgICAgICArICcgLi4uJyk7XG5cbiAgICBmdW5jdGlvbiBkb0Nvbm5lY3QoKSB7XG4gICAgICBzdGFydFRpbWVvdXQoKTtcbiAgICAgIHNlbGYuX3NvY2suY29ubmVjdCh7XG4gICAgICAgIGhvc3Q6IGhvc3QsXG4gICAgICAgIHBvcnQ6IHNlbGYuY29uZmlnLnBvcnQsXG4gICAgICAgIGxvY2FsQWRkcmVzczogc2VsZi5jb25maWcubG9jYWxBZGRyZXNzLFxuICAgICAgICBsb2NhbFBvcnQ6IHNlbGYuY29uZmlnLmxvY2FsUG9ydFxuICAgICAgfSk7XG4gICAgICBzZWxmLl9zb2NrLnNldE5vRGVsYXkodHJ1ZSk7XG4gICAgICBzZWxmLl9zb2NrLnNldE1heExpc3RlbmVycygwKTtcbiAgICAgIHNlbGYuX3NvY2suc2V0VGltZW91dCh0eXBlb2YgY2ZnLnRpbWVvdXQgPT09ICdudW1iZXInID8gY2ZnLnRpbWVvdXQgOiAwKTtcbiAgICB9XG5cbiAgICBpZiAoKCFmb3JjZUlQdjQgJiYgIWZvcmNlSVB2NikgfHwgKGZvcmNlSVB2NCAmJiBmb3JjZUlQdjYpKVxuICAgICAgZG9Db25uZWN0KCk7XG4gICAgZWxzZSB7XG4gICAgICBkbnNMb29rdXAoaG9zdCwgKGZvcmNlSVB2NCA/IDQgOiA2KSwgZnVuY3Rpb24oZXJyLCBhZGRyZXNzLCBmYW1pbHkpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcignRXJyb3Igd2hpbGUgbG9va2luZyB1cCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGZvcmNlSVB2NCA/ICdJUHY0JyA6ICdJUHY2JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnIGFkZHJlc3MgZm9yIGhvc3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGhvc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnOiAnICsgZXJyKTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5fcmVhZHlUaW1lb3V0KTtcbiAgICAgICAgICBlcnJvci5sZXZlbCA9ICdjbGllbnQtZG5zJztcbiAgICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaG9zdCA9IGFkZHJlc3M7XG4gICAgICAgIGRvQ29ubmVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0YXJ0VGltZW91dCgpO1xuICAgIHN0cmVhbS5waXBlKHNvY2spLnBpcGUoc3RyZWFtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0VGltZW91dCgpIHtcbiAgICBpZiAoc2VsZi5jb25maWcucmVhZHlUaW1lb3V0ID4gMCkge1xuICAgICAgc2VsZi5fcmVhZHlUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVGltZWQgb3V0IHdoaWxlIHdhaXRpbmcgZm9yIGhhbmRzaGFrZScpO1xuICAgICAgICBlcnIubGV2ZWwgPSAnY2xpZW50LXRpbWVvdXQnO1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgc29jay5kZXN0cm95KCk7XG4gICAgICB9LCBzZWxmLmNvbmZpZy5yZWFkeVRpbWVvdXQpO1xuICAgIH1cbiAgfVxufTtcblxuQ2xpZW50LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX3NvY2tcbiAgICAgICYmIHRoaXMuX3NvY2sud3JpdGFibGVcbiAgICAgICYmIHRoaXMuX3NzaHN0cmVhbVxuICAgICAgJiYgdGhpcy5fc3Noc3RyZWFtLndyaXRhYmxlKVxuICAgIHJldHVybiB0aGlzLl9zc2hzdHJlYW0uZGlzY29ubmVjdCgpO1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG5DbGllbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc29jayAmJiB0aGlzLl9zb2NrLmRlc3Ryb3koKTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uKGNtZCwgb3B0cywgY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZXh0cmFPcHRzID0geyBhbGxvd0hhbGZPcGVuOiAob3B0cy5hbGxvd0hhbGZPcGVuICE9PSBmYWxzZSkgfTtcblxuICByZXR1cm4gb3BlbkNoYW5uZWwodGhpcywgJ3Nlc3Npb24nLCBleHRyYU9wdHMsIGZ1bmN0aW9uKGVyciwgY2hhbikge1xuICAgIGlmIChlcnIpXG4gICAgICByZXR1cm4gY2IoZXJyKTtcblxuICAgIHZhciB0b2RvID0gW107XG5cbiAgICBmdW5jdGlvbiByZXFDYihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2hhbi5jbG9zZSgpO1xuICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0b2RvLmxlbmd0aClcbiAgICAgICAgdG9kby5zaGlmdCgpKCk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuY29uZmlnLmFsbG93QWdlbnRGd2QgPT09IHRydWVcbiAgICAgICAgfHwgKG9wdHNcbiAgICAgICAgICAgICYmIG9wdHMuYWdlbnRGb3J3YXJkID09PSB0cnVlXG4gICAgICAgICAgICAmJiBzZWxmLmNvbmZpZy5hZ2VudCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgdG9kby5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXFBZ2VudEZ3ZChjaGFuLCByZXFDYik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdvYmplY3QnICYmIG9wdHMgIT09IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5lbnYgPT09ICdvYmplY3QnICYmIG9wdHMuZW52ICE9PSBudWxsKVxuICAgICAgICByZXFFbnYoY2hhbiwgb3B0cy5lbnYpO1xuICAgICAgaWYgKCh0eXBlb2Ygb3B0cy5wdHkgPT09ICdvYmplY3QnICYmIG9wdHMucHR5ICE9PSBudWxsKVxuICAgICAgICAgIHx8IG9wdHMucHR5ID09PSB0cnVlKSB7XG4gICAgICAgIHRvZG8ucHVzaChmdW5jdGlvbigpIHsgcmVxUHR5KGNoYW4sIG9wdHMucHR5LCByZXFDYik7IH0pO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlb2Ygb3B0cy54MTEgPT09ICdvYmplY3QnICYmIG9wdHMueDExICE9PSBudWxsKVxuICAgICAgICAgIHx8IG9wdHMueDExID09PSAnbnVtYmVyJ1xuICAgICAgICAgIHx8IG9wdHMueDExID09PSB0cnVlKSB7XG4gICAgICAgIHRvZG8ucHVzaChmdW5jdGlvbigpIHsgcmVxWDExKGNoYW4sIG9wdHMueDExLCByZXFDYik7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRvZG8ucHVzaChmdW5jdGlvbigpIHsgcmVxRXhlYyhjaGFuLCBjbWQsIG9wdHMsIGNiKTsgfSk7XG4gICAgdG9kby5zaGlmdCgpKCk7XG4gIH0pO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS5zaGVsbCA9IGZ1bmN0aW9uKHduZG9wdHMsIG9wdHMsIGNiKSB7XG4gIGlmICghdGhpcy5fc29ja1xuICAgICAgfHwgIXRoaXMuX3NvY2sud3JpdGFibGVcbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW1cbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW0ud3JpdGFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgY29ubmVjdGVkJyk7XG5cbiAgLy8gc3RhcnQgYW4gaW50ZXJhY3RpdmUgdGVybWluYWwvc2hlbGwgc2Vzc2lvblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB3bmRvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSB3bmRvcHRzO1xuICAgIHduZG9wdHMgPSBvcHRzID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvcHRzO1xuICAgIG9wdHMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHduZG9wdHMgJiYgKHduZG9wdHMueDExICE9PSB1bmRlZmluZWQgfHwgd25kb3B0cy5lbnYgIT09IHVuZGVmaW5lZCkpIHtcbiAgICBvcHRzID0gd25kb3B0cztcbiAgICB3bmRvcHRzID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIG9wZW5DaGFubmVsKHRoaXMsICdzZXNzaW9uJywgZnVuY3Rpb24oZXJyLCBjaGFuKSB7XG4gICAgaWYgKGVycilcbiAgICAgIHJldHVybiBjYihlcnIpO1xuXG4gICAgdmFyIHRvZG8gPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlcUNiKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjaGFuLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBjYihlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKHRvZG8ubGVuZ3RoKVxuICAgICAgICB0b2RvLnNoaWZ0KCkoKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5jb25maWcuYWxsb3dBZ2VudEZ3ZCA9PT0gdHJ1ZVxuICAgICAgICB8fCAob3B0c1xuICAgICAgICAgICAgJiYgb3B0cy5hZ2VudEZvcndhcmQgPT09IHRydWVcbiAgICAgICAgICAgICYmIHNlbGYuY29uZmlnLmFnZW50ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICB0b2RvLnB1c2goZnVuY3Rpb24oKSB7IHJlcUFnZW50RndkKGNoYW4sIHJlcUNiKTsgfSk7XG4gICAgfVxuXG4gICAgaWYgKHduZG9wdHMgIT09IGZhbHNlKVxuICAgICAgdG9kby5wdXNoKGZ1bmN0aW9uKCkgeyByZXFQdHkoY2hhbiwgd25kb3B0cywgcmVxQ2IpOyB9KTtcblxuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ29iamVjdCcgJiYgb3B0cyAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzLmVudiA9PT0gJ29iamVjdCcgJiYgb3B0cy5lbnYgIT09IG51bGwpXG4gICAgICAgIHJlcUVudihjaGFuLCBvcHRzLmVudik7XG4gICAgICBpZiAoKHR5cGVvZiBvcHRzLngxMSA9PT0gJ29iamVjdCcgJiYgb3B0cy54MTEgIT09IG51bGwpXG4gICAgICAgICAgfHwgb3B0cy54MTEgPT09ICdudW1iZXInXG4gICAgICAgICAgfHwgb3B0cy54MTEgPT09IHRydWUpIHtcbiAgICAgICAgdG9kby5wdXNoKGZ1bmN0aW9uKCkgeyByZXFYMTEoY2hhbiwgb3B0cy54MTEsIHJlcUNiKTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdG9kby5wdXNoKGZ1bmN0aW9uKCkgeyByZXFTaGVsbChjaGFuLCBjYik7IH0pO1xuICAgIHRvZG8uc2hpZnQoKSgpO1xuICB9KTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUuc3Vic3lzID0gZnVuY3Rpb24obmFtZSwgY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuXHRyZXR1cm4gb3BlbkNoYW5uZWwodGhpcywgJ3Nlc3Npb24nLCBmdW5jdGlvbihlcnIsIGNoYW4pIHtcblx0XHRpZiAoZXJyKVxuXHRcdFx0cmV0dXJuIGNiKGVycik7XG5cblx0XHRyZXFTdWJzeXN0ZW0oY2hhbiwgbmFtZSwgZnVuY3Rpb24oZXJyLCBzdHJlYW0pIHtcblx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdHJldHVybiBjYihlcnIpO1xuXG5cdFx0XHRjYih1bmRlZmluZWQsIHN0cmVhbSk7XG5cdFx0fSk7XG5cdH0pO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS5zZnRwID0gZnVuY3Rpb24oY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gc3RhcnQgYW4gU0ZUUCBzZXNzaW9uXG4gIHJldHVybiBvcGVuQ2hhbm5lbCh0aGlzLCAnc2Vzc2lvbicsIGZ1bmN0aW9uKGVyciwgY2hhbikge1xuICAgIGlmIChlcnIpXG4gICAgICByZXR1cm4gY2IoZXJyKTtcblxuICAgIHJlcVN1YnN5c3RlbShjaGFuLCAnc2Z0cCcsIGZ1bmN0aW9uKGVyciwgc3RyZWFtKSB7XG4gICAgICBpZiAoZXJyKVxuICAgICAgICByZXR1cm4gY2IoZXJyKTtcblxuICAgICAgdmFyIHNlcnZlcklkZW50UmF3ID0gc2VsZi5fc3Noc3RyZWFtLl9zdGF0ZS5pbmNvbWluZy5pZGVudFJhdztcbiAgICAgIHZhciBjZmcgPSB7IGRlYnVnOiBzZWxmLmNvbmZpZy5kZWJ1ZyB9O1xuICAgICAgdmFyIHNmdHAgPSBuZXcgU0ZUUFN0cmVhbShjZmcsIHNlcnZlcklkZW50UmF3KTtcblxuICAgICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgc2Z0cC5yZW1vdmVMaXN0ZW5lcigncmVhZHknLCBvblJlYWR5KTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdleGl0Jywgb25FeGl0KTtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICAgICAgc2Z0cC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdleGl0Jywgb25FeGl0KTtcbiAgICAgICAgY2IodW5kZWZpbmVkLCBuZXcgU0ZUUFdyYXBwZXIoc2Z0cCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbkV4aXQoY29kZSwgc2lnbmFsKSB7XG4gICAgICAgIHNmdHAucmVtb3ZlTGlzdGVuZXIoJ3JlYWR5Jywgb25SZWFkeSk7XG4gICAgICAgIHNmdHAucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICAgIHZhciBtc2c7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBtc2cgPSAnUmVjZWl2ZWQgZXhpdCBjb2RlICdcbiAgICAgICAgICAgICAgICArIGNvZGVcbiAgICAgICAgICAgICAgICArICcgd2hpbGUgZXN0YWJsaXNoaW5nIFNGVFAgc2Vzc2lvbic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXNnID0gJ1JlY2VpdmVkIHNpZ25hbCAnXG4gICAgICAgICAgICAgICAgKyBzaWduYWxcbiAgICAgICAgICAgICAgICArICcgd2hpbGUgZXN0YWJsaXNoaW5nIFNGVFAgc2Vzc2lvbic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICBlcnIuY29kZSA9IGNvZGU7XG4gICAgICAgIGVyci5zaWduYWwgPSBzaWduYWw7XG4gICAgICAgIGNiKGVycik7XG4gICAgICB9XG5cbiAgICAgIHNmdHAub25jZSgnZXJyb3InLCBvbkVycm9yKVxuICAgICAgICAgIC5vbmNlKCdyZWFkeScsIG9uUmVhZHkpXG4gICAgICAgICAgLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzdHJlYW0uZW5kKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIC8vIE9wZW5TU0ggc2VydmVyIHNlbmRzIGFuIGV4aXQtc3RhdHVzIGlmIHRoZXJlIHdhcyBhIHByb2JsZW0gc3Bpbm5pbmcgdXBcbiAgICAgIC8vIGFuIHNmdHAgc2VydmVyIGNoaWxkIHByb2Nlc3MsIHNvIHdlIGxpc3RlbiBmb3IgdGhhdCBoZXJlIGluIG9yZGVyIHRvXG4gICAgICAvLyBwcm9wZXJseSByYWlzZSBhbiBlcnJvci5cbiAgICAgIHN0cmVhbS5vbmNlKCdleGl0Jywgb25FeGl0KTtcblxuICAgICAgc2Z0cC5waXBlKHN0cmVhbSkucGlwZShzZnRwKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5DbGllbnQucHJvdG90eXBlLmZvcndhcmRJbiA9IGZ1bmN0aW9uKGJpbmRBZGRyLCBiaW5kUG9ydCwgY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuICAvLyBzZW5kIGEgcmVxdWVzdCBmb3IgdGhlIHNlcnZlciB0byBzdGFydCBmb3J3YXJkaW5nIFRDUCBjb25uZWN0aW9ucyB0byB1c1xuICAvLyBvbiBhIHBhcnRpY3VsYXIgYWRkcmVzcyBhbmQgcG9ydFxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHdhbnRSZXBseSA9ICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpO1xuXG4gIGlmICh3YW50UmVwbHkpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChmdW5jdGlvbihoYWRfZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoaGFkX2Vycikge1xuICAgICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgPyBoYWRfZXJyXG4gICAgICAgICAgICAgICAgICA6IG5ldyBFcnJvcignVW5hYmxlIHRvIGJpbmQgdG8gJyArIGJpbmRBZGRyICsgJzonICsgYmluZFBvcnQpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlYWxQb3J0ID0gYmluZFBvcnQ7XG4gICAgICBpZiAoYmluZFBvcnQgPT09IDAgJiYgZGF0YSAmJiBkYXRhLmxlbmd0aCA+PSA0KSB7XG4gICAgICAgIHJlYWxQb3J0ID0gcmVhZFVJbnQzMkJFKGRhdGEsIDApO1xuICAgICAgICBpZiAoIShzZWxmLl9zc2hzdHJlYW0ucmVtb3RlQnVncyAmIEJVR1MuRFlOX1JQT1JUX0JVRykpXG4gICAgICAgICAgYmluZFBvcnQgPSByZWFsUG9ydDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fZm9yd2FyZGluZ1tiaW5kQWRkciArICc6JyArIGJpbmRQb3J0XSA9IHJlYWxQb3J0O1xuXG4gICAgICBjYih1bmRlZmluZWQsIHJlYWxQb3J0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9zc2hzdHJlYW0udGNwaXBGb3J3YXJkKGJpbmRBZGRyLCBiaW5kUG9ydCwgd2FudFJlcGx5KTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUudW5mb3J3YXJkSW4gPSBmdW5jdGlvbihiaW5kQWRkciwgYmluZFBvcnQsIGNiKSB7XG4gIGlmICghdGhpcy5fc29ja1xuICAgICAgfHwgIXRoaXMuX3NvY2sud3JpdGFibGVcbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW1cbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW0ud3JpdGFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgY29ubmVjdGVkJyk7XG5cbiAgLy8gc2VuZCBhIHJlcXVlc3QgdG8gc3RvcCBmb3J3YXJkaW5nIHVzIG5ldyBjb25uZWN0aW9ucyBmb3IgYSBwYXJ0aWN1bGFyXG4gIC8vIGFkZHJlc3MgYW5kIHBvcnRcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB3YW50UmVwbHkgPSAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKTtcblxuICBpZiAod2FudFJlcGx5KSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oaGFkX2Vycikge1xuICAgICAgaWYgKGhhZF9lcnIpIHtcbiAgICAgICAgcmV0dXJuIGNiKGhhZF9lcnIgIT09IHRydWVcbiAgICAgICAgICAgICAgICAgID8gaGFkX2VyclxuICAgICAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1VuYWJsZSB0byB1bmJpbmQgZnJvbSAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGJpbmRBZGRyICsgJzonICsgYmluZFBvcnQpKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHNlbGYuX2ZvcndhcmRpbmdbYmluZEFkZHIgKyAnOicgKyBiaW5kUG9ydF07XG5cbiAgICAgIGNiKCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fc3Noc3RyZWFtLmNhbmNlbFRjcGlwRm9yd2FyZChiaW5kQWRkciwgYmluZFBvcnQsIHdhbnRSZXBseSk7XG59O1xuXG5DbGllbnQucHJvdG90eXBlLmZvcndhcmRPdXQgPSBmdW5jdGlvbihzcmNJUCwgc3JjUG9ydCwgZHN0SVAsIGRzdFBvcnQsIGNiKSB7XG4gIGlmICghdGhpcy5fc29ja1xuICAgICAgfHwgIXRoaXMuX3NvY2sud3JpdGFibGVcbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW1cbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW0ud3JpdGFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgY29ubmVjdGVkJyk7XG5cbiAgLy8gc2VuZCBhIHJlcXVlc3QgdG8gZm9yd2FyZCBhIFRDUCBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXJcblxuICB2YXIgY2ZnID0ge1xuICAgIHNyY0lQOiBzcmNJUCxcbiAgICBzcmNQb3J0OiBzcmNQb3J0LFxuICAgIGRzdElQOiBkc3RJUCxcbiAgICBkc3RQb3J0OiBkc3RQb3J0XG4gIH07XG5cbiAgcmV0dXJuIG9wZW5DaGFubmVsKHRoaXMsICdkaXJlY3QtdGNwaXAnLCBjZmcsIGNiKTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUub3BlbnNzaF9ub01vcmVTZXNzaW9ucyA9IGZ1bmN0aW9uKGNiKSB7XG4gIGlmICghdGhpcy5fc29ja1xuICAgICAgfHwgIXRoaXMuX3NvY2sud3JpdGFibGVcbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW1cbiAgICAgIHx8ICF0aGlzLl9zc2hzdHJlYW0ud3JpdGFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgY29ubmVjdGVkJyk7XG5cbiAgdmFyIHdhbnRSZXBseSA9ICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5jb25maWcuc3RyaWN0VmVuZG9yXG4gICAgICB8fCAodGhpcy5jb25maWcuc3RyaWN0VmVuZG9yICYmIFJFX09QRU5TU0gudGVzdCh0aGlzLl9yZW1vdGVWZXIpKSkge1xuICAgIGlmICh3YW50UmVwbHkpIHtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKGhhZF9lcnIpIHtcbiAgICAgICAgaWYgKGhhZF9lcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA/IGhhZF9lcnJcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1VuYWJsZSB0byBkaXNhYmxlIGZ1dHVyZSBzZXNzaW9ucycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNiKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3Noc3RyZWFtLm9wZW5zc2hfbm9Nb3JlU2Vzc2lvbnMod2FudFJlcGx5KTtcbiAgfSBlbHNlIGlmICh3YW50UmVwbHkpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IobmV3IEVycm9yKCdzdHJpY3RWZW5kb3IgZW5hYmxlZCBhbmQgc2VydmVyIGlzIG5vdCBPcGVuU1NIIG9yIGNvbXBhdGlibGUgdmVyc2lvbicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS5vcGVuc3NoX2ZvcndhcmRJblN0cmVhbUxvY2FsID0gZnVuY3Rpb24oc29ja2V0UGF0aCwgY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuICB2YXIgd2FudFJlcGx5ID0gKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIXRoaXMuY29uZmlnLnN0cmljdFZlbmRvclxuICAgICAgfHwgKHRoaXMuY29uZmlnLnN0cmljdFZlbmRvciAmJiBSRV9PUEVOU1NILnRlc3QodGhpcy5fcmVtb3RlVmVyKSkpIHtcbiAgICBpZiAod2FudFJlcGx5KSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChmdW5jdGlvbihoYWRfZXJyKSB7XG4gICAgICAgIGlmIChoYWRfZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKGhhZF9lcnIgIT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBoYWRfZXJyXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IEVycm9yKCdVbmFibGUgdG8gYmluZCB0byAnICsgc29ja2V0UGF0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX2ZvcndhcmRpbmdVbml4W3NvY2tldFBhdGhdID0gdHJ1ZTtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zc2hzdHJlYW0ub3BlbnNzaF9zdHJlYW1Mb2NhbEZvcndhcmQoc29ja2V0UGF0aCwgd2FudFJlcGx5KTtcbiAgfSBlbHNlIGlmICh3YW50UmVwbHkpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IobmV3IEVycm9yKCdzdHJpY3RWZW5kb3IgZW5hYmxlZCBhbmQgc2VydmVyIGlzIG5vdCBPcGVuU1NIIG9yIGNvbXBhdGlibGUgdmVyc2lvbicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS5vcGVuc3NoX3VuZm9yd2FyZEluU3RyZWFtTG9jYWwgPSBmdW5jdGlvbihzb2NrZXRQYXRoLCBjYikge1xuICBpZiAoIXRoaXMuX3NvY2tcbiAgICAgIHx8ICF0aGlzLl9zb2NrLndyaXRhYmxlXG4gICAgICB8fCAhdGhpcy5fc3Noc3RyZWFtXG4gICAgICB8fCAhdGhpcy5fc3Noc3RyZWFtLndyaXRhYmxlKVxuICAgIHRocm93IG5ldyBFcnJvcignTm90IGNvbm5lY3RlZCcpO1xuXG4gIHZhciB3YW50UmVwbHkgPSAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5jb25maWcuc3RyaWN0VmVuZG9yXG4gICAgICB8fCAodGhpcy5jb25maWcuc3RyaWN0VmVuZG9yICYmIFJFX09QRU5TU0gudGVzdCh0aGlzLl9yZW1vdGVWZXIpKSkge1xuICAgIGlmICh3YW50UmVwbHkpIHtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKGhhZF9lcnIpIHtcbiAgICAgICAgaWYgKGhhZF9lcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA/IGhhZF9lcnJcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1VuYWJsZSB0byB1bmJpbmQgb24gJyArIHNvY2tldFBhdGgpKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc2VsZi5fZm9yd2FyZGluZ1VuaXhbc29ja2V0UGF0aF07XG4gICAgICAgIGNiKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3Noc3RyZWFtLm9wZW5zc2hfY2FuY2VsU3RyZWFtTG9jYWxGb3J3YXJkKHNvY2tldFBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YW50UmVwbHkpO1xuICB9IGVsc2UgaWYgKHdhbnRSZXBseSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYihuZXcgRXJyb3IoJ3N0cmljdFZlbmRvciBlbmFibGVkIGFuZCBzZXJ2ZXIgaXMgbm90IE9wZW5TU0ggb3IgY29tcGF0aWJsZSB2ZXJzaW9uJykpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DbGllbnQucHJvdG90eXBlLm9wZW5zc2hfZm9yd2FyZE91dFN0cmVhbUxvY2FsID0gZnVuY3Rpb24oc29ja2V0UGF0aCwgY2IpIHtcbiAgaWYgKCF0aGlzLl9zb2NrXG4gICAgICB8fCAhdGhpcy5fc29jay53cml0YWJsZVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbVxuICAgICAgfHwgIXRoaXMuX3NzaHN0cmVhbS53cml0YWJsZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBjb25uZWN0ZWQnKTtcblxuICBpZiAoIXRoaXMuY29uZmlnLnN0cmljdFZlbmRvclxuICAgICAgfHwgKHRoaXMuY29uZmlnLnN0cmljdFZlbmRvciAmJiBSRV9PUEVOU1NILnRlc3QodGhpcy5fcmVtb3RlVmVyKSkpIHtcbiAgICB2YXIgY2ZnID0geyBzb2NrZXRQYXRoOiBzb2NrZXRQYXRoIH07XG4gICAgcmV0dXJuIG9wZW5DaGFubmVsKHRoaXMsICdkaXJlY3Qtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20nLCBjZmcsIGNiKTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IobmV3IEVycm9yKCdzdHJpY3RWZW5kb3IgZW5hYmxlZCBhbmQgc2VydmVyIGlzIG5vdCBPcGVuU1NIIG9yIGNvbXBhdGlibGUgdmVyc2lvbicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gb3BlbkNoYW5uZWwoc2VsZiwgdHlwZSwgb3B0cywgY2IpIHtcbiAgLy8gYXNrIHRoZSBzZXJ2ZXIgdG8gb3BlbiBhIGNoYW5uZWwgZm9yIHNvbWUgcHVycG9zZVxuICAvLyAoZS5nLiBzZXNzaW9uIChzZnRwLCBleGVjLCBzaGVsbCksIG9yIGZvcndhcmRpbmcgYSBUQ1AgY29ubmVjdGlvblxuICB2YXIgbG9jYWxDaGFuID0gbmV4dENoYW5uZWwoc2VsZik7XG4gIHZhciBpbml0V2luZG93ID0gQ2hhbm5lbC5NQVhfV0lORE9XO1xuICB2YXIgbWF4UGFja2V0ID0gQ2hhbm5lbC5QQUNLRVRfU0laRTtcbiAgdmFyIHJldCA9IHRydWU7XG5cbiAgaWYgKGxvY2FsQ2hhbiA9PT0gZmFsc2UpXG4gICAgcmV0dXJuIGNiKG5ldyBFcnJvcignTm8gZnJlZSBjaGFubmVscyBhdmFpbGFibGUnKSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuXG4gIHNlbGYuX2NoYW5uZWxzW2xvY2FsQ2hhbl0gPSBjYjtcblxuICB2YXIgc3Noc3RyZWFtID0gc2VsZi5fc3Noc3RyZWFtO1xuICBzc2hzdHJlYW0ub25jZSgnQ0hBTk5FTF9PUEVOX0NPTkZJUk1BVElPTjonICsgbG9jYWxDaGFuLCBvblN1Y2Nlc3MpXG4gICAgICAgICAgIC5vbmNlKCdDSEFOTkVMX09QRU5fRkFJTFVSRTonICsgbG9jYWxDaGFuLCBvbkZhaWx1cmUpXG4gICAgICAgICAgIC5vbmNlKCdDSEFOTkVMX0NMT1NFOicgKyBsb2NhbENoYW4sIG9uRmFpbHVyZSk7XG5cbiAgaWYgKHR5cGUgPT09ICdzZXNzaW9uJylcbiAgICByZXQgPSBzc2hzdHJlYW0uc2Vzc2lvbihsb2NhbENoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCk7XG4gIGVsc2UgaWYgKHR5cGUgPT09ICdkaXJlY3QtdGNwaXAnKVxuICAgIHJldCA9IHNzaHN0cmVhbS5kaXJlY3RUY3BpcChsb2NhbENoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCwgb3B0cyk7XG4gIGVsc2UgaWYgKHR5cGUgPT09ICdkaXJlY3Qtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20nKSB7XG4gICAgcmV0ID0gc3Noc3RyZWFtLm9wZW5zc2hfZGlyZWN0U3RyZWFtTG9jYWwobG9jYWxDaGFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRXaW5kb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UGFja2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcblxuICBmdW5jdGlvbiBvblN1Y2Nlc3MoaW5mbykge1xuICAgIHNzaHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignQ0hBTk5FTF9PUEVOX0ZBSUxVUkU6JyArIGxvY2FsQ2hhbiwgb25GYWlsdXJlKTtcbiAgICBzc2hzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ0NIQU5ORUxfQ0xPU0U6JyArIGxvY2FsQ2hhbiwgb25GYWlsdXJlKTtcblxuICAgIHZhciBjaGFuaW5mbyA9IHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBpbmNvbWluZzoge1xuICAgICAgICBpZDogbG9jYWxDaGFuLFxuICAgICAgICB3aW5kb3c6IGluaXRXaW5kb3csXG4gICAgICAgIHBhY2tldFNpemU6IG1heFBhY2tldCxcbiAgICAgICAgc3RhdGU6ICdvcGVuJ1xuICAgICAgfSxcbiAgICAgIG91dGdvaW5nOiB7XG4gICAgICAgIGlkOiBpbmZvLnNlbmRlcixcbiAgICAgICAgd2luZG93OiBpbmZvLndpbmRvdyxcbiAgICAgICAgcGFja2V0U2l6ZTogaW5mby5wYWNrZXRTaXplLFxuICAgICAgICBzdGF0ZTogJ29wZW4nXG4gICAgICB9XG4gICAgfTtcbiAgICBjYih1bmRlZmluZWQsIG5ldyBDaGFubmVsKGNoYW5pbmZvLCBzZWxmKSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkZhaWx1cmUoaW5mbykge1xuICAgIHNzaHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignQ0hBTk5FTF9PUEVOX0NPTkZJUk1BVElPTjonICsgbG9jYWxDaGFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MpO1xuICAgIHNzaHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignQ0hBTk5FTF9PUEVOX0ZBSUxVUkU6JyArIGxvY2FsQ2hhbiwgb25GYWlsdXJlKTtcbiAgICBzc2hzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ0NIQU5ORUxfQ0xPU0U6JyArIGxvY2FsQ2hhbiwgb25GYWlsdXJlKTtcblxuICAgIGRlbGV0ZSBzZWxmLl9jaGFubmVsc1tsb2NhbENoYW5dO1xuXG4gICAgdmFyIGVycjtcbiAgICBpZiAoaW5mbyBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgZXJyID0gaW5mbztcbiAgICBlbHNlIGlmICh0eXBlb2YgaW5mbyA9PT0gJ29iamVjdCcgJiYgaW5mbyAhPT0gbnVsbCkge1xuICAgICAgZXJyID0gbmV3IEVycm9yKCcoU1NIKSBDaGFubmVsIG9wZW4gZmFpbHVyZTogJyArIGluZm8uZGVzY3JpcHRpb24pO1xuICAgICAgZXJyLnJlYXNvbiA9IGluZm8ucmVhc29uO1xuICAgICAgZXJyLmxhbmcgPSBpbmZvLmxhbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyciA9IG5ldyBFcnJvcignKFNTSCkgQ2hhbm5lbCBvcGVuIGZhaWx1cmU6ICdcbiAgICAgICAgICAgICAgICAgICAgICArICdzZXJ2ZXIgY2xvc2VkIGNoYW5uZWwgdW5leHBlY3RlZGx5Jyk7XG4gICAgICBlcnIucmVhc29uID0gZXJyLmxhbmcgPSAnJztcbiAgICB9XG4gICAgY2IoZXJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0Q2hhbm5lbChzZWxmKSB7XG4gIC8vIGdldCB0aGUgbmV4dCBhdmFpbGFibGUgY2hhbm5lbCBudW1iZXJcblxuICAvLyBvcHRpbWl6ZWQgcGF0aFxuICBpZiAoc2VsZi5fY3VyQ2hhbiA8IE1BWF9DSEFOTkVMKVxuICAgIHJldHVybiArK3NlbGYuX2N1ckNoYW47XG5cbiAgLy8gc2xvd2VyIGxvb2t1cCBwYXRoXG4gIGZvciAodmFyIGkgPSAwLCBjaGFubmVscyA9IHNlbGYuX2NoYW5uZWxzOyBpIDwgTUFYX0NIQU5ORUw7ICsraSlcbiAgICBpZiAoIWNoYW5uZWxzW2ldKVxuICAgICAgcmV0dXJuIGk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXFYMTEoY2hhbiwgc2NyZWVuLCBjYikge1xuICAvLyBhc2tzIHNlcnZlciB0byBzdGFydCBzZW5kaW5nIHVzIFgxMSBjb25uZWN0aW9uc1xuICB2YXIgY2ZnID0ge1xuICAgIHNpbmdsZTogZmFsc2UsXG4gICAgcHJvdG9jb2w6ICdNSVQtTUFHSUMtQ09PS0lFLTEnLFxuICAgIGNvb2tpZTogdW5kZWZpbmVkLFxuICAgIHNjcmVlbjogMFxuICB9O1xuXG4gIGlmICh0eXBlb2Ygc2NyZWVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBzY3JlZW47XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNjcmVlbiA9PT0gJ29iamVjdCcgJiYgc2NyZWVuICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBzY3JlZW4uc2luZ2xlID09PSAnYm9vbGVhbicpXG4gICAgICBjZmcuc2luZ2xlID0gc2NyZWVuLnNpbmdsZTtcbiAgICBpZiAodHlwZW9mIHNjcmVlbi5zY3JlZW4gPT09ICdudW1iZXInKVxuICAgICAgY2ZnLnNjcmVlbiA9IHNjcmVlbi5zY3JlZW47XG4gICAgaWYgKHR5cGVvZiBzY3JlZW4ucHJvdG9jb2wgPT09ICdzdHJpbmcnKVxuICAgICAgY2ZnLnByb3RvY29sID0gc2NyZWVuLnByb3RvY29sO1xuICAgIGlmICh0eXBlb2Ygc2NyZWVuLmNvb2tpZSA9PT0gJ3N0cmluZycpXG4gICAgICBjZmcuY29va2llID0gc2NyZWVuLmNvb2tpZTtcbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoc2NyZWVuLmNvb2tpZSkpXG4gICAgICBjZmcuY29va2llID0gc2NyZWVuLmNvb2tpZS50b1N0cmluZygnaGV4Jyk7XG4gIH1cbiAgaWYgKGNmZy5jb29raWUgPT09IHVuZGVmaW5lZClcbiAgICBjZmcuY29va2llID0gcmFuZG9tQ29va2llKCk7XG5cbiAgdmFyIHdhbnRSZXBseSA9ICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpO1xuXG4gIGlmIChjaGFuLm91dGdvaW5nLnN0YXRlICE9PSAnb3BlbicpIHtcbiAgICB3YW50UmVwbHkgJiYgY2IobmV3IEVycm9yKCdDaGFubmVsIGlzIG5vdCBvcGVuJykpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHdhbnRSZXBseSkge1xuICAgIGNoYW4uX2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKGhhZF9lcnIpIHtcbiAgICAgIGlmIChoYWRfZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihoYWRfZXJyICE9PSB0cnVlXG4gICAgICAgICAgICAgICAgICA/IGhhZF9lcnJcbiAgICAgICAgICAgICAgICAgIDogbmV3IEVycm9yKCdVbmFibGUgdG8gcmVxdWVzdCBYMTEnKSk7XG4gICAgICB9XG5cbiAgICAgIGNoYW4uX2hhc1gxMSA9IHRydWU7XG4gICAgICArK2NoYW4uX2NsaWVudC5fYWNjZXB0WDExO1xuICAgICAgY2hhbi5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2hhbi5fY2xpZW50Ll9hY2NlcHRYMTEpXG4gICAgICAgICAgLS1jaGFuLl9jbGllbnQuX2FjY2VwdFgxMTtcbiAgICAgIH0pO1xuXG4gICAgICBjYigpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNoYW4uX2NsaWVudC5fc3Noc3RyZWFtLngxMUZvcndhcmQoY2hhbi5vdXRnb2luZy5pZCwgY2ZnLCB3YW50UmVwbHkpO1xufVxuXG5mdW5jdGlvbiByZXFQdHkoY2hhbiwgb3B0cywgY2IpIHtcbiAgdmFyIHJvd3MgPSAyNDtcbiAgdmFyIGNvbHMgPSA4MDtcbiAgdmFyIHdpZHRoID0gNjQwO1xuICB2YXIgaGVpZ2h0ID0gNDgwO1xuICB2YXIgdGVybSA9ICd2dDEwMCc7XG4gIHZhciBtb2RlcyA9IG51bGw7XG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKVxuICAgIGNiID0gb3B0cztcbiAgZWxzZSBpZiAodHlwZW9mIG9wdHMgPT09ICdvYmplY3QnICYmIG9wdHMgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMucm93cyA9PT0gJ251bWJlcicpXG4gICAgICByb3dzID0gb3B0cy5yb3dzO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5jb2xzID09PSAnbnVtYmVyJylcbiAgICAgIGNvbHMgPSBvcHRzLmNvbHM7XG4gICAgaWYgKHR5cGVvZiBvcHRzLndpZHRoID09PSAnbnVtYmVyJylcbiAgICAgIHdpZHRoID0gb3B0cy53aWR0aDtcbiAgICBpZiAodHlwZW9mIG9wdHMuaGVpZ2h0ID09PSAnbnVtYmVyJylcbiAgICAgIGhlaWdodCA9IG9wdHMuaGVpZ2h0O1xuICAgIGlmICh0eXBlb2Ygb3B0cy50ZXJtID09PSAnc3RyaW5nJylcbiAgICAgIHRlcm0gPSBvcHRzLnRlcm07XG4gICAgaWYgKHR5cGVvZiBvcHRzLm1vZGVzID09PSAnb2JqZWN0JylcbiAgICAgIG1vZGVzID0gb3B0cy5tb2RlcztcbiAgfVxuXG4gIHZhciB3YW50UmVwbHkgPSAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKTtcblxuICBpZiAoY2hhbi5vdXRnb2luZy5zdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgd2FudFJlcGx5ICYmIGNiKG5ldyBFcnJvcignQ2hhbm5lbCBpcyBub3Qgb3BlbicpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh3YW50UmVwbHkpIHtcbiAgICBjaGFuLl9jYWxsYmFja3MucHVzaChmdW5jdGlvbihoYWRfZXJyKSB7XG4gICAgICBpZiAoaGFkX2Vycikge1xuICAgICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgPyBoYWRfZXJyXG4gICAgICAgICAgICAgICAgICA6IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlcXVlc3QgYSBwc2V1ZG8tdGVybWluYWwnKSk7XG4gICAgICB9XG4gICAgICBjYigpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNoYW4uX2NsaWVudC5fc3Noc3RyZWFtLnB0eShjaGFuLm91dGdvaW5nLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YW50UmVwbHkpO1xufVxuXG5mdW5jdGlvbiByZXFBZ2VudEZ3ZChjaGFuLCBjYikge1xuICB2YXIgd2FudFJlcGx5ID0gKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyk7XG5cbiAgaWYgKGNoYW4ub3V0Z29pbmcuc3RhdGUgIT09ICdvcGVuJykge1xuICAgIHdhbnRSZXBseSAmJiBjYihuZXcgRXJyb3IoJ0NoYW5uZWwgaXMgbm90IG9wZW4nKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoY2hhbi5fY2xpZW50Ll9hZ2VudEZ3ZEVuYWJsZWQpIHtcbiAgICB3YW50UmVwbHkgJiYgY2IoZmFsc2UpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY2hhbi5fY2xpZW50Ll9hZ2VudEZ3ZEVuYWJsZWQgPSB0cnVlO1xuXG4gIGNoYW4uX2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKGhhZF9lcnIpIHtcbiAgICBpZiAoaGFkX2Vycikge1xuICAgICAgY2hhbi5fY2xpZW50Ll9hZ2VudEZ3ZEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHdhbnRSZXBseSAmJiBjYihoYWRfZXJyICE9PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgPyBoYWRfZXJyXG4gICAgICAgICAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZXF1ZXN0IGFnZW50IGZvcndhcmRpbmcnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FudFJlcGx5ICYmIGNiKCk7XG4gIH0pO1xuXG4gIHJldHVybiBjaGFuLl9jbGllbnQuX3NzaHN0cmVhbS5vcGVuc3NoX2FnZW50Rm9yd2FyZChjaGFuLm91dGdvaW5nLmlkLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gcmVxU2hlbGwoY2hhbiwgY2IpIHtcbiAgaWYgKGNoYW4ub3V0Z29pbmcuc3RhdGUgIT09ICdvcGVuJykge1xuICAgIGNiKG5ldyBFcnJvcignQ2hhbm5lbCBpcyBub3Qgb3BlbicpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjaGFuLl9jYWxsYmFja3MucHVzaChmdW5jdGlvbihoYWRfZXJyKSB7XG4gICAgaWYgKGhhZF9lcnIpIHtcbiAgICAgIHJldHVybiBjYihoYWRfZXJyICE9PSB0cnVlXG4gICAgICAgICAgICAgICAgPyBoYWRfZXJyXG4gICAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1VuYWJsZSB0byBvcGVuIHNoZWxsJykpO1xuICAgIH1cbiAgICBjaGFuLnN1YnR5cGUgPSAnc2hlbGwnO1xuICAgIGNiKHVuZGVmaW5lZCwgY2hhbik7XG4gIH0pO1xuXG4gIHJldHVybiBjaGFuLl9jbGllbnQuX3NzaHN0cmVhbS5zaGVsbChjaGFuLm91dGdvaW5nLmlkLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gcmVxRXhlYyhjaGFuLCBjbWQsIG9wdHMsIGNiKSB7XG4gIGlmIChjaGFuLm91dGdvaW5nLnN0YXRlICE9PSAnb3BlbicpIHtcbiAgICBjYihuZXcgRXJyb3IoJ0NoYW5uZWwgaXMgbm90IG9wZW4nKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2hhbi5fY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oaGFkX2Vycikge1xuICAgIGlmIChoYWRfZXJyKSB7XG4gICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgID8gaGFkX2VyclxuICAgICAgICAgICAgICAgIDogbmV3IEVycm9yKCdVbmFibGUgdG8gZXhlYycpKTtcbiAgICB9XG4gICAgY2hhbi5zdWJ0eXBlID0gJ2V4ZWMnO1xuICAgIGNoYW4uYWxsb3dIYWxmT3BlbiA9IChvcHRzLmFsbG93SGFsZk9wZW4gIT09IGZhbHNlKTtcbiAgICBjYih1bmRlZmluZWQsIGNoYW4pO1xuICB9KTtcblxuICByZXR1cm4gY2hhbi5fY2xpZW50Ll9zc2hzdHJlYW0uZXhlYyhjaGFuLm91dGdvaW5nLmlkLCBjbWQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiByZXFFbnYoY2hhbiwgZW52KSB7XG4gIGlmIChjaGFuLm91dGdvaW5nLnN0YXRlICE9PSAnb3BlbicpXG4gICAgcmV0dXJuIHRydWU7XG4gIHZhciByZXQgPSB0cnVlO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudiB8fCB7fSk7XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHZhbCA9IGVudltrZXldO1xuICAgIHJldCA9IGNoYW4uX2NsaWVudC5fc3Noc3RyZWFtLmVudihjaGFuLm91dGdvaW5nLmlkLCBrZXksIHZhbCwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gcmVxU3Vic3lzdGVtKGNoYW4sIG5hbWUsIGNiKSB7XG4gIGlmIChjaGFuLm91dGdvaW5nLnN0YXRlICE9PSAnb3BlbicpIHtcbiAgICBjYihuZXcgRXJyb3IoJ0NoYW5uZWwgaXMgbm90IG9wZW4nKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2hhbi5fY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oaGFkX2Vycikge1xuICAgIGlmIChoYWRfZXJyKSB7XG4gICAgICByZXR1cm4gY2IoaGFkX2VyciAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgID8gaGFkX2VyclxuICAgICAgICAgICAgICAgIDogbmV3IEVycm9yKCdVbmFibGUgdG8gc3RhcnQgc3Vic3lzdGVtOiAnICsgbmFtZSkpO1xuICAgIH1cbiAgICBjaGFuLnN1YnR5cGUgPSAnc3Vic3lzdGVtJztcbiAgICBjYih1bmRlZmluZWQsIGNoYW4pO1xuICB9KTtcblxuICByZXR1cm4gY2hhbi5fY2xpZW50Ll9zc2hzdHJlYW0uc3Vic3lzdGVtKGNoYW4ub3V0Z29pbmcuaWQsIG5hbWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBvbkNIQU5ORUxfT1BFTihzZWxmLCBpbmZvKSB7XG4gIC8vIHRoZSBzZXJ2ZXIgaXMgdHJ5aW5nIHRvIG9wZW4gYSBjaGFubmVsIHdpdGggdXMsIHRoaXMgaXMgdXN1YWxseSB3aGVuXG4gIC8vIHdlIGFza2VkIHRoZSBzZXJ2ZXIgdG8gZm9yd2FyZCB1cyBjb25uZWN0aW9ucyBvbiBzb21lIHBvcnQgYW5kIG5vdyB0aGV5XG4gIC8vIGFyZSBhc2tpbmcgdXMgdG8gYWNjZXB0L2RlbnkgYW4gaW5jb21pbmcgY29ubmVjdGlvbiBvbiB0aGVpciBzaWRlXG5cbiAgdmFyIGxvY2FsQ2hhbiA9IGZhbHNlO1xuICB2YXIgcmVhc29uO1xuXG4gIGZ1bmN0aW9uIGFjY2VwdCgpIHtcbiAgICB2YXIgY2hhbmluZm8gPSB7XG4gICAgICB0eXBlOiBpbmZvLnR5cGUsXG4gICAgICBpbmNvbWluZzoge1xuICAgICAgICBpZDogbG9jYWxDaGFuLFxuICAgICAgICB3aW5kb3c6IENoYW5uZWwuTUFYX1dJTkRPVyxcbiAgICAgICAgcGFja2V0U2l6ZTogQ2hhbm5lbC5QQUNLRVRfU0laRSxcbiAgICAgICAgc3RhdGU6ICdvcGVuJ1xuICAgICAgfSxcbiAgICAgIG91dGdvaW5nOiB7XG4gICAgICAgIGlkOiBpbmZvLnNlbmRlcixcbiAgICAgICAgd2luZG93OiBpbmZvLndpbmRvdyxcbiAgICAgICAgcGFja2V0U2l6ZTogaW5mby5wYWNrZXRTaXplLFxuICAgICAgICBzdGF0ZTogJ29wZW4nXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RyZWFtID0gbmV3IENoYW5uZWwoY2hhbmluZm8sIHNlbGYpO1xuXG4gICAgc2VsZi5fc3Noc3RyZWFtLmNoYW5uZWxPcGVuQ29uZmlybShpbmZvLnNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsQ2hhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWwuTUFYX1dJTkRPVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWwuUEFDS0VUX1NJWkUpO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cbiAgZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgIGlmIChyZWFzb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGxvY2FsQ2hhbiA9PT0gZmFsc2UpXG4gICAgICAgIHJlYXNvbiA9IGNvbnN0cy5DSEFOTkVMX09QRU5fRkFJTFVSRS5SRVNPVVJDRV9TSE9SVEFHRTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVhc29uID0gY29uc3RzLkNIQU5ORUxfT1BFTl9GQUlMVVJFLkNPTk5FQ1RfRkFJTEVEO1xuICAgIH1cblxuICAgIHNlbGYuX3NzaHN0cmVhbS5jaGFubmVsT3BlbkZhaWwoaW5mby5zZW5kZXIsIHJlYXNvbiwgJycsICcnKTtcbiAgfVxuXG4gIGlmIChpbmZvLnR5cGUgPT09ICdmb3J3YXJkZWQtdGNwaXAnXG4gICAgICB8fCBpbmZvLnR5cGUgPT09ICd4MTEnXG4gICAgICB8fCBpbmZvLnR5cGUgPT09ICdhdXRoLWFnZW50QG9wZW5zc2guY29tJ1xuICAgICAgfHwgaW5mby50eXBlID09PSAnZm9yd2FyZGVkLXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJykge1xuXG4gICAgLy8gY2hlY2sgZm9yIGNvbmRpdGlvbnMgZm9yIGF1dG9tYXRpYyByZWplY3Rpb25cbiAgICB2YXIgcmVqZWN0Q29ubiA9IChcbiAgICAgKGluZm8udHlwZSA9PT0gJ2ZvcndhcmRlZC10Y3BpcCdcbiAgICAgICYmIHNlbGYuX2ZvcndhcmRpbmdbaW5mby5kYXRhLmRlc3RJUFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgJzonXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBpbmZvLmRhdGEuZGVzdFBvcnRdID09PSB1bmRlZmluZWQpXG4gICAgIHx8IChpbmZvLnR5cGUgPT09ICdmb3J3YXJkZWQtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20nXG4gICAgICAgICAmJiBzZWxmLl9mb3J3YXJkaW5nVW5peFtpbmZvLmRhdGEuc29ja2V0UGF0aF0gPT09IHVuZGVmaW5lZClcbiAgICAgfHwgKGluZm8udHlwZSA9PT0gJ3gxMScgJiYgc2VsZi5fYWNjZXB0WDExID09PSAwKVxuICAgICB8fCAoaW5mby50eXBlID09PSAnYXV0aC1hZ2VudEBvcGVuc3NoLmNvbSdcbiAgICAgICAgICYmICFzZWxmLl9hZ2VudEZ3ZEVuYWJsZWQpXG4gICAgKTtcblxuICAgIGlmICghcmVqZWN0Q29ubikge1xuICAgICAgbG9jYWxDaGFuID0gbmV4dENoYW5uZWwoc2VsZik7XG5cbiAgICAgIGlmIChsb2NhbENoYW4gPT09IGZhbHNlKSB7XG4gICAgICAgIHNlbGYuY29uZmlnLmRlYnVnKCdERUJVRzogQ2xpZW50OiBBdXRvbWF0aWMgcmVqZWN0aW9uIG9mIGluY29taW5nIGNoYW5uZWwgb3Blbjogbm8gY2hhbm5lbHMgYXZhaWxhYmxlJyk7XG4gICAgICAgIHJlamVjdENvbm4gPSB0cnVlO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHNlbGYuX2NoYW5uZWxzW2xvY2FsQ2hhbl0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFzb24gPSBjb25zdHMuQ0hBTk5FTF9PUEVOX0ZBSUxVUkUuQURNSU5JU1RSQVRJVkVMWV9QUk9ISUJJVEVEO1xuICAgICAgc2VsZi5jb25maWcuZGVidWcoJ0RFQlVHOiBDbGllbnQ6IEF1dG9tYXRpYyByZWplY3Rpb24gb2YgaW5jb21pbmcgY2hhbm5lbCBvcGVuOiB1bmV4cGVjdGVkIGNoYW5uZWwgb3BlbiBmb3I6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgaW5mby50eXBlKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBhdXRvbWF0aWMgcmVqZWN0aW9uIGFmdGVyIHNvbWUgdGltZW91dD9cblxuICAgIGlmIChyZWplY3RDb25uKVxuICAgICAgcmVqZWN0KCk7XG5cbiAgICBpZiAobG9jYWxDaGFuICE9PSBmYWxzZSkge1xuICAgICAgaWYgKGluZm8udHlwZSA9PT0gJ2ZvcndhcmRlZC10Y3BpcCcpIHtcbiAgICAgICAgaWYgKGluZm8uZGF0YS5kZXN0UG9ydCA9PT0gMCkge1xuICAgICAgICAgIGluZm8uZGF0YS5kZXN0UG9ydCA9IHNlbGYuX2ZvcndhcmRpbmdbaW5mby5kYXRhLmRlc3RJUFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnOidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgaW5mby5kYXRhLmRlc3RQb3J0XTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmVtaXQoJ3RjcCBjb25uZWN0aW9uJywgaW5mby5kYXRhLCBhY2NlcHQsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgaWYgKGluZm8udHlwZSA9PT0gJ3gxMScpIHtcbiAgICAgICAgc2VsZi5lbWl0KCd4MTEnLCBpbmZvLmRhdGEsIGFjY2VwdCwgcmVqZWN0KTtcbiAgICAgIH0gZWxzZSBpZiAoaW5mby50eXBlID09PSAnZm9yd2FyZGVkLXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJykge1xuICAgICAgICBzZWxmLmVtaXQoJ3VuaXggY29ubmVjdGlvbicsIGluZm8uZGF0YSwgYWNjZXB0LCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWdlbnRRdWVyeShzZWxmLmNvbmZpZy5hZ2VudCwgYWNjZXB0LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBhdXRvbWF0aWNhbGx5IHJlamVjdCBhbnkgdW5zdXBwb3J0ZWQgY2hhbm5lbCBvcGVuIHJlcXVlc3RzXG4gICAgc2VsZi5jb25maWcuZGVidWcoJ0RFQlVHOiBDbGllbnQ6IEF1dG9tYXRpYyByZWplY3Rpb24gb2YgaW5jb21pbmcgY2hhbm5lbCBvcGVuOiB1bnN1cHBvcnRlZCB0eXBlOiAnXG4gICAgICAgICAgICAgICAgICAgICAgKyBpbmZvLnR5cGUpO1xuICAgIHJlYXNvbiA9IGNvbnN0cy5DSEFOTkVMX09QRU5fRkFJTFVSRS5VTktOT1dOX0NIQU5ORUxfVFlQRTtcbiAgICByZWplY3QoKTtcbiAgfVxufVxuXG52YXIgcmFuZG9tQ29va2llID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21GaWxsU3luYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMTYpO1xuICAgIHJldHVybiBmdW5jdGlvbiByYW5kb21Db29raWUoKSB7XG4gICAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMoYnVmZmVyLCAwLCAxNik7XG4gICAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiByYW5kb21Db29raWUoKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnaGV4Jyk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxuQ2xpZW50LkNsaWVudCA9IENsaWVudDtcbkNsaWVudC5TZXJ2ZXIgPSByZXF1aXJlKCcuL3NlcnZlcicpO1xuLy8gcGFzcyBzb21lIHVzZWZ1bCB1dGlsaXRpZXMgb24gdG8gZW5kIHVzZXIgKGUuZy4gcGFyc2VLZXkoKSlcbkNsaWVudC51dGlscyA9IHNzaDJfc3RyZWFtcy51dGlscztcbi8vIGV4cG9zZSB1c2VmdWwgU0ZUUFN0cmVhbSBjb25zdGFudHMgZm9yIHNmdHAgc2VydmVyIHVzYWdlXG5DbGllbnQuU0ZUUF9TVEFUVVNfQ09ERSA9IFNGVFBTdHJlYW0uU1RBVFVTX0NPREU7XG5DbGllbnQuU0ZUUF9PUEVOX01PREUgPSBTRlRQU3RyZWFtLk9QRU5fTU9ERTtcbi8vIGV4cG9zZSBodHRwKHMpLkFnZW50IGltcGxlbWVudGF0aW9ucyB0byBhbGxvdyBlYXN5IHR1bm5lbGluZyBvZiBIVFRQKFMpXG4vLyByZXF1ZXN0c1xuQ2xpZW50LkhUVFBBZ2VudCA9IEhUVFBBZ2VudHMuU1NIVFRQQWdlbnQ7XG5DbGllbnQuSFRUUFNBZ2VudCA9IEhUVFBBZ2VudHMuU1NIVFRQU0FnZW50O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudDsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFzc2VydFwiKTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbnZhciBzYWZlciA9IHt9XG5cbnZhciBrZXlcblxuZm9yIChrZXkgaW4gYnVmZmVyKSB7XG4gIGlmICghYnVmZmVyLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlXG4gIGlmIChrZXkgPT09ICdTbG93QnVmZmVyJyB8fCBrZXkgPT09ICdCdWZmZXInKSBjb250aW51ZVxuICBzYWZlcltrZXldID0gYnVmZmVyW2tleV1cbn1cblxudmFyIFNhZmVyID0gc2FmZXIuQnVmZmVyID0ge31cbmZvciAoa2V5IGluIEJ1ZmZlcikge1xuICBpZiAoIUJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZVxuICBpZiAoa2V5ID09PSAnYWxsb2NVbnNhZmUnIHx8IGtleSA9PT0gJ2FsbG9jVW5zYWZlU2xvdycpIGNvbnRpbnVlXG4gIFNhZmVyW2tleV0gPSBCdWZmZXJba2V5XVxufVxuXG5zYWZlci5CdWZmZXIucHJvdG90eXBlID0gQnVmZmVyLnByb3RvdHlwZVxuXG5pZiAoIVNhZmVyLmZyb20gfHwgU2FmZXIuZnJvbSA9PT0gVWludDhBcnJheS5mcm9tKSB7XG4gIFNhZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgdmFsdWUpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiB2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG59XG5cbmlmICghU2FmZXIuYWxsb2MpIHtcbiAgU2FmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHNpemUpXG4gICAgfVxuICAgIGlmIChzaXplIDwgMCB8fCBzaXplID49IDIgKiAoMSA8PCAzMCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICAgIH1cbiAgICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gICAgaWYgKCFmaWxsIHx8IGZpbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICBidWYuZmlsbCgwKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxufVxuXG5pZiAoIXNhZmVyLmtTdHJpbmdNYXhMZW5ndGgpIHtcbiAgdHJ5IHtcbiAgICBzYWZlci5rU3RyaW5nTWF4TGVuZ3RoID0gcHJvY2Vzcy5iaW5kaW5nKCdidWZmZXInKS5rU3RyaW5nTWF4TGVuZ3RoXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyB3ZSBjYW4ndCBkZXRlcm1pbmUga1N0cmluZ01heExlbmd0aCBpbiBlbnZpcm9ubWVudHMgd2hlcmUgcHJvY2Vzcy5iaW5kaW5nXG4gICAgLy8gaXMgdW5zdXBwb3J0ZWQsIHNvIGxldCdzIG5vdCBzZXQgaXRcbiAgfVxufVxuXG5pZiAoIXNhZmVyLmNvbnN0YW50cykge1xuICBzYWZlci5jb25zdGFudHMgPSB7XG4gICAgTUFYX0xFTkdUSDogc2FmZXIua01heExlbmd0aFxuICB9XG4gIGlmIChzYWZlci5rU3RyaW5nTWF4TGVuZ3RoKSB7XG4gICAgc2FmZXIuY29uc3RhbnRzLk1BWF9TVFJJTkdfTEVOR1RIID0gc2FmZXIua1N0cmluZ01heExlbmd0aFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FmZXJcbiIsIi8vIFRPRE86XG4vLyAgICAqIHV0aWxpemUgYGNyeXB0by5jcmVhdGUoUHJpdmF0ZXxQdWJsaWMpS2V5KClgIGFuZCBga2V5T2JqZWN0LmV4cG9ydCgpYFxuLy8gICAgKiBoYW5kbGUgbXVsdGktbGluZSBoZWFkZXIgdmFsdWVzIChPcGVuU1NIKT9cbi8vICAgICogbW9yZSB0aG9yb3VnaCB2YWxpZGF0aW9uP1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgY3J5cHRvU2lnbiA9IGNyeXB0by5zaWduO1xudmFyIGNyeXB0b1ZlcmlmeSA9IGNyeXB0by52ZXJpZnk7XG52YXIgY3JlYXRlU2lnbiA9IGNyeXB0by5jcmVhdGVTaWduO1xudmFyIGNyZWF0ZVZlcmlmeSA9IGNyeXB0by5jcmVhdGVWZXJpZnk7XG52YXIgY3JlYXRlRGVjaXBoZXJpdiA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2O1xudmFyIGNyZWF0ZUhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaDtcbnZhciBjcmVhdGVIbWFjID0gY3J5cHRvLmNyZWF0ZUhtYWM7XG52YXIgc3VwcG9ydGVkT3BlblNTTENpcGhlcnMgPSBjcnlwdG8uZ2V0Q2lwaGVycygpO1xuXG52YXIgdXRpbHM7XG52YXIgQmVyID0gcmVxdWlyZSgnYXNuMScpLkJlcjtcbnZhciBiY3J5cHRfcGJrZGYgPSByZXF1aXJlKCdiY3J5cHQtcGJrZGYnKS5wYmtkZjtcblxudmFyIGJ1ZmZlckhlbHBlcnMgPSByZXF1aXJlKCcuL2J1ZmZlci1oZWxwZXJzJyk7XG52YXIgcmVhZFVJbnQzMkJFID0gYnVmZmVySGVscGVycy5yZWFkVUludDMyQkU7XG52YXIgd3JpdGVVSW50MzJCRSA9IGJ1ZmZlckhlbHBlcnMud3JpdGVVSW50MzJCRTtcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xudmFyIFNVUFBPUlRFRF9DSVBIRVIgPSBjb25zdGFudHMuQUxHT1JJVEhNUy5TVVBQT1JURURfQ0lQSEVSO1xudmFyIENJUEhFUl9JTkZPID0gY29uc3RhbnRzLkNJUEhFUl9JTkZPO1xudmFyIFNTSF9UT19PUEVOU1NMID0gY29uc3RhbnRzLlNTSF9UT19PUEVOU1NMO1xudmFyIEVERFNBX1NVUFBPUlRFRCA9IGNvbnN0YW50cy5FRERTQV9TVVBQT1JURUQ7XG5cbnZhciBTWU1fSEFTSF9BTEdPID0gU3ltYm9sKCdIYXNoIEFsZ29yaXRobScpO1xudmFyIFNZTV9QUklWX1BFTSA9IFN5bWJvbCgnUHJpdmF0ZSBrZXkgUEVNJyk7XG52YXIgU1lNX1BVQl9QRU0gPSBTeW1ib2woJ1B1YmxpYyBrZXkgUEVNJyk7XG52YXIgU1lNX1BVQl9TU0ggPSBTeW1ib2woJ1B1YmxpYyBrZXkgU1NIJyk7XG52YXIgU1lNX0RFQ1JZUFRFRCA9IFN5bWJvbCgnRGVjcnlwdGVkIEtleScpO1xuXG4vLyBDcmVhdGUgT3BlblNTTCBjaXBoZXIgbmFtZSAtPiBTU0ggY2lwaGVyIG5hbWUgY29udmVyc2lvbiB0YWJsZVxudmFyIENJUEhFUl9JTkZPX09QRU5TU0wgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuKGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKENJUEhFUl9JTkZPKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGNpcGhlck5hbWUgPSBTU0hfVE9fT1BFTlNTTFtrZXlzW2ldXTtcbiAgICBpZiAoIWNpcGhlck5hbWUgfHwgQ0lQSEVSX0lORk9fT1BFTlNTTFtjaXBoZXJOYW1lXSlcbiAgICAgIGNvbnRpbnVlO1xuICAgIENJUEhFUl9JTkZPX09QRU5TU0xbY2lwaGVyTmFtZV0gPSBDSVBIRVJfSU5GT1trZXlzW2ldXTtcbiAgfVxufSkoKTtcblxudmFyIHRyaW1TdGFydCA9IChmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLnRyaW1TdGFydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiB0cmltU3RhcnQoc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnRyaW1TdGFydCgpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgICAgY2FzZSAzMjogLy8gJyAnXG4gICAgICAgIGNhc2UgOTogLy8gJ1xcdCdcbiAgICAgICAgY2FzZSAxMzogLy8gJ1xccidcbiAgICAgICAgY2FzZSAxMDogLy8gJ1xcbidcbiAgICAgICAgY2FzZSAxMjogLy8gJ1xcZidcbiAgICAgICAgICArK3N0YXJ0O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PT0gMClcbiAgICAgIHJldHVybiBzdHI7XG4gICAgcmV0dXJuIHN0ci5zbGljZShzdGFydCk7XG4gIH07XG59KSgpO1xuXG5mdW5jdGlvbiBtYWtlUEVNKHR5cGUsIGRhdGEpIHtcbiAgZGF0YSA9IGRhdGEudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICByZXR1cm4gJy0tLS0tQkVHSU4gJyArIHR5cGUgKyAnIEtFWS0tLS0tXFxuJ1xuICAgICAgICAgKyBkYXRhLnJlcGxhY2UoLy57NjR9L2csICckJlxcbicpXG4gICAgICAgICArIChkYXRhLmxlbmd0aCAlIDY0ID8gJ1xcbicgOiAnJylcbiAgICAgICAgICsgJy0tLS0tRU5EICcgKyB0eXBlICsgJyBLRVktLS0tLSc7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVCdWZmZXJzKGJ1ZjEsIGJ1ZjIpIHtcbiAgdmFyIHJlc3VsdCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWYxLmxlbmd0aCArIGJ1ZjIubGVuZ3RoKTtcbiAgYnVmMS5jb3B5KHJlc3VsdCwgMCk7XG4gIGJ1ZjIuY29weShyZXN1bHQsIGJ1ZjEubGVuZ3RoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2tpcEZpZWxkcyhidWYsIG5maWVsZHMpIHtcbiAgdmFyIGJ1ZkxlbiA9IGJ1Zi5sZW5ndGg7XG4gIHZhciBwb3MgPSAoYnVmLl9wb3MgfHwgMCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmZpZWxkczsgKytpKSB7XG4gICAgdmFyIGxlZnQgPSAoYnVmTGVuIC0gcG9zKTtcbiAgICBpZiAocG9zID49IGJ1ZkxlbiB8fCBsZWZ0IDwgNClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgbGVuID0gcmVhZFVJbnQzMkJFKGJ1ZiwgcG9zKTtcbiAgICBpZiAobGVmdCA8IDQgKyBsZW4pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcG9zICs9IDQgKyBsZW47XG4gIH1cbiAgYnVmLl9wb3MgPSBwb3M7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZW5PcGVuU1NMUlNBUHViKG4sIGUpIHtcbiAgdmFyIGFzbldyaXRlciA9IG5ldyBCZXIuV3JpdGVyKCk7XG4gIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgLy8gYWxnb3JpdGhtXG4gICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAgIGFzbldyaXRlci53cml0ZU9JRCgnMS4yLjg0MC4xMTM1NDkuMS4xLjEnKTsgLy8gcnNhRW5jcnlwdGlvblxuICAgICAgLy8gYWxnb3JpdGhtIHBhcmFtZXRlcnMgKFJTQSBoYXMgbm9uZSlcbiAgICAgIGFzbldyaXRlci53cml0ZU51bGwoKTtcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcblxuICAgIC8vIHN1YmplY3RQdWJsaWNLZXlcbiAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZShCZXIuQml0U3RyaW5nKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ5dGUoMHgwMCk7XG4gICAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZSgpO1xuICAgICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIobiwgQmVyLkludGVnZXIpO1xuICAgICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIoZSwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICByZXR1cm4gbWFrZVBFTSgnUFVCTElDJywgYXNuV3JpdGVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGdlbk9wZW5TU0hSU0FQdWIobiwgZSkge1xuICB2YXIgcHVibGljS2V5ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyA3IC8vIFwic3NoLXJzYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgbi5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBlLmxlbmd0aCk7XG5cbiAgd3JpdGVVSW50MzJCRShwdWJsaWNLZXksIDcsIDApO1xuICBwdWJsaWNLZXkud3JpdGUoJ3NzaC1yc2EnLCA0LCA3LCAnYXNjaWknKTtcblxuICB2YXIgaSA9IDQgKyA3O1xuICB3cml0ZVVJbnQzMkJFKHB1YmxpY0tleSwgZS5sZW5ndGgsIGkpO1xuICBlLmNvcHkocHVibGljS2V5LCBpICs9IDQpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCBuLmxlbmd0aCwgaSArPSBlLmxlbmd0aCk7XG4gIG4uY29weShwdWJsaWNLZXksIGkgKyA0KTtcblxuICByZXR1cm4gcHVibGljS2V5O1xufVxuXG52YXIgZ2VuT3BlblNTTFJTQVByaXYgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIGdlblJTQUFTTjFCdWYobiwgZSwgZCwgcCwgcSwgZG1wMSwgZG1xMSwgaXFtcCkge1xuICAgIHZhciBhc25Xcml0ZXIgPSBuZXcgQmVyLldyaXRlcigpO1xuICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVJbnQoMHgwMCwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKG4sIEJlci5JbnRlZ2VyKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihlLCBCZXIuSW50ZWdlcik7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIoZCwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKHAsIEJlci5JbnRlZ2VyKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihxLCBCZXIuSW50ZWdlcik7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIoZG1wMSwgQmVyLkludGVnZXIpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKGRtcTEsIEJlci5JbnRlZ2VyKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihpcW1wLCBCZXIuSW50ZWdlcik7XG4gICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gICAgcmV0dXJuIGFzbldyaXRlci5idWZmZXI7XG4gIH1cblxuICBmdW5jdGlvbiBiaWdJbnRGcm9tQnVmZmVyKGJ1Zikge1xuICAgIHJldHVybiBCaWdJbnQoJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4JykpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnSW50VG9CdWZmZXIoYm4pIHtcbiAgICB2YXIgaGV4ID0gYm4udG9TdHJpbmcoMTYpO1xuICAgIGlmICgoaGV4Lmxlbmd0aCAmIDEpICE9PSAwKSB7XG4gICAgICBoZXggPSAnMCcgKyBoZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzaWdiaXQgPSBoZXguY2hhckNvZGVBdCgwKTtcbiAgICAgIC8vIEJFUi9ERVIgaW50ZWdlcnMgcmVxdWlyZSBsZWFkaW5nIHplcm8gYnl0ZSB0byBkZW5vdGUgYSBwb3NpdGl2ZSB2YWx1ZVxuICAgICAgLy8gd2hlbiBmaXJzdCBieXRlID49IDB4ODBcbiAgICAgIGlmIChzaWdiaXQgPT09IDU2IHx8IChzaWdiaXQgPj0gOTcgJiYgc2lnYml0IDw9IDEwMikpXG4gICAgICAgIGhleCA9ICcwMCcgKyBoZXg7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShoZXgsICdoZXgnKTtcbiAgfVxuXG4gIC8vIEZlYXR1cmUgZGV0ZWN0IG5hdGl2ZSBCaWdJbnQgYXZhaWxhYmlsaXR5IGFuZCB1c2UgaXQgd2hlbiBwb3NzaWJsZVxuICB0cnkge1xuICAgIHZhciBjb2RlID0gW1xuICAgICAgJ3JldHVybiBmdW5jdGlvbiBnZW5PcGVuU1NMUlNBUHJpdihuLCBlLCBkLCBpcW1wLCBwLCBxKSB7JyxcbiAgICAgICcgIHZhciBibl9kID0gYmlnSW50RnJvbUJ1ZmZlcihkKTsnLFxuICAgICAgJyAgdmFyIGRtcDEgPSBiaWdJbnRUb0J1ZmZlcihibl9kICUgKGJpZ0ludEZyb21CdWZmZXIocCkgLSAxbikpOycsXG4gICAgICAnICB2YXIgZG1xMSA9IGJpZ0ludFRvQnVmZmVyKGJuX2QgJSAoYmlnSW50RnJvbUJ1ZmZlcihxKSAtIDFuKSk7JyxcbiAgICAgICcgIHJldHVybiBtYWtlUEVNKFxcJ1JTQSBQUklWQVRFXFwnLCAnXG4gICAgICAgICsgJ2dlblJTQUFTTjFCdWYobiwgZSwgZCwgcCwgcSwgZG1wMSwgZG1xMSwgaXFtcCkpOycsXG4gICAgICAnfTsnXG4gICAgXS5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFxuICAgICAgJ2JpZ0ludEZyb21CdWZmZXIsIGJpZ0ludFRvQnVmZmVyLCBtYWtlUEVNLCBnZW5SU0FBU04xQnVmJyxcbiAgICAgIGNvZGVcbiAgICApKGJpZ0ludEZyb21CdWZmZXIsIGJpZ0ludFRvQnVmZmVyLCBtYWtlUEVNLCBnZW5SU0FBU04xQnVmKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCcuL2pzYm4uanMnKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZW5PcGVuU1NMUlNBUHJpdihuLCBlLCBkLCBpcW1wLCBwLCBxKSB7XG4gICAgICAgIHZhciBwYmkgPSBuZXcgQmlnSW50ZWdlcihwLCAyNTYpO1xuICAgICAgICB2YXIgcWJpID0gbmV3IEJpZ0ludGVnZXIocSwgMjU2KTtcbiAgICAgICAgdmFyIGRiaSA9IG5ldyBCaWdJbnRlZ2VyKGQsIDI1Nik7XG4gICAgICAgIHZhciBkbXAxYmkgPSBkYmkubW9kKHBiaS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpO1xuICAgICAgICB2YXIgZG1xMWJpID0gZGJpLm1vZChxYmkuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpKTtcbiAgICAgICAgdmFyIGRtcDEgPSBCdWZmZXIuZnJvbShkbXAxYmkudG9CeXRlQXJyYXkoKSk7XG4gICAgICAgIHZhciBkbXExID0gQnVmZmVyLmZyb20oZG1xMWJpLnRvQnl0ZUFycmF5KCkpO1xuICAgICAgICByZXR1cm4gbWFrZVBFTSgnUlNBIFBSSVZBVEUnLFxuICAgICAgICAgICAgICAgICAgICAgICBnZW5SU0FBU04xQnVmKG4sIGUsIGQsIHAsIHEsIGRtcDEsIGRtcTEsIGlxbXApKTtcbiAgICAgIH07XG4gICAgfSkoKTtcbiAgfVxufSkoKTtcblxuZnVuY3Rpb24gZ2VuT3BlblNTTERTQVB1YihwLCBxLCBnLCB5KSB7XG4gIHZhciBhc25Xcml0ZXIgPSBuZXcgQmVyLldyaXRlcigpO1xuICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZSgpO1xuICAgIC8vIGFsZ29yaXRobVxuICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVPSUQoJzEuMi44NDAuMTAwNDAuNC4xJyk7IC8vIGlkLWRzYVxuICAgICAgLy8gYWxnb3JpdGhtIHBhcmFtZXRlcnNcbiAgICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihwLCBCZXIuSW50ZWdlcik7XG4gICAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihxLCBCZXIuSW50ZWdlcik7XG4gICAgICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihnLCBCZXIuSW50ZWdlcik7XG4gICAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcblxuICAgIC8vIHN1YmplY3RQdWJsaWNLZXlcbiAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZShCZXIuQml0U3RyaW5nKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ5dGUoMHgwMCk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIoeSwgQmVyLkludGVnZXIpO1xuICAgIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgcmV0dXJuIG1ha2VQRU0oJ1BVQkxJQycsIGFzbldyaXRlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBnZW5PcGVuU1NIRFNBUHViKHAsIHEsIGcsIHkpIHtcbiAgdmFyIHB1YmxpY0tleSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgNyAvLyBzc2gtZHNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgcC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBxLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIGcubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgeS5sZW5ndGgpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCA3LCAwKTtcbiAgcHVibGljS2V5LndyaXRlKCdzc2gtZHNzJywgNCwgNywgJ2FzY2lpJyk7XG5cbiAgdmFyIGkgPSA0ICsgNztcbiAgd3JpdGVVSW50MzJCRShwdWJsaWNLZXksIHAubGVuZ3RoLCBpKTtcbiAgcC5jb3B5KHB1YmxpY0tleSwgaSArPSA0KTtcblxuICB3cml0ZVVJbnQzMkJFKHB1YmxpY0tleSwgcS5sZW5ndGgsIGkgKz0gcC5sZW5ndGgpO1xuICBxLmNvcHkocHVibGljS2V5LCBpICs9IDQpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCBnLmxlbmd0aCwgaSArPSBxLmxlbmd0aCk7XG4gIGcuY29weShwdWJsaWNLZXksIGkgKz0gNCk7XG5cbiAgd3JpdGVVSW50MzJCRShwdWJsaWNLZXksIHkubGVuZ3RoLCBpICs9IGcubGVuZ3RoKTtcbiAgeS5jb3B5KHB1YmxpY0tleSwgaSArIDQpO1xuXG4gIHJldHVybiBwdWJsaWNLZXk7XG59XG5cbmZ1bmN0aW9uIGdlbk9wZW5TU0xEU0FQcml2KHAsIHEsIGcsIHksIHgpIHtcbiAgdmFyIGFzbldyaXRlciA9IG5ldyBCZXIuV3JpdGVyKCk7XG4gIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgYXNuV3JpdGVyLndyaXRlSW50KDB4MDAsIEJlci5JbnRlZ2VyKTtcbiAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIocCwgQmVyLkludGVnZXIpO1xuICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcihxLCBCZXIuSW50ZWdlcik7XG4gICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKGcsIEJlci5JbnRlZ2VyKTtcbiAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIoeSwgQmVyLkludGVnZXIpO1xuICAgIGFzbldyaXRlci53cml0ZUJ1ZmZlcih4LCBCZXIuSW50ZWdlcik7XG4gIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICByZXR1cm4gbWFrZVBFTSgnRFNBIFBSSVZBVEUnLCBhc25Xcml0ZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZ2VuT3BlblNTTEVkUHViKHB1Yikge1xuICB2YXIgYXNuV3JpdGVyID0gbmV3IEJlci5Xcml0ZXIoKTtcbiAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAvLyBhbGdvcml0aG1cbiAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZSgpO1xuICAgICAgYXNuV3JpdGVyLndyaXRlT0lEKCcxLjMuMTAxLjExMicpOyAvLyBpZC1FZDI1NTE5XG4gICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG5cbiAgICAvLyBQdWJsaWNLZXlcbiAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZShCZXIuQml0U3RyaW5nKTtcbiAgICAgIGFzbldyaXRlci53cml0ZUJ5dGUoMHgwMCk7XG4gICAgICAvLyBYWFg6IGhhY2sgdG8gd3JpdGUgYSByYXcgYnVmZmVyIHdpdGhvdXQgYSB0YWcgLS0geXVja1xuICAgICAgYXNuV3JpdGVyLl9lbnN1cmUocHViLmxlbmd0aCk7XG4gICAgICBwdWIuY29weShhc25Xcml0ZXIuX2J1ZiwgYXNuV3JpdGVyLl9vZmZzZXQsIDAsIHB1Yi5sZW5ndGgpO1xuICAgICAgYXNuV3JpdGVyLl9vZmZzZXQgKz0gcHViLmxlbmd0aDtcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gIHJldHVybiBtYWtlUEVNKCdQVUJMSUMnLCBhc25Xcml0ZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZ2VuT3BlblNTSEVkUHViKHB1Yikge1xuICB2YXIgcHVibGljS2V5ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxMSAvLyBzc2gtZWQyNTUxOVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHB1Yi5sZW5ndGgpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCAxMSwgMCk7XG4gIHB1YmxpY0tleS53cml0ZSgnc3NoLWVkMjU1MTknLCA0LCAxMSwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShwdWJsaWNLZXksIHB1Yi5sZW5ndGgsIDE1KTtcbiAgcHViLmNvcHkocHVibGljS2V5LCAxOSk7XG5cbiAgcmV0dXJuIHB1YmxpY0tleTtcbn1cblxuZnVuY3Rpb24gZ2VuT3BlblNTTEVkUHJpdihwcml2KSB7XG4gIHZhciBhc25Xcml0ZXIgPSBuZXcgQmVyLldyaXRlcigpO1xuICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZSgpO1xuICAgIC8vIHZlcnNpb25cbiAgICBhc25Xcml0ZXIud3JpdGVJbnQoMHgwMCwgQmVyLkludGVnZXIpO1xuXG4gICAgLy8gYWxnb3JpdGhtXG4gICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAgIGFzbldyaXRlci53cml0ZU9JRCgnMS4zLjEwMS4xMTInKTsgLy8gaWQtRWQyNTUxOVxuICAgIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuXG4gICAgLy8gUHJpdmF0ZUtleVxuICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKEJlci5PY3RldFN0cmluZyk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCdWZmZXIocHJpdiwgQmVyLk9jdGV0U3RyaW5nKTtcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gIHJldHVybiBtYWtlUEVNKCdQUklWQVRFJywgYXNuV3JpdGVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGdlbk9wZW5TU0xFQ0RTQVB1YihvaWQsIFEpIHtcbiAgdmFyIGFzbldyaXRlciA9IG5ldyBCZXIuV3JpdGVyKCk7XG4gIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKCk7XG4gICAgLy8gYWxnb3JpdGhtXG4gICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAgIGFzbldyaXRlci53cml0ZU9JRCgnMS4yLjg0MC4xMDA0NS4yLjEnKTsgLy8gaWQtZWNQdWJsaWNLZXlcbiAgICAgIC8vIGFsZ29yaXRobSBwYXJhbWV0ZXJzIChuYW1lZEN1cnZlKVxuICAgICAgYXNuV3JpdGVyLndyaXRlT0lEKG9pZCk7XG4gICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG5cbiAgICAvLyBzdWJqZWN0UHVibGljS2V5XG4gICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoQmVyLkJpdFN0cmluZyk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVCeXRlKDB4MDApO1xuICAgICAgLy8gWFhYOiBoYWNrIHRvIHdyaXRlIGEgcmF3IGJ1ZmZlciB3aXRob3V0IGEgdGFnIC0tIHl1Y2tcbiAgICAgIGFzbldyaXRlci5fZW5zdXJlKFEubGVuZ3RoKTtcbiAgICAgIFEuY29weShhc25Xcml0ZXIuX2J1ZiwgYXNuV3JpdGVyLl9vZmZzZXQsIDAsIFEubGVuZ3RoKTtcbiAgICAgIGFzbldyaXRlci5fb2Zmc2V0ICs9IFEubGVuZ3RoO1xuICAgICAgLy8gZW5kIGhhY2tcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gIHJldHVybiBtYWtlUEVNKCdQVUJMSUMnLCBhc25Xcml0ZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZ2VuT3BlblNTSEVDRFNBUHViKG9pZCwgUSkge1xuICB2YXIgY3VydmVOYW1lO1xuICBzd2l0Y2ggKG9pZCkge1xuICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMy4xLjcnOlxuICAgICAgLy8gcHJpbWUyNTZ2MS9zZWNwMjU2cjFcbiAgICAgIGN1cnZlTmFtZSA9ICduaXN0cDI1Nic7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcxLjMuMTMyLjAuMzQnOlxuICAgICAgLy8gc2VjcDM4NHIxXG4gICAgICBjdXJ2ZU5hbWUgPSAnbmlzdHAzODQnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMS4zLjEzMi4wLjM1JzpcbiAgICAgIC8vIHNlY3A1MjFyMVxuICAgICAgY3VydmVOYW1lID0gJ25pc3RwNTIxJztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcHVibGljS2V5ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxOSAvLyBlY2RzYS1zaGEyLTxjdXJ2ZSBuYW1lPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIDggLy8gPGN1cnZlIG5hbWU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgUS5sZW5ndGgpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCAxOSwgMCk7XG4gIHB1YmxpY0tleS53cml0ZSgnZWNkc2Etc2hhMi0nICsgY3VydmVOYW1lLCA0LCAxOSwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShwdWJsaWNLZXksIDgsIDIzKTtcbiAgcHVibGljS2V5LndyaXRlKGN1cnZlTmFtZSwgMjcsIDgsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUocHVibGljS2V5LCBRLmxlbmd0aCwgMzUpO1xuICBRLmNvcHkocHVibGljS2V5LCAzOSk7XG5cbiAgcmV0dXJuIHB1YmxpY0tleTtcbn1cblxuZnVuY3Rpb24gZ2VuT3BlblNTTEVDRFNBUHJpdihvaWQsIHB1YiwgcHJpdikge1xuICB2YXIgYXNuV3JpdGVyID0gbmV3IEJlci5Xcml0ZXIoKTtcbiAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAvLyB2ZXJzaW9uXG4gICAgYXNuV3JpdGVyLndyaXRlSW50KDB4MDEsIEJlci5JbnRlZ2VyKTtcbiAgICAvLyBwcml2YXRlS2V5XG4gICAgYXNuV3JpdGVyLndyaXRlQnVmZmVyKHByaXYsIEJlci5PY3RldFN0cmluZyk7XG4gICAgLy8gcGFyYW1ldGVycyAob3B0aW9uYWwpXG4gICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoMHhBMCk7XG4gICAgICBhc25Xcml0ZXIud3JpdGVPSUQob2lkKTtcbiAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcbiAgICAvLyBwdWJsaWNLZXkgKG9wdGlvbmFsKVxuICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKDB4QTEpO1xuICAgICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoQmVyLkJpdFN0cmluZyk7XG4gICAgICAgIGFzbldyaXRlci53cml0ZUJ5dGUoMHgwMCk7XG4gICAgICAgIC8vIFhYWDogaGFjayB0byB3cml0ZSBhIHJhdyBidWZmZXIgd2l0aG91dCBhIHRhZyAtLSB5dWNrXG4gICAgICAgIGFzbldyaXRlci5fZW5zdXJlKHB1Yi5sZW5ndGgpO1xuICAgICAgICBwdWIuY29weShhc25Xcml0ZXIuX2J1ZiwgYXNuV3JpdGVyLl9vZmZzZXQsIDAsIHB1Yi5sZW5ndGgpO1xuICAgICAgICBhc25Xcml0ZXIuX29mZnNldCArPSBwdWIubGVuZ3RoO1xuICAgICAgICAvLyBlbmQgaGFja1xuICAgICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuICByZXR1cm4gbWFrZVBFTSgnRUMgUFJJVkFURScsIGFzbldyaXRlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBnZW5PcGVuU1NMRUNEU0FQdWJGcm9tUHJpdihjdXJ2ZU5hbWUsIHByaXYpIHtcbiAgdmFyIHRlbXBFQ0RIID0gY3J5cHRvLmNyZWF0ZUVDREgoY3VydmVOYW1lKTtcbiAgdGVtcEVDREguc2V0UHJpdmF0ZUtleShwcml2KTtcbiAgcmV0dXJuIHRlbXBFQ0RILmdldFB1YmxpY0tleSgpO1xufVxuXG52YXIgYmFzZUtleVNpZ24gPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2YgY3J5cHRvU2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiBzaWduKGRhdGEpIHtcbiAgICAgIHZhciBwZW0gPSB0aGlzW1NZTV9QUklWX1BFTV07XG4gICAgICBpZiAocGVtID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdObyBwcml2YXRlIGtleSBhdmFpbGFibGUnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjcnlwdG9TaWduKHRoaXNbU1lNX0hBU0hfQUxHT10sIGRhdGEsIHBlbSk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gZXg7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmdW5jdGlvbiB0cnlTaWduKHNpZ25hdHVyZSwgcHJpdktleSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS5zaWduKHByaXZLZXkpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBzaWduKGRhdGEpIHtcbiAgICAgIHZhciBwZW0gPSB0aGlzW1NZTV9QUklWX1BFTV07XG4gICAgICBpZiAocGVtID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdObyBwcml2YXRlIGtleSBhdmFpbGFibGUnKTtcbiAgICAgIHZhciBzaWduYXR1cmUgPSBjcmVhdGVTaWduKHRoaXNbU1lNX0hBU0hfQUxHT10pO1xuICAgICAgc2lnbmF0dXJlLnVwZGF0ZShkYXRhKTtcbiAgICAgIHJldHVybiB0cnlTaWduKHNpZ25hdHVyZSwgcGVtKTtcbiAgICB9O1xuICB9XG59KSgpO1xuXG52YXIgYmFzZUtleVZlcmlmeSA9IChmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiBjcnlwdG9WZXJpZnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdmVyaWZ5KGRhdGEsIHNpZ25hdHVyZSkge1xuICAgICAgdmFyIHBlbSA9IHRoaXNbU1lNX1BVQl9QRU1dO1xuICAgICAgaWYgKHBlbSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTm8gcHVibGljIGtleSBhdmFpbGFibGUnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjcnlwdG9WZXJpZnkodGhpc1tTWU1fSEFTSF9BTEdPXSwgZGF0YSwgcGVtLCBzaWduYXR1cmUpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIGV4O1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZnVuY3Rpb24gdHJ5VmVyaWZ5KHZlcmlmaWVyLCBwdWJLZXksIHNpZ25hdHVyZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHZlcmlmaWVyLnZlcmlmeShwdWJLZXksIHNpZ25hdHVyZSk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHZlcmlmeShkYXRhLCBzaWduYXR1cmUpIHtcbiAgICAgIHZhciBwZW0gPSB0aGlzW1NZTV9QVUJfUEVNXTtcbiAgICAgIGlmIChwZW0gPT09IG51bGwpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ05vIHB1YmxpYyBrZXkgYXZhaWxhYmxlJyk7XG4gICAgICB2YXIgdmVyaWZpZXIgPSBjcmVhdGVWZXJpZnkodGhpc1tTWU1fSEFTSF9BTEdPXSk7XG4gICAgICB2ZXJpZmllci51cGRhdGUoZGF0YSk7XG4gICAgICByZXR1cm4gdHJ5VmVyaWZ5KHZlcmlmaWVyLCBwZW0sIHNpZ25hdHVyZSk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxudmFyIEJhc2VLZXkgPSB7XG4gIHNpZ246IGJhc2VLZXlTaWduLFxuICB2ZXJpZnk6IGJhc2VLZXlWZXJpZnksXG4gIGdldFByaXZhdGVQRU06IGZ1bmN0aW9uIGdldFByaXZhdGVQRU0oKSB7XG4gICAgcmV0dXJuIHRoaXNbU1lNX1BSSVZfUEVNXTtcbiAgfSxcbiAgZ2V0UHVibGljUEVNOiBmdW5jdGlvbiBnZXRQdWJsaWNQRU0oKSB7XG4gICAgcmV0dXJuIHRoaXNbU1lNX1BVQl9QRU1dO1xuICB9LFxuICBnZXRQdWJsaWNTU0g6IGZ1bmN0aW9uIGdldFB1YmxpY1NTSCgpIHtcbiAgICByZXR1cm4gdGhpc1tTWU1fUFVCX1NTSF07XG4gIH0sXG59O1xuXG5cblxuZnVuY3Rpb24gT3BlblNTSF9Qcml2YXRlKHR5cGUsIGNvbW1lbnQsIHByaXZQRU0sIHB1YlBFTSwgcHViU1NILCBhbGdvLCBkZWNyeXB0ZWQpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcbiAgdGhpc1tTWU1fUFJJVl9QRU1dID0gcHJpdlBFTTtcbiAgdGhpc1tTWU1fUFVCX1BFTV0gPSBwdWJQRU07XG4gIHRoaXNbU1lNX1BVQl9TU0hdID0gcHViU1NIO1xuICB0aGlzW1NZTV9IQVNIX0FMR09dID0gYWxnbztcbiAgdGhpc1tTWU1fREVDUllQVEVEXSA9IGRlY3J5cHRlZDtcbn1cbk9wZW5TU0hfUHJpdmF0ZS5wcm90b3R5cGUgPSBCYXNlS2V5O1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgcmVnZXhwID0gL14tLS0tLUJFR0lOIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLSg/OlxcclxcbnxcXG4pKFtcXHNcXFNdKykoPzpcXHJcXG58XFxuKS0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLSQvO1xuICBPcGVuU1NIX1ByaXZhdGUucGFyc2UgPSBmdW5jdGlvbihzdHIsIHBhc3NwaHJhc2UpIHtcbiAgICB2YXIgbSA9IHJlZ2V4cC5leGVjKHN0cik7XG4gICAgaWYgKG0gPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB2YXIgcmV0O1xuICAgIHZhciBkYXRhID0gQnVmZmVyLmZyb20obVsxXSwgJ2Jhc2U2NCcpO1xuICAgIGlmIChkYXRhLmxlbmd0aCA8IDMxKSAvLyBtYWdpYyAoKyBtYWdpYyBudWxsIHRlcm0uKSArIG1pbmltdW0gZmllbGQgbGVuZ3Roc1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICB2YXIgbWFnaWMgPSBkYXRhLnRvU3RyaW5nKCdhc2NpaScsIDAsIDE1KTtcbiAgICBpZiAobWFnaWMgIT09ICdvcGVuc3NoLWtleS12MVxcMCcpXG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBPcGVuU1NIIGtleSBtYWdpYzogJyArIG1hZ2ljKTtcblxuICAgIC8vIGF2b2lkIGN5Y2xpYyByZXF1aXJlIGJ5IHJlcXVpcmluZyBvbiBmaXJzdCB1c2VcbiAgICBpZiAoIXV0aWxzKVxuICAgICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbiAgICB2YXIgY2lwaGVyTmFtZSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgMTUsICdhc2NpaScpO1xuICAgIGlmIChjaXBoZXJOYW1lID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgaWYgKGNpcGhlck5hbWUgIT09ICdub25lJyAmJiBTVVBQT1JURURfQ0lQSEVSLmluZGV4T2YoY2lwaGVyTmFtZSkgPT09IC0xKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgY2lwaGVyIGZvciBPcGVuU1NIIGtleTogJyArIGNpcGhlck5hbWUpO1xuXG4gICAgdmFyIGtkZk5hbWUgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3BvcywgJ2FzY2lpJyk7XG4gICAgaWYgKGtkZk5hbWUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICBpZiAoa2RmTmFtZSAhPT0gJ25vbmUnKSB7XG4gICAgICBpZiAoY2lwaGVyTmFtZSA9PT0gJ25vbmUnKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgaWYgKGtkZk5hbWUgIT09ICdiY3J5cHQnKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBrZGYgbmFtZSBmb3IgT3BlblNTSCBrZXk6ICcgKyBrZGZOYW1lKTtcbiAgICAgIGlmICghcGFzc3BocmFzZSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgICdFbmNyeXB0ZWQgcHJpdmF0ZSBPcGVuU1NIIGtleSBkZXRlY3RlZCwgYnV0IG5vIHBhc3NwaHJhc2UgZ2l2ZW4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaXBoZXJOYW1lICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGVuY0luZm87XG4gICAgdmFyIGNpcGhlcktleTtcbiAgICB2YXIgY2lwaGVySVY7XG4gICAgaWYgKGNpcGhlck5hbWUgIT09ICdub25lJylcbiAgICAgIGVuY0luZm8gPSBDSVBIRVJfSU5GT1tjaXBoZXJOYW1lXTtcbiAgICB2YXIga2RmT3B0aW9ucyA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICBpZiAoa2RmT3B0aW9ucyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgIGlmIChrZGZPcHRpb25zLmxlbmd0aCkge1xuICAgICAgc3dpdGNoIChrZGZOYW1lKSB7XG4gICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIGNhc2UgJ2JjcnlwdCc6XG4gICAgICAgICAgLypcbiAgICAgICAgICAgIHN0cmluZyBzYWx0XG4gICAgICAgICAgICB1aW50MzIgcm91bmRzXG4gICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgc2FsdCA9IHV0aWxzLnJlYWRTdHJpbmcoa2RmT3B0aW9ucywgMCk7XG4gICAgICAgICAgaWYgKHNhbHQgPT09IGZhbHNlIHx8IGtkZk9wdGlvbnMuX3BvcyArIDQgPiBrZGZPcHRpb25zLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgICAgdmFyIHJvdW5kcyA9IHJlYWRVSW50MzJCRShrZGZPcHRpb25zLCBrZGZPcHRpb25zLl9wb3MpO1xuICAgICAgICAgIHZhciBnZW4gPSBCdWZmZXIuYWxsb2NVbnNhZmUoZW5jSW5mby5rZXlMZW4gKyBlbmNJbmZvLml2TGVuKTtcbiAgICAgICAgICB2YXIgciA9IGJjcnlwdF9wYmtkZihwYXNzcGhyYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NwaHJhc2UubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FsdC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRzKTtcbiAgICAgICAgICBpZiAociAhPT0gMClcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBpbmZvcm1hdGlvbiB0byBkZWNyeXB0IGtleScpO1xuICAgICAgICAgIGNpcGhlcktleSA9IGdlbi5zbGljZSgwLCBlbmNJbmZvLmtleUxlbik7XG4gICAgICAgICAgY2lwaGVySVYgPSBnZW4uc2xpY2UoZW5jSW5mby5rZXlMZW4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2RmTmFtZSAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgIH1cblxuICAgIHZhciBrZXlDb3VudCA9IHV0aWxzLnJlYWRJbnQoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICBpZiAoa2V5Q291bnQgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICBkYXRhLl9wb3MgKz0gNDtcblxuICAgIGlmIChrZXlDb3VudCA+IDApIHtcbiAgICAgIC8vIFRPRE86IHBsYWNlIHNlbnNpYmxlIGxpbWl0IG9uIG1heCBga2V5Q291bnRgXG5cbiAgICAgIC8vIFJlYWQgcHVibGljIGtleXMgZmlyc3RcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5Q291bnQ7ICsraSkge1xuICAgICAgICB2YXIgcHViRGF0YSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgaWYgKHB1YkRhdGEgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIHZhciB0eXBlID0gdXRpbHMucmVhZFN0cmluZyhwdWJEYXRhLCAwLCAnYXNjaWknKTtcbiAgICAgICAgaWYgKHR5cGUgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcml2QmxvYiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgIGlmIChwcml2QmxvYiA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG5cbiAgICAgIGlmIChjaXBoZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBlbmNyeXB0ZWQgcHJpdmF0ZSBrZXkocylcbiAgICAgICAgaWYgKHByaXZCbG9iLmxlbmd0aCA8IGVuY0luZm8uYmxvY2tMZW5cbiAgICAgICAgICAgIHx8IChwcml2QmxvYi5sZW5ndGggJSBlbmNJbmZvLmJsb2NrTGVuKSAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsgYXV0aFRhZ0xlbmd0aDogZW5jSW5mby5hdXRoTGVuIH07XG4gICAgICAgICAgdmFyIGRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJpdihTU0hfVE9fT1BFTlNTTFtjaXBoZXJOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcktleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcklWLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKGVuY0luZm8uYXV0aExlbiA+IDApIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCAtIGRhdGEuX3BvcyA8IGVuY0luZm8uYXV0aExlbilcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgICAgIGRlY2lwaGVyLnNldEF1dGhUYWcoXG4gICAgICAgICAgICAgIGRhdGEuc2xpY2UoZGF0YS5fcG9zLCBkYXRhLl9wb3MgKz0gZW5jSW5mby5hdXRoTGVuKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpdkJsb2IgPSBjb21iaW5lQnVmZmVycyhkZWNpcGhlci51cGRhdGUocHJpdkJsb2IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXBoZXIuZmluYWwoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBOb3RoaW5nIHNob3VsZCB3ZSBmb2xsb3cgdGhlIHByaXZhdGUga2V5KHMpLCBleGNlcHQgYSBwb3NzaWJsZVxuICAgICAgLy8gYXV0aGVudGljYXRpb24gdGFnIGZvciByZWxldmFudCBjaXBoZXJzXG4gICAgICBpZiAoZGF0YS5fcG9zICE9PSBkYXRhLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcblxuICAgICAgcmV0ID0gcGFyc2VPcGVuU1NIUHJpdktleXMocHJpdkJsb2IsIGtleUNvdW50LCBjaXBoZXJLZXkgIT09IHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlT3BlblNTSFByaXZLZXlzKGRhdGEsIG5rZXlzLCBkZWNyeXB0ZWQpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIC8qXG4gICAgICB1aW50MzJcdGNoZWNraW50XG4gICAgICB1aW50MzJcdGNoZWNraW50XG4gICAgICBzdHJpbmdcdHByaXZhdGVrZXkxXG4gICAgICBzdHJpbmdcdGNvbW1lbnQxXG4gICAgICBzdHJpbmdcdHByaXZhdGVrZXkyXG4gICAgICBzdHJpbmdcdGNvbW1lbnQyXG4gICAgICAuLi5cbiAgICAgIHN0cmluZ1x0cHJpdmF0ZWtleU5cbiAgICAgIHN0cmluZ1x0Y29tbWVudE5cbiAgICAgIGNoYXJcdDFcbiAgICAgIGNoYXJcdDJcbiAgICAgIGNoYXJcdDNcbiAgICAgIC4uLlxuICAgICAgY2hhclx0cGFkbGVuICUgMjU1XG4gICAgKi9cbiAgICBpZiAoZGF0YS5sZW5ndGggPCA4KVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICB2YXIgY2hlY2sxID0gcmVhZFVJbnQzMkJFKGRhdGEsIDApO1xuICAgIHZhciBjaGVjazIgPSByZWFkVUludDMyQkUoZGF0YSwgNCk7XG4gICAgaWYgKGNoZWNrMSAhPT0gY2hlY2syKSB7XG4gICAgICBpZiAoZGVjcnlwdGVkKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdPcGVuU1NIIGtleSBpbnRlZ3JpdHkgY2hlY2sgZmFpbGVkIC0tIGJhZCBwYXNzcGhyYXNlPycpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignT3BlblNTSCBrZXkgaW50ZWdyaXR5IGNoZWNrIGZhaWxlZCcpO1xuICAgIH1cbiAgICBkYXRhLl9wb3MgPSA4O1xuICAgIHZhciBpO1xuICAgIHZhciBvaWQ7XG4gICAgZm9yIChpID0gMDsgaSA8IG5rZXlzOyArK2kpIHtcbiAgICAgIHZhciBhbGdvID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIHByaXZQRU0gPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgcHViUEVNID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIHB1YlNTSCA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRoZSBPcGVuU1NIIGRvY3VtZW50YXRpb24gZm9yIHRoZSBrZXkgZm9ybWF0IGFjdHVhbGx5IGxpZXMsIHRoZSBlbnRpcmV0eVxuICAgICAgLy8gb2YgdGhlIHByaXZhdGUga2V5IGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCB3aXRoIGEgc3RyaW5nIGZpZWxkLCBpdCdzXG4gICAgICAvLyBhY3R1YWxseSB0aGUgbGl0ZXJhbCBjb250ZW50cyBvZiB0aGUgcHJpdmF0ZSBrZXksIHNvIHRvIGJlIGFibGUgdG8gZmluZFxuICAgICAgLy8gdGhlIGVuZCBvZiB0aGUga2V5IGRhdGEgeW91IG5lZWQgdG8ga25vdyB0aGUgbGF5b3V0L2Zvcm1hdCBvZiBlYWNoIGtleVxuICAgICAgLy8gdHlwZSAuLi5cbiAgICAgIHZhciB0eXBlID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MsICdhc2NpaScpO1xuICAgICAgaWYgKHR5cGUgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3NoLXJzYSc6XG4gICAgICAgICAgLypcbiAgICAgICAgICAgIHN0cmluZyAgbiAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgZSAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgZCAtLSBwcml2YXRlXG4gICAgICAgICAgICBzdHJpbmcgIGlxbXAgLS0gcHJpdmF0ZVxuICAgICAgICAgICAgc3RyaW5nICBwIC0tIHByaXZhdGVcbiAgICAgICAgICAgIHN0cmluZyAgcSAtLSBwcml2YXRlXG4gICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgbiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAobiA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIHZhciBlID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmIChlID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgICAgdmFyIGQgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICAgICAgaWYgKGQgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgICB2YXIgaXFtcCA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAoaXFtcCA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIHZhciBwID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmIChwID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgICAgdmFyIHEgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICAgICAgaWYgKHEgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcblxuICAgICAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xSU0FQdWIobiwgZSk7XG4gICAgICAgICAgcHViU1NIID0gZ2VuT3BlblNTSFJTQVB1YihuLCBlKTtcbiAgICAgICAgICBwcml2UEVNID0gZ2VuT3BlblNTTFJTQVByaXYobiwgZSwgZCwgaXFtcCwgcCwgcSk7XG4gICAgICAgICAgYWxnbyA9ICdzaGExJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3NoLWRzcyc6XG4gICAgICAgICAgLypcbiAgICAgICAgICAgIHN0cmluZyAgcCAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgcSAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgZyAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgeSAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgeCAtLSBwcml2YXRlXG4gICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgcCA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAocCA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIHZhciBxID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmIChxID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgICAgdmFyIGcgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICAgICAgaWYgKGcgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgICB2YXIgeSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAoeSA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIHZhciB4ID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmICh4ID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG5cbiAgICAgICAgICBwdWJQRU0gPSBnZW5PcGVuU1NMRFNBUHViKHAsIHEsIGcsIHkpO1xuICAgICAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hEU0FQdWIocCwgcSwgZywgeSk7XG4gICAgICAgICAgcHJpdlBFTSA9IGdlbk9wZW5TU0xEU0FQcml2KHAsIHEsIGcsIHksIHgpO1xuICAgICAgICAgIGFsZ28gPSAnc2hhMSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NzaC1lZDI1NTE5JzpcbiAgICAgICAgICBpZiAoIUVERFNBX1NVUFBPUlRFRClcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIE9wZW5TU0ggcHJpdmF0ZSBrZXkgdHlwZTogJyArIHR5cGUpO1xuICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIHN0cmluZyAgcHVibGljIGtleVxuICAgICAgICAgICAgKiBzdHJpbmcgIHByaXZhdGUga2V5ICsgcHVibGljIGtleVxuICAgICAgICAgICovXG4gICAgICAgICAgdmFyIGVkcHViID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmIChlZHB1YiA9PT0gZmFsc2UgfHwgZWRwdWIubGVuZ3RoICE9PSAzMilcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG4gICAgICAgICAgdmFyIGVkcHJpdiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAoZWRwcml2ID09PSBmYWxzZSB8fCBlZHByaXYubGVuZ3RoICE9PSA2NClcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHByaXZhdGUga2V5Jyk7XG5cbiAgICAgICAgICBwdWJQRU0gPSBnZW5PcGVuU1NMRWRQdWIoZWRwdWIpO1xuICAgICAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hFZFB1YihlZHB1Yik7XG4gICAgICAgICAgcHJpdlBFTSA9IGdlbk9wZW5TU0xFZFByaXYoZWRwcml2LnNsaWNlKDAsIDMyKSk7XG4gICAgICAgICAgYWxnbyA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAyNTYnOlxuICAgICAgICAgIGFsZ28gPSAnc2hhMjU2JztcbiAgICAgICAgICBvaWQgPSAnMS4yLjg0MC4xMDA0NS4zLjEuNyc7XG4gICAgICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAzODQnOlxuICAgICAgICAgIGlmIChhbGdvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFsZ28gPSAnc2hhMzg0JztcbiAgICAgICAgICAgIG9pZCA9ICcxLjMuMTMyLjAuMzQnO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6XG4gICAgICAgICAgaWYgKGFsZ28gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWxnbyA9ICdzaGE1MTInO1xuICAgICAgICAgICAgb2lkID0gJzEuMy4xMzIuMC4zNSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qXG4gICAgICAgICAgICBzdHJpbmcgIGN1cnZlIG5hbWVcbiAgICAgICAgICAgIHN0cmluZyAgUSAtLSBwdWJsaWNcbiAgICAgICAgICAgIHN0cmluZyAgZCAtLSBwcml2YXRlXG4gICAgICAgICAgKi9cbiAgICAgICAgICAvLyBUT0RPOiB2YWxpZGF0ZSBjdXJ2ZSBuYW1lIGFnYWluc3QgdHlwZVxuICAgICAgICAgIGlmICghc2tpcEZpZWxkcyhkYXRhLCAxKSkgLy8gU2tpcCBjdXJ2ZSBuYW1lXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIHZhciBlY3B1YiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgICBpZiAoZWNwdWIgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgICB2YXIgZWNwcml2ID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICAgIGlmIChlY3ByaXYgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknKTtcblxuICAgICAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xFQ0RTQVB1YihvaWQsIGVjcHViKTtcbiAgICAgICAgICBwdWJTU0ggPSBnZW5PcGVuU1NIRUNEU0FQdWIob2lkLCBlY3B1Yik7XG4gICAgICAgICAgcHJpdlBFTSA9IGdlbk9wZW5TU0xFQ0RTQVByaXYob2lkLCBlY3B1YiwgZWNwcml2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBPcGVuU1NIIHByaXZhdGUga2V5IHR5cGU6ICcgKyB0eXBlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByaXZDb21tZW50ID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MsICd1dGY4Jyk7XG4gICAgICBpZiAocHJpdkNvbW1lbnQgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuXG4gICAgICBrZXlzLnB1c2goXG4gICAgICAgIG5ldyBPcGVuU1NIX1ByaXZhdGUodHlwZSwgcHJpdkNvbW1lbnQsIHByaXZQRU0sIHB1YlBFTSwgcHViU1NILCBhbGdvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHRlZClcbiAgICAgICk7XG4gICAgfVxuICAgIHZhciBjbnQgPSAwO1xuICAgIGZvciAoaSA9IGRhdGEuX3BvczsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChkYXRhW2ldICE9PSAoKytjbnQgJSAyNTUpKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzO1xuICB9XG59KSgpO1xuXG5cblxuZnVuY3Rpb24gT3BlblNTSF9PbGRfUHJpdmF0ZSh0eXBlLCBjb21tZW50LCBwcml2UEVNLCBwdWJQRU0sIHB1YlNTSCwgYWxnbywgZGVjcnlwdGVkKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG4gIHRoaXNbU1lNX1BSSVZfUEVNXSA9IHByaXZQRU07XG4gIHRoaXNbU1lNX1BVQl9QRU1dID0gcHViUEVNO1xuICB0aGlzW1NZTV9QVUJfU1NIXSA9IHB1YlNTSDtcbiAgdGhpc1tTWU1fSEFTSF9BTEdPXSA9IGFsZ287XG4gIHRoaXNbU1lNX0RFQ1JZUFRFRF0gPSBkZWNyeXB0ZWQ7XG59XG5PcGVuU1NIX09sZF9Qcml2YXRlLnByb3RvdHlwZSA9IEJhc2VLZXk7XG4oZnVuY3Rpb24oKSB7XG4gIHZhciByZWdleHAgPSAvXi0tLS0tQkVHSU4gKFJTQXxEU0F8RUMpIFBSSVZBVEUgS0VZLS0tLS0oPzpcXHJcXG58XFxuKSgoPzpbXjpdKzpcXHMqW1xcU10uKig/OlxcclxcbnxcXG4pKSopKFtcXHNcXFNdKykoPzpcXHJcXG58XFxuKS0tLS0tRU5EIChSU0F8RFNBfEVDKSBQUklWQVRFIEtFWS0tLS0tJC87XG4gIE9wZW5TU0hfT2xkX1ByaXZhdGUucGFyc2UgPSBmdW5jdGlvbihzdHIsIHBhc3NwaHJhc2UpIHtcbiAgICB2YXIgbSA9IHJlZ2V4cC5leGVjKHN0cik7XG4gICAgaWYgKG0gPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB2YXIgcHJpdkJsb2IgPSBCdWZmZXIuZnJvbShtWzNdLCAnYmFzZTY0Jyk7XG4gICAgdmFyIGhlYWRlcnMgPSBtWzJdO1xuICAgIHZhciBkZWNyeXB0ZWQgPSBmYWxzZTtcbiAgICBpZiAoaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBlbmNyeXB0ZWQga2V5XG4gICAgICBoZWFkZXJzID0gaGVhZGVycy5zcGxpdCgvXFxyXFxufFxcbi9nKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaGVhZGVyID0gaGVhZGVyc1tpXTtcbiAgICAgICAgdmFyIHNlcElkeCA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGlmIChoZWFkZXIuc2xpY2UoMCwgc2VwSWR4KSA9PT0gJ0RFSy1JbmZvJykge1xuICAgICAgICAgIHZhciB2YWwgPSBoZWFkZXIuc2xpY2Uoc2VwSWR4ICsgMik7XG4gICAgICAgICAgc2VwSWR4ID0gdmFsLmluZGV4T2YoJywnKTtcbiAgICAgICAgICBpZiAoc2VwSWR4ID09PSAtMSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIHZhciBjaXBoZXJOYW1lID0gdmFsLnNsaWNlKDAsIHNlcElkeCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkT3BlblNTTENpcGhlcnMuaW5kZXhPZihjaXBoZXJOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICdDaXBoZXIgKCdcbiAgICAgICAgICAgICAgKyBjaXBoZXJOYW1lXG4gICAgICAgICAgICAgICsgJykgbm90IHN1cHBvcnRlZCBmb3IgZW5jcnlwdGVkIE9wZW5TU0ggcHJpdmF0ZSBrZXknXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW5jSW5mbyA9IENJUEhFUl9JTkZPX09QRU5TU0xbY2lwaGVyTmFtZV07XG4gICAgICAgICAgaWYgKCFlbmNJbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnQ2lwaGVyICgnXG4gICAgICAgICAgICAgICsgY2lwaGVyTmFtZVxuICAgICAgICAgICAgICArICcpIG5vdCBzdXBwb3J0ZWQgZm9yIGVuY3J5cHRlZCBPcGVuU1NIIHByaXZhdGUga2V5J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNpcGhlcklWID0gQnVmZmVyLmZyb20odmFsLnNsaWNlKHNlcElkeCArIDEpLCAnaGV4Jyk7XG4gICAgICAgICAgaWYgKGNpcGhlcklWLmxlbmd0aCAhPT0gZW5jSW5mby5pdkxlbilcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBlbmNyeXB0ZWQgT3BlblNTSCBwcml2YXRlIGtleScpO1xuICAgICAgICAgIGlmICghcGFzc3BocmFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgJ0VuY3J5cHRlZCBPcGVuU1NIIHByaXZhdGUga2V5IGRldGVjdGVkLCBidXQgbm8gcGFzc3BocmFzZSBnaXZlbidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjaXBoZXJLZXkgPSBjcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUocGFzc3BocmFzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKGNpcGhlcklWLnNsaWNlKDAsIDgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgICAgICAgICB3aGlsZSAoY2lwaGVyS2V5Lmxlbmd0aCA8IGVuY0luZm8ua2V5TGVuKSB7XG4gICAgICAgICAgICBjaXBoZXJLZXkgPSBjb21iaW5lQnVmZmVycyhcbiAgICAgICAgICAgICAgY2lwaGVyS2V5LFxuICAgICAgICAgICAgICAoY3JlYXRlSGFzaCgnbWQ1JylcbiAgICAgICAgICAgICAgICAudXBkYXRlKGNpcGhlcktleSlcbiAgICAgICAgICAgICAgICAudXBkYXRlKHBhc3NwaHJhc2UpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShjaXBoZXJJVilcbiAgICAgICAgICAgICAgICAuZGlnZXN0KCkpLnNsaWNlKDAsIDgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2lwaGVyS2V5Lmxlbmd0aCA+IGVuY0luZm8ua2V5TGVuKVxuICAgICAgICAgICAgY2lwaGVyS2V5ID0gY2lwaGVyS2V5LnNsaWNlKDAsIGVuY0luZm8ua2V5TGVuKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJpdihjaXBoZXJOYW1lLCBjaXBoZXJLZXksIGNpcGhlcklWKTtcbiAgICAgICAgICAgIGRlY2lwaGVyLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHByaXZCbG9iID0gY29tYmluZUJ1ZmZlcnMoZGVjaXBoZXIudXBkYXRlKHByaXZCbG9iKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXBoZXIuZmluYWwoKSk7XG4gICAgICAgICAgICBkZWNyeXB0ZWQgPSB0cnVlO1xuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHR5cGU7XG4gICAgdmFyIHByaXZQRU07XG4gICAgdmFyIHB1YlBFTTtcbiAgICB2YXIgcHViU1NIO1xuICAgIHZhciBhbGdvO1xuICAgIHZhciByZWFkZXI7XG4gICAgdmFyIGVyck1zZyA9ICdNYWxmb3JtZWQgT3BlblNTSCBwcml2YXRlIGtleSc7XG4gICAgaWYgKGRlY3J5cHRlZClcbiAgICAgIGVyck1zZyArPSAnLiBCYWQgcGFzc3BocmFzZT8nO1xuICAgIHN3aXRjaCAobVsxXSkge1xuICAgICAgY2FzZSAnUlNBJzpcbiAgICAgICAgdHlwZSA9ICdzc2gtcnNhJztcbiAgICAgICAgcHJpdlBFTSA9IG1ha2VQRU0oJ1JTQSBQUklWQVRFJywgcHJpdkJsb2IpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlYWRlciA9IG5ldyBCZXIuUmVhZGVyKHByaXZCbG9iKTtcbiAgICAgICAgICByZWFkZXIucmVhZFNlcXVlbmNlKCk7XG4gICAgICAgICAgcmVhZGVyLnJlYWRJbnQoKTsgLy8gc2tpcCB2ZXJzaW9uXG4gICAgICAgICAgdmFyIG4gPSByZWFkZXIucmVhZFN0cmluZyhCZXIuSW50ZWdlciwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKG4gPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgdmFyIGUgPSByZWFkZXIucmVhZFN0cmluZyhCZXIuSW50ZWdlciwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKGUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgcHViUEVNID0gZ2VuT3BlblNTTFJTQVB1YihuLCBlKTtcbiAgICAgICAgICBwdWJTU0ggPSBnZW5PcGVuU1NIUlNBUHViKG4sIGUpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgfVxuICAgICAgICBhbGdvID0gJ3NoYTEnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0RTQSc6XG4gICAgICAgIHR5cGUgPSAnc3NoLWRzcyc7XG4gICAgICAgIHByaXZQRU0gPSBtYWtlUEVNKCdEU0EgUFJJVkFURScsIHByaXZCbG9iKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZWFkZXIgPSBuZXcgQmVyLlJlYWRlcihwcml2QmxvYik7XG4gICAgICAgICAgcmVhZGVyLnJlYWRTZXF1ZW5jZSgpO1xuICAgICAgICAgIHJlYWRlci5yZWFkSW50KCk7IC8vIHNraXAgdmVyc2lvblxuICAgICAgICAgIHZhciBwID0gcmVhZGVyLnJlYWRTdHJpbmcoQmVyLkludGVnZXIsIHRydWUpO1xuICAgICAgICAgIGlmIChwID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIHZhciBxID0gcmVhZGVyLnJlYWRTdHJpbmcoQmVyLkludGVnZXIsIHRydWUpO1xuICAgICAgICAgIGlmIChxID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIHZhciBnID0gcmVhZGVyLnJlYWRTdHJpbmcoQmVyLkludGVnZXIsIHRydWUpO1xuICAgICAgICAgIGlmIChnID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIHZhciB5ID0gcmVhZGVyLnJlYWRTdHJpbmcoQmVyLkludGVnZXIsIHRydWUpO1xuICAgICAgICAgIGlmICh5ID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xEU0FQdWIocCwgcSwgZywgeSk7XG4gICAgICAgICAgcHViU1NIID0gZ2VuT3BlblNTSERTQVB1YihwLCBxLCBnLCB5KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgYWxnbyA9ICdzaGExJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFQyc6XG4gICAgICAgIHZhciBlY1NTTE5hbWU7XG4gICAgICAgIHZhciBlY1ByaXY7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVhZGVyID0gbmV3IEJlci5SZWFkZXIocHJpdkJsb2IpO1xuICAgICAgICAgIHJlYWRlci5yZWFkU2VxdWVuY2UoKTtcbiAgICAgICAgICByZWFkZXIucmVhZEludCgpOyAvLyBza2lwIHZlcnNpb25cbiAgICAgICAgICBlY1ByaXYgPSByZWFkZXIucmVhZFN0cmluZyhCZXIuT2N0ZXRTdHJpbmcsIHRydWUpO1xuICAgICAgICAgIHJlYWRlci5yZWFkQnl0ZSgpOyAvLyBTa2lwIFwiY29tcGxleFwiIGNvbnRleHQgdHlwZSBieXRlXG4gICAgICAgICAgdmFyIG9mZnNldCA9IHJlYWRlci5yZWFkTGVuZ3RoKCk7IC8vIFNraXAgY29udGV4dCBsZW5ndGhcbiAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZWFkZXIuX29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIHZhciBvaWQgPSByZWFkZXIucmVhZE9JRCgpO1xuICAgICAgICAgICAgaWYgKG9pZCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgc3dpdGNoIChvaWQpIHtcbiAgICAgICAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4zLjEuNyc6XG4gICAgICAgICAgICAgICAgLy8gcHJpbWUyNTZ2MS9zZWNwMjU2cjFcbiAgICAgICAgICAgICAgICBlY1NTTE5hbWUgPSAncHJpbWUyNTZ2MSc7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdlY2RzYS1zaGEyLW5pc3RwMjU2JztcbiAgICAgICAgICAgICAgICBhbGdvID0gJ3NoYTI1Nic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzEuMy4xMzIuMC4zNCc6XG4gICAgICAgICAgICAgICAgLy8gc2VjcDM4NHIxXG4gICAgICAgICAgICAgICAgZWNTU0xOYW1lID0gJ3NlY3AzODRyMSc7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdlY2RzYS1zaGEyLW5pc3RwMzg0JztcbiAgICAgICAgICAgICAgICBhbGdvID0gJ3NoYTM4NCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzEuMy4xMzIuMC4zNSc6XG4gICAgICAgICAgICAgICAgLy8gc2VjcDUyMXIxXG4gICAgICAgICAgICAgICAgZWNTU0xOYW1lID0gJ3NlY3A1MjFyMSc7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdlY2RzYS1zaGEyLW5pc3RwNTIxJztcbiAgICAgICAgICAgICAgICBhbGdvID0gJ3NoYTUxMic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgRUMgT0lEOiAnICsgb2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdlBFTSA9IG1ha2VQRU0oJ0VDIFBSSVZBVEUnLCBwcml2QmxvYik7XG4gICAgICAgIHZhciBwdWJCbG9iID0gZ2VuT3BlblNTTEVDRFNBUHViRnJvbVByaXYoZWNTU0xOYW1lLCBlY1ByaXYpO1xuICAgICAgICBwdWJQRU0gPSBnZW5PcGVuU1NMRUNEU0FQdWIob2lkLCBwdWJCbG9iKTtcbiAgICAgICAgcHViU1NIID0gZ2VuT3BlblNTSEVDRFNBUHViKG9pZCwgcHViQmxvYik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgT3BlblNTSF9PbGRfUHJpdmF0ZSh0eXBlLCAnJywgcHJpdlBFTSwgcHViUEVNLCBwdWJTU0gsIGFsZ28sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHRlZCk7XG4gIH07XG59KSgpO1xuXG5cblxuZnVuY3Rpb24gUFBLX1ByaXZhdGUodHlwZSwgY29tbWVudCwgcHJpdlBFTSwgcHViUEVNLCBwdWJTU0gsIGFsZ28sIGRlY3J5cHRlZCkge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmNvbW1lbnQgPSBjb21tZW50O1xuICB0aGlzW1NZTV9QUklWX1BFTV0gPSBwcml2UEVNO1xuICB0aGlzW1NZTV9QVUJfUEVNXSA9IHB1YlBFTTtcbiAgdGhpc1tTWU1fUFVCX1NTSF0gPSBwdWJTU0g7XG4gIHRoaXNbU1lNX0hBU0hfQUxHT10gPSBhbGdvO1xuICB0aGlzW1NZTV9ERUNSWVBURURdID0gZGVjcnlwdGVkO1xufVxuUFBLX1ByaXZhdGUucHJvdG90eXBlID0gQmFzZUtleTtcbihmdW5jdGlvbigpIHtcbiAgdmFyIEVNUFRZX1BBU1NQSFJBU0UgPSBCdWZmZXIuYWxsb2MoMCk7XG4gIHZhciBQUEtfSVYgPSBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pO1xuICB2YXIgUFBLX1BQMSA9IEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAwXSk7XG4gIHZhciBQUEtfUFAyID0gQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKTtcbiAgdmFyIHJlZ2V4cCA9IC9eUHVUVFktVXNlci1LZXktRmlsZS0yOiAoc3NoLSg/OnJzYXxkc3MpKVxccj9cXG5FbmNyeXB0aW9uOiAoYWVzMjU2LWNiY3xub25lKVxccj9cXG5Db21tZW50OiAoW15cXHJcXG5dKilcXHI/XFxuUHVibGljLUxpbmVzOiBcXGQrXFxyP1xcbihbXFxzXFxTXSs/KVxccj9cXG5Qcml2YXRlLUxpbmVzOiBcXGQrXFxyP1xcbihbXFxzXFxTXSs/KVxccj9cXG5Qcml2YXRlLU1BQzogKFteXFxyXFxuXSspLztcbiAgUFBLX1ByaXZhdGUucGFyc2UgPSBmdW5jdGlvbihzdHIsIHBhc3NwaHJhc2UpIHtcbiAgICB2YXIgbSA9IHJlZ2V4cC5leGVjKHN0cik7XG4gICAgaWYgKG0gPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBtWzFdID0ga2V5IHR5cGVcbiAgICAvLyBtWzJdID0gZW5jcnlwdGlvbiB0eXBlXG4gICAgLy8gbVszXSA9IGNvbW1lbnRcbiAgICAvLyBtWzRdID0gYmFzZTY0LWVuY29kZWQgcHVibGljIGtleSBkYXRhOlxuICAgIC8vICAgICAgICAgZm9yIFwic3NoLXJzYVwiOlxuICAgIC8vICAgICAgICAgIHN0cmluZyBcInNzaC1yc2FcIlxuICAgIC8vICAgICAgICAgIG1waW50ICBlICAgIChwdWJsaWMgZXhwb25lbnQpXG4gICAgLy8gICAgICAgICAgbXBpbnQgIG4gICAgKG1vZHVsdXMpXG4gICAgLy8gICAgICAgICBmb3IgXCJzc2gtZHNzXCI6XG4gICAgLy8gICAgICAgICAgc3RyaW5nIFwic3NoLWRzc1wiXG4gICAgLy8gICAgICAgICAgbXBpbnQgcCAgICAgKG1vZHVsdXMpXG4gICAgLy8gICAgICAgICAgbXBpbnQgcSAgICAgKHByaW1lKVxuICAgIC8vICAgICAgICAgIG1waW50IGcgICAgIChiYXNlIG51bWJlcilcbiAgICAvLyAgICAgICAgICBtcGludCB5ICAgICAocHVibGljIGtleSBwYXJhbWV0ZXI6IGdeeCBtb2QgcClcbiAgICAvLyBtWzVdID0gYmFzZTY0LWVuY29kZWQgcHJpdmF0ZSBrZXkgZGF0YTpcbiAgICAvLyAgICAgICAgIGZvciBcInNzaC1yc2FcIjpcbiAgICAvLyAgICAgICAgICBtcGludCAgZCAgICAocHJpdmF0ZSBleHBvbmVudClcbiAgICAvLyAgICAgICAgICBtcGludCAgcCAgICAocHJpbWUgMSlcbiAgICAvLyAgICAgICAgICBtcGludCAgcSAgICAocHJpbWUgMilcbiAgICAvLyAgICAgICAgICBtcGludCAgaXFtcCAoW2ludmVyc2Ugb2YgcV0gbW9kIHApXG4gICAgLy8gICAgICAgICBmb3IgXCJzc2gtZHNzXCI6XG4gICAgLy8gICAgICAgICAgbXBpbnQgeCAgICAgKHByaXZhdGUga2V5IHBhcmFtZXRlcilcbiAgICAvLyBtWzZdID0gU0hBMSBITUFDIG92ZXI6XG4gICAgLy8gICAgICAgICAgc3RyaW5nICBuYW1lIG9mIGFsZ29yaXRobSAoXCJzc2gtZHNzXCIsIFwic3NoLXJzYVwiKVxuICAgIC8vICAgICAgICAgIHN0cmluZyAgZW5jcnlwdGlvbiB0eXBlXG4gICAgLy8gICAgICAgICAgc3RyaW5nICBjb21tZW50XG4gICAgLy8gICAgICAgICAgc3RyaW5nICBwdWJsaWMga2V5IGRhdGFcbiAgICAvLyAgICAgICAgICBzdHJpbmcgIHByaXZhdGUtcGxhaW50ZXh0IChpbmNsdWRpbmcgdGhlIGZpbmFsIHBhZGRpbmcpXG4gICAgdmFyIGNpcGhlck5hbWUgPSBtWzJdO1xuICAgIHZhciBlbmNyeXB0ZWQgPSAoY2lwaGVyTmFtZSAhPT0gJ25vbmUnKTtcbiAgICBpZiAoZW5jcnlwdGVkICYmICFwYXNzcGhyYXNlKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAnRW5jcnlwdGVkIFBQSyBwcml2YXRlIGtleSBkZXRlY3RlZCwgYnV0IG5vIHBhc3NwaHJhc2UgZ2l2ZW4nXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcml2QmxvYiA9IEJ1ZmZlci5mcm9tKG1bNV0sICdiYXNlNjQnKTtcblxuICAgIGlmIChlbmNyeXB0ZWQpIHtcbiAgICAgIHZhciBlbmNJbmZvID0gQ0lQSEVSX0lORk9bY2lwaGVyTmFtZV07XG4gICAgICB2YXIgY2lwaGVyS2V5ID0gY29tYmluZUJ1ZmZlcnMoXG4gICAgICAgIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoUFBLX1BQMSkudXBkYXRlKHBhc3NwaHJhc2UpLmRpZ2VzdCgpLFxuICAgICAgICBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKFBQS19QUDIpLnVwZGF0ZShwYXNzcGhyYXNlKS5kaWdlc3QoKVxuICAgICAgKTtcbiAgICAgIGlmIChjaXBoZXJLZXkubGVuZ3RoID4gZW5jSW5mby5rZXlMZW4pXG4gICAgICAgIGNpcGhlcktleSA9IGNpcGhlcktleS5zbGljZSgwLCBlbmNJbmZvLmtleUxlbik7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlcml2KFNTSF9UT19PUEVOU1NMW2NpcGhlck5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcktleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUEtfSVYpO1xuICAgICAgICBkZWNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gICAgICAgIHByaXZCbG9iID0gY29tYmluZUJ1ZmZlcnMoZGVjaXBoZXIudXBkYXRlKHByaXZCbG9iKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpcGhlci5maW5hbCgpKTtcbiAgICAgICAgZGVjcnlwdGVkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJldHVybiBleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IG1bMV07XG4gICAgdmFyIGNvbW1lbnQgPSBtWzNdO1xuICAgIHZhciBwdWJCbG9iID0gQnVmZmVyLmZyb20obVs0XSwgJ2Jhc2U2NCcpO1xuXG4gICAgdmFyIG1hYyA9IG1bNl07XG4gICAgdmFyIHR5cGVMZW4gPSB0eXBlLmxlbmd0aDtcbiAgICB2YXIgY2lwaGVyTmFtZUxlbiA9IGNpcGhlck5hbWUubGVuZ3RoO1xuICAgIHZhciBjb21tZW50TGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoY29tbWVudCk7XG4gICAgdmFyIHB1YkxlbiA9IHB1YkJsb2IubGVuZ3RoO1xuICAgIHZhciBwcml2TGVuID0gcHJpdkJsb2IubGVuZ3RoO1xuICAgIHZhciBtYWNEYXRhID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyB0eXBlTGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgY2lwaGVyTmFtZUxlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIGNvbW1lbnRMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBwdWJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBwcml2TGVuKTtcbiAgICB2YXIgcCA9IDA7XG5cbiAgICB3cml0ZVVJbnQzMkJFKG1hY0RhdGEsIHR5cGVMZW4sIHApO1xuICAgIG1hY0RhdGEud3JpdGUodHlwZSwgcCArPSA0LCB0eXBlTGVuLCAnYXNjaWknKTtcbiAgICB3cml0ZVVJbnQzMkJFKG1hY0RhdGEsIGNpcGhlck5hbWVMZW4sIHAgKz0gdHlwZUxlbik7XG4gICAgbWFjRGF0YS53cml0ZShjaXBoZXJOYW1lLCBwICs9IDQsIGNpcGhlck5hbWVMZW4sICdhc2NpaScpO1xuICAgIHdyaXRlVUludDMyQkUobWFjRGF0YSwgY29tbWVudExlbiwgcCArPSBjaXBoZXJOYW1lTGVuKTtcbiAgICBtYWNEYXRhLndyaXRlKGNvbW1lbnQsIHAgKz0gNCwgY29tbWVudExlbiwgJ3V0ZjgnKTtcbiAgICB3cml0ZVVJbnQzMkJFKG1hY0RhdGEsIHB1YkxlbiwgcCArPSBjb21tZW50TGVuKTtcbiAgICBwdWJCbG9iLmNvcHkobWFjRGF0YSwgcCArPSA0KTtcbiAgICB3cml0ZVVJbnQzMkJFKG1hY0RhdGEsIHByaXZMZW4sIHAgKz0gcHViTGVuKTtcbiAgICBwcml2QmxvYi5jb3B5KG1hY0RhdGEsIHAgKyA0KTtcblxuICAgIGlmICghcGFzc3BocmFzZSlcbiAgICAgIHBhc3NwaHJhc2UgPSBFTVBUWV9QQVNTUEhSQVNFO1xuXG4gICAgdmFyIGNhbGNNQUMgPSBjcmVhdGVIbWFjKCdzaGExJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlSGFzaCgnc2hhMScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZSgncHV0dHktcHJpdmF0ZS1rZXktZmlsZS1tYWMta2V5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHBhc3NwaHJhc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgpKVxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlKG1hY0RhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gICAgaWYgKGNhbGNNQUMgIT09IG1hYykge1xuICAgICAgaWYgKGVuY3J5cHRlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgICdQUEsgcHJpdmF0ZSBrZXkgaW50ZWdyaXR5IGNoZWNrIGZhaWxlZCAtLSBiYWQgcGFzc3BocmFzZT8nXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdQUEsgcHJpdmF0ZSBrZXkgaW50ZWdyaXR5IGNoZWNrIGZhaWxlZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGF2b2lkIGN5Y2xpYyByZXF1aXJlIGJ5IHJlcXVpcmluZyBvbiBmaXJzdCB1c2VcbiAgICBpZiAoIXV0aWxzKVxuICAgICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbiAgICB2YXIgcHViUEVNO1xuICAgIHZhciBwdWJTU0g7XG4gICAgdmFyIHByaXZQRU07XG4gICAgcHViQmxvYi5fcG9zID0gMDtcbiAgICBza2lwRmllbGRzKHB1YkJsb2IsIDEpOyAvLyBza2lwIChkdXBsaWNhdGUpIGtleSB0eXBlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdzc2gtcnNhJzpcbiAgICAgICAgdmFyIGUgPSB1dGlscy5yZWFkU3RyaW5nKHB1YkJsb2IsIHB1YkJsb2IuX3Bvcyk7XG4gICAgICAgIGlmIChlID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgUFBLIHB1YmxpYyBrZXknKTtcbiAgICAgICAgdmFyIG4gPSB1dGlscy5yZWFkU3RyaW5nKHB1YkJsb2IsIHB1YkJsb2IuX3Bvcyk7XG4gICAgICAgIGlmIChuID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgUFBLIHB1YmxpYyBrZXknKTtcbiAgICAgICAgdmFyIGQgPSB1dGlscy5yZWFkU3RyaW5nKHByaXZCbG9iLCAwKTtcbiAgICAgICAgaWYgKGQgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgdmFyIHAgPSB1dGlscy5yZWFkU3RyaW5nKHByaXZCbG9iLCBwcml2QmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKHAgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgdmFyIHEgPSB1dGlscy5yZWFkU3RyaW5nKHByaXZCbG9iLCBwcml2QmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKHEgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgdmFyIGlxbXAgPSB1dGlscy5yZWFkU3RyaW5nKHByaXZCbG9iLCBwcml2QmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKGlxbXAgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgcHViUEVNID0gZ2VuT3BlblNTTFJTQVB1YihuLCBlKTtcbiAgICAgICAgcHViU1NIID0gZ2VuT3BlblNTSFJTQVB1YihuLCBlKTtcbiAgICAgICAgcHJpdlBFTSA9IGdlbk9wZW5TU0xSU0FQcml2KG4sIGUsIGQsIGlxbXAsIHAsIHEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NzaC1kc3MnOlxuICAgICAgICB2YXIgcCA9IHV0aWxzLnJlYWRTdHJpbmcocHViQmxvYiwgcHViQmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKHAgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHVibGljIGtleScpO1xuICAgICAgICB2YXIgcSA9IHV0aWxzLnJlYWRTdHJpbmcocHViQmxvYiwgcHViQmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKHEgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHVibGljIGtleScpO1xuICAgICAgICB2YXIgZyA9IHV0aWxzLnJlYWRTdHJpbmcocHViQmxvYiwgcHViQmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKGcgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHVibGljIGtleScpO1xuICAgICAgICB2YXIgeSA9IHV0aWxzLnJlYWRTdHJpbmcocHViQmxvYiwgcHViQmxvYi5fcG9zKTtcbiAgICAgICAgaWYgKHkgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBQUEsgcHVibGljIGtleScpO1xuICAgICAgICB2YXIgeCA9IHV0aWxzLnJlYWRTdHJpbmcocHJpdkJsb2IsIDApO1xuICAgICAgICBpZiAoeCA9PT0gZmFsc2UpXG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIFBQSyBwcml2YXRlIGtleScpO1xuXG4gICAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xEU0FQdWIocCwgcSwgZywgeSk7XG4gICAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hEU0FQdWIocCwgcSwgZywgeSk7XG4gICAgICAgIHByaXZQRU0gPSBnZW5PcGVuU1NMRFNBUHJpdihwLCBxLCBnLCB5LCB4KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQUEtfUHJpdmF0ZSh0eXBlLCBjb21tZW50LCBwcml2UEVNLCBwdWJQRU0sIHB1YlNTSCwgJ3NoYTEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkKTtcbiAgfTtcbn0pKCk7XG5cblxuZnVuY3Rpb24gcGFyc2VERVIoZGF0YSwgYmFzZVR5cGUsIGNvbW1lbnQsIGZ1bGxUeXBlKSB7XG4gIC8vIGF2b2lkIGN5Y2xpYyByZXF1aXJlIGJ5IHJlcXVpcmluZyBvbiBmaXJzdCB1c2VcbiAgaWYgKCF1dGlscylcbiAgICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICB2YXIgYWxnbztcbiAgdmFyIHB1YlBFTSA9IG51bGw7XG4gIHZhciBwdWJTU0ggPSBudWxsO1xuICBzd2l0Y2ggKGJhc2VUeXBlKSB7XG4gICAgY2FzZSAnc3NoLXJzYSc6XG4gICAgICB2YXIgZSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgIGlmIChlID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHVibGljIGtleScpO1xuICAgICAgdmFyIG4gPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICBpZiAobiA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHB1YmxpYyBrZXknKTtcbiAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xSU0FQdWIobiwgZSk7XG4gICAgICBwdWJTU0ggPSBnZW5PcGVuU1NIUlNBUHViKG4sIGUpO1xuICAgICAgYWxnbyA9ICdzaGExJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NzaC1kc3MnOlxuICAgICAgdmFyIHAgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICBpZiAocCA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHB1YmxpYyBrZXknKTtcbiAgICAgIHZhciBxID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgaWYgKHEgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgT3BlblNTSCBwdWJsaWMga2V5Jyk7XG4gICAgICB2YXIgZyA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgIGlmIChnID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHVibGljIGtleScpO1xuICAgICAgdmFyIHkgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICBpZiAoeSA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHB1YmxpYyBrZXknKTtcbiAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xEU0FQdWIocCwgcSwgZywgeSk7XG4gICAgICBwdWJTU0ggPSBnZW5PcGVuU1NIRFNBUHViKHAsIHEsIGcsIHkpO1xuICAgICAgYWxnbyA9ICdzaGExJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NzaC1lZDI1NTE5JzpcbiAgICAgIHZhciBlZHB1YiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgIGlmIChlZHB1YiA9PT0gZmFsc2UgfHwgZWRwdWIubGVuZ3RoICE9PSAzMilcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHVibGljIGtleScpO1xuICAgICAgcHViUEVNID0gZ2VuT3BlblNTTEVkUHViKGVkcHViKTtcbiAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hFZFB1YihlZHB1Yik7XG4gICAgICBhbGdvID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAyNTYnOlxuICAgICAgYWxnbyA9ICdzaGEyNTYnO1xuICAgICAgb2lkID0gJzEuMi44NDAuMTAwNDUuMy4xLjcnO1xuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAzODQnOlxuICAgICAgaWYgKGFsZ28gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhbGdvID0gJ3NoYTM4NCc7XG4gICAgICAgIG9pZCA9ICcxLjMuMTMyLjAuMzQnO1xuICAgICAgfVxuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHA1MjEnOlxuICAgICAgaWYgKGFsZ28gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhbGdvID0gJ3NoYTUxMic7XG4gICAgICAgIG9pZCA9ICcxLjMuMTMyLjAuMzUnO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogdmFsaWRhdGUgY3VydmUgbmFtZSBhZ2FpbnN0IHR5cGVcbiAgICAgIGlmICghc2tpcEZpZWxkcyhkYXRhLCAxKSkgLy8gU2tpcCBjdXJ2ZSBuYW1lXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHB1YmxpYyBrZXknKTtcbiAgICAgIHZhciBlY3B1YiA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgIGlmIChlY3B1YiA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBPcGVuU1NIIHB1YmxpYyBrZXknKTtcbiAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xFQ0RTQVB1YihvaWQsIGVjcHViKTtcbiAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hFQ0RTQVB1YihvaWQsIGVjcHViKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBPcGVuU1NIIHB1YmxpYyBrZXkgdHlwZTogJyArIGJhc2VUeXBlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgT3BlblNTSF9QdWJsaWMoZnVsbFR5cGUsIGNvbW1lbnQsIHB1YlBFTSwgcHViU1NILCBhbGdvKTtcbn1cbmZ1bmN0aW9uIE9wZW5TU0hfUHVibGljKHR5cGUsIGNvbW1lbnQsIHB1YlBFTSwgcHViU1NILCBhbGdvKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG4gIHRoaXNbU1lNX1BSSVZfUEVNXSA9IG51bGw7XG4gIHRoaXNbU1lNX1BVQl9QRU1dID0gcHViUEVNO1xuICB0aGlzW1NZTV9QVUJfU1NIXSA9IHB1YlNTSDtcbiAgdGhpc1tTWU1fSEFTSF9BTEdPXSA9IGFsZ287XG4gIHRoaXNbU1lNX0RFQ1JZUFRFRF0gPSBmYWxzZTtcbn1cbk9wZW5TU0hfUHVibGljLnByb3RvdHlwZSA9IEJhc2VLZXk7XG4oZnVuY3Rpb24oKSB7XG4gIHZhciByZWdleHA7XG4gIGlmIChFRERTQV9TVVBQT1JURUQpXG4gICAgcmVnZXhwID0gL14oKCg/OnNzaC0oPzpyc2F8ZHNzfGVkMjU1MTkpKXxlY2RzYS1zaGEyLW5pc3RwKD86MjU2fDM4NHw1MjEpKSg/Oi1jZXJ0LXYwWzAxXUBvcGVuc3NoLmNvbSk/KSAoW0EtWjAtOWEtelxcLys9XSspKD86JHxcXHMrKFtcXFNdLiopPykkLztcbiAgZWxzZVxuICAgIHJlZ2V4cCA9IC9eKCgoPzpzc2gtKD86cnNhfGRzcykpfGVjZHNhLXNoYTItbmlzdHAoPzoyNTZ8Mzg0fDUyMSkpKD86LWNlcnQtdjBbMDFdQG9wZW5zc2guY29tKT8pIChbQS1aMC05YS16XFwvKz1dKykoPzokfFxccysoW1xcU10uKik/KSQvO1xuICBPcGVuU1NIX1B1YmxpYy5wYXJzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBtID0gcmVnZXhwLmV4ZWMoc3RyKTtcbiAgICBpZiAobSA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIG1bMV0gPSBmdWxsIHR5cGVcbiAgICAvLyBtWzJdID0gYmFzZSB0eXBlXG4gICAgLy8gbVszXSA9IGJhc2U2NC1lbmNvZGVkIHB1YmxpYyBrZXlcbiAgICAvLyBtWzRdID0gY29tbWVudFxuXG4gICAgLy8gYXZvaWQgY3ljbGljIHJlcXVpcmUgYnkgcmVxdWlyaW5nIG9uIGZpcnN0IHVzZVxuICAgIGlmICghdXRpbHMpXG4gICAgICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICAgIHZhciBmdWxsVHlwZSA9IG1bMV07XG4gICAgdmFyIGJhc2VUeXBlID0gbVsyXTtcbiAgICB2YXIgZGF0YSA9IEJ1ZmZlci5mcm9tKG1bM10sICdiYXNlNjQnKTtcbiAgICB2YXIgY29tbWVudCA9IChtWzRdIHx8ICcnKTtcblxuICAgIHZhciB0eXBlID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MsICdhc2NpaScpO1xuICAgIGlmICh0eXBlID09PSBmYWxzZSB8fCB0eXBlLmluZGV4T2YoYmFzZVR5cGUpICE9PSAwKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIE9wZW5TU0ggcHVibGljIGtleScpO1xuXG4gICAgcmV0dXJuIHBhcnNlREVSKGRhdGEsIGJhc2VUeXBlLCBjb21tZW50LCBmdWxsVHlwZSk7XG4gIH07XG59KSgpO1xuXG5cblxuZnVuY3Rpb24gUkZDNDcxNl9QdWJsaWModHlwZSwgY29tbWVudCwgcHViUEVNLCBwdWJTU0gsIGFsZ28pIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcbiAgdGhpc1tTWU1fUFJJVl9QRU1dID0gbnVsbDtcbiAgdGhpc1tTWU1fUFVCX1BFTV0gPSBwdWJQRU07XG4gIHRoaXNbU1lNX1BVQl9TU0hdID0gcHViU1NIO1xuICB0aGlzW1NZTV9IQVNIX0FMR09dID0gYWxnbztcbiAgdGhpc1tTWU1fREVDUllQVEVEXSA9IGZhbHNlO1xufVxuUkZDNDcxNl9QdWJsaWMucHJvdG90eXBlID0gQmFzZUtleTtcbihmdW5jdGlvbigpIHtcbiAgdmFyIHJlZ2V4cCA9IC9eLS0tLSBCRUdJTiBTU0gyIFBVQkxJQyBLRVkgLS0tLSg/OlxcclxcbnxcXG4pKCg/Oig/OltcXHgyMS1cXHg3RV0rPyk6KD86KD86Lio/XFxcXFxccj9cXG4pKi4qKSg/OlxcclxcbnxcXG4pKSopKCg/OltBLVowLTlhLXpcXC8rPV0rKD86XFxyXFxufFxcbikpKyktLS0tIEVORCBTU0gyIFBVQkxJQyBLRVkgLS0tLSQvO1xuICB2YXIgUkVfSEVBREVSID0gL14oW1xceDIxLVxceDdFXSs/KTooKD86Lio/XFxcXFxccj9cXG4pKi4qKSQvZ207XG4gIHZhciBSRV9IRUFERVJfRU5EUyA9IC9cXFxcXFxyP1xcbi9nO1xuICBSRkM0NzE2X1B1YmxpYy5wYXJzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBtID0gcmVnZXhwLmV4ZWMoc3RyKTtcbiAgICBpZiAobSA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIG1bMV0gPSBoZWFkZXIocylcbiAgICAvLyBtWzJdID0gYmFzZTY0LWVuY29kZWQgcHVibGljIGtleVxuXG4gICAgdmFyIGhlYWRlcnMgPSBtWzFdO1xuICAgIHZhciBkYXRhID0gQnVmZmVyLmZyb20obVsyXSwgJ2Jhc2U2NCcpO1xuICAgIHZhciBjb21tZW50ID0gJyc7XG5cbiAgICBpZiAoaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3aGlsZSAobSA9IFJFX0hFQURFUi5leGVjKGhlYWRlcnMpKSB7XG4gICAgICAgIGlmIChtWzFdLnRvTG93ZXJDYXNlKCkgPT09ICdjb21tZW50Jykge1xuICAgICAgICAgIGNvbW1lbnQgPSB0cmltU3RhcnQobVsyXS5yZXBsYWNlKFJFX0hFQURFUl9FTkRTLCAnJykpO1xuICAgICAgICAgIGlmIChjb21tZW50Lmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgJiYgY29tbWVudC5jaGFyQ29kZUF0KDApID09PSAzNC8qJ1wiJyovXG4gICAgICAgICAgICAgICYmIGNvbW1lbnQuY2hhckNvZGVBdChjb21tZW50Lmxlbmd0aCAtIDEpID09PSAzNC8qJ1wiJyovKSB7XG4gICAgICAgICAgICBjb21tZW50ID0gY29tbWVudC5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXZvaWQgY3ljbGljIHJlcXVpcmUgYnkgcmVxdWlyaW5nIG9uIGZpcnN0IHVzZVxuICAgIGlmICghdXRpbHMpXG4gICAgICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICAgIHZhciB0eXBlID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCAwLCAnYXNjaWknKTtcbiAgICBpZiAodHlwZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgUkZDNDcxNiBwdWJsaWMga2V5Jyk7XG5cbiAgICB2YXIgcHViUEVNID0gbnVsbDtcbiAgICB2YXIgcHViU1NIID0gbnVsbDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3NzaC1yc2EnOlxuICAgICAgICB2YXIgZSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgaWYgKGUgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBSRkM0NzE2IHB1YmxpYyBrZXknKTtcbiAgICAgICAgdmFyIG4gPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICAgIGlmIChuID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgUkZDNDcxNiBwdWJsaWMga2V5Jyk7XG4gICAgICAgIHB1YlBFTSA9IGdlbk9wZW5TU0xSU0FQdWIobiwgZSk7XG4gICAgICAgIHB1YlNTSCA9IGdlbk9wZW5TU0hSU0FQdWIobiwgZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3NoLWRzcyc6XG4gICAgICAgIHZhciBwID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICBpZiAocCA9PT0gZmFsc2UpXG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIFJGQzQ3MTYgcHVibGljIGtleScpO1xuICAgICAgICB2YXIgcSA9IHV0aWxzLnJlYWRTdHJpbmcoZGF0YSwgZGF0YS5fcG9zKTtcbiAgICAgICAgaWYgKHEgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBSRkM0NzE2IHB1YmxpYyBrZXknKTtcbiAgICAgICAgdmFyIGcgPSB1dGlscy5yZWFkU3RyaW5nKGRhdGEsIGRhdGEuX3Bvcyk7XG4gICAgICAgIGlmIChnID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdNYWxmb3JtZWQgUkZDNDcxNiBwdWJsaWMga2V5Jyk7XG4gICAgICAgIHZhciB5ID0gdXRpbHMucmVhZFN0cmluZyhkYXRhLCBkYXRhLl9wb3MpO1xuICAgICAgICBpZiAoeSA9PT0gZmFsc2UpXG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWFsZm9ybWVkIFJGQzQ3MTYgcHVibGljIGtleScpO1xuICAgICAgICBwdWJQRU0gPSBnZW5PcGVuU1NMRFNBUHViKHAsIHEsIGcsIHkpO1xuICAgICAgICBwdWJTU0ggPSBnZW5PcGVuU1NIRFNBUHViKHAsIHEsIGcsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hbGZvcm1lZCBSRkM0NzE2IHB1YmxpYyBrZXknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJGQzQ3MTZfUHVibGljKHR5cGUsIGNvbW1lbnQsIHB1YlBFTSwgcHViU1NILCAnc2hhMScpO1xuICB9O1xufSkoKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZURFUktleTogZnVuY3Rpb24gcGFyc2VERVJLZXkoZGF0YSwgdHlwZSkge1xuICAgIHJldHVybiBwYXJzZURFUihkYXRhLCB0eXBlLCAnJywgdHlwZSk7XG4gIH0sXG4gIHBhcnNlS2V5OiBmdW5jdGlvbiBwYXJzZUtleShkYXRhLCBwYXNzcGhyYXNlKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSlcbiAgICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCd1dGY4JykudHJpbSgpO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJylcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0tleSBkYXRhIG11c3QgYmUgYSBCdWZmZXIgb3Igc3RyaW5nJyk7XG4gICAgZWxzZVxuICAgICAgZGF0YSA9IGRhdGEudHJpbSgpO1xuXG4gICAgLy8gaW50ZW50aW9uYWwgIT1cbiAgICBpZiAocGFzc3BocmFzZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFzc3BocmFzZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHBhc3NwaHJhc2UgPSBCdWZmZXIuZnJvbShwYXNzcGhyYXNlKTtcbiAgICAgIGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3BocmFzZSkpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Bhc3NwaHJhc2UgbXVzdCBiZSBhIHN0cmluZyBvciBCdWZmZXIgd2hlbiBzdXBwbGllZCcpO1xuICAgIH1cblxuICAgIHZhciByZXQ7XG5cbiAgICAvLyBQcml2YXRlIGtleXNcbiAgICBpZiAoKHJldCA9IE9wZW5TU0hfUHJpdmF0ZS5wYXJzZShkYXRhLCBwYXNzcGhyYXNlKSkgIT09IG51bGwpXG4gICAgICByZXR1cm4gcmV0O1xuICAgIGlmICgocmV0ID0gT3BlblNTSF9PbGRfUHJpdmF0ZS5wYXJzZShkYXRhLCBwYXNzcGhyYXNlKSkgIT09IG51bGwpXG4gICAgICByZXR1cm4gcmV0O1xuICAgIGlmICgocmV0ID0gUFBLX1ByaXZhdGUucGFyc2UoZGF0YSwgcGFzc3BocmFzZSkpICE9PSBudWxsKVxuICAgICAgcmV0dXJuIHJldDtcblxuICAgIC8vIFB1YmxpYyBrZXlzXG4gICAgaWYgKChyZXQgPSBPcGVuU1NIX1B1YmxpYy5wYXJzZShkYXRhKSkgIT09IG51bGwpXG4gICAgICByZXR1cm4gcmV0O1xuICAgIGlmICgocmV0ID0gUkZDNDcxNl9QdWJsaWMucGFyc2UoZGF0YSkpICE9PSBudWxsKVxuICAgICAgcmV0dXJuIHJldDtcblxuICAgIHJldHVybiBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGtleSBmb3JtYXQnKTtcbiAgfVxufVxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzO1xudmFyIER1cGxleFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLkR1cGxleDtcbnZhciBSZWFkYWJsZVN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlJlYWRhYmxlO1xudmFyIFdyaXRhYmxlU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuV3JpdGFibGU7XG5cbnZhciBTVERFUlIgPSByZXF1aXJlKCdzc2gyLXN0cmVhbXMnKS5jb25zdGFudHMuQ0hBTk5FTF9FWFRFTkRFRF9EQVRBVFlQRS5TVERFUlI7XG5cbnZhciBQQUNLRVRfU0laRSA9IDMyICogMTAyNDtcbnZhciBNQVhfV0lORE9XID0gMiAqIDEwMjQgKiAxMDI0O1xudmFyIFdJTkRPV19USFJFU0hPTEQgPSBNQVhfV0lORE9XIC8gMjtcbnZhciBDVVNUT01fRVZFTlRTID0gW1xuICAnQ0hBTk5FTF9FT0YnLFxuICAnQ0hBTk5FTF9DTE9TRScsXG4gICdDSEFOTkVMX0RBVEEnLFxuICAnQ0hBTk5FTF9FWFRFTkRFRF9EQVRBJyxcbiAgJ0NIQU5ORUxfV0lORE9XX0FESlVTVCcsXG4gICdDSEFOTkVMX1NVQ0NFU1MnLFxuICAnQ0hBTk5FTF9GQUlMVVJFJyxcbiAgJ0NIQU5ORUxfUkVRVUVTVCdcbl07XG52YXIgQ1VTVE9NX0VWRU5UU19MRU4gPSBDVVNUT01fRVZFTlRTLmxlbmd0aDtcblxuZnVuY3Rpb24gQ2hhbm5lbChpbmZvLCBjbGllbnQsIG9wdHMpIHtcbiAgdmFyIHN0cmVhbU9wdHMgPSB7XG4gICAgaGlnaFdhdGVyTWFyazogTUFYX1dJTkRPVyxcbiAgICBhbGxvd0hhbGZPcGVuOiAoIW9wdHMgfHwgKG9wdHMgJiYgb3B0cy5hbGxvd0hhbGZPcGVuICE9PSBmYWxzZSkpXG4gIH07XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gc3RyZWFtT3B0cy5hbGxvd0hhbGZPcGVuO1xuXG4gIER1cGxleFN0cmVhbS5jYWxsKHRoaXMsIHN0cmVhbU9wdHMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlcnZlciA9IG9wdHMgJiYgb3B0cy5zZXJ2ZXI7XG5cbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMudHlwZSA9IGluZm8udHlwZTtcbiAgdGhpcy5zdWJ0eXBlID0gdW5kZWZpbmVkO1xuICAvKlxuICAgIGluY29taW5nIGFuZCBvdXRnb2luZyBjb250YWluIHRoZXNlIHByb3BlcnRpZXM6XG4gICAge1xuICAgICAgaWQ6IHVuZGVmaW5lZCxcbiAgICAgIHdpbmRvdzogdW5kZWZpbmVkLFxuICAgICAgcGFja2V0U2l6ZTogdW5kZWZpbmVkLFxuICAgICAgc3RhdGU6ICdjbG9zZWQnXG4gICAgfVxuICAqL1xuICB2YXIgaW5jb21pbmcgPSB0aGlzLmluY29taW5nID0gaW5mby5pbmNvbWluZztcbiAgdmFyIGluY29taW5nSWQgPSBpbmNvbWluZy5pZDtcbiAgdmFyIG91dGdvaW5nID0gdGhpcy5vdXRnb2luZyA9IGluZm8ub3V0Z29pbmc7XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgPSBbXTtcbiAgdmFyIGV4aXRDb2RlO1xuICB2YXIgZXhpdFNpZ25hbDtcbiAgdmFyIGV4aXREdW1wO1xuICB2YXIgZXhpdERlc2M7XG4gIHZhciBleGl0TGFuZztcblxuICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gIHRoaXMuX2hhc1gxMSA9IGZhbHNlO1xuXG4gIHZhciBjaGFubmVscyA9IGNsaWVudC5fY2hhbm5lbHM7XG4gIHZhciBzc2hzdHJlYW0gPSBjbGllbnQuX3NzaHN0cmVhbTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzZWxmLl93YWl0Q2xpZW50RHJhaW4pIHtcbiAgICAgIHNlbGYuX3dhaXRDbGllbnREcmFpbiA9IGZhbHNlO1xuICAgICAgaWYgKCFzZWxmLl93YWl0V2luZG93KSB7XG4gICAgICAgIGlmIChzZWxmLl9jaHVuaylcbiAgICAgICAgICBzZWxmLl93cml0ZShzZWxmLl9jaHVuaywgbnVsbCwgc2VsZi5fY2h1bmtjYik7XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuX2NodW5rY2IpXG4gICAgICAgICAgc2VsZi5fY2h1bmtjYigpO1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9jaHVua0VycilcbiAgICAgICAgICBzZWxmLnN0ZGVyci5fd3JpdGUoc2VsZi5fY2h1bmtFcnIsIG51bGwsIHNlbGYuX2NodW5rY2JFcnIpO1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9jaHVua2NiRXJyKVxuICAgICAgICAgIHNlbGYuX2NodW5rY2JFcnIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2xpZW50Ll9zb2NrLm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHNzaHN0cmVhbS5vbmNlKCdDSEFOTkVMX0VPRjonICsgaW5jb21pbmdJZCwgZnVuY3Rpb24oKSB7XG4gICAgaWYgKGluY29taW5nLnN0YXRlICE9PSAnb3BlbicpXG4gICAgICByZXR1cm47XG4gICAgaW5jb21pbmcuc3RhdGUgPSAnZW9mJztcblxuICAgIGlmIChzZWxmLnJlYWRhYmxlKVxuICAgICAgc2VsZi5wdXNoKG51bGwpO1xuICAgIGlmICghc2VydmVyICYmIHNlbGYuc3RkZXJyLnJlYWRhYmxlKVxuICAgICAgc2VsZi5zdGRlcnIucHVzaChudWxsKTtcbiAgfSkub25jZSgnQ0hBTk5FTF9DTE9TRTonICsgaW5jb21pbmdJZCwgZnVuY3Rpb24oKSB7XG4gICAgaWYgKGluY29taW5nLnN0YXRlID09PSAnY2xvc2VkJylcbiAgICAgIHJldHVybjtcbiAgICBpbmNvbWluZy5zdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgaWYgKHNlbGYucmVhZGFibGUpXG4gICAgICBzZWxmLnB1c2gobnVsbCk7XG4gICAgaWYgKHNlcnZlciAmJiBzZWxmLnN0ZGVyci53cml0YWJsZSlcbiAgICAgIHNlbGYuc3RkZXJyLmVuZCgpO1xuICAgIGVsc2UgaWYgKCFzZXJ2ZXIgJiYgc2VsZi5zdGRlcnIucmVhZGFibGUpXG4gICAgICBzZWxmLnN0ZGVyci5wdXNoKG51bGwpO1xuXG4gICAgaWYgKG91dGdvaW5nLnN0YXRlID09PSAnb3BlbicgfHwgb3V0Z29pbmcuc3RhdGUgPT09ICdlb2YnKVxuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIGlmIChvdXRnb2luZy5zdGF0ZSA9PT0gJ2Nsb3NpbmcnKVxuICAgICAgb3V0Z29pbmcuc3RhdGUgPSAnY2xvc2VkJztcblxuICAgIGRlbGV0ZSBjaGFubmVsc1tpbmNvbWluZ0lkXTtcblxuICAgIHZhciBzdGF0ZSA9IHNlbGYuX3dyaXRhYmxlU3RhdGU7XG4gICAgY2xpZW50Ll9zb2NrLnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZClcbiAgICAgIHNlbGYuZW5kKCk7XG5cbiAgICAvLyBUYWtlIGNhcmUgb2YgYW55IG91dHN0YW5kaW5nIGNoYW5uZWwgcmVxdWVzdHNcbiAgICBzZWxmLl9jYWxsYmFja3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSlcbiAgICAgIGNhbGxiYWNrc1tpXSh0cnVlKTtcbiAgICBjYWxsYmFja3MgPSBzZWxmLl9jYWxsYmFja3M7XG5cbiAgICBpZiAoIXNlcnZlcikge1xuICAgICAgLy8gYWxpZ24gbW9yZSB3aXRoIG5vZGUgY2hpbGQgcHJvY2Vzc2VzLCB3aGVyZSB0aGUgY2xvc2UgZXZlbnQgZ2V0cyB0aGVcbiAgICAgIC8vIHNhbWUgYXJndW1lbnRzIGFzIHRoZSBleGl0IGV2ZW50XG4gICAgICBpZiAoIXNlbGYucmVhZGFibGUpIHtcbiAgICAgICAgaWYgKGV4aXRDb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGV4aXRDb2RlLCBleGl0U2lnbmFsLCBleGl0RHVtcCwgZXhpdERlc2MsXG4gICAgICAgICAgICAgICAgICAgIGV4aXRMYW5nKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGV4aXRDb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYub25jZSgnZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGV4aXRDb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgZXhpdENvZGUsIGV4aXRTaWduYWwsIGV4aXREdW1wLCBleGl0RGVzYyxcbiAgICAgICAgICAgICAgICAgICAgICBleGl0TGFuZyk7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgZXhpdENvZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLnN0ZGVyci5yZWFkYWJsZSlcbiAgICAgICAgc2VsZi5zdGRlcnIuZW1pdCgnY2xvc2UnKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmLnN0ZGVyci5vbmNlKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnN0ZGVyci5lbWl0KCdjbG9zZScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBTZXJ2ZXIgbW9kZVxuICAgICAgaWYgKCFzZWxmLnJlYWRhYmxlKVxuICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZi5vbmNlKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ1VTVE9NX0VWRU5UU19MRU47ICsraSlcbiAgICAgIHNzaHN0cmVhbS5yZW1vdmVBbGxMaXN0ZW5lcnMoQ1VTVE9NX0VWRU5UU1tpXSArICc6JyArIGluY29taW5nSWQpO1xuICB9KS5vbignQ0hBTk5FTF9EQVRBOicgKyBpbmNvbWluZ0lkLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgLy8gdGhlIHJlbW90ZSBwYXJ0eSBzaG91bGQgbm90IGJlIHNlbmRpbmcgdXMgZGF0YSBpZiB0aGVyZSBpcyBubyB3aW5kb3dcbiAgICAvLyBzcGFjZSBhdmFpbGFibGUgLi4uXG4gICAgLy8gVE9ETzogcmFpc2UgZXJyb3Igb24gZGF0YSB3aXRoIG5vdCBlbm91Z2ggd2luZG93XG4gICAgaWYgKGluY29taW5nLndpbmRvdyA9PT0gMClcbiAgICAgIHJldHVybjtcblxuICAgIGluY29taW5nLndpbmRvdyAtPSBkYXRhLmxlbmd0aDtcblxuICAgIGlmICghc2VsZi5wdXNoKGRhdGEpKSB7XG4gICAgICBzZWxmLl93YWl0Q2hhbkRyYWluID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5jb21pbmcud2luZG93IDw9IFdJTkRPV19USFJFU0hPTEQpXG4gICAgICB3aW5kb3dBZGp1c3Qoc2VsZik7XG4gIH0pLm9uKCdDSEFOTkVMX1dJTkRPV19BREpVU1Q6JyArIGluY29taW5nSWQsIGZ1bmN0aW9uKGFtdCkge1xuICAgIC8vIHRoZSBzZXJ2ZXIgaXMgYWxsb3dpbmcgdXMgdG8gc2VuZCBgYW10YCBtb3JlIGJ5dGVzIG9mIGRhdGFcbiAgICBvdXRnb2luZy53aW5kb3cgKz0gYW10O1xuXG4gICAgaWYgKHNlbGYuX3dhaXRXaW5kb3cpIHtcbiAgICAgIHNlbGYuX3dhaXRXaW5kb3cgPSBmYWxzZTtcbiAgICAgIGlmICghc2VsZi5fd2FpdENsaWVudERyYWluKSB7XG4gICAgICAgIGlmIChzZWxmLl9jaHVuaylcbiAgICAgICAgICBzZWxmLl93cml0ZShzZWxmLl9jaHVuaywgbnVsbCwgc2VsZi5fY2h1bmtjYik7XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuX2NodW5rY2IpXG4gICAgICAgICAgc2VsZi5fY2h1bmtjYigpO1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9jaHVua0VycilcbiAgICAgICAgICBzZWxmLnN0ZGVyci5fd3JpdGUoc2VsZi5fY2h1bmtFcnIsIG51bGwsIHNlbGYuX2NodW5rY2JFcnIpO1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9jaHVua2NiRXJyKVxuICAgICAgICAgIHNlbGYuX2NodW5rY2JFcnIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pLm9uKCdDSEFOTkVMX1NVQ0NFU1M6JyArIGluY29taW5nSWQsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIHNzaHN0cmVhbS5fa2FsYXN0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHNzaHN0cmVhbS5fa2FjbnQgPSAwO1xuICAgIH0gZWxzZVxuICAgICAgY2xpZW50Ll9yZXNldEtBKCk7XG4gICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpXG4gICAgICBjYWxsYmFja3Muc2hpZnQoKShmYWxzZSk7XG4gIH0pLm9uKCdDSEFOTkVMX0ZBSUxVUkU6JyArIGluY29taW5nSWQsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIHNzaHN0cmVhbS5fa2FsYXN0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHNzaHN0cmVhbS5fa2FjbnQgPSAwO1xuICAgIH0gZWxzZVxuICAgICAgY2xpZW50Ll9yZXNldEtBKCk7XG4gICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpXG4gICAgICBjYWxsYmFja3Muc2hpZnQoKSh0cnVlKTtcbiAgfSkub24oJ0NIQU5ORUxfUkVRVUVTVDonICsgaW5jb21pbmdJZCwgZnVuY3Rpb24oaW5mbykge1xuICAgIGlmICghc2VydmVyKSB7XG4gICAgICBpZiAoaW5mby5yZXF1ZXN0ID09PSAnZXhpdC1zdGF0dXMnKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXhpdCcsIGV4aXRDb2RlID0gaW5mby5jb2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChpbmZvLnJlcXVlc3QgPT09ICdleGl0LXNpZ25hbCcpIHtcbiAgICAgICAgc2VsZi5lbWl0KCdleGl0JyxcbiAgICAgICAgICAgICAgICAgIGV4aXRDb2RlID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgIGV4aXRTaWduYWwgPSAnU0lHJyArIGluZm8uc2lnbmFsLFxuICAgICAgICAgICAgICAgICAgZXhpdER1bXAgPSBpbmZvLmNvcmVkdW1wLFxuICAgICAgICAgICAgICAgICAgZXhpdERlc2MgPSBpbmZvLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgZXhpdExhbmcgPSBpbmZvLmxhbmcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8ga2VlcGFsaXZlIHJlcXVlc3Q/IE9wZW5TU0ggd2lsbCBzZW5kIG9uZSBhcyBhIGNoYW5uZWwgcmVxdWVzdCBpZiB0aGVyZVxuICAgIC8vIGlzIGEgY2hhbm5lbCBvcGVuXG5cbiAgICBpZiAoaW5mby53YW50UmVwbHkpXG4gICAgICBzc2hzdHJlYW0uY2hhbm5lbEZhaWx1cmUob3V0Z29pbmcuaWQpO1xuICB9KTtcblxuICB0aGlzLnN0ZGluID0gdGhpcy5zdGRvdXQgPSB0aGlzO1xuXG4gIGlmIChzZXJ2ZXIpXG4gICAgdGhpcy5zdGRlcnIgPSBuZXcgU2VydmVyU3RkZXJyKHRoaXMpO1xuICBlbHNlIHtcbiAgICB0aGlzLnN0ZGVyciA9IG5ldyBSZWFkYWJsZVN0cmVhbShzdHJlYW1PcHRzKTtcbiAgICB0aGlzLnN0ZGVyci5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgIGlmIChzZWxmLl93YWl0Q2hhbkRyYWluKSB7XG4gICAgICAgIHNlbGYuX3dhaXRDaGFuRHJhaW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKGluY29taW5nLndpbmRvdyA8PSBXSU5ET1dfVEhSRVNIT0xEKVxuICAgICAgICAgIHdpbmRvd0FkanVzdChzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc3Noc3RyZWFtLm9uKCdDSEFOTkVMX0VYVEVOREVEX0RBVEE6JyArIGluY29taW5nSWQsXG4gICAgICBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gICAgICAgIC8vIHRoZSByZW1vdGUgcGFydHkgc2hvdWxkIG5vdCBiZSBzZW5kaW5nIHVzIGRhdGEgaWYgdGhlcmUgaXMgbm8gd2luZG93XG4gICAgICAgIC8vIHNwYWNlIGF2YWlsYWJsZSAuLi5cbiAgICAgICAgLy8gVE9ETzogcmFpc2UgZXJyb3Igb24gZGF0YSB3aXRoIG5vdCBlbm91Z2ggd2luZG93XG4gICAgICAgIGlmIChpbmNvbWluZy53aW5kb3cgPT09IDApXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGluY29taW5nLndpbmRvdyAtPSBkYXRhLmxlbmd0aDtcblxuICAgICAgICBpZiAoIXNlbGYuc3RkZXJyLnB1c2goZGF0YSkpIHtcbiAgICAgICAgICBzZWxmLl93YWl0Q2hhbkRyYWluID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jb21pbmcud2luZG93IDw9IFdJTkRPV19USFJFU0hPTEQpXG4gICAgICAgICAgd2luZG93QWRqdXN0KHNlbGYpO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvLyBvdXRnb2luZyBkYXRhXG4gIHRoaXMuX3dhaXRDbGllbnREcmFpbiA9IGZhbHNlOyAvLyBDbGllbnQgc3RyZWFtLWxldmVsIGJhY2twcmVzc3VyZVxuICB0aGlzLl93YWl0V2luZG93ID0gZmFsc2U7IC8vIFNTSC1sZXZlbCBiYWNrcHJlc3N1cmVcblxuICAvLyBpbmNvbWluZyBkYXRhXG4gIHRoaXMuX3dhaXRDaGFuRHJhaW4gPSBmYWxzZTsgLy8gQ2hhbm5lbCBSZWFkYWJsZSBzaWRlIGJhY2twcmVzc3VyZVxuXG4gIHRoaXMuX2NodW5rID0gdW5kZWZpbmVkO1xuICB0aGlzLl9jaHVua2NiID0gdW5kZWZpbmVkO1xuICB0aGlzLl9jaHVua0VyciA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY2h1bmtjYkVyciA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBvbkZpbmlzaCgpIHtcbiAgICBzZWxmLmVvZigpO1xuICAgIGlmIChzZXJ2ZXIgfHwgKCFzZXJ2ZXIgJiYgIXNlbGYuYWxsb3dIYWxmT3BlbikpXG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgc2VsZi53cml0YWJsZSA9IGZhbHNlO1xuICB9XG4gIHRoaXMub24oJ2ZpbmlzaCcsIG9uRmluaXNoKVxuICAgICAgLm9uKCdwcmVmaW5pc2gnLCBvbkZpbmlzaCk7IC8vIGZvciBub2RlIHYwLjExK1xuICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICBzZWxmLnJlYWRhYmxlID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5vbignZW5kJywgb25FbmQpXG4gICAgICAub24oJ2Nsb3NlJywgb25FbmQpO1xufVxuaW5oZXJpdHMoQ2hhbm5lbCwgRHVwbGV4U3RyZWFtKTtcblxuQ2hhbm5lbC5wcm90b3R5cGUuZW9mID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXQgPSB0cnVlO1xuICB2YXIgb3V0Z29pbmcgPSB0aGlzLm91dGdvaW5nO1xuXG4gIGlmIChvdXRnb2luZy5zdGF0ZSA9PT0gJ29wZW4nKSB7XG4gICAgb3V0Z29pbmcuc3RhdGUgPSAnZW9mJztcbiAgICByZXQgPSB0aGlzLl9jbGllbnQuX3NzaHN0cmVhbS5jaGFubmVsRU9GKG91dGdvaW5nLmlkKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5DaGFubmVsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmV0ID0gdHJ1ZTtcbiAgdmFyIG91dGdvaW5nID0gdGhpcy5vdXRnb2luZztcblxuICBpZiAob3V0Z29pbmcuc3RhdGUgPT09ICdvcGVuJyB8fCBvdXRnb2luZy5zdGF0ZSA9PT0gJ2VvZicpIHtcbiAgICBvdXRnb2luZy5zdGF0ZSA9ICdjbG9zaW5nJztcbiAgICByZXQgPSB0aGlzLl9jbGllbnQuX3NzaHN0cmVhbS5jaGFubmVsQ2xvc2Uob3V0Z29pbmcuaWQpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkNoYW5uZWwucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24obikge1xuICBpZiAodGhpcy5fd2FpdENoYW5EcmFpbikge1xuICAgIHRoaXMuX3dhaXRDaGFuRHJhaW4gPSBmYWxzZTtcbiAgICBpZiAodGhpcy5pbmNvbWluZy53aW5kb3cgPD0gV0lORE9XX1RIUkVTSE9MRClcbiAgICAgIHdpbmRvd0FkanVzdCh0aGlzKTtcbiAgfVxufTtcblxuQ2hhbm5lbC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzc2hzdHJlYW0gPSB0aGlzLl9jbGllbnQuX3NzaHN0cmVhbTtcbiAgdmFyIG91dGdvaW5nID0gdGhpcy5vdXRnb2luZztcbiAgdmFyIHBhY2tldFNpemUgPSBvdXRnb2luZy5wYWNrZXRTaXplO1xuICB2YXIgaWQgPSBvdXRnb2luZy5pZDtcbiAgdmFyIHdpbmRvdyA9IG91dGdvaW5nLndpbmRvdztcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuICB2YXIgcCA9IDA7XG4gIHZhciByZXQ7XG4gIHZhciBidWY7XG4gIHZhciBzbGljZUxlbjtcblxuICBpZiAob3V0Z29pbmcuc3RhdGUgIT09ICdvcGVuJylcbiAgICByZXR1cm47XG5cbiAgd2hpbGUgKGxlbiAtIHAgPiAwICYmIHdpbmRvdyA+IDApIHtcbiAgICBzbGljZUxlbiA9IGxlbiAtIHA7XG4gICAgaWYgKHNsaWNlTGVuID4gd2luZG93KVxuICAgICAgc2xpY2VMZW4gPSB3aW5kb3c7XG4gICAgaWYgKHNsaWNlTGVuID4gcGFja2V0U2l6ZSlcbiAgICAgIHNsaWNlTGVuID0gcGFja2V0U2l6ZTtcblxuICAgIHJldCA9IHNzaHN0cmVhbS5jaGFubmVsRGF0YShpZCwgZGF0YS5zbGljZShwLCBwICsgc2xpY2VMZW4pKTtcblxuICAgIHAgKz0gc2xpY2VMZW47XG4gICAgd2luZG93IC09IHNsaWNlTGVuO1xuXG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHRoaXMuX3dhaXRDbGllbnREcmFpbiA9IHRydWU7XG4gICAgICB0aGlzLl9jaHVuayA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NodW5rY2IgPSBjYjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG91dGdvaW5nLndpbmRvdyA9IHdpbmRvdztcblxuICBpZiAobGVuIC0gcCA+IDApIHtcbiAgICBpZiAod2luZG93ID09PSAwKVxuICAgICAgdGhpcy5fd2FpdFdpbmRvdyA9IHRydWU7XG4gICAgaWYgKHAgPiAwKSB7XG4gICAgICAvLyBwYXJ0aWFsXG4gICAgICBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuIC0gcCk7XG4gICAgICBkYXRhLmNvcHkoYnVmLCAwLCBwKTtcbiAgICAgIHRoaXMuX2NodW5rID0gYnVmO1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5fY2h1bmsgPSBkYXRhO1xuICAgIHRoaXMuX2NodW5rY2IgPSBjYjtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXRoaXMuX3dhaXRDbGllbnREcmFpbilcbiAgICBjYigpO1xufTtcblxuQ2hhbm5lbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVuZCgpO1xufTtcblxuLy8gc2Vzc2lvbiB0eXBlLXNwZWNpZmljIG1ldGhvZHNcbkNoYW5uZWwucHJvdG90eXBlLnNldFdpbmRvdyA9IGZ1bmN0aW9uKHJvd3MsIGNvbHMsIGhlaWdodCwgd2lkdGgpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdzZXNzaW9uJ1xuICAgICAgJiYgKHRoaXMuc3VidHlwZSA9PT0gJ3NoZWxsJyB8fCB0aGlzLnN1YnR5cGUgPT09ICdleGVjJylcbiAgICAgICYmIHRoaXMud3JpdGFibGVcbiAgICAgICYmIHRoaXMub3V0Z29pbmcuc3RhdGUgPT09ICdvcGVuJykge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuX3NzaHN0cmVhbS53aW5kb3dDaGFuZ2UodGhpcy5vdXRnb2luZy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuQ2hhbm5lbC5wcm90b3R5cGUuc2lnbmFsID0gZnVuY3Rpb24oc2lnbmFsTmFtZSkge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ3Nlc3Npb24nXG4gICAgICAmJiB0aGlzLndyaXRhYmxlXG4gICAgICAmJiB0aGlzLm91dGdvaW5nLnN0YXRlID09PSAnb3BlbicpXG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5fc3Noc3RyZWFtLnNpZ25hbCh0aGlzLm91dGdvaW5nLmlkLCBzaWduYWxOYW1lKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5DaGFubmVsLnByb3RvdHlwZS5leGl0ID0gZnVuY3Rpb24obmFtZSwgY29yZUR1bXBlZCwgbXNnKSB7XG4gIGlmICghdGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXItb25seSBtZXRob2QgY2FsbGVkIGluIGNsaWVudCBtb2RlJyk7XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ3Nlc3Npb24nXG4gICAgICAmJiB0aGlzLndyaXRhYmxlXG4gICAgICAmJiB0aGlzLm91dGdvaW5nLnN0YXRlID09PSAnb3BlbicpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdudW1iZXInKVxuICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5fc3Noc3RyZWFtLmV4aXRTdGF0dXModGhpcy5vdXRnb2luZy5pZCwgbmFtZSk7XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2xpZW50Ll9zc2hzdHJlYW0uZXhpdFNpZ25hbCh0aGlzLm91dGdvaW5nLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmVEdW1wZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuQ2hhbm5lbC5NQVhfV0lORE9XID0gTUFYX1dJTkRPVztcbkNoYW5uZWwuUEFDS0VUX1NJWkUgPSBQQUNLRVRfU0laRTtcblxuZnVuY3Rpb24gd2luZG93QWRqdXN0KHNlbGYpIHtcbiAgaWYgKHNlbGYub3V0Z29pbmcuc3RhdGUgPT09ICdjbG9zZWQnKVxuICAgIHJldHVybiB0cnVlO1xuICB2YXIgYW10ID0gTUFYX1dJTkRPVyAtIHNlbGYuaW5jb21pbmcud2luZG93O1xuICBpZiAoYW10IDw9IDApXG4gICAgcmV0dXJuIHRydWU7XG4gIHNlbGYuaW5jb21pbmcud2luZG93ICs9IGFtdDtcbiAgcmV0dXJuIHNlbGYuX2NsaWVudC5fc3Noc3RyZWFtLmNoYW5uZWxXaW5kb3dBZGp1c3Qoc2VsZi5vdXRnb2luZy5pZCwgYW10KTtcbn1cblxuZnVuY3Rpb24gU2VydmVyU3RkZXJyKGNoYW5uZWwpIHtcbiAgV3JpdGFibGVTdHJlYW0uY2FsbCh0aGlzLCB7IGhpZ2hXYXRlck1hcms6IE1BWF9XSU5ET1cgfSk7XG4gIHRoaXMuX2NoYW5uZWwgPSBjaGFubmVsO1xufVxuaW5oZXJpdHMoU2VydmVyU3RkZXJyLCBXcml0YWJsZVN0cmVhbSk7XG5cblNlcnZlclN0ZGVyci5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBjaGFubmVsID0gdGhpcy5fY2hhbm5lbDtcbiAgdmFyIHNzaHN0cmVhbSA9IGNoYW5uZWwuX2NsaWVudC5fc3Noc3RyZWFtO1xuICB2YXIgb3V0Z29pbmcgPSBjaGFubmVsLm91dGdvaW5nO1xuICB2YXIgcGFja2V0U2l6ZSA9IG91dGdvaW5nLnBhY2tldFNpemU7XG4gIHZhciBpZCA9IG91dGdvaW5nLmlkO1xuICB2YXIgd2luZG93ID0gb3V0Z29pbmcud2luZG93O1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGg7XG4gIHZhciBwID0gMDtcbiAgdmFyIHJldDtcbiAgdmFyIGJ1ZjtcbiAgdmFyIHNsaWNlTGVuO1xuXG4gIGlmIChjaGFubmVsLm91dGdvaW5nLnN0YXRlICE9PSAnb3BlbicpXG4gICAgcmV0dXJuO1xuXG4gIHdoaWxlIChsZW4gLSBwID4gMCAmJiB3aW5kb3cgPiAwKSB7XG4gICAgc2xpY2VMZW4gPSBsZW4gLSBwO1xuICAgIGlmIChzbGljZUxlbiA+IHdpbmRvdylcbiAgICAgIHNsaWNlTGVuID0gd2luZG93O1xuICAgIGlmIChzbGljZUxlbiA+IHBhY2tldFNpemUpXG4gICAgICBzbGljZUxlbiA9IHBhY2tldFNpemU7XG5cbiAgICByZXQgPSBzc2hzdHJlYW0uY2hhbm5lbEV4dERhdGEoaWQsIGRhdGEuc2xpY2UocCwgcCArIHNsaWNlTGVuKSwgU1RERVJSKTtcblxuICAgIHAgKz0gc2xpY2VMZW47XG4gICAgd2luZG93IC09IHNsaWNlTGVuO1xuXG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIGNoYW5uZWwuX3dhaXRDbGllbnREcmFpbiA9IHRydWU7XG4gICAgICBjaGFubmVsLl9jaHVua0VyciA9IHVuZGVmaW5lZDtcbiAgICAgIGNoYW5uZWwuX2NodW5rY2JFcnIgPSBjYjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG91dGdvaW5nLndpbmRvdyA9IHdpbmRvdztcblxuICBpZiAobGVuIC0gcCA+IDApIHtcbiAgICBpZiAod2luZG93ID09PSAwKVxuICAgICAgY2hhbm5lbC5fd2FpdFdpbmRvdyA9IHRydWU7XG4gICAgaWYgKHAgPiAwKSB7XG4gICAgICAvLyBwYXJ0aWFsXG4gICAgICBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuIC0gcCk7XG4gICAgICBkYXRhLmNvcHkoYnVmLCAwLCBwKTtcbiAgICAgIGNoYW5uZWwuX2NodW5rRXJyID0gYnVmO1xuICAgIH0gZWxzZVxuICAgICAgY2hhbm5lbC5fY2h1bmtFcnIgPSBkYXRhO1xuICAgIGNoYW5uZWwuX2NodW5rY2JFcnIgPSBjYjtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWNoYW5uZWwuX3dhaXRDbGllbnREcmFpbilcbiAgICBjYigpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFubmVsO1xuIiwiZXhwb3J0IHtcbiAgSVByb3RvY29sLFxuICBJQ2xpZW50T3B0aW9ucyxcbiAgSUNvbmZpZyxcbiAgSUZ0cENvbmZpZyxcbiAgSVNGdHBDb25maWcsXG4gIElGaWxlLFxuICBJRmlsZVBlcm1pc3Npb25zLFxuICBJRmlsZVR5cGUsXG4gIElUcmFuc2ZlcixcbiAgSVRyYW5zZmVyRGlyZWN0aW9uLFxuICBJVHJhbnNmZXJQcm9ncmVzcyxcbiAgSVRyYW5zZmVyUHJvZ3Jlc3NMaXN0ZW5lcixcbiAgSVRyYW5zZmVySW5mbyxcbiAgSVRyYW5zZmVyT3B0aW9ucyxcbn0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IHsgQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQnO1xuZXhwb3J0IHsgU3RyYXRlZ3kgfSBmcm9tICcuL3N0cmF0ZWdpZXMvc3RyYXRlZ3knO1xuZXhwb3J0IHsgRnRwU3RyYXRlZ3kgfSBmcm9tICcuL3N0cmF0ZWdpZXMvZnRwJztcbmV4cG9ydCB7IFNmdHBTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ2llcy9zZnRwJztcblxuZXhwb3J0IHsgZXhlY0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlscy9mdW5jdGlvbic7XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgV3JpdGFibGUsIFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IGNyZWF0ZVdyaXRlU3RyZWFtLCBjcmVhdGVSZWFkU3RyZWFtIH0gZnJvbSAnZnMnO1xuXG5pbXBvcnQge1xuICBJQ29uZmlnLFxuICBJQ2xpZW50T3B0aW9ucyxcbiAgSVN0cmF0ZWdpZXNNYXAsXG4gIElGaWxlLFxuICBJQ2xpZW50V29ya2VyR3JvdXAsXG4gIElUcmFuc2ZlclByb2dyZXNzTGlzdGVuZXIsXG4gIElUcmFuc2ZlcixcbiAgSVRhc2tIYW5kbGVyLFxuICBJT3B0aW9ucyxcbiAgSUZ0cENvbmZpZyxcbiAgSUZ0cE9wdGlvbnMsXG4gIElTRnRwT3B0aW9ucyxcbiAgSVNGdHBDb25maWcsXG4gIElUcmFuc2ZlckRpcmVjdGlvbixcbn0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFN0cmF0ZWd5IH0gZnJvbSAnLi9zdHJhdGVnaWVzL3N0cmF0ZWd5JztcbmltcG9ydCB7IFRhc2tzTWFuYWdlciB9IGZyb20gJy4vdGFza3MnO1xuaW1wb3J0IHsgRnRwU3RyYXRlZ3kgfSBmcm9tICcuL3N0cmF0ZWdpZXMvZnRwJztcbmltcG9ydCB7IHJlcGVhdCB9IGZyb20gJy4vdXRpbHMvYXJyYXknO1xuaW1wb3J0IHsgZ2V0UGF0aEZyb21TdHJlYW0sIGdldEZpbGVTaXplIH0gZnJvbSAnLi91dGlscy9maWxlJztcbmltcG9ydCB7IFNmdHBTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ2llcy9zZnRwJztcblxudHlwZSBJQ2xpZW50RXZlbnRzID1cbiAgfCAnY29ubmVjdCdcbiAgfCAnZGlzY29ubmVjdCdcbiAgfCAndHJhbnNmZXItbmV3J1xuICB8ICd0cmFuc2Zlci1hYm9ydCdcbiAgfCAndHJhbnNmZXItZmluaXNoJ1xuICB8ICd0cmFuc2Zlci1wcm9ncmVzcyc7XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDbGllbnQge1xuICBvbihldmVudDogJ2Nvbm5lY3QnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHRoaXM7XG4gIG9uKGV2ZW50OiAnZGlzY29ubmVjdCcsIGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogdGhpcztcbiAgb24oZXZlbnQ6ICd0cmFuc2Zlci1uZXcnLCBsaXN0ZW5lcjogKGU6IElUcmFuc2ZlcikgPT4gdm9pZCk6IHRoaXM7XG4gIG9uKGV2ZW50OiAndHJhbnNmZXItYWJvcnQnLCBsaXN0ZW5lcjogKC4uLmlkczogbnVtYmVyW10pID0+IHZvaWQpOiB0aGlzO1xuICBvbihldmVudDogJ3RyYW5zZmVyLWZpbmlzaCcsIGxpc3RlbmVyOiAoZTogSVRyYW5zZmVyKSA9PiB2b2lkKTogdGhpcztcbiAgb24oZXZlbnQ6ICd0cmFuc2Zlci1wcm9ncmVzcycsIGxpc3RlbmVyOiBJVHJhbnNmZXJQcm9ncmVzc0xpc3RlbmVyKTogdGhpcztcblxuICBvbmNlKGV2ZW50OiAnY29ubmVjdCcsIGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogdGhpcztcbiAgb25jZShldmVudDogJ2Rpc2Nvbm5lY3QnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6ICd0cmFuc2Zlci1uZXcnLCBsaXN0ZW5lcjogKGU6IElUcmFuc2ZlcikgPT4gdm9pZCk6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6ICd0cmFuc2Zlci1hYm9ydCcsIGxpc3RlbmVyOiAoLi4uaWRzOiBudW1iZXJbXSkgPT4gdm9pZCk6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6ICd0cmFuc2Zlci1maW5pc2gnLCBsaXN0ZW5lcjogKGU6IElUcmFuc2ZlcikgPT4gdm9pZCk6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6ICd0cmFuc2Zlci1wcm9ncmVzcycsIGxpc3RlbmVyOiBJVHJhbnNmZXJQcm9ncmVzc0xpc3RlbmVyKTogdGhpcztcblxuICBhZGRMaXN0ZW5lcihldmVudDogSUNsaWVudEV2ZW50cywgbGlzdGVuZXI6IEZ1bmN0aW9uKTogdGhpcztcbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IElDbGllbnRFdmVudHMsIGxpc3RlbmVyOiBGdW5jdGlvbik6IHRoaXM7XG59XG5cbi8qKlxuICogSGlnaC1sZXZlbCBBUEksIHdoaWNoIGhhbmRsZXMgc3RyYXRlZ2llcy5cbiAqXG4gKiBJdCBhbGxvd3MgdG8gY2FsbCBtZXRob2RzIGFzeW5jaHJvbm91c2x5LlxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJvdGVjdGVkIF9jb25maWc/OiBJQ29uZmlnO1xuXG4gIHByb3RlY3RlZCBfY29ubmVjdGlvbk9wdGlvbnM/OiBJT3B0aW9ucztcblxuICBwcm90ZWN0ZWQgb3B0aW9uczogSUNsaWVudE9wdGlvbnM7XG5cbiAgcHJvdGVjdGVkIHdvcmtlcnM6IFN0cmF0ZWd5W10gPSBbXTtcblxuICBwcm90ZWN0ZWQgdGFza3MgPSBuZXcgVGFza3NNYW5hZ2VyPFN0cmF0ZWd5PigpO1xuXG4gIHByb3RlY3RlZCB0cmFuc2ZlcnMgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpOyAvLyB0YXNrIGlkID0+IHdvcmtlciBpbmRleDtcblxuICBwcm90ZWN0ZWQgc3RyYXRlZ3k6IHR5cGVvZiBTdHJhdGVneTtcblxuICBwcm90ZWN0ZWQgc3RyYXRlZ2llczogSVN0cmF0ZWdpZXNNYXAgPSB7XG4gICAgZnRwOiBGdHBTdHJhdGVneSxcbiAgICBmdHBzOiBGdHBTdHJhdGVneSxcbiAgICBzZnRwOiBTZnRwU3RyYXRlZ3ksXG4gIH07XG5cbiAgLyoqXG4gICAqIFByZXZpb3VzbHkgc2V0IGNvbmZpZy5cbiAgICovXG4gIHB1YmxpYyBnZXQgY29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gIH1cblxuICAvKipcbiAgICogWW91IGNhbiBzZXQgYSBwb29sIG9mIGNsaWVudHMsIHdoaWNoIHdpbGwgY3JlYXRlIG11bHRpcGxlIGNoYW5uZWxzIGZvciBmYXN0ZXIgY29tbXVuaWNhdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBJQ2xpZW50T3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7IHBvb2w6IDEsIC4uLm9wdGlvbnMgfTtcblxuICAgIHRoaXMudGFza3MuZ2V0V29ya2VySW5zdGFuY2UgPSB0aGlzLmdldFdvcmtlckluc3RhbmNlO1xuICAgIHRoaXMudGFza3Mud29ya2VyRmlsdGVyID0gdGhpcy53b3JrZXJGaWx0ZXI7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJQcm90b2NvbChwcm90b2NvbDogc3RyaW5nLCBzdHJhdGVneTogdHlwZW9mIFN0cmF0ZWd5KSB7XG4gICAgdGhpcy5zdHJhdGVnaWVzW3Byb3RvY29sXSA9IHN0cmF0ZWd5O1xuICB9XG5cbiAgcHVibGljIHVucmVnaXN0ZXJQcm90b2NvbChwcm90b2NvbDogc3RyaW5nKSB7XG4gICAgZGVsZXRlIHRoaXMuc3RyYXRlZ2llc1twcm90b2NvbF07XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlV29ya2VyKCkge1xuICAgIGNvbnN0IHsgcHJvdG9jb2wgfSA9IHRoaXMuY29uZmlnO1xuICAgIGNvbnN0IHN0cmF0ZWd5ID0gdGhpcy5zdHJhdGVnaWVzW3Byb3RvY29sXTtcblxuICAgIGlmICghc3RyYXRlZ3kpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyYXRlZ3kgZm9yIHByb3RvY29sICR7cHJvdG9jb2x9IG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHN0cmF0ZWd5KHRoaXMuY29uZmlnLCB0aGlzLl9jb25uZWN0aW9uT3B0aW9ucyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0V29ya2VycygpIHtcbiAgICB0aGlzLndvcmtlcnMuZm9yRWFjaCh0aGlzLmNsZWFyV29ya2VyRXZlbnRzKTtcbiAgICB0aGlzLndvcmtlcnMgPSBbXTtcblxuICAgIGNvbnN0IHsgcG9vbCB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb29sOyBpKyspIHtcbiAgICAgIGNvbnN0IHdvcmtlciA9IHRoaXMuY3JlYXRlV29ya2VyKCk7XG5cbiAgICAgIHRoaXMuaGFuZGxlV29ya2VyRXZlbnRzKHdvcmtlcik7XG5cbiAgICAgIHRoaXMud29ya2Vycy5wdXNoKHdvcmtlcik7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRXb3JrZXJHcm91cHMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBoYW5kbGVXb3JrZXJFdmVudHMgPSAoaW5zdGFuY2U6IFN0cmF0ZWd5KSA9PiB7XG4gICAgaW5zdGFuY2Uub24oJ2Nvbm5lY3QnLCB0aGlzLm9uQ29ubmVjdCk7XG4gICAgaW5zdGFuY2Uub24oJ2Rpc2Nvbm5lY3QnLCB0aGlzLm9uRGlzY29ubmVjdCk7XG4gICAgaW5zdGFuY2Uub24oJ3Byb2dyZXNzJywgdGhpcy5vblByb2dyZXNzKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgY2xlYXJXb3JrZXJFdmVudHMgPSAoaW5zdGFuY2U6IFN0cmF0ZWd5KSA9PiB7XG4gICAgaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCB0aGlzLm9uQ29ubmVjdCk7XG4gICAgaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoJ2Rpc2Nvbm5lY3QnLCB0aGlzLm9uRGlzY29ubmVjdCk7XG4gICAgaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoJ3Byb2dyZXNzJywgdGhpcy5vblByb2dyZXNzKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgc2V0V29ya2VyR3JvdXBzKCkge1xuICAgIGNvbnN0IHsgcG9vbCwgdHJhbnNmZXJQb29sIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZ3JvdXBzOiBJQ2xpZW50V29ya2VyR3JvdXBbXSA9IFtdO1xuXG4gICAgaWYgKCF0cmFuc2ZlclBvb2wgfHwgcG9vbCA9PT0gMSkge1xuICAgICAgZ3JvdXBzLnB1c2goLi4ucmVwZWF0PElDbGllbnRXb3JrZXJHcm91cD4oJ2FsbCcsIHBvb2wpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBzLnB1c2goJ21pc2MnLCAuLi5yZXBlYXQ8SUNsaWVudFdvcmtlckdyb3VwPigndHJhbnNmZXInLCBwb29sIC0gMSkpO1xuICAgIH1cblxuICAgIHRoaXMudGFza3Muc2V0V29ya2VycyguLi5ncm91cHMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFdvcmtlckluc3RhbmNlID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZXJzW2luZGV4XTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgd29ya2VyRmlsdGVyID0gKHdvcmtlciwgZ3JvdXA6IElDbGllbnRXb3JrZXJHcm91cCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB3b3JrZXIuZ3JvdXAgPT09ICdhbGwnIHx8XG4gICAgICAoIWdyb3VwICYmIHdvcmtlci5ncm91cCA9PT0gJ21pc2MnKSB8fFxuICAgICAgd29ya2VyLmdyb3VwID09PSBncm91cFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRvIGEgc2VydmVyLiBJZiB5b3UncmUgYWxyZWFkeSBjb25uZWN0ZWQsIGl0IGRpc2Nvbm5lY3RzLlxuICAgKlxuICAgKiBJdCBzYXZlcyBgY29uZmlnYCBhbmQgYG9wdGlvbnNgLCBzbyB5b3UgY2FuIGNhbGwgaXQgd2l0aG91dCBwcm92aWRpbmcgdGhlc2UgYXJndW1lbnRzIGxhdGVyLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGNvbm5lY3QoY29uZmlnPzogSUZ0cENvbmZpZywgb3B0aW9ucz86IElGdHBPcHRpb25zKTtcbiAgcHVibGljIGFzeW5jIGNvbm5lY3QoY29uZmlnPzogSVNGdHBDb25maWcsIG9wdGlvbnM/OiBJU0Z0cE9wdGlvbnMpO1xuICBwdWJsaWMgYXN5bmMgY29ubmVjdChjb25maWc/OiBJQ29uZmlnLCBvcHRpb25zPzogSU9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZyAmJiAhY29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBtdXN0IGJlIHByb3ZpZGVkIScpO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdCgpO1xuXG4gICAgaWYgKGNvbmZpZykgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIGlmIChvcHRpb25zKSB0aGlzLl9jb25uZWN0aW9uT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLnNldFdvcmtlcnMoKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMud29ya2Vycy5tYXAoKHIpID0+IHIuY29ubmVjdCgpKSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLndvcmtlcnMubWFwKChyKSA9PiByLmRpc2Nvbm5lY3QoKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFib3J0cyBldmVyeSBwcm9jY2VzZWQgYW5kIHdhaXRpbmcgdGFzay5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBhYm9ydCgpIHtcbiAgICB0aGlzLmVtaXQoJ3RyYW5zZmVyLWFib3J0JywgLi4udGhpcy50cmFuc2ZlcnMua2V5cygpKTtcblxuICAgIHRoaXMudGFza3MuZGVsZXRlQWxsVGFza3MoKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMud29ya2Vycy5tYXAoKHIpID0+IHIuYWJvcnQoKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFib3J0cyBzcGVjaWZpZWQgZmlsZSB0cmFuc2ZlcnMuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgYWJvcnRUcmFuc2ZlciguLi50cmFuc2ZlcklkczogbnVtYmVyW10pIHtcbiAgICBjb25zdCB3b3JrZXJJbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGNvbnN0IGluc3RhbmNlczogU3RyYXRlZ3lbXSA9IFtdO1xuXG4gICAgdHJhbnNmZXJJZHMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtlckluZGV4ID0gdGhpcy50cmFuc2ZlcnMuZ2V0KGlkKTtcblxuICAgICAgaWYgKHdvcmtlckluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgaW5zdGFuY2VzLnB1c2godGhpcy53b3JrZXJzW3dvcmtlckluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtlckluZGV4ZXMucHVzaCh3b3JrZXJJbmRleCk7XG5cbiAgICAgIHRoaXMuZW1pdCgndHJhbnNmZXItYWJvcnQnLCBpZCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnRhc2tzLmRlbGV0ZVRhc2tzKC4uLnRyYW5zZmVySWRzKTtcbiAgICB0aGlzLnRhc2tzLnBhdXNlV29ya2VycyguLi53b3JrZXJJbmRleGVzKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKGluc3RhbmNlcy5tYXAoKHIpID0+IHIuYWJvcnQoKSkpO1xuXG4gICAgdGhpcy50YXNrcy5yZXN1bWVXb3JrZXJzKC4uLndvcmtlckluZGV4ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERvd25sb2FkcyBhIHJlbW90ZSBmaWxlLlxuICAgKlxuICAgKiBAcGFyYW0gZGVzdCBjYW4gYmUgZWl0aGVyIGBXcml0YWJsZWAgc3RyZWFtIG9yIHBhdGggb2YgYSBsb2NhbCBmaWxlLlxuICAgKiBAcGFyYW0gc3RhcnRBdCBjYW4gYmUgc2V0IHRvIHJlc3VtZSBkb3dubG9hZC5cbiAgICovXG4gIHB1YmxpYyBkb3dubG9hZChcbiAgICBkZXN0OiBXcml0YWJsZSB8IHN0cmluZyxcbiAgICByZW1vdGVQYXRoOiBzdHJpbmcsXG4gICAgc3RhcnRBdD86IG51bWJlcixcbiAgKSB7XG4gICAgbGV0IHN0cmVhbTogV3JpdGFibGU7XG4gICAgbGV0IGxvY2FsUGF0aDogc3RyaW5nO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgc3RyZWFtID0gY3JlYXRlV3JpdGVTdHJlYW0oZGVzdCwge1xuICAgICAgICBmbGFnczogc3RhcnRBdCA/ICdhJyA6ICd3JyxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0QXQsXG4gICAgICB9KTtcblxuICAgICAgbG9jYWxQYXRoID0gZGVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtID0gZGVzdDtcbiAgICAgIGxvY2FsUGF0aCA9IGdldFBhdGhGcm9tU3RyZWFtKGRlc3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKFxuICAgICAgYXN5bmMgKHsgaW5zdGFuY2UsIHRhc2tJZCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvdGFsQnl0ZXMgPSBhd2FpdCBpbnN0YW5jZS5zaXplKHJlbW90ZVBhdGgpO1xuXG4gICAgICAgIGF3YWl0IGluc3RhbmNlLmRvd25sb2FkKHN0cmVhbSwge1xuICAgICAgICAgIGlkOiB0YXNrSWQsXG4gICAgICAgICAgc3RhcnRBdCxcbiAgICAgICAgICBsb2NhbFBhdGgsXG4gICAgICAgICAgcmVtb3RlUGF0aCxcbiAgICAgICAgICB0b3RhbEJ5dGVzLFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB7IHJlbW90ZVBhdGgsIGxvY2FsUGF0aCB9LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyBhIGxvY2FsIGZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSBzb3VyY2UgY2FuIGJlIGVpdGhlciBgUmVhZGFibGVgIHN0cmVhbSBvciBwYXRoIG9mIGEgcmVtb3RlIGZpbGUuXG4gICAqL1xuICBwdWJsaWMgdXBsb2FkKHNvdXJjZTogUmVhZGFibGUgfCBzdHJpbmcsIHJlbW90ZVBhdGg6IHN0cmluZykge1xuICAgIGxldCBzdHJlYW06IFJlYWRhYmxlO1xuICAgIGxldCBsb2NhbFBhdGg6IHN0cmluZztcblxuICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgc3RyZWFtID0gY3JlYXRlUmVhZFN0cmVhbShzb3VyY2UpO1xuICAgICAgbG9jYWxQYXRoID0gc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0gPSBzb3VyY2U7XG4gICAgICBsb2NhbFBhdGggPSBnZXRQYXRoRnJvbVN0cmVhbShzb3VyY2UpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmhhbmRsZVRyYW5zZmVyKFxuICAgICAgYXN5bmMgKHsgaW5zdGFuY2UsIHRhc2tJZCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvdGFsQnl0ZXMgPSBhd2FpdCBnZXRGaWxlU2l6ZShsb2NhbFBhdGgpO1xuXG4gICAgICAgIGF3YWl0IGluc3RhbmNlLnVwbG9hZChzdHJlYW0sIHtcbiAgICAgICAgICBpZDogdGFza0lkLFxuICAgICAgICAgIGxvY2FsUGF0aCxcbiAgICAgICAgICByZW1vdGVQYXRoLFxuICAgICAgICAgIHRvdGFsQnl0ZXMsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHsgcmVtb3RlUGF0aCwgbG9jYWxQYXRoIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0cyBmaWxlcyBpbiBhIGZvbGRlci5cbiAgICovXG4gIHB1YmxpYyBsaXN0KHBhdGg/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGU8SUZpbGVbXT4oKHsgaW5zdGFuY2UgfSkgPT4gaW5zdGFuY2UubGlzdChwYXRoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBzaXplIG9mIGEgZmlsZS5cbiAgICovXG4gIHB1YmxpYyBzaXplKHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnRhc2tzLmhhbmRsZTxudW1iZXI+KCh7IGluc3RhbmNlIH0pID0+IGluc3RhbmNlLnNpemUocGF0aCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGZpbGUgb3IgYSBmb2xkZXIgZXhpc3RzLlxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGU8Ym9vbGVhbj4oKHsgaW5zdGFuY2UgfSkgPT4gaW5zdGFuY2UuZXhpc3RzKHBhdGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyBhIGZpbGUgb3IgYSBmb2xkZXIuXG4gICAqIENhbiBiZSB1c2VkIHRvIHJlbmFtZS5cbiAgICovXG4gIHB1YmxpYyBtb3ZlKHNvdXJjZTogc3RyaW5nLCBkZXN0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGUoKHsgaW5zdGFuY2UgfSkgPT4gaW5zdGFuY2UubW92ZShzb3VyY2UsIGRlc3QpKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVGaWxlKHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnRhc2tzLmhhbmRsZSgoeyBpbnN0YW5jZSB9KSA9PiBpbnN0YW5jZS5yZW1vdmVGaWxlKHBhdGgpKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVFbXB0eUZvbGRlcihwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGUoKHsgaW5zdGFuY2UgfSkgPT5cbiAgICAgIGluc3RhbmNlLnJlbW92ZUVtcHR5Rm9sZGVyKHBhdGgpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGZvbGRlciBhbmQgYWxsIG9mIGl0cyBjb250ZW50LlxuICAgKi9cbiAgcHVibGljIHJlbW92ZUZvbGRlcihwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGUoKHsgaW5zdGFuY2UgfSkgPT4gaW5zdGFuY2UucmVtb3ZlRm9sZGVyKHBhdGgpKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVGb2xkZXIocGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuaGFuZGxlKCh7IGluc3RhbmNlIH0pID0+IGluc3RhbmNlLmNyZWF0ZUZvbGRlcihwYXRoKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBlbXB0eSBmaWxlLiBTaW1pbGFyIHRvIGB0b3VjaGAgaW4gVW5peC5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVFbXB0eUZpbGUocGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuaGFuZGxlKCh7IGluc3RhbmNlIH0pID0+IGluc3RhbmNlLmNyZWF0ZUVtcHR5RmlsZShwYXRoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlxuICAgKi9cbiAgcHVibGljIHB3ZCgpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5oYW5kbGU8c3RyaW5nPigoeyBpbnN0YW5jZSB9KSA9PiBpbnN0YW5jZS5wd2QoKSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSByYXcgY29tbWFuZC4gU3VwcG9ydCBub3QgZ3VhcmFudGVlZC5cbiAgICovXG4gIHB1YmxpYyBzZW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnRhc2tzLmhhbmRsZTxzdHJpbmc+KCh7IGluc3RhbmNlIH0pID0+IGluc3RhbmNlLnNlbmQoY29tbWFuZCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQ29ubmVjdCA9ICgpID0+IHtcbiAgICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgb25EaXNjb25uZWN0ID0gKCkgPT4ge1xuICAgIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcpO1xuICB9O1xuXG4gIHByb3RlY3RlZCBvblByb2dyZXNzID0gKGRhdGEsIHByb2dyZXNzKSA9PiB7XG4gICAgdGhpcy5lbWl0KCd0cmFuc2Zlci1wcm9ncmVzcycsIGRhdGEsIHByb2dyZXNzKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgYXN5bmMgaGFuZGxlVHJhbnNmZXIoXG4gICAgZm46IElUYXNrSGFuZGxlcjxTdHJhdGVneT4sXG4gICAgZGlyZWN0aW9uOiBJVHJhbnNmZXJEaXJlY3Rpb24sXG4gICkge1xuICAgIGNvbnN0IHRhc2tJZCA9IHRoaXMudGFza3MuY3JlYXRlVGFza0lkKCk7XG4gICAgY29uc3QgdHJhbnNmZXI6IElUcmFuc2ZlciA9IHsgaWQ6IHRhc2tJZCwgLi4uZGlyZWN0aW9uIH07XG5cbiAgICB0aGlzLnRyYW5zZmVycy5zZXQodGFza0lkLCBudWxsKTtcbiAgICB0aGlzLmVtaXQoJ3RyYW5zZmVyLW5ldycsIHRyYW5zZmVyKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnRhc2tzLmhhbmRsZShcbiAgICAgICAgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYW5zZmVycy5zZXQodGFza0lkLCBlLndvcmtlckluZGV4KTtcblxuICAgICAgICAgIGF3YWl0IGZuKGUpO1xuICAgICAgICB9LFxuICAgICAgICAndHJhbnNmZXItdHJhbnNmZXInLFxuICAgICAgICB0YXNrSWQsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnRyYW5zZmVycy5kZWxldGUodGFza0lkKTtcbiAgICAgIHRoaXMuZW1pdCgndHJhbnNmZXItZmluaXNoJywgdHJhbnNmZXIpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcblxuaW1wb3J0IHtcbiAgSVRhc2ssXG4gIElUYXNrQ2hhbmdlLFxuICBJVGFza1dvcmtlcixcbiAgSVRhc2tzR3JvdXBGaWx0ZXIsXG4gIElUYXNrSGFuZGxlckV2ZW50LFxuICBJVGFza0hhbmRsZXIsXG59IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBleGVjRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzL2Z1bmN0aW9uJztcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFRhc2tzTWFuYWdlciB7XG4gIG9uKGV2ZW50OiAnY2hhbmdlJywgbGlzdGVuZXI6IChlOiBJVGFza0NoYW5nZSkgPT4gdm9pZCk6IHRoaXM7XG59XG5cbmNvbnN0IERFRkFVTFRfR1JPVVBfRklMVEVSOiBJVGFza3NHcm91cEZpbHRlciA9ICh3b3JrZXIsIGdyb3VwKSA9PlxuICB3b3JrZXIuZ3JvdXAgPT09IGdyb3VwO1xuXG4vKipcbiAqIEFsbG93cyB0byBjcmVhdGUgbXVsdGlwbGUgY2hhbm5lbHMgd2l0aCBnaXZlbiBncm91cHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrc01hbmFnZXI8SyA9IG51bWJlcj4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIHdvcmtlcnM6IElUYXNrV29ya2VyW10gPSBbXTtcblxuICBwcm90ZWN0ZWQgcXVldWU6IElUYXNrW10gPSBbXTtcblxuICBwcm90ZWN0ZWQgdGFza0NvdW50ZXIgPSAtMTtcblxuICBwcm90ZWN0ZWQgdW5hdmFpbGFibGVXb3JrZXJzID0gMDtcblxuICBwdWJsaWMgd29ya2VyRmlsdGVyOiBJVGFza3NHcm91cEZpbHRlcjtcblxuICBwdWJsaWMgZ2V0V29ya2VySW5zdGFuY2U6IChpbmRleDogbnVtYmVyLCBncm91cDogc3RyaW5nKSA9PiBLO1xuXG4gIHByb3RlY3RlZCBnZXRXb3JrZXIoZ3JvdXA6IHN0cmluZykge1xuICAgIGlmICh0aGlzLnVuYXZhaWxhYmxlV29ya2VycyA9PT0gdGhpcy53b3JrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy53b3JrZXJGaWx0ZXIgfHwgREVGQVVMVF9HUk9VUF9GSUxURVI7XG5cbiAgICByZXR1cm4gdGhpcy53b3JrZXJzLmZpbmQoKHIpID0+ICFyLmJ1c3kgJiYgIXIucGF1c2VkICYmIGZpbHRlcihyLCBncm91cCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFdvcmtlcnMoaW5kZXhlcz86IG51bWJlcltdKSB7XG4gICAgaWYgKCFpbmRleGVzPy5sZW5ndGgpIHJldHVybiB0aGlzLndvcmtlcnM7XG4gICAgcmV0dXJuIGluZGV4ZXMubWFwKChyKSA9PiB0aGlzLndvcmtlcnNbcl0pO1xuICB9XG5cbiAgcHVibGljIHNldFdvcmtlcnMoLi4ud29ya2Vyczogc3RyaW5nW10pIHtcbiAgICB0aGlzLndvcmtlcnMgPSB3b3JrZXJzLm1hcCgoZ3JvdXAsIGluZGV4KSA9PiAoe1xuICAgICAgYnVzeTogZmFsc2UsXG4gICAgICBncm91cCxcbiAgICAgIGluZGV4LFxuICAgIH0pKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGU8VCA9IHZvaWQ+KFxuICAgIGZuOiBJVGFza0hhbmRsZXI8Sz4sXG4gICAgZ3JvdXA/OiBzdHJpbmcsXG4gICAgdGFza0lkPzogbnVtYmVyLFxuICApOiBQcm9taXNlPFQ+IHtcbiAgICB0aGlzLndvcmtlcnNDaGVjaygpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHRhc2s6IElUYXNrID0ge1xuICAgICAgICBpZDogdGFza0lkID8/IHRoaXMuY3JlYXRlVGFza0lkKCksXG4gICAgICAgIGZuLFxuICAgICAgICBncm91cCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGU6IElUYXNrQ2hhbmdlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhc2tJZCA9PT0gdGFzay5pZCkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICAgICAgICAgIGlmIChlLmVycm9yKSByZXR1cm4gcmVqZWN0KGUuZXJyb3IpO1xuICAgICAgICAgIHJlc29sdmUoZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcm9jZXNzKHRhc2spO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByb2Nlc3MgPSBhc3luYyAodGFzazogSVRhc2ssIHdvcmtlcj86IElUYXNrV29ya2VyKSA9PiB7XG4gICAgd29ya2VyID0gd29ya2VyIHx8IHRoaXMuZ2V0V29ya2VyKHRhc2suZ3JvdXApO1xuXG4gICAgaWYgKHdvcmtlcikge1xuICAgICAgd29ya2VyLmJ1c3kgPSB0cnVlO1xuICAgICAgdGhpcy51bmF2YWlsYWJsZVdvcmtlcnMrKztcblxuICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldFdvcmtlckluc3RhbmNlXG4gICAgICAgID8gdGhpcy5nZXRXb3JrZXJJbnN0YW5jZSh3b3JrZXIuaW5kZXgsIHRhc2suZ3JvdXApXG4gICAgICAgIDogd29ya2VyLmluZGV4O1xuXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBleGVjRnVuY3Rpb24odGFzay5mbiwge1xuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgdGFza0lkOiB0YXNrLmlkLFxuICAgICAgICB3b3JrZXJJbmRleDogd29ya2VyLmluZGV4LFxuICAgICAgfSBhcyBJVGFza0hhbmRsZXJFdmVudDxLPik7XG5cbiAgICAgIHdvcmtlci5idXN5ID0gZmFsc2U7XG4gICAgICB0aGlzLnVuYXZhaWxhYmxlV29ya2Vycy0tO1xuXG4gICAgICB0aGlzLmZpbmlzaFRhc2sodGFzay5pZCwgZGF0YSwgZXJyb3IpO1xuICAgICAgdGhpcy5wcm9jZXNzTmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2godGFzayk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RlY3RlZCBhc3luYyBwcm9jZXNzTmV4dCgpIHtcbiAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHF1ZXVlID0gW107XG5cbiAgICAgIGZvciAoY29uc3QgdGFzayBvZiB0aGlzLnF1ZXVlKSB7XG4gICAgICAgIGNvbnN0IHdvcmtlciA9IHRoaXMuZ2V0V29ya2VyKHRhc2suZ3JvdXApO1xuXG4gICAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgICB0aGlzLnByb2Nlc3ModGFzaywgd29ya2VyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucXVldWUgPSBxdWV1ZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgd29ya2Vyc0NoZWNrKCkge1xuICAgIGlmICghdGhpcy53b3JrZXJzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB3b3JrZXJzIHNldCcpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwYXVzZVdvcmtlcnMoLi4uaW5kZXhlczogbnVtYmVyW10pIHtcbiAgICB0aGlzLnVuYXZhaWxhYmxlV29ya2VycyArPSBpbmRleGVzLmxlbmd0aDtcblxuICAgIHRoaXMuZ2V0V29ya2VycyhpbmRleGVzKS5mb3JFYWNoKChyKSA9PiAoci5wYXVzZWQgPSB0cnVlKSk7XG4gIH1cblxuICBwdWJsaWMgcmVzdW1lV29ya2VycyguLi5pbmRleGVzOiBudW1iZXJbXSkge1xuICAgIHRoaXMudW5hdmFpbGFibGVXb3JrZXJzIC09IGluZGV4ZXMubGVuZ3RoO1xuXG4gICAgdGhpcy5nZXRXb3JrZXJzKGluZGV4ZXMpLmZvckVhY2goKHIpID0+IChyLnBhdXNlZCA9IGZhbHNlKSk7XG4gICAgdGhpcy5wcm9jZXNzTmV4dCgpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZVRhc2tzKC4uLmlkczogbnVtYmVyW10pIHtcbiAgICBjb25zdCBxdWV1ZTogSVRhc2tbXSA9IFtdO1xuXG4gICAgdGhpcy5xdWV1ZS5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICBpZiAoaWRzLmluY2x1ZGVzKHRhc2suaWQpKSB7XG4gICAgICAgIHRoaXMuZmluaXNoVGFzayh0YXNrLmlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlLnB1c2godGFzayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnF1ZXVlID0gcXVldWU7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlQWxsVGFza3MoKSB7XG4gICAgdGhpcy5xdWV1ZS5mb3JFYWNoKChyKSA9PiB0aGlzLmZpbmlzaFRhc2soci5pZCkpO1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVUYXNrSWQoKSB7XG4gICAgcmV0dXJuICsrdGhpcy50YXNrQ291bnRlcjtcbiAgfVxuXG4gIHByb3RlY3RlZCBmaW5pc2hUYXNrKGlkOiBudW1iZXIsIGRhdGE/OiBhbnksIGVycm9yPzogRXJyb3IpIHtcbiAgICB0aGlzLmVtaXQoJ2NoYW5nZScsIHtcbiAgICAgIHRhc2tJZDogaWQsXG4gICAgICBkYXRhLFxuICAgICAgZXJyb3IsXG4gICAgICB0eXBlOiAnZmluaXNoZWQnLFxuICAgIH0gYXMgSVRhc2tDaGFuZ2UpO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgdGxzXzEgPSByZXF1aXJlKFwidGxzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBGdHBDb250ZXh0XzEgPSByZXF1aXJlKFwiLi9GdHBDb250ZXh0XCIpO1xuY29uc3QgcGFyc2VMaXN0XzEgPSByZXF1aXJlKFwiLi9wYXJzZUxpc3RcIik7XG5jb25zdCBQcm9ncmVzc1RyYWNrZXJfMSA9IHJlcXVpcmUoXCIuL1Byb2dyZXNzVHJhY2tlclwiKTtcbmNvbnN0IFN0cmluZ1dyaXRlcl8xID0gcmVxdWlyZShcIi4vU3RyaW5nV3JpdGVyXCIpO1xuY29uc3QgcGFyc2VMaXN0TUxTRF8xID0gcmVxdWlyZShcIi4vcGFyc2VMaXN0TUxTRFwiKTtcbmNvbnN0IG5ldFV0aWxzXzEgPSByZXF1aXJlKFwiLi9uZXRVdGlsc1wiKTtcbmNvbnN0IHRyYW5zZmVyXzEgPSByZXF1aXJlKFwiLi90cmFuc2ZlclwiKTtcbmNvbnN0IHBhcnNlQ29udHJvbFJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9wYXJzZUNvbnRyb2xSZXNwb25zZVwiKTtcbi8vIFVzZSBwcm9taXNpZnkgdG8ga2VlcCB0aGUgbGlicmFyeSBjb21wYXRpYmxlIHdpdGggTm9kZSA4LlxuY29uc3QgZnNSZWFkRGlyID0gdXRpbF8xLnByb21pc2lmeShmc18xLnJlYWRkaXIpO1xuY29uc3QgZnNNa0RpciA9IHV0aWxfMS5wcm9taXNpZnkoZnNfMS5ta2Rpcik7XG5jb25zdCBmc1N0YXQgPSB1dGlsXzEucHJvbWlzaWZ5KGZzXzEuc3RhdCk7XG5jb25zdCBmc09wZW4gPSB1dGlsXzEucHJvbWlzaWZ5KGZzXzEub3Blbik7XG5jb25zdCBmc0Nsb3NlID0gdXRpbF8xLnByb21pc2lmeShmc18xLmNsb3NlKTtcbmNvbnN0IGZzVW5saW5rID0gdXRpbF8xLnByb21pc2lmeShmc18xLnVubGluayk7XG4vKipcbiAqIEhpZ2gtbGV2ZWwgQVBJIHRvIGludGVyYWN0IHdpdGggYW4gRlRQIHNlcnZlci5cbiAqL1xuY2xhc3MgQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSBhbiBGVFAgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRpbWVvdXQgIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCB1c2UgMCBmb3Igbm8gdGltZW91dC4gT3B0aW9uYWwsIGRlZmF1bHQgaXMgMzAgc2Vjb25kcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gMzAwMDApIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE11bHRpcGxlIGNvbW1hbmRzIHRvIHJldHJpZXZlIGEgZGlyZWN0b3J5IGxpc3RpbmcgYXJlIHBvc3NpYmxlLiBUaGlzIGluc3RhbmNlXG4gICAgICAgICAqIHdpbGwgdHJ5IGFsbCBvZiB0aGVtIGluIHRoZSBvcmRlciBwcmVzZW50ZWQgdGhlIGZpcnN0IHRpbWUgYSBkaXJlY3RvcnkgbGlzdGluZ1xuICAgICAgICAgKiBpcyByZXF1ZXN0ZWQuIEFmdGVyIHRoYXQsIGBhdmFpbGFibGVMaXN0Q29tbWFuZHNgIHdpbGwgIGhvbGQgb25seSB0aGUgZmlyc3RcbiAgICAgICAgICogZW50cnkgdGhhdCB3b3JrZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF2YWlsYWJsZUxpc3RDb21tYW5kcyA9IFtcIk1MU0RcIiwgXCJMSVNUIC1hXCIsIFwiTElTVFwiXTtcbiAgICAgICAgdGhpcy5mdHAgPSBuZXcgRnRwQ29udGV4dF8xLkZUUENvbnRleHQodGltZW91dCk7XG4gICAgICAgIHRoaXMucHJlcGFyZVRyYW5zZmVyID0gdGhpcy5fZW50ZXJGaXJzdENvbXBhdGlibGVNb2RlKFt0cmFuc2Zlcl8xLmVudGVyUGFzc2l2ZU1vZGVJUHY2LCB0cmFuc2Zlcl8xLmVudGVyUGFzc2l2ZU1vZGVJUHY0XSk7XG4gICAgICAgIHRoaXMucGFyc2VMaXN0ID0gcGFyc2VMaXN0XzEucGFyc2VMaXN0O1xuICAgICAgICB0aGlzLl9wcm9ncmVzc1RyYWNrZXIgPSBuZXcgUHJvZ3Jlc3NUcmFja2VyXzEuUHJvZ3Jlc3NUcmFja2VyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBjbGllbnQgYW5kIGFsbCBvcGVuIHNvY2tldCBjb25uZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIENsb3NlIHRoZSBjbGllbnQgYW5kIGFsbCBvcGVuIHNvY2tldCBjb25uZWN0aW9ucy4gVGhlIGNsaWVudCBjYW7igJl0IGJlIHVzZWQgYW55bW9yZSBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kLFxuICAgICAqIHlvdSBoYXZlIHRvIGVpdGhlciByZWNvbm5lY3Qgd2l0aCBgYWNjZXNzYCBvciBgY29ubmVjdGAgb3IgaW5zdGFudGlhdGUgYSBuZXcgaW5zdGFuY2UgdG8gY29udGludWUgYW55IHdvcmsuXG4gICAgICogQSBjbGllbnQgaXMgYWxzbyBjbG9zZWQgYXV0b21hdGljYWxseSBpZiBhbnkgdGltZW91dCBvciBjb25uZWN0aW9uIGVycm9yIG9jY3Vycy5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5mdHAuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NUcmFja2VyLnN0b3AoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjbGllbnQgaXMgY2xvc2VkIGFuZCBjYW4ndCBiZSB1c2VkIGFueW1vcmUuXG4gICAgICovXG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnRwLmNsb3NlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdCAob3IgcmVjb25uZWN0KSB0byBhbiBGVFAgc2VydmVyLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBpbnN0YW5jZSBtZXRob2QgYW5kIHRodXMgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgdGhlIGxpZmVjeWNsZSBvZiBhIGBDbGllbnRgXG4gICAgICogaW5zdGFuY2UuIFdoZW5ldmVyIHlvdSBkbywgdGhlIGNsaWVudCBpcyByZXNldCB3aXRoIGEgbmV3IGNvbnRyb2wgY29ubmVjdGlvbi4gVGhpcyBhbHNvIGltcGxpZXMgdGhhdFxuICAgICAqIHlvdSBjYW4gcmVvcGVuIGEgYENsaWVudGAgaW5zdGFuY2UgdGhhdCBoYXMgYmVlbiBjbG9zZWQgZHVlIHRvIGFuIGVycm9yIHdoZW4gcmVjb25uZWN0aW5nIHdpdGggdGhpc1xuICAgICAqIG1ldGhvZC4gSW4gZmFjdCwgcmVjb25uZWN0aW5nIGlzIHRoZSBvbmx5IHdheSB0byBjb250aW51ZSB1c2luZyBhIGNsb3NlZCBgQ2xpZW50YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBob3N0ICBIb3N0IHRoZSBjbGllbnQgc2hvdWxkIGNvbm5lY3QgdG8uIE9wdGlvbmFsLCBkZWZhdWx0IGlzIFwibG9jYWxob3N0XCIuXG4gICAgICogQHBhcmFtIHBvcnQgIFBvcnQgdGhlIGNsaWVudCBzaG91bGQgY29ubmVjdCB0by4gT3B0aW9uYWwsIGRlZmF1bHQgaXMgMjEuXG4gICAgICovXG4gICAgY29ubmVjdChob3N0ID0gXCJsb2NhbGhvc3RcIiwgcG9ydCA9IDIxKSB7XG4gICAgICAgIHRoaXMuZnRwLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZnRwLnNvY2tldC5jb25uZWN0KHtcbiAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgZmFtaWx5OiB0aGlzLmZ0cC5pcEZhbWlseVxuICAgICAgICB9LCAoKSA9PiB0aGlzLmZ0cC5sb2coYENvbm5lY3RlZCB0byAke25ldFV0aWxzXzEuZGVzY3JpYmVBZGRyZXNzKHRoaXMuZnRwLnNvY2tldCl9ICgke25ldFV0aWxzXzEuZGVzY3JpYmVUTFModGhpcy5mdHAuc29ja2V0KX0pYCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlQ29ubmVjdFJlc3BvbnNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzIGBjb25uZWN0YCBidXQgdXNpbmcgaW1wbGljaXQgVExTLiBJbXBsaWNpdCBUTFMgaXMgbm90IGFuIEZUUCBzdGFuZGFyZCBhbmQgaGFzIGJlZW4gcmVwbGFjZWQgYnlcbiAgICAgKiBleHBsaWNpdCBUTFMuIFRoZXJlIGFyZSBzdGlsbCBGVFAgc2VydmVycyB0aGF0IHN1cHBvcnQgb25seSBpbXBsaWNpdCBUTFMsIHRob3VnaC5cbiAgICAgKi9cbiAgICBjb25uZWN0SW1wbGljaXRUTFMoaG9zdCA9IFwibG9jYWxob3N0XCIsIHBvcnQgPSAyMSwgdGxzT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuZnRwLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZnRwLnNvY2tldCA9IHRsc18xLmNvbm5lY3QocG9ydCwgaG9zdCwgdGxzT3B0aW9ucywgKCkgPT4gdGhpcy5mdHAubG9nKGBDb25uZWN0ZWQgdG8gJHtuZXRVdGlsc18xLmRlc2NyaWJlQWRkcmVzcyh0aGlzLmZ0cC5zb2NrZXQpfSAoJHtuZXRVdGlsc18xLmRlc2NyaWJlVExTKHRoaXMuZnRwLnNvY2tldCl9KWApKTtcbiAgICAgICAgdGhpcy5mdHAudGxzT3B0aW9ucyA9IHRsc09wdGlvbnM7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVDb25uZWN0UmVzcG9uc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgZmlyc3QgcmVwb25zZSBieSBhbiBGVFAgc2VydmVyIGFmdGVyIHRoZSBzb2NrZXQgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cbiAgICAgKi9cbiAgICBfaGFuZGxlQ29ubmVjdFJlc3BvbnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdHAuaGFuZGxlKHVuZGVmaW5lZCwgKHJlcywgdGFzaykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvbm5lY3Rpb24gaGFzIGJlZW4gZGVzdHJveWVkIGJ5IHRoZSBGVFBDb250ZXh0IGF0IHRoaXMgcG9pbnQuXG4gICAgICAgICAgICAgICAgdGFzay5yZWplY3QocmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlQ29udHJvbFJlc3BvbnNlXzEucG9zaXRpdmVDb21wbGV0aW9uKHJlcy5jb2RlKSkge1xuICAgICAgICAgICAgICAgIHRhc2sucmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVqZWN0IGFsbCBvdGhlciBjb2RlcywgaW5jbHVkaW5nIDEyMCBcIlNlcnZpY2UgcmVhZHkgaW4gbm5uIG1pbnV0ZXNcIi5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IHN0YXkgY29ubmVjdGVkIGJ1dCBkb24ndCByZXBsYWNlIHRoZSBzb2NrZXQgeWV0IGJ5IHVzaW5nIHJlc2V0KClcbiAgICAgICAgICAgICAgICAvLyBzbyB0aGUgdXNlciBjYW4gaW5zcGVjdCBwcm9wZXJ0aWVzIG9mIHRoaXMgaW5zdGFuY2UuXG4gICAgICAgICAgICAgICAgdGhpcy5mdHAuc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0YXNrLnJlamVjdChuZXcgRnRwQ29udGV4dF8xLkZUUEVycm9yKHJlcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBGVFAgY29tbWFuZCBhbmQgaGFuZGxlIHRoZSBmaXJzdCByZXNwb25zZS5cbiAgICAgKi9cbiAgICBzZW5kKGNvbW1hbmQsIGlnbm9yZUVycm9yQ29kZXNERVBSRUNBVEVEID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGlnbm9yZUVycm9yQ29kZXNERVBSRUNBVEVEKSB7IC8vIERlcHJlY2F0ZWQgc3RhcnRpbmcgZnJvbSAzLjkuMFxuICAgICAgICAgICAgdGhpcy5mdHAubG9nKFwiRGVwcmVjYXRlZCBjYWxsIHVzaW5nIHNlbmQoY29tbWFuZCwgZmxhZykgd2l0aCBib29sZWFuIGZsYWcgdG8gaWdub3JlIGVycm9ycy4gVXNlIHNlbmRJZ25vcmluZ0Vycm9yKGNvbW1hbmQpLlwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRJZ25vcmluZ0Vycm9yKGNvbW1hbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZ0cC5yZXF1ZXN0KGNvbW1hbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIEZUUCBjb21tYW5kIGFuZCBpZ25vcmUgYW4gRlRQIGVycm9yIHJlc3BvbnNlLiBBbnkgb3RoZXIga2luZCBvZiBlcnJvciBvciB0aW1lb3V0IHdpbGwgc3RpbGwgcmVqZWN0IHRoZSBQcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbW1hbmRcbiAgICAgKi9cbiAgICBzZW5kSWdub3JpbmdFcnJvcihjb21tYW5kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ0cC5oYW5kbGUoY29tbWFuZCwgKHJlcywgdGFzaykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEZ0cENvbnRleHRfMS5GVFBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRhc2sucmVzb2x2ZSh7IGNvZGU6IHJlcy5jb2RlLCBtZXNzYWdlOiByZXMubWVzc2FnZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGFzay5yZWplY3QocmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhc2sucmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBncmFkZSB0aGUgY3VycmVudCBzb2NrZXQgY29ubmVjdGlvbiB0byBUTFMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAgVExTIG9wdGlvbnMgYXMgaW4gYHRscy5jb25uZWN0KG9wdGlvbnMpYCwgb3B0aW9uYWwuXG4gICAgICogQHBhcmFtIGNvbW1hbmQgIFNldCB0aGUgYXV0aGVudGljYXRpb24gY29tbWFuZC4gT3B0aW9uYWwsIGRlZmF1bHQgaXMgXCJBVVRIIFRMU1wiLlxuICAgICAqL1xuICAgIGFzeW5jIHVzZVRMUyhvcHRpb25zID0ge30sIGNvbW1hbmQgPSBcIkFVVEggVExTXCIpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgdGhpcy5zZW5kKGNvbW1hbmQpO1xuICAgICAgICB0aGlzLmZ0cC5zb2NrZXQgPSBhd2FpdCBuZXRVdGlsc18xLnVwZ3JhZGVTb2NrZXQodGhpcy5mdHAuc29ja2V0LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5mdHAudGxzT3B0aW9ucyA9IG9wdGlvbnM7IC8vIEtlZXAgdGhlIFRMUyBvcHRpb25zIGZvciBsYXRlciBkYXRhIGNvbm5lY3Rpb25zIHRoYXQgc2hvdWxkIHVzZSB0aGUgc2FtZSBvcHRpb25zLlxuICAgICAgICB0aGlzLmZ0cC5sb2coYENvbnRyb2wgc29ja2V0IGlzIHVzaW5nOiAke25ldFV0aWxzXzEuZGVzY3JpYmVUTFModGhpcy5mdHAuc29ja2V0KX1gKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9naW4gYSB1c2VyIHdpdGggYSBwYXNzd29yZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VyICBVc2VybmFtZSB0byB1c2UgZm9yIGxvZ2luLiBPcHRpb25hbCwgZGVmYXVsdCBpcyBcImFub255bW91c1wiLlxuICAgICAqIEBwYXJhbSBwYXNzd29yZCAgUGFzc3dvcmQgdG8gdXNlIGZvciBsb2dpbi4gT3B0aW9uYWwsIGRlZmF1bHQgaXMgXCJndWVzdFwiLlxuICAgICAqL1xuICAgIGxvZ2luKHVzZXIgPSBcImFub255bW91c1wiLCBwYXNzd29yZCA9IFwiZ3Vlc3RcIikge1xuICAgICAgICB0aGlzLmZ0cC5sb2coYExvZ2luIHNlY3VyaXR5OiAke25ldFV0aWxzXzEuZGVzY3JpYmVUTFModGhpcy5mdHAuc29ja2V0KX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnRwLmhhbmRsZShcIlVTRVIgXCIgKyB1c2VyLCAocmVzLCB0YXNrKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0YXNrLnJlamVjdChyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VDb250cm9sUmVzcG9uc2VfMS5wb3NpdGl2ZUNvbXBsZXRpb24ocmVzLmNvZGUpKSB7IC8vIFVzZXIgbG9nZ2VkIGluIHByb2NlZWQgT1IgQ29tbWFuZCBzdXBlcmZsdW91c1xuICAgICAgICAgICAgICAgIHRhc2sucmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzLmNvZGUgPT09IDMzMSkgeyAvLyBVc2VyIG5hbWUgb2theSwgbmVlZCBwYXNzd29yZFxuICAgICAgICAgICAgICAgIHRoaXMuZnRwLnNlbmQoXCJQQVNTIFwiICsgcGFzc3dvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIEFsc28gcmVwb3J0IGVycm9yIG9uIDMzMiAoTmVlZCBhY2NvdW50KVxuICAgICAgICAgICAgICAgIHRhc2sucmVqZWN0KG5ldyBGdHBDb250ZXh0XzEuRlRQRXJyb3IocmVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHVzdWFsIGRlZmF1bHQgc2V0dGluZ3MuXG4gICAgICpcbiAgICAgKiBTZXR0aW5ncyB1c2VkOlxuICAgICAqICogQmluYXJ5IG1vZGUgKFRZUEUgSSlcbiAgICAgKiAqIEZpbGUgc3RydWN0dXJlIChTVFJVIEYpXG4gICAgICogKiBBZGRpdGlvbmFsIHNldHRpbmdzIGZvciBGVFBTIChQQlNaIDAsIFBST1QgUClcbiAgICAgKi9cbiAgICBhc3luYyB1c2VEZWZhdWx0U2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZChcIlRZUEUgSVwiKTsgLy8gQmluYXJ5IG1vZGVcbiAgICAgICAgYXdhaXQgdGhpcy5zZW5kSWdub3JpbmdFcnJvcihcIlNUUlUgRlwiKTsgLy8gVXNlIGZpbGUgc3RydWN0dXJlXG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZElnbm9yaW5nRXJyb3IoXCJPUFRTIFVURjggT05cIik7IC8vIFNvbWUgc2VydmVycyBleHBlY3QgVVRGLTggdG8gYmUgZW5hYmxlZCBleHBsaWNpdGx5XG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZElnbm9yaW5nRXJyb3IoXCJPUFRTIE1MU1QgdHlwZTtzaXplO21vZGlmeTt1bmlxdWU7dW5peC5tb2RlO3VuaXgub3duZXI7dW5peC5ncm91cDt1bml4Lm93bmVybmFtZTt1bml4Lmdyb3VwbmFtZTtcIik7IC8vIE1ha2Ugc3VyZSBNTFNEIGxpc3RpbmdzIGluY2x1ZGUgYWxsIHdlIGNhbiBwYXJzZVxuICAgICAgICBpZiAodGhpcy5mdHAuaGFzVExTKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNlbmRJZ25vcmluZ0Vycm9yKFwiUEJTWiAwXCIpOyAvLyBTZXQgdG8gMCBmb3IgVExTXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNlbmRJZ25vcmluZ0Vycm9yKFwiUFJPVCBQXCIpOyAvLyBQcm90ZWN0IGNoYW5uZWwgKGFsc28gZm9yIGRhdGEgY29ubmVjdGlvbnMpXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRoYXQgY2FsbHMgYGNvbm5lY3RgLCBgdXNlVExTYCwgYGxvZ2luYCBhbmQgYHVzZURlZmF1bHRTZXR0aW5nc2AuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlIG1ldGhvZCBhbmQgdGh1cyBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyB0aGUgbGlmZWN5Y2xlIG9mIGEgYENsaWVudGBcbiAgICAgKiBpbnN0YW5jZS4gV2hlbmV2ZXIgeW91IGRvLCB0aGUgY2xpZW50IGlzIHJlc2V0IHdpdGggYSBuZXcgY29udHJvbCBjb25uZWN0aW9uLiBUaGlzIGFsc28gaW1wbGllcyB0aGF0XG4gICAgICogeW91IGNhbiByZW9wZW4gYSBgQ2xpZW50YCBpbnN0YW5jZSB0aGF0IGhhcyBiZWVuIGNsb3NlZCBkdWUgdG8gYW4gZXJyb3Igd2hlbiByZWNvbm5lY3Rpbmcgd2l0aCB0aGlzXG4gICAgICogbWV0aG9kLiBJbiBmYWN0LCByZWNvbm5lY3RpbmcgaXMgdGhlIG9ubHkgd2F5IHRvIGNvbnRpbnVlIHVzaW5nIGEgY2xvc2VkIGBDbGllbnRgLlxuICAgICAqL1xuICAgIGFzeW5jIGFjY2VzcyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgdXNlRXhwbGljaXRUTFMgPSBvcHRpb25zLnNlY3VyZSA9PT0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdXNlSW1wbGljaXRUTFMgPSBvcHRpb25zLnNlY3VyZSA9PT0gXCJpbXBsaWNpdFwiO1xuICAgICAgICBsZXQgd2VsY29tZTtcbiAgICAgICAgaWYgKHVzZUltcGxpY2l0VExTKSB7XG4gICAgICAgICAgICB3ZWxjb21lID0gYXdhaXQgdGhpcy5jb25uZWN0SW1wbGljaXRUTFMob3B0aW9ucy5ob3N0LCBvcHRpb25zLnBvcnQsIG9wdGlvbnMuc2VjdXJlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3ZWxjb21lID0gYXdhaXQgdGhpcy5jb25uZWN0KG9wdGlvbnMuaG9zdCwgb3B0aW9ucy5wb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlRXhwbGljaXRUTFMpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXNlVExTKG9wdGlvbnMuc2VjdXJlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5sb2dpbihvcHRpb25zLnVzZXIsIG9wdGlvbnMucGFzc3dvcmQpO1xuICAgICAgICBhd2FpdCB0aGlzLnVzZURlZmF1bHRTZXR0aW5ncygpO1xuICAgICAgICByZXR1cm4gd2VsY29tZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIGFzeW5jIHB3ZCgpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5zZW5kKFwiUFdEXCIpO1xuICAgICAgICAvLyBUaGUgZGlyZWN0b3J5IGlzIHBhcnQgb2YgdGhlIHJldHVybiBtZXNzYWdlLCBmb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gMjU3IFwiL3RoaXMvdGhhdFwiIGlzIGN1cnJlbnQgZGlyZWN0b3J5LlxuICAgICAgICBjb25zdCBwYXJzZWQgPSByZXMubWVzc2FnZS5tYXRjaCgvXCIoLispXCIvKTtcbiAgICAgICAgaWYgKHBhcnNlZCA9PT0gbnVsbCB8fCBwYXJzZWRbMV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBwYXJzZSByZXNwb25zZSB0byBjb21tYW5kICdQV0QnOiAke3Jlcy5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWRbMV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGRlc2NyaXB0aW9uIG9mIHN1cHBvcnRlZCBmZWF0dXJlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2VuZHMgdGhlIEZFQVQgY29tbWFuZCBhbmQgcGFyc2VzIHRoZSByZXN1bHQgaW50byBhIE1hcCB3aGVyZSBrZXlzIGNvcnJlc3BvbmQgdG8gYXZhaWxhYmxlIGNvbW1hbmRzXG4gICAgICogYW5kIHZhbHVlcyBob2xkIGZ1cnRoZXIgaW5mb3JtYXRpb24uIEJlIGF3YXJlIHRoYXQgeW91ciBGVFAgc2VydmVycyBtaWdodCBub3Qgc3VwcG9ydCB0aGlzXG4gICAgICogY29tbWFuZCBpbiB3aGljaCBjYXNlIHRoaXMgbWV0aG9kIHdpbGwgbm90IHRocm93IGFuIGV4Y2VwdGlvbiBidXQganVzdCByZXR1cm4gYW4gZW1wdHkgTWFwLlxuICAgICAqL1xuICAgIGFzeW5jIGZlYXR1cmVzKCkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnNlbmRJZ25vcmluZ0Vycm9yKFwiRkVBVFwiKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIE5vdCBzdXBwb3J0aW5nIGFueSBzcGVjaWFsIGZlYXR1cmVzIHdpbGwgYmUgcmVwb3J0ZWQgd2l0aCBhIHNpbmdsZSBsaW5lLlxuICAgICAgICBpZiAocmVzLmNvZGUgPCA0MDAgJiYgcGFyc2VDb250cm9sUmVzcG9uc2VfMS5pc011bHRpbGluZShyZXMubWVzc2FnZSkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBhbmQgbGFzdCBsaW5lIHdyYXAgdGhlIG11bHRpbGluZSByZXNwb25zZSwgaWdub3JlIHRoZW0uXG4gICAgICAgICAgICByZXMubWVzc2FnZS5zcGxpdChcIlxcblwiKS5zbGljZSgxLCAtMSkuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgICAgICAgICAvLyBBIHR5cGljYWwgbGluZXMgbG9va3MgbGlrZTogXCIgUkVTVCBTVFJFQU1cIiBvciBcIiBNRFRNXCIuXG4gICAgICAgICAgICAgICAgLy8gU2VydmVycyBtaWdodCBub3QgdXNlIGFuIGluZGVudGF0aW9uIHRob3VnaC5cbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGxpbmUudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdIHx8IFwiXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHdvcmtpbmcgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIGFzeW5jIGNkKHBhdGgpIHtcbiAgICAgICAgY29uc3QgdmFsaWRQYXRoID0gYXdhaXQgdGhpcy5wcm90ZWN0V2hpdGVzcGFjZShwYXRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChcIkNXRCBcIiArIHZhbGlkUGF0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN3aXRjaCB0byB0aGUgcGFyZW50IGRpcmVjdG9yeSBvZiB0aGUgd29ya2luZyBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgYXN5bmMgY2R1cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChcIkNEVVBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbGFzdCBtb2RpZmllZCB0aW1lIG9mIGEgZmlsZS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGV2ZXJ5IEZUUCBzZXJ2ZXIsIGluIHdoaWNoIGNhc2VcbiAgICAgKiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGxhc3RNb2QocGF0aCkge1xuICAgICAgICBjb25zdCB2YWxpZFBhdGggPSBhd2FpdCB0aGlzLnByb3RlY3RXaGl0ZXNwYWNlKHBhdGgpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnNlbmQoYE1EVE0gJHt2YWxpZFBhdGh9YCk7XG4gICAgICAgIGNvbnN0IGRhdGUgPSByZXMubWVzc2FnZS5zbGljZSg0KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlTGlzdE1MU0RfMS5wYXJzZU1MU3hEYXRlKGRhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNpemUgb2YgYSBmaWxlLlxuICAgICAqL1xuICAgIGFzeW5jIHNpemUocGF0aCkge1xuICAgICAgICBjb25zdCB2YWxpZFBhdGggPSBhd2FpdCB0aGlzLnByb3RlY3RXaGl0ZXNwYWNlKHBhdGgpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0gYFNJWkUgJHt2YWxpZFBhdGh9YDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAvLyBUaGUgc2l6ZSBpcyBwYXJ0IG9mIHRoZSByZXNwb25zZSBtZXNzYWdlLCBmb3IgZXhhbXBsZTogXCIyMTMgNTU1NTU1XCIuIEl0J3NcbiAgICAgICAgLy8gcG9zc2libGUgdGhhdCB0aGVyZSBpcyBhIGNvbW1tZW50YXJ5IGFwcGVuZGVkIGxpa2UgXCIyMTMgNTU1NSwgc29tZSBjb21tZW50YXJ5XCIuXG4gICAgICAgIGNvbnN0IHNpemUgPSBwYXJzZUludChyZXMubWVzc2FnZS5zbGljZSg0KSwgMTApO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHNpemUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHBhcnNlIHJlc3BvbnNlIHRvIGNvbW1hbmQgJyR7Y29tbWFuZH0nIGFzIGEgbnVtZXJpY2FsIHZhbHVlOiAke3Jlcy5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5hbWUgYSBmaWxlLlxuICAgICAqXG4gICAgICogRGVwZW5kaW5nIG9uIHRoZSBGVFAgc2VydmVyIHRoaXMgbWlnaHQgYWxzbyBiZSB1c2VkIHRvIG1vdmUgYSBmaWxlIGZyb20gb25lXG4gICAgICogZGlyZWN0b3J5IHRvIGFub3RoZXIgYnkgcHJvdmlkaW5nIGZ1bGwgcGF0aHMuXG4gICAgICovXG4gICAgYXN5bmMgcmVuYW1lKHNyY1BhdGgsIGRlc3RQYXRoKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkU3JjID0gYXdhaXQgdGhpcy5wcm90ZWN0V2hpdGVzcGFjZShzcmNQYXRoKTtcbiAgICAgICAgY29uc3QgdmFsaWREZXN0ID0gYXdhaXQgdGhpcy5wcm90ZWN0V2hpdGVzcGFjZShkZXN0UGF0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZChcIlJORlIgXCIgKyB2YWxpZFNyYyk7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoXCJSTlRPIFwiICsgdmFsaWREZXN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgZmlsZSBmcm9tIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlxuICAgICAqXG4gICAgICogWW91IGNhbiBpZ25vcmUgRlRQIGVycm9yIHJldHVybiBjb2RlcyB3aGljaCB3b24ndCB0aHJvdyBhbiBleGNlcHRpb24gaWYgZS5nLlxuICAgICAqIHRoZSBmaWxlIGRvZXNuJ3QgZXhpc3QuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlKHBhdGgsIGlnbm9yZUVycm9yQ29kZXMgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB2YWxpZFBhdGggPSBhd2FpdCB0aGlzLnByb3RlY3RXaGl0ZXNwYWNlKHBhdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGBERUxFICR7dmFsaWRQYXRofWAsIGlnbm9yZUVycm9yQ29kZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXBvcnQgdHJhbnNmZXIgcHJvZ3Jlc3MgZm9yIGFueSB1cGxvYWQgb3IgZG93bmxvYWQgdG8gYSBnaXZlbiBoYW5kbGVyLlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIGFsc28gcmVzZXQgdGhlIG92ZXJhbGwgdHJhbnNmZXIgY291bnRlciB0aGF0IGNhbiBiZSB1c2VkIGZvciBtdWx0aXBsZSB0cmFuc2ZlcnMuIFlvdSBjYW5cbiAgICAgKiBhbHNvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGhvdXQgYSBoYW5kbGVyIHRvIHN0b3AgcmVwb3J0aW5nIHRvIGFuIGVhcmxpZXIgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgIEhhbmRsZXIgZnVuY3Rpb24gdG8gY2FsbCBvbiB0cmFuc2ZlciBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICB0cmFja1Byb2dyZXNzKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NUcmFja2VyLmJ5dGVzT3ZlcmFsbCA9IDA7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzVHJhY2tlci5yZXBvcnRUbyhoYW5kbGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkIGRhdGEgZnJvbSBhIHJlYWRhYmxlIHN0cmVhbSBvciBhIGxvY2FsIGZpbGUgdG8gYSByZW1vdGUgZmlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3VyY2UgIFJlYWRhYmxlIHN0cmVhbSBvciBwYXRoIHRvIGEgbG9jYWwgZmlsZS5cbiAgICAgKiBAcGFyYW0gdG9SZW1vdGVQYXRoICBQYXRoIHRvIGEgcmVtb3RlIGZpbGUgdG8gd3JpdGUgdG8uXG4gICAgICovXG4gICAgYXN5bmMgdXBsb2FkRnJvbShzb3VyY2UsIHRvUmVtb3RlUGF0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGxvYWRXaXRoQ29tbWFuZChzb3VyY2UsIHRvUmVtb3RlUGF0aCwgXCJTVE9SXCIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgZGF0YSBmcm9tIGEgcmVhZGFibGUgc3RyZWFtIG9yIGEgbG9jYWwgZmlsZSBieSBhcHBlbmRpbmcgaXQgdG8gYW4gZXhpc3RpbmcgZmlsZS4gSWYgdGhlIGZpbGUgZG9lc24ndFxuICAgICAqIGV4aXN0IHRoZSBGVFAgc2VydmVyIHNob3VsZCBjcmVhdGUgaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc291cmNlICBSZWFkYWJsZSBzdHJlYW0gb3IgcGF0aCB0byBhIGxvY2FsIGZpbGUuXG4gICAgICogQHBhcmFtIHRvUmVtb3RlUGF0aCAgUGF0aCB0byBhIHJlbW90ZSBmaWxlIHRvIHdyaXRlIHRvLlxuICAgICAqL1xuICAgIGFzeW5jIGFwcGVuZEZyb20oc291cmNlLCB0b1JlbW90ZVBhdGgsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBsb2FkV2l0aENvbW1hbmQoc291cmNlLCB0b1JlbW90ZVBhdGgsIFwiQVBQRVwiLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIF91cGxvYWRXaXRoQ29tbWFuZChzb3VyY2UsIHJlbW90ZVBhdGgsIGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91cGxvYWRMb2NhbEZpbGUoc291cmNlLCByZW1vdGVQYXRoLCBjb21tYW5kLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdXBsb2FkRnJvbVN0cmVhbShzb3VyY2UsIHJlbW90ZVBhdGgsIGNvbW1hbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgX3VwbG9hZExvY2FsRmlsZShsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZmQgPSBhd2FpdCBmc09wZW4obG9jYWxQYXRoLCBcInJcIik7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGZzXzEuY3JlYXRlUmVhZFN0cmVhbShcIlwiLCB7XG4gICAgICAgICAgICBmZCxcbiAgICAgICAgICAgIHN0YXJ0OiBvcHRpb25zLmxvY2FsU3RhcnQsXG4gICAgICAgICAgICBlbmQ6IG9wdGlvbnMubG9jYWxFbmRJbmNsdXNpdmUsXG4gICAgICAgICAgICBhdXRvQ2xvc2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VwbG9hZEZyb21TdHJlYW0oc291cmNlLCByZW1vdGVQYXRoLCBjb21tYW5kKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGF3YWl0IGlnbm9yZUVycm9yKCgpID0+IGZzQ2xvc2UoZmQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgX3VwbG9hZEZyb21TdHJlYW0oc291cmNlLCByZW1vdGVQYXRoLCBjb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB0aGlzLmZ0cC5jbG9zZVdpdGhFcnJvcihlcnIpO1xuICAgICAgICBzb3VyY2Uub25jZShcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdmFsaWRQYXRoID0gYXdhaXQgdGhpcy5wcm90ZWN0V2hpdGVzcGFjZShyZW1vdGVQYXRoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZVRyYW5zZmVyKHRoaXMuZnRwKTtcbiAgICAgICAgICAgIC8vIEtlZXAgdGhlIGtleXdvcmQgYGF3YWl0YCBvciB0aGUgYGZpbmFsbHlgIGNsYXVzZSBiZWxvdyBydW5zIHRvbyBlYXJseVxuICAgICAgICAgICAgLy8gYW5kIHJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgc291cmNlIHN0cmVhbSB0b28gZWFybHkuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdHJhbnNmZXJfMS51cGxvYWRGcm9tKHNvdXJjZSwge1xuICAgICAgICAgICAgICAgIGZ0cDogdGhpcy5mdHAsXG4gICAgICAgICAgICAgICAgdHJhY2tlcjogdGhpcy5fcHJvZ3Jlc3NUcmFja2VyLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICAgICAgcmVtb3RlUGF0aDogdmFsaWRQYXRoLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBsb2FkXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgYSByZW1vdGUgZmlsZSBhbmQgcGlwZSBpdHMgZGF0YSB0byBhIHdyaXRhYmxlIHN0cmVhbSBvciB0byBhIGxvY2FsIGZpbGUuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgZGVmaW5lIGF0IHdoaWNoIHBvc2l0aW9uIG9mIHRoZSByZW1vdGUgZmlsZSB5b3UnZCBsaWtlIHRvIHN0YXJ0XG4gICAgICogZG93bmxvYWRpbmcuIElmIHRoZSBkZXN0aW5hdGlvbiB5b3UgcHJvdmlkZSBpcyBhIGZpbGUsIHRoZSBvZmZzZXQgd2lsbCBiZSBhcHBsaWVkXG4gICAgICogdG8gaXQgYXMgd2VsbC4gRm9yIGV4YW1wbGU6IFRvIHJlc3VtZSBhIGZhaWxlZCBkb3dubG9hZCwgeW91J2QgcmVxdWVzdCB0aGUgc2l6ZSBvZlxuICAgICAqIHRoZSBsb2NhbCwgcGFydGlhbGx5IGRvd25sb2FkZWQgZmlsZSBhbmQgdXNlIHRoYXQgYXMgdGhlIG9mZnNldC4gQXNzdW1pbmcgdGhlIHNpemVcbiAgICAgKiBpcyAyMywgeW91J2QgZG93bmxvYWQgdGhlIHJlc3QgdXNpbmcgYGRvd25sb2FkVG8oXCJsb2NhbC50eHRcIiwgXCJyZW1vdGUudHh0XCIsIDIzKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb24gIFN0cmVhbSBvciBwYXRoIGZvciBhIGxvY2FsIGZpbGUgdG8gd3JpdGUgdG8uXG4gICAgICogQHBhcmFtIGZyb21SZW1vdGVQYXRoICBQYXRoIG9mIHRoZSByZW1vdGUgZmlsZSB0byByZWFkIGZyb20uXG4gICAgICogQHBhcmFtIHN0YXJ0QXQgIFBvc2l0aW9uIHdpdGhpbiB0aGUgcmVtb3RlIGZpbGUgdG8gc3RhcnQgZG93bmxvYWRpbmcgYXQuIElmIHRoZSBkZXN0aW5hdGlvbiBpcyBhIGZpbGUsIHRoaXMgb2Zmc2V0IGlzIGFsc28gYXBwbGllZCB0byBpdC5cbiAgICAgKi9cbiAgICBhc3luYyBkb3dubG9hZFRvKGRlc3RpbmF0aW9uLCBmcm9tUmVtb3RlUGF0aCwgc3RhcnRBdCA9IDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rvd25sb2FkVG9GaWxlKGRlc3RpbmF0aW9uLCBmcm9tUmVtb3RlUGF0aCwgc3RhcnRBdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rvd25sb2FkVG9TdHJlYW0oZGVzdGluYXRpb24sIGZyb21SZW1vdGVQYXRoLCBzdGFydEF0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIF9kb3dubG9hZFRvRmlsZShsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHN0YXJ0QXQpIHtcbiAgICAgICAgY29uc3QgYXBwZW5kaW5nVG9Mb2NhbEZpbGUgPSBzdGFydEF0ID4gMDtcbiAgICAgICAgY29uc3QgZmlsZVN5c3RlbUZsYWdzID0gYXBwZW5kaW5nVG9Mb2NhbEZpbGUgPyBcInIrXCIgOiBcIndcIjtcbiAgICAgICAgY29uc3QgZmQgPSBhd2FpdCBmc09wZW4obG9jYWxQYXRoLCBmaWxlU3lzdGVtRmxhZ3MpO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGZzXzEuY3JlYXRlV3JpdGVTdHJlYW0oXCJcIiwge1xuICAgICAgICAgICAgZmQsXG4gICAgICAgICAgICBzdGFydDogc3RhcnRBdCxcbiAgICAgICAgICAgIGF1dG9DbG9zZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZG93bmxvYWRUb1N0cmVhbShkZXN0aW5hdGlvbiwgcmVtb3RlUGF0aCwgc3RhcnRBdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxGaWxlU3RhdHMgPSBhd2FpdCBpZ25vcmVFcnJvcigoKSA9PiBmc1N0YXQobG9jYWxQYXRoKSk7XG4gICAgICAgICAgICBjb25zdCBoYXNEb3dubG9hZGVkRGF0YSA9IGxvY2FsRmlsZVN0YXRzICYmIGxvY2FsRmlsZVN0YXRzLnNpemUgPiAwO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlTG9jYWxGaWxlID0gIWFwcGVuZGluZ1RvTG9jYWxGaWxlICYmICFoYXNEb3dubG9hZGVkRGF0YTtcbiAgICAgICAgICAgIGlmIChzaG91bGRSZW1vdmVMb2NhbEZpbGUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBpZ25vcmVFcnJvcigoKSA9PiBmc1VubGluayhsb2NhbFBhdGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGF3YWl0IGlnbm9yZUVycm9yKCgpID0+IGZzQ2xvc2UoZmQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgX2Rvd25sb2FkVG9TdHJlYW0oZGVzdGluYXRpb24sIHJlbW90ZVBhdGgsIHN0YXJ0QXQpIHtcbiAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHRoaXMuZnRwLmNsb3NlV2l0aEVycm9yKGVycik7XG4gICAgICAgIGRlc3RpbmF0aW9uLm9uY2UoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkUGF0aCA9IGF3YWl0IHRoaXMucHJvdGVjdFdoaXRlc3BhY2UocmVtb3RlUGF0aCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVUcmFuc2Zlcih0aGlzLmZ0cCk7XG4gICAgICAgICAgICAvLyBLZWVwIHRoZSBrZXl3b3JkIGBhd2FpdGAgb3IgdGhlIGBmaW5hbGx5YCBjbGF1c2UgYmVsb3cgcnVucyB0b28gZWFybHlcbiAgICAgICAgICAgIC8vIGFuZCByZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lciBmb3IgdGhlIHNvdXJjZSBzdHJlYW0gdG9vIGVhcmx5LlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRyYW5zZmVyXzEuZG93bmxvYWRUbyhkZXN0aW5hdGlvbiwge1xuICAgICAgICAgICAgICAgIGZ0cDogdGhpcy5mdHAsXG4gICAgICAgICAgICAgICAgdHJhY2tlcjogdGhpcy5fcHJvZ3Jlc3NUcmFja2VyLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IHN0YXJ0QXQgPiAwID8gYFJFU1QgJHtzdGFydEF0fWAgOiBgUkVUUiAke3ZhbGlkUGF0aH1gLFxuICAgICAgICAgICAgICAgIHJlbW90ZVBhdGg6IHZhbGlkUGF0aCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvd25sb2FkXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LCBvciBmcm9tIGBwYXRoYCBpZiBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gW3BhdGhdICBQYXRoIHRvIHJlbW90ZSBmaWxlIG9yIGRpcmVjdG9yeS5cbiAgICAgKi9cbiAgICBhc3luYyBsaXN0KHBhdGggPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkUGF0aCA9IGF3YWl0IHRoaXMucHJvdGVjdFdoaXRlc3BhY2UocGF0aCk7XG4gICAgICAgIGxldCBsYXN0RXJyb3I7XG4gICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMuYXZhaWxhYmxlTGlzdENvbW1hbmRzKSB7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gYCR7Y2FuZGlkYXRlfSAke3ZhbGlkUGF0aH1gLnRyaW0oKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZVRyYW5zZmVyKHRoaXMuZnRwKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkTGlzdCA9IGF3YWl0IHRoaXMuX3JlcXVlc3RMaXN0V2l0aENvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHN1Y2Nlc3NmdWwgY2FuZGlkYXRlIGZvciBhbGwgc3Vic2VxdWVudCByZXF1ZXN0cy5cbiAgICAgICAgICAgICAgICB0aGlzLmF2YWlsYWJsZUxpc3RDb21tYW5kcyA9IFtjYW5kaWRhdGVdO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRMaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFRyeU5leHQgPSBlcnIgaW5zdGFuY2VvZiBGdHBDb250ZXh0XzEuRlRQRXJyb3I7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRUcnlOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdEVycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGxhc3RFcnJvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIF9yZXF1ZXN0TGlzdFdpdGhDb21tYW5kKGNvbW1hbmQpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFN0cmluZ1dyaXRlcl8xLlN0cmluZ1dyaXRlcigpO1xuICAgICAgICBhd2FpdCB0cmFuc2Zlcl8xLmRvd25sb2FkVG8oYnVmZmVyLCB7XG4gICAgICAgICAgICBmdHA6IHRoaXMuZnRwLFxuICAgICAgICAgICAgdHJhY2tlcjogdGhpcy5fcHJvZ3Jlc3NUcmFja2VyLFxuICAgICAgICAgICAgY29tbWFuZCxcbiAgICAgICAgICAgIHJlbW90ZVBhdGg6IFwiXCIsXG4gICAgICAgICAgICB0eXBlOiBcImxpc3RcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGJ1ZmZlci5nZXRUZXh0KHRoaXMuZnRwLmVuY29kaW5nKTtcbiAgICAgICAgdGhpcy5mdHAubG9nKHRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpc3QodGV4dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGRpcmVjdG9yeSBhbmQgYWxsIG9mIGl0cyBjb250ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlbW90ZURpclBhdGggIFRoZSBwYXRoIG9mIHRoZSByZW1vdGUgZGlyZWN0b3J5IHRvIGRlbGV0ZS5cbiAgICAgKiBAZXhhbXBsZSBjbGllbnQucmVtb3ZlRGlyKFwiZm9vXCIpIC8vIFJlbW92ZSBkaXJlY3RvcnkgJ2ZvbycgdXNpbmcgYSByZWxhdGl2ZSBwYXRoLlxuICAgICAqIEBleGFtcGxlIGNsaWVudC5yZW1vdmVEaXIoXCJmb28vYmFyXCIpIC8vIFJlbW92ZSBkaXJlY3RvcnkgJ2JhcicgdXNpbmcgYSByZWxhdGl2ZSBwYXRoLlxuICAgICAqIEBleGFtcGxlIGNsaWVudC5yZW1vdmVEaXIoXCIvZm9vL2JhclwiKSAvLyBSZW1vdmUgZGlyZWN0b3J5ICdiYXInIHVzaW5nIGFuIGFic29sdXRlIHBhdGguXG4gICAgICogQGV4YW1wbGUgY2xpZW50LnJlbW92ZURpcihcIi9cIikgLy8gUmVtb3ZlIGV2ZXJ5dGhpbmcuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlRGlyKHJlbW90ZURpclBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4aXRBdEN1cnJlbnREaXJlY3RvcnkoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jZChyZW1vdGVEaXJQYXRoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYXJXb3JraW5nRGlyKCk7XG4gICAgICAgICAgICBpZiAocmVtb3RlRGlyUGF0aCAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNkdXAoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZUVtcHR5RGlyKHJlbW90ZURpclBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IHdpdGhvdXQgcmVtb3ZpbmdcbiAgICAgKiB0aGUgd29ya2luZyBkaXJlY3RvcnkgaXRzZWxmLlxuICAgICAqL1xuICAgIGFzeW5jIGNsZWFyV29ya2luZ0RpcigpIHtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGF3YWl0IHRoaXMubGlzdCgpKSB7XG4gICAgICAgICAgICBpZiAoZmlsZS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2QoZmlsZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsZWFyV29ya2luZ0RpcigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2R1cCgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlRW1wdHlEaXIoZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlKGZpbGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkIHRoZSBjb250ZW50cyBvZiBhIGxvY2FsIGRpcmVjdG9yeSB0byB0aGUgcmVtb3RlIHdvcmtpbmcgZGlyZWN0b3J5LlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIG92ZXJ3cml0ZSBleGlzdGluZyBmaWxlcyB3aXRoIHRoZSBzYW1lIG5hbWVzIGFuZCByZXVzZSBleGlzdGluZyBkaXJlY3Rvcmllcy5cbiAgICAgKiBVbnJlbGF0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHdpbGwgcmVtYWluIHVudG91Y2hlZC4gWW91IGNhbiBvcHRpb25hbGx5IHByb3ZpZGUgYSBgcmVtb3RlRGlyUGF0aGBcbiAgICAgKiB0byBwdXQgdGhlIGNvbnRlbnRzIGluc2lkZSBhIGRpcmVjdG9yeSB3aGljaCB3aWxsIGJlIGNyZWF0ZWQgaWYgbmVjZXNzYXJ5IGluY2x1ZGluZyBhbGxcbiAgICAgKiBpbnRlcm1lZGlhdGUgZGlyZWN0b3JpZXMuIElmIHlvdSBkaWQgcHJvdmlkZSBhIHJlbW90ZURpclBhdGggdGhlIHdvcmtpbmcgZGlyZWN0b3J5IHdpbGwgc3RheVxuICAgICAqIHRoZSBzYW1lIGFzIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxvY2FsRGlyUGF0aCAgTG9jYWwgcGF0aCwgZS5nLiBcImZvby9iYXJcIiBvciBcIi4uL3Rlc3RcIlxuICAgICAqIEBwYXJhbSBbcmVtb3RlRGlyUGF0aF0gIFJlbW90ZSBwYXRoIG9mIGEgZGlyZWN0b3J5IHRvIHVwbG9hZCB0by4gV29ya2luZyBkaXJlY3RvcnkgaWYgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZEZyb21EaXIobG9jYWxEaXJQYXRoLCByZW1vdGVEaXJQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGl0QXRDdXJyZW50RGlyZWN0b3J5KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZW1vdGVEaXJQYXRoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVEaXIocmVtb3RlRGlyUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXBsb2FkVG9Xb3JraW5nRGlyKGxvY2FsRGlyUGF0aCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgX3VwbG9hZFRvV29ya2luZ0Rpcihsb2NhbERpclBhdGgpIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCBmc1JlYWREaXIobG9jYWxEaXJQYXRoKTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGhfMS5qb2luKGxvY2FsRGlyUGF0aCwgZmlsZSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IGZzU3RhdChmdWxsUGF0aCk7XG4gICAgICAgICAgICBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwbG9hZEZyb20oZnVsbFBhdGgsIGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHMuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX29wZW5EaXIoZmlsZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXBsb2FkVG9Xb3JraW5nRGlyKGZ1bGxQYXRoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNkdXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBhbGwgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIG9mIHRoZSB3b3JraW5nIGRpcmVjdG9yeSB0byBhIGxvY2FsIGRpcmVjdG9yeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsb2NhbERpclBhdGggIFRoZSBsb2NhbCBkaXJlY3RvcnkgdG8gZG93bmxvYWQgdG8uXG4gICAgICogQHBhcmFtIHJlbW90ZURpclBhdGggIFJlbW90ZSBkaXJlY3RvcnkgdG8gZG93bmxvYWQuIEN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgaWYgbm90IHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyBkb3dubG9hZFRvRGlyKGxvY2FsRGlyUGF0aCwgcmVtb3RlRGlyUGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhpdEF0Q3VycmVudERpcmVjdG9yeShhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVtb3RlRGlyUGF0aCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2QocmVtb3RlRGlyUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZG93bmxvYWRGcm9tV29ya2luZ0Rpcihsb2NhbERpclBhdGgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIF9kb3dubG9hZEZyb21Xb3JraW5nRGlyKGxvY2FsRGlyUGF0aCkge1xuICAgICAgICBhd2FpdCBlbnN1cmVMb2NhbERpcmVjdG9yeShsb2NhbERpclBhdGgpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgYXdhaXQgdGhpcy5saXN0KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsUGF0aCA9IHBhdGhfMS5qb2luKGxvY2FsRGlyUGF0aCwgZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWxlLmlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jZChmaWxlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2Rvd25sb2FkRnJvbVdvcmtpbmdEaXIobG9jYWxQYXRoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNkdXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZpbGUuaXNGaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kb3dubG9hZFRvKGxvY2FsUGF0aCwgZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgYSBnaXZlbiByZW1vdGUgcGF0aCBleGlzdHMsIGNyZWF0aW5nIGFsbCBkaXJlY3RvcmllcyBhcyBuZWNlc3NhcnkuXG4gICAgICogVGhpcyBmdW5jdGlvbiBhbHNvIGNoYW5nZXMgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgdG8gdGhlIGdpdmVuIHBhdGguXG4gICAgICovXG4gICAgYXN5bmMgZW5zdXJlRGlyKHJlbW90ZURpclBhdGgpIHtcbiAgICAgICAgLy8gSWYgdGhlIHJlbW90ZURpclBhdGggd2FzIGFic29sdXRlIGdvIHRvIHJvb3QgZGlyZWN0b3J5LlxuICAgICAgICBpZiAocmVtb3RlRGlyUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jZChcIi9cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZXMgPSByZW1vdGVEaXJQYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIobmFtZSA9PiBuYW1lICE9PSBcIlwiKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9vcGVuRGlyKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyeSB0byBjcmVhdGUgYSBkaXJlY3RvcnkgYW5kIGVudGVyIGl0LiBUaGlzIHdpbGwgbm90IHJhaXNlIGFuIGV4Y2VwdGlvbiBpZiB0aGUgZGlyZWN0b3J5XG4gICAgICogY291bGRuJ3QgYmUgY3JlYXRlZCBpZiBmb3IgZXhhbXBsZSBpdCBhbHJlYWR5IGV4aXN0cy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgX29wZW5EaXIoZGlyTmFtZSkge1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmRJZ25vcmluZ0Vycm9yKFwiTUtEIFwiICsgZGlyTmFtZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuY2QoZGlyTmFtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBlbXB0eSBkaXJlY3RvcnksIHdpbGwgZmFpbCBpZiBub3QgZW1wdHkuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlRW1wdHlEaXIocGF0aCkge1xuICAgICAgICBjb25zdCB2YWxpZFBhdGggPSBhd2FpdCB0aGlzLnByb3RlY3RXaGl0ZXNwYWNlKHBhdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGBSTUQgJHt2YWxpZFBhdGh9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZUUCBzZXJ2ZXJzIGNhbid0IGhhbmRsZSBmaWxlbmFtZXMgdGhhdCBoYXZlIGxlYWRpbmcgd2hpdGVzcGFjZS4gVGhpcyBtZXRob2QgdHJhbnNmb3Jtc1xuICAgICAqIGEgZ2l2ZW4gcGF0aCB0byBmaXggdGhhdCBpc3N1ZSBmb3IgbW9zdCBjYXNlcy5cbiAgICAgKi9cbiAgICBhc3luYyBwcm90ZWN0V2hpdGVzcGFjZShwYXRoKSB7XG4gICAgICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiIFwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIGxlYWRpbmcgd2hpdGVzcGFjZSBieSBwcmVwZW5kaW5nIHRoZSBhYnNvbHV0ZSBwYXRoOlxuICAgICAgICAvLyBcIiB0ZXN0LnR4dFwiIHdoaWxlIGJlaW5nIGluIHRoZSByb290IGRpcmVjdG9yeSBiZWNvbWVzIFwiLyB0ZXN0LnR4dFwiLlxuICAgICAgICBjb25zdCBwd2QgPSBhd2FpdCB0aGlzLnB3ZCgpO1xuICAgICAgICBjb25zdCBhYnNvbHV0ZVBhdGhQcmVmaXggPSBwd2QuZW5kc1dpdGgoXCIvXCIpID8gcHdkIDogcHdkICsgXCIvXCI7XG4gICAgICAgIHJldHVybiBhYnNvbHV0ZVBhdGhQcmVmaXggKyBwYXRoO1xuICAgIH1cbiAgICBhc3luYyBfZXhpdEF0Q3VycmVudERpcmVjdG9yeShmdW5jKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEaXIgPSBhd2FpdCB0aGlzLnB3ZCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZ1bmMoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBpZ25vcmVFcnJvcigoKSA9PiB0aGlzLmNkKHVzZXJEaXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcnkgYWxsIGF2YWlsYWJsZSB0cmFuc2ZlciBzdHJhdGVnaWVzIGFuZCBwaWNrIHRoZSBmaXJzdCBvbmUgdGhhdCB3b3Jrcy4gVXBkYXRlIGBjbGllbnRgIHRvXG4gICAgICogdXNlIHRoZSB3b3JraW5nIHN0cmF0ZWd5IGZvciBhbGwgc3VjY2Vzc2l2ZSB0cmFuc2ZlciByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJhdGVnaWVzXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgdHJ5IHRoZSBwcm92aWRlZCBzdHJhdGVnaWVzLlxuICAgICAqL1xuICAgIF9lbnRlckZpcnN0Q29tcGF0aWJsZU1vZGUoc3RyYXRlZ2llcykge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGZ0cCkgPT4ge1xuICAgICAgICAgICAgZnRwLmxvZyhcIlRyeWluZyB0byBmaW5kIG9wdGltYWwgdHJhbnNmZXIgc3RyYXRlZ3kuLi5cIik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0cmF0ZWd5IG9mIHN0cmF0ZWdpZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdHJhdGVneShmdHApO1xuICAgICAgICAgICAgICAgICAgICBmdHAubG9nKFwiT3B0aW1hbCB0cmFuc2ZlciBzdHJhdGVneSBmb3VuZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVRyYW5zZmVyID0gc3RyYXRlZ3k7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY2VpdmluZyBhbiBGVFBFcnJvciBtZWFucyB0aGF0IHRoZSBsYXN0IHRyYW5zZmVyIHN0cmF0ZWd5IGZhaWxlZCBhbmQgd2Ugc2hvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgbmV4dCBvbmUuIEFueSBvdGhlciBleGNlcHRpb24gc2hvdWxkIHN0b3AgdGhlIGV2YWx1YXRpb24gb2Ygc3RyYXRlZ2llcyBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbWV0aGluZyBlbHNlIHdlbnQgd3JvbmcuXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIEZ0cENvbnRleHRfMS5GVFBFcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vbmUgb2YgdGhlIGF2YWlsYWJsZSB0cmFuc2ZlciBzdHJhdGVnaWVzIHdvcmsuXCIpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBERVBSRUNBVEVELCB1c2UgYHVwbG9hZEZyb21gLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgYXN5bmMgdXBsb2FkKHNvdXJjZSwgdG9SZW1vdGVQYXRoLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5mdHAubG9nKFwiV2FybmluZzogdXBsb2FkKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCwgdXNlIHVwbG9hZEZyb20oKS5cIik7XG4gICAgICAgIHJldHVybiB0aGlzLnVwbG9hZEZyb20oc291cmNlLCB0b1JlbW90ZVBhdGgsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBERVBSRUNBVEVELCB1c2UgYGFwcGVuZEZyb21gLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgYXN5bmMgYXBwZW5kKHNvdXJjZSwgdG9SZW1vdGVQYXRoLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5mdHAubG9nKFwiV2FybmluZzogYXBwZW5kKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCwgdXNlIGFwcGVuZEZyb20oKS5cIik7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGVuZEZyb20oc291cmNlLCB0b1JlbW90ZVBhdGgsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBERVBSRUNBVEVELCB1c2UgYGRvd25sb2FkVG9gLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgYXN5bmMgZG93bmxvYWQoZGVzdGluYXRpb24sIGZyb21SZW1vdGVQYXRoLCBzdGFydEF0ID0gMCkge1xuICAgICAgICB0aGlzLmZ0cC5sb2coXCJXYXJuaW5nOiBkb3dubG9hZCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHVzZSBkb3dubG9hZFRvKCkuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kb3dubG9hZFRvKGRlc3RpbmF0aW9uLCBmcm9tUmVtb3RlUGF0aCwgc3RhcnRBdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERFUFJFQ0FURUQsIHVzZSBgdXBsb2FkRnJvbURpcmAuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBhc3luYyB1cGxvYWREaXIobG9jYWxEaXJQYXRoLCByZW1vdGVEaXJQYXRoKSB7XG4gICAgICAgIHRoaXMuZnRwLmxvZyhcIldhcm5pbmc6IHVwbG9hZERpcigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHVzZSB1cGxvYWRGcm9tRGlyKCkuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRGcm9tRGlyKGxvY2FsRGlyUGF0aCwgcmVtb3RlRGlyUGF0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERFUFJFQ0FURUQsIHVzZSBgZG93bmxvYWRUb0RpcmAuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBhc3luYyBkb3dubG9hZERpcihsb2NhbERpclBhdGgpIHtcbiAgICAgICAgdGhpcy5mdHAubG9nKFwiV2FybmluZzogZG93bmxvYWREaXIoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCB1c2UgZG93bmxvYWRUb0RpcigpLlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG93bmxvYWRUb0Rpcihsb2NhbERpclBhdGgpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50ID0gQ2xpZW50O1xuYXN5bmMgZnVuY3Rpb24gZW5zdXJlTG9jYWxEaXJlY3RvcnkocGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZzU3RhdChwYXRoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBhd2FpdCBmc01rRGlyKHBhdGgsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGlnbm9yZUVycm9yKGZ1bmMpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgZnVuYygpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIElnbm9yZVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50cmFuc2Zvcm1MaXN0ID0gZXhwb3J0cy5wYXJzZUxpbmUgPSBleHBvcnRzLnRlc3RMaW5lID0gdm9pZCAwO1xuY29uc3QgRmlsZUluZm9fMSA9IHJlcXVpcmUoXCIuL0ZpbGVJbmZvXCIpO1xuLyoqXG4gKiBUaGlzIHBhcnNlciBpcyBiYXNlZCBvbiB0aGUgRlRQIGNsaWVudCBsaWJyYXJ5IHNvdXJjZSBjb2RlIGluIEFwYWNoZSBDb21tb25zIE5ldCBwcm92aWRlZFxuICogdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZS4gSXQgaGFzIGJlZW4gc2ltcGxpZmllZCBhbmQgcmV3cml0dGVuIHRvIGJldHRlciBmaXQgdGhlIEphdmFzY3JpcHQgbGFuZ3VhZ2UuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb21tb25zLW5ldC9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9uZXQvZnRwL3BhcnNlci9OVEZUUEVudHJ5UGFyc2VyLmphdmFcbiAqL1xuY29uc3QgUkVfTElORSA9IG5ldyBSZWdFeHAoXCIoXFxcXFMrKVxcXFxzKyhcXFxcUyspXFxcXHMrXCIgLy8gTU0tZGQteXkgd2hpdGVzcGFjZSBoaDptbWF8a2s6bW0gc3dhbGxvdyB0cmFpbGluZyBzcGFjZXNcbiAgICArIFwiKD86KDxESVI+KXwoWzAtOV0rKSlcXFxccytcIiAvLyA8RElSPiBvciBkZGRkZCBzd2FsbG93IHRyYWlsaW5nIHNwYWNlc1xuICAgICsgXCIoXFxcXFMuKilcIiAvLyBGaXJzdCBub24tc3BhY2UgZm9sbG93ZWQgYnkgcmVzdCBvZiBsaW5lIChuYW1lKVxuKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gbGluZSBtaWdodCBiZSBhIERPUy1zdHlsZSBsaXN0aW5nLlxuICpcbiAqIC0gRXhhbXBsZTogYDEyLTA1LTk2ICAwNTowM1BNICAgICAgIDxESVI+ICAgICAgICAgIG15RGlyYFxuICovXG5mdW5jdGlvbiB0ZXN0TGluZShsaW5lKSB7XG4gICAgcmV0dXJuIC9eXFxkezJ9Ly50ZXN0KGxpbmUpICYmIFJFX0xJTkUudGVzdChsaW5lKTtcbn1cbmV4cG9ydHMudGVzdExpbmUgPSB0ZXN0TGluZTtcbi8qKlxuICogUGFyc2UgYSBzaW5nbGUgbGluZSBvZiBhIERPUy1zdHlsZSBkaXJlY3RvcnkgbGlzdGluZy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VMaW5lKGxpbmUpIHtcbiAgICBjb25zdCBncm91cHMgPSBsaW5lLm1hdGNoKFJFX0xJTkUpO1xuICAgIGlmIChncm91cHMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IGdyb3Vwc1s1XTtcbiAgICBpZiAobmFtZSA9PT0gXCIuXCIgfHwgbmFtZSA9PT0gXCIuLlwiKSB7IC8vIElnbm9yZSBwYXJlbnQgZGlyZWN0b3J5IGxpbmtzXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZUluZm9fMS5GaWxlSW5mbyhuYW1lKTtcbiAgICBjb25zdCBmaWxlVHlwZSA9IGdyb3Vwc1szXTtcbiAgICBpZiAoZmlsZVR5cGUgPT09IFwiPERJUj5cIikge1xuICAgICAgICBmaWxlLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLkRpcmVjdG9yeTtcbiAgICAgICAgZmlsZS5zaXplID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbGUudHlwZSA9IEZpbGVJbmZvXzEuRmlsZVR5cGUuRmlsZTtcbiAgICAgICAgZmlsZS5zaXplID0gcGFyc2VJbnQoZ3JvdXBzWzRdLCAxMCk7XG4gICAgfVxuICAgIGZpbGUucmF3TW9kaWZpZWRBdCA9IGdyb3Vwc1sxXSArIFwiIFwiICsgZ3JvdXBzWzJdO1xuICAgIHJldHVybiBmaWxlO1xufVxuZXhwb3J0cy5wYXJzZUxpbmUgPSBwYXJzZUxpbmU7XG5mdW5jdGlvbiB0cmFuc2Zvcm1MaXN0KGZpbGVzKSB7XG4gICAgcmV0dXJuIGZpbGVzO1xufVxuZXhwb3J0cy50cmFuc2Zvcm1MaXN0ID0gdHJhbnNmb3JtTGlzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50cmFuc2Zvcm1MaXN0ID0gZXhwb3J0cy5wYXJzZUxpbmUgPSBleHBvcnRzLnRlc3RMaW5lID0gdm9pZCAwO1xuY29uc3QgRmlsZUluZm9fMSA9IHJlcXVpcmUoXCIuL0ZpbGVJbmZvXCIpO1xuY29uc3QgSkFfTU9OVEggPSBcIlxcdTY3MDhcIjtcbmNvbnN0IEpBX0RBWSA9IFwiXFx1NjVlNVwiO1xuY29uc3QgSkFfWUVBUiA9IFwiXFx1NWU3NFwiO1xuLyoqXG4gKiBUaGlzIHBhcnNlciBpcyBiYXNlZCBvbiB0aGUgRlRQIGNsaWVudCBsaWJyYXJ5IHNvdXJjZSBjb2RlIGluIEFwYWNoZSBDb21tb25zIE5ldCBwcm92aWRlZFxuICogdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZS4gSXQgaGFzIGJlZW4gc2ltcGxpZmllZCBhbmQgcmV3cml0dGVuIHRvIGJldHRlciBmaXQgdGhlIEphdmFzY3JpcHQgbGFuZ3VhZ2UuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb21tb25zLW5ldC9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9uZXQvZnRwL3BhcnNlci9Vbml4RlRQRW50cnlQYXJzZXIuamF2YVxuICpcbiAqIEJlbG93IGlzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gdXNlZCBieSB0aGlzIHBhcnNlci5cbiAqXG4gKiBQZXJtaXNzaW9uczpcbiAqICAgIHIgICB0aGUgZmlsZSBpcyByZWFkYWJsZVxuICogICAgdyAgIHRoZSBmaWxlIGlzIHdyaXRhYmxlXG4gKiAgICB4ICAgdGhlIGZpbGUgaXMgZXhlY3V0YWJsZVxuICogICAgLSAgIHRoZSBpbmRpY2F0ZWQgcGVybWlzc2lvbiBpcyBub3QgZ3JhbnRlZFxuICogICAgTCAgIG1hbmRhdG9yeSBsb2NraW5nIG9jY3VycyBkdXJpbmcgYWNjZXNzICh0aGUgc2V0LWdyb3VwLUlEIGJpdCBpc1xuICogICAgICAgIG9uIGFuZCB0aGUgZ3JvdXAgZXhlY3V0aW9uIGJpdCBpcyBvZmYpXG4gKiAgICBzICAgdGhlIHNldC11c2VyLUlEIG9yIHNldC1ncm91cC1JRCBiaXQgaXMgb24sIGFuZCB0aGUgY29ycmVzcG9uZGluZ1xuICogICAgICAgIHVzZXIgb3IgZ3JvdXAgZXhlY3V0aW9uIGJpdCBpcyBhbHNvIG9uXG4gKiAgICBTICAgdW5kZWZpbmVkIGJpdC1zdGF0ZSAodGhlIHNldC11c2VyLUlEIGJpdCBpcyBvbiBhbmQgdGhlIHVzZXJcbiAqICAgICAgICBleGVjdXRpb24gYml0IGlzIG9mZilcbiAqICAgIHQgICB0aGUgMTAwMCAob2N0YWwpIGJpdCwgb3Igc3RpY2t5IGJpdCwgaXMgb24gW3NlZSBjaG1vZCgxKV0sIGFuZFxuICogICAgICAgIGV4ZWN1dGlvbiBpcyBvblxuICogICAgVCAgIHRoZSAxMDAwIGJpdCBpcyB0dXJuZWQgb24sIGFuZCBleGVjdXRpb24gaXMgb2ZmICh1bmRlZmluZWQgYml0LVxuICogICAgICAgIHN0YXRlKVxuICogICAgZSAgIHovT1MgZXh0ZXJuYWwgbGluayBiaXRcbiAqICAgIEZpbmFsIGxldHRlciBtYXkgYmUgYXBwZW5kZWQ6XG4gKiAgICArICAgZmlsZSBoYXMgZXh0ZW5kZWQgc2VjdXJpdHkgYXR0cmlidXRlcyAoZS5nLiBBQ0wpXG4gKiAgICBOb3RlOiBsb2NhbCBsaXN0aW5ncyBvbiBNYWNPU1ggYWxzbyB1c2UgJ0AnXG4gKiAgICB0aGlzIGlzIG5vdCBhbGxvd2VkIGZvciBoZXJlIGFzIGRvZXMgbm90IGFwcGVhciB0byBiZSBzaG93biBieSBGVFAgc2VydmVyc1xuICogICAge0Bjb2RlIEB9ICAgZmlsZSBoYXMgZXh0ZW5kZWQgYXR0cmlidXRlc1xuICovXG5jb25zdCBSRV9MSU5FID0gbmV3IFJlZ0V4cChcIihbYmNkZWxmbXBTcy1dKVwiIC8vIGZpbGUgdHlwZVxuICAgICsgXCIoKChyfC0pKHd8LSkoW3hzU3RUTC1dKSkoKHJ8LSkod3wtKShbeHNTdFRMLV0pKSgocnwtKSh3fC0pKFt4c1N0VEwtXSkpKVxcXFwrP1wiIC8vIHBlcm1pc3Npb25zXG4gICAgKyBcIlxcXFxzKlwiIC8vIHNlcGFyYXRvciBUT0RPIHdoeSBhbGxvdyBpdCB0byBiZSBvbWl0dGVkPz9cbiAgICArIFwiKFxcXFxkKylcIiAvLyBsaW5rIGNvdW50XG4gICAgKyBcIlxcXFxzK1wiIC8vIHNlcGFyYXRvclxuICAgICsgXCIoPzooXFxcXFMrKD86XFxcXHNcXFxcUyspKj8pXFxcXHMrKT9cIiAvLyBvd25lciBuYW1lIChvcHRpb25hbCBzcGFjZXMpXG4gICAgKyBcIig/OihcXFxcUysoPzpcXFxcc1xcXFxTKykqKVxcXFxzKyk/XCIgLy8gZ3JvdXAgbmFtZSAob3B0aW9uYWwgc3BhY2VzKVxuICAgICsgXCIoXFxcXGQrKD86LFxcXFxzKlxcXFxkKyk/KVwiIC8vIHNpemUgb3IgbixtXG4gICAgKyBcIlxcXFxzK1wiIC8vIHNlcGFyYXRvclxuICAgIC8qKlxuICAgICAqIG51bWVyaWMgb3Igc3RhbmRhcmQgZm9ybWF0IGRhdGU6XG4gICAgICogICB5eXl5LW1tLWRkIChleHBlY3RpbmcgaGg6bW0gdG8gZm9sbG93KVxuICAgICAqICAgTU1NIFtkXWRcbiAgICAgKiAgIFtkXWQgTU1NXG4gICAgICogICBOLkIuIHVzZSBub24tc3BhY2UgZm9yIE1NTSB0byBhbGxvdyBmb3IgbGFuZ3VhZ2VzIHN1Y2ggYXMgR2VybWFuIHdoaWNoIHVzZVxuICAgICAqICAgZGlhY3JpdGljcyAoZS5nLiB1bWxhdXQpIGluIHNvbWUgYWJicmV2aWF0aW9ucy5cbiAgICAgKiAgIEphcGFuZXNlIHVzZXMgbnVtZXJpYyBkYXkgYW5kIG1vbnRoIHdpdGggc3VmZml4ZXMgdG8gZGlzdGluZ3Vpc2ggdGhlbVxuICAgICAqICAgW2RdZFhYIFtkXWRaWlxuICAgICAqL1xuICAgICsgXCIoXCIgK1xuICAgIFwiKD86XFxcXGQrWy0vXVxcXFxkK1stL11cXFxcZCspXCIgKyAvLyB5eXl5LW1tLWRkXG4gICAgXCJ8KD86XFxcXFN7M31cXFxccytcXFxcZHsxLDJ9KVwiICsgLy8gTU1NIFtkXWRcbiAgICBcInwoPzpcXFxcZHsxLDJ9XFxcXHMrXFxcXFN7M30pXCIgKyAvLyBbZF1kIE1NTVxuICAgIFwifCg/OlxcXFxkezEsMn1cIiArIEpBX01PTlRIICsgXCJcXFxccytcXFxcZHsxLDJ9XCIgKyBKQV9EQVkgKyBcIilcIiArXG4gICAgXCIpXCJcbiAgICArIFwiXFxcXHMrXCIgLy8gc2VwYXJhdG9yXG4gICAgLyoqXG4gICAgICogeWVhciAoZm9yIG5vbi1yZWNlbnQgc3RhbmRhcmQgZm9ybWF0KSAtIHl5eXlcbiAgICAgKiBvciB0aW1lIChmb3IgbnVtZXJpYyBvciByZWNlbnQgc3RhbmRhcmQgZm9ybWF0KSBbaF1oOm1tXG4gICAgICogb3IgSmFwYW5lc2UgeWVhciAtIHl5eXlYWFxuICAgICAqL1xuICAgICsgXCIoKD86XFxcXGQrKD86OlxcXFxkKyk/KXwoPzpcXFxcZHs0fVwiICsgSkFfWUVBUiArIFwiKSlcIiAvLyAoMjApXG4gICAgKyBcIlxcXFxzXCIgLy8gc2VwYXJhdG9yXG4gICAgKyBcIiguKilcIik7IC8vIHRoZSByZXN0ICgyMSlcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gbGluZSBtaWdodCBiZSBhIFVuaXgtc3R5bGUgbGlzdGluZy5cbiAqXG4gKiAtIEV4YW1wbGU6IGAtcnctci0tci0tKyAgIDEgcGF0cmljayAgc3RhZmYgICAxMDU3IERlYyAxMSAxNDozNSB0ZXN0LnR4dGBcbiAqL1xuZnVuY3Rpb24gdGVzdExpbmUobGluZSkge1xuICAgIHJldHVybiBSRV9MSU5FLnRlc3QobGluZSk7XG59XG5leHBvcnRzLnRlc3RMaW5lID0gdGVzdExpbmU7XG4vKipcbiAqIFBhcnNlIGEgc2luZ2xlIGxpbmUgb2YgYSBVbml4LXN0eWxlIGRpcmVjdG9yeSBsaXN0aW5nLlxuICovXG5mdW5jdGlvbiBwYXJzZUxpbmUobGluZSkge1xuICAgIGNvbnN0IGdyb3VwcyA9IGxpbmUubWF0Y2goUkVfTElORSk7XG4gICAgaWYgKGdyb3VwcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gZ3JvdXBzWzIxXTtcbiAgICBpZiAobmFtZSA9PT0gXCIuXCIgfHwgbmFtZSA9PT0gXCIuLlwiKSB7IC8vIElnbm9yZSBwYXJlbnQgZGlyZWN0b3J5IGxpbmtzXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZUluZm9fMS5GaWxlSW5mbyhuYW1lKTtcbiAgICBmaWxlLnNpemUgPSBwYXJzZUludChncm91cHNbMThdLCAxMCk7XG4gICAgZmlsZS51c2VyID0gZ3JvdXBzWzE2XTtcbiAgICBmaWxlLmdyb3VwID0gZ3JvdXBzWzE3XTtcbiAgICBmaWxlLmhhcmRMaW5rQ291bnQgPSBwYXJzZUludChncm91cHNbMTVdLCAxMCk7XG4gICAgZmlsZS5yYXdNb2RpZmllZEF0ID0gZ3JvdXBzWzE5XSArIFwiIFwiICsgZ3JvdXBzWzIwXTtcbiAgICBmaWxlLnBlcm1pc3Npb25zID0ge1xuICAgICAgICB1c2VyOiBwYXJzZU1vZGUoZ3JvdXBzWzRdLCBncm91cHNbNV0sIGdyb3Vwc1s2XSksXG4gICAgICAgIGdyb3VwOiBwYXJzZU1vZGUoZ3JvdXBzWzhdLCBncm91cHNbOV0sIGdyb3Vwc1sxMF0pLFxuICAgICAgICB3b3JsZDogcGFyc2VNb2RlKGdyb3Vwc1sxMl0sIGdyb3Vwc1sxM10sIGdyb3Vwc1sxNF0pLFxuICAgIH07XG4gICAgLy8gU2V0IGZpbGUgdHlwZVxuICAgIHN3aXRjaCAoZ3JvdXBzWzFdLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgICAgZmlsZS50eXBlID0gRmlsZUluZm9fMS5GaWxlVHlwZS5EaXJlY3Rvcnk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImVcIjogLy8gTkVULTM5ID0+IHovT1MgZXh0ZXJuYWwgbGlua1xuICAgICAgICAgICAgZmlsZS50eXBlID0gRmlsZUluZm9fMS5GaWxlVHlwZS5TeW1ib2xpY0xpbms7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxcIjpcbiAgICAgICAgICAgIGZpbGUudHlwZSA9IEZpbGVJbmZvXzEuRmlsZVR5cGUuU3ltYm9saWNMaW5rO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJiXCI6XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgICBmaWxlLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLkZpbGU7IC8vIFRPRE8gY2hhbmdlIHRoaXMgaWYgREVWSUNFX1RZUEUgaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZlwiOlxuICAgICAgICBjYXNlIFwiLVwiOlxuICAgICAgICAgICAgZmlsZS50eXBlID0gRmlsZUluZm9fMS5GaWxlVHlwZS5GaWxlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBBICd3aGl0ZW91dCcgZmlsZSBpcyBhbiBBUlRJRklDSUFMIGVudHJ5IGluIGFueSBvZiBzZXZlcmFsIHR5cGVzIG9mXG4gICAgICAgICAgICAvLyAndHJhbnNsdWNlbnQnIGZpbGVzeXN0ZW1zLCBvZiB3aGljaCBhICd1bmlvbicgZmlsZXN5c3RlbSBpcyBvbmUuXG4gICAgICAgICAgICBmaWxlLnR5cGUgPSBGaWxlSW5mb18xLkZpbGVUeXBlLlVua25vd247XG4gICAgfVxuICAgIC8vIFNlcGFyYXRlIG91dCB0aGUgbGluayBuYW1lIGZvciBzeW1ib2xpYyBsaW5rc1xuICAgIGlmIChmaWxlLmlzU3ltYm9saWNMaW5rKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IG5hbWUuaW5kZXhPZihcIiAtPiBcIik7XG4gICAgICAgIGlmIChlbmQgIT09IC0xKSB7XG4gICAgICAgICAgICBmaWxlLm5hbWUgPSBuYW1lLnN1YnN0cmluZygwLCBlbmQpO1xuICAgICAgICAgICAgZmlsZS5saW5rID0gbmFtZS5zdWJzdHJpbmcoZW5kICsgNCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbGU7XG59XG5leHBvcnRzLnBhcnNlTGluZSA9IHBhcnNlTGluZTtcbmZ1bmN0aW9uIHRyYW5zZm9ybUxpc3QoZmlsZXMpIHtcbiAgICByZXR1cm4gZmlsZXM7XG59XG5leHBvcnRzLnRyYW5zZm9ybUxpc3QgPSB0cmFuc2Zvcm1MaXN0O1xuZnVuY3Rpb24gcGFyc2VNb2RlKHIsIHcsIHgpIHtcbiAgICBsZXQgdmFsdWUgPSAwO1xuICAgIGlmIChyICE9PSBcIi1cIikge1xuICAgICAgICB2YWx1ZSArPSBGaWxlSW5mb18xLkZpbGVJbmZvLlVuaXhQZXJtaXNzaW9uLlJlYWQ7XG4gICAgfVxuICAgIGlmICh3ICE9PSBcIi1cIikge1xuICAgICAgICB2YWx1ZSArPSBGaWxlSW5mb18xLkZpbGVJbmZvLlVuaXhQZXJtaXNzaW9uLldyaXRlO1xuICAgIH1cbiAgICBjb25zdCBleGVjVG9rZW4gPSB4LmNoYXJBdCgwKTtcbiAgICBpZiAoZXhlY1Rva2VuICE9PSBcIi1cIiAmJiBleGVjVG9rZW4udG9VcHBlckNhc2UoKSAhPT0gZXhlY1Rva2VuKSB7XG4gICAgICAgIHZhbHVlICs9IEZpbGVJbmZvXzEuRmlsZUluZm8uVW5peFBlcm1pc3Npb24uRXhlY3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb2dyZXNzVHJhY2tlciA9IHZvaWQgMDtcbi8qKlxuICogVHJhY2tzIHByb2dyZXNzIG9mIG9uZSBzb2NrZXQgZGF0YSB0cmFuc2ZlciBhdCBhIHRpbWUuXG4gKi9cbmNsYXNzIFByb2dyZXNzVHJhY2tlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnl0ZXNPdmVyYWxsID0gMDtcbiAgICAgICAgdGhpcy5pbnRlcnZhbE1zID0gNTAwO1xuICAgICAgICB0aGlzLm9uU3RvcCA9IG5vb3A7XG4gICAgICAgIHRoaXMub25IYW5kbGUgPSBub29wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIG5ldyBoYW5kbGVyIGZvciBwcm9ncmVzcyBpbmZvLiBVc2UgYHVuZGVmaW5lZGAgdG8gZGlzYWJsZSByZXBvcnRpbmcuXG4gICAgICovXG4gICAgcmVwb3J0VG8ob25IYW5kbGUgPSBub29wKSB7XG4gICAgICAgIHRoaXMub25IYW5kbGUgPSBvbkhhbmRsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgdHJhY2tpbmcgdHJhbnNmZXIgcHJvZ3Jlc3Mgb2YgYSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc29ja2V0ICBUaGUgc29ja2V0IHRvIG9ic2VydmUuXG4gICAgICogQHBhcmFtIG5hbWUgIEEgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBwcm9ncmVzcyB0cmFja2luZywgZS5nLiBhIGZpbGVuYW1lLlxuICAgICAqIEBwYXJhbSB0eXBlICBUaGUgdHlwZSBvZiB0aGUgdHJhbnNmZXIsIHR5cGljYWxseSBcInVwbG9hZFwiIG9yIFwiZG93bmxvYWRcIi5cbiAgICAgKi9cbiAgICBzdGFydChzb2NrZXQsIG5hbWUsIHR5cGUpIHtcbiAgICAgICAgbGV0IGxhc3RCeXRlcyA9IDA7XG4gICAgICAgIHRoaXMub25TdG9wID0gcG9sbCh0aGlzLmludGVydmFsTXMsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gc29ja2V0LmJ5dGVzUmVhZCArIHNvY2tldC5ieXRlc1dyaXR0ZW47XG4gICAgICAgICAgICB0aGlzLmJ5dGVzT3ZlcmFsbCArPSBieXRlcyAtIGxhc3RCeXRlcztcbiAgICAgICAgICAgIGxhc3RCeXRlcyA9IGJ5dGVzO1xuICAgICAgICAgICAgdGhpcy5vbkhhbmRsZSh7XG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGJ5dGVzLFxuICAgICAgICAgICAgICAgIGJ5dGVzT3ZlcmFsbDogdGhpcy5ieXRlc092ZXJhbGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcCB0cmFja2luZyB0cmFuc2ZlciBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLm9uU3RvcChmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgdGhlIHByb2dyZXNzIGhhbmRsZXIgb25lIG1vcmUgdGltZSwgdGhlbiBzdG9wIHRyYWNraW5nLlxuICAgICAqL1xuICAgIHVwZGF0ZUFuZFN0b3AoKSB7XG4gICAgICAgIHRoaXMub25TdG9wKHRydWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvZ3Jlc3NUcmFja2VyID0gUHJvZ3Jlc3NUcmFja2VyO1xuLyoqXG4gKiBTdGFydHMgY2FsbGluZyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGF0IGEgcmVndWxhciBpbnRlcnZhbC4gVGhlIGZpcnN0IGNhbGwgd2lsbCBnbyBvdXRcbiAqIGltbWVkaWF0ZWx5LiBUaGUgZnVuY3Rpb24gcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHN0b3AgdGhlIHBvbGxpbmcuXG4gKi9cbmZ1bmN0aW9uIHBvbGwoaW50ZXJ2YWxNcywgdXBkYXRlRnVuYykge1xuICAgIGNvbnN0IGlkID0gc2V0SW50ZXJ2YWwodXBkYXRlRnVuYywgaW50ZXJ2YWxNcyk7XG4gICAgY29uc3Qgc3RvcEZ1bmMgPSAoc3RvcFdpdGhVcGRhdGUpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIGlmIChzdG9wV2l0aFVwZGF0ZSkge1xuICAgICAgICAgICAgdXBkYXRlRnVuYygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgcmVwZWF0ZWQgY2FsbHMgdG8gc3RvcCBjYWxsaW5nIGhhbmRsZXIuXG4gICAgICAgIHVwZGF0ZUZ1bmMgPSBub29wO1xuICAgIH07XG4gICAgdXBkYXRlRnVuYygpO1xuICAgIHJldHVybiBzdG9wRnVuYztcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJpbmdXcml0ZXIgPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jbGFzcyBTdHJpbmdXcml0ZXIgZXh0ZW5kcyBzdHJlYW1fMS5Xcml0YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuYnVmID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIH1cbiAgICBfd3JpdGUoY2h1bmssIF8sIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5idWYgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmJ1ZiwgY2h1bmtdKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKFwiU3RyaW5nV3JpdGVyIGV4cGVjdHMgY2h1bmtzIG9mIHR5cGUgJ0J1ZmZlcicuXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUZXh0KGVuY29kaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi50b1N0cmluZyhlbmNvZGluZyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpbmdXcml0ZXIgPSBTdHJpbmdXcml0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsImltcG9ydCB7XG4gIElUcmFuc2Zlck9wdGlvbnMsXG4gIElUcmFuc2ZlclByb2dyZXNzTGlzdGVuZXIsXG4gIElUcmFuc2ZlckluZm8sXG59IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2ZlciB7XG4gIHB1YmxpYyBzdGFydFRpbWU6IG51bWJlcjtcblxuICBwcm90ZWN0ZWQgYnl0ZXM6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5mbzogSVRyYW5zZmVySW5mbyxcbiAgICBwdWJsaWMgb3B0aW9uczogSVRyYW5zZmVyT3B0aW9ucyxcbiAgICBwdWJsaWMgb25Qcm9ncmVzczogSVRyYW5zZmVyUHJvZ3Jlc3NMaXN0ZW5lcixcbiAgKSB7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuYnl0ZXMgPSBpbmZvPy5zdGFydEF0ID8/IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGVsYXBzZWQoKSB7XG4gICAgcmV0dXJuIChEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3BlZWQoKSB7XG4gICAgY29uc3QgZWxhcHNlZCA9IHRoaXMuZWxhcHNlZDtcblxuICAgIGlmIChlbGFwc2VkID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmJ5dGVzIC8gZWxhcHNlZCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGV0YSgpIHtcbiAgICBjb25zdCBzcGVlZCA9IHRoaXMuc3BlZWQ7XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHJhdGUgPSB0aGlzLmluZm8udG90YWxCeXRlcyAvIHRoaXMuc3BlZWQ7XG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZChyYXRlIC0gdGhpcy5lbGFwc2VkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcGVyY2VudCgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgodGhpcy5ieXRlcyAvIHRoaXMuaW5mby50b3RhbEJ5dGVzKSAqIDEwMCk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlUHJvZ3Jlc3MgPSAoYnl0ZXM6IG51bWJlcikgPT4ge1xuICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcblxuICAgIGNvbnN0IHsgaWQsIGxvY2FsUGF0aCwgcmVtb3RlUGF0aCwgdG90YWxCeXRlcyB9ID0gdGhpcy5pbmZvO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnM/LnF1aWV0KSB7XG4gICAgICB0aGlzLm9uUHJvZ3Jlc3MoXG4gICAgICAgIHsgaWQsIGxvY2FsUGF0aCwgcmVtb3RlUGF0aCB9LFxuICAgICAgICB7XG4gICAgICAgICAgYnl0ZXMsXG4gICAgICAgICAgdG90YWxCeXRlcyxcbiAgICAgICAgICBzcGVlZDogdGhpcy5zcGVlZCxcbiAgICAgICAgICBldGE6IHRoaXMuZXRhLFxuICAgICAgICAgIHBlcmNlbnQ6IHRoaXMucGVyY2VudCxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIiwiZXhwb3J0IGNvbnN0IHJlcGVhdCA9IDxUPih2YWx1ZTogVCwgY291bnQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gQXJyYXkoY291bnQpLmZpbGwodmFsdWUpO1xufTtcbiIsImltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgUmVhZGFibGUsIFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcblxuZXhwb3J0IGNvbnN0IGdldFBhdGhGcm9tU3RyZWFtID0gKHN0cmVhbTogUmVhZGFibGUgfCBXcml0YWJsZSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiAoc3RyZWFtIGFzIGFueSkucGF0aDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGaWxlU2l6ZSA9IGFzeW5jIChwYXRoOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFwYXRoKSByZXR1cm4gLTE7XG5cbiAgY29uc3QgeyBzaXplIH0gPSBhd2FpdCBmcy5zdGF0KHBhdGgpO1xuICByZXR1cm4gc2l6ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkbnNcIik7IiwiLy8gVE9ETzogc3VwcG9ydCBFWFRFTkRFRCByZXF1ZXN0IHBhY2tldHNcblxudmFyIFRyYW5zZm9ybVN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcbnZhciBSZWFkYWJsZVN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlJlYWRhYmxlO1xudmFyIFdyaXRhYmxlU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuV3JpdGFibGU7XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnZnMnKS5jb25zdGFudHMgfHwgcHJvY2Vzcy5iaW5kaW5nKCdjb25zdGFudHMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGluaGVyaXRzID0gdXRpbC5pbmhlcml0cztcbnZhciBpc0RhdGUgPSB1dGlsLmlzRGF0ZTtcbnZhciBsaXN0ZW5lckNvdW50ID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQ7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG52YXIgcmVhZFN0cmluZyA9IHJlcXVpcmUoJy4vdXRpbHMnKS5yZWFkU3RyaW5nO1xudmFyIHJlYWRJbnQgPSByZXF1aXJlKCcuL3V0aWxzJykucmVhZEludDtcbnZhciByZWFkVUludDMyQkUgPSByZXF1aXJlKCcuL2J1ZmZlci1oZWxwZXJzJykucmVhZFVJbnQzMkJFO1xudmFyIHdyaXRlVUludDMyQkUgPSByZXF1aXJlKCcuL2J1ZmZlci1oZWxwZXJzJykud3JpdGVVSW50MzJCRTtcblxudmFyIEFUVFIgPSB7XG4gIFNJWkU6IDB4MDAwMDAwMDEsXG4gIFVJREdJRDogMHgwMDAwMDAwMixcbiAgUEVSTUlTU0lPTlM6IDB4MDAwMDAwMDQsXG4gIEFDTU9EVElNRTogMHgwMDAwMDAwOCxcbiAgRVhURU5ERUQ6IDB4ODAwMDAwMDBcbn07XG5cbnZhciBTVEFUVVNfQ09ERSA9IHtcbiAgT0s6IDAsXG4gIEVPRjogMSxcbiAgTk9fU1VDSF9GSUxFOiAyLFxuICBQRVJNSVNTSU9OX0RFTklFRDogMyxcbiAgRkFJTFVSRTogNCxcbiAgQkFEX01FU1NBR0U6IDUsXG4gIE5PX0NPTk5FQ1RJT046IDYsXG4gIENPTk5FQ1RJT05fTE9TVDogNyxcbiAgT1BfVU5TVVBQT1JURUQ6IDhcbn07XG5PYmplY3Qua2V5cyhTVEFUVVNfQ09ERSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgU1RBVFVTX0NPREVbU1RBVFVTX0NPREVba2V5XV0gPSBrZXk7XG59KTtcbnZhciBTVEFUVVNfQ09ERV9TVFIgPSB7XG4gIDA6ICdObyBlcnJvcicsXG4gIDE6ICdFbmQgb2YgZmlsZScsXG4gIDI6ICdObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5JyxcbiAgMzogJ1Blcm1pc3Npb24gZGVuaWVkJyxcbiAgNDogJ0ZhaWx1cmUnLFxuICA1OiAnQmFkIG1lc3NhZ2UnLFxuICA2OiAnTm8gY29ubmVjdGlvbicsXG4gIDc6ICdDb25uZWN0aW9uIGxvc3QnLFxuICA4OiAnT3BlcmF0aW9uIHVuc3VwcG9ydGVkJ1xufTtcblNGVFBTdHJlYW0uU1RBVFVTX0NPREUgPSBTVEFUVVNfQ09ERTtcblxudmFyIFJFUVVFU1QgPSB7XG4gIElOSVQ6IDEsXG4gIE9QRU46IDMsXG4gIENMT1NFOiA0LFxuICBSRUFEOiA1LFxuICBXUklURTogNixcbiAgTFNUQVQ6IDcsXG4gIEZTVEFUOiA4LFxuICBTRVRTVEFUOiA5LFxuICBGU0VUU1RBVDogMTAsXG4gIE9QRU5ESVI6IDExLFxuICBSRUFERElSOiAxMixcbiAgUkVNT1ZFOiAxMyxcbiAgTUtESVI6IDE0LFxuICBSTURJUjogMTUsXG4gIFJFQUxQQVRIOiAxNixcbiAgU1RBVDogMTcsXG4gIFJFTkFNRTogMTgsXG4gIFJFQURMSU5LOiAxOSxcbiAgU1lNTElOSzogMjAsXG4gIEVYVEVOREVEOiAyMDBcbn07XG5PYmplY3Qua2V5cyhSRVFVRVNUKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICBSRVFVRVNUW1JFUVVFU1Rba2V5XV0gPSBrZXk7XG59KTtcblxudmFyIFJFU1BPTlNFID0ge1xuICBWRVJTSU9OOiAyLFxuICBTVEFUVVM6IDEwMSxcbiAgSEFORExFOiAxMDIsXG4gIERBVEE6IDEwMyxcbiAgTkFNRTogMTA0LFxuICBBVFRSUzogMTA1LFxuICBFWFRFTkRFRDogMjAxXG59O1xuT2JqZWN0LmtleXMoUkVTUE9OU0UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gIFJFU1BPTlNFW1JFU1BPTlNFW2tleV1dID0ga2V5O1xufSk7XG5cbnZhciBPUEVOX01PREUgPSB7XG4gIFJFQUQ6IDB4MDAwMDAwMDEsXG4gIFdSSVRFOiAweDAwMDAwMDAyLFxuICBBUFBFTkQ6IDB4MDAwMDAwMDQsXG4gIENSRUFUOiAweDAwMDAwMDA4LFxuICBUUlVOQzogMHgwMDAwMDAxMCxcbiAgRVhDTDogMHgwMDAwMDAyMFxufTtcblNGVFBTdHJlYW0uT1BFTl9NT0RFID0gT1BFTl9NT0RFO1xuXG52YXIgTUFYX1BLVF9MRU4gPSAzNDAwMDtcbnZhciBNQVhfUkVRSUQgPSBNYXRoLnBvdygyLCAzMikgLSAxO1xudmFyIENMSUVOVF9WRVJTSU9OX0JVRkZFUiA9IEJ1ZmZlci5mcm9tKFswLCAwLCAwLCA1IC8qIGxlbmd0aCAqLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVRVUVTVC5JTklULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLCAwLCAzIC8qIHZlcnNpb24gKi9dKTtcbnZhciBTRVJWRVJfVkVSU0lPTl9CVUZGRVIgPSBCdWZmZXIuZnJvbShbMCwgMCwgMCwgNSAvKiBsZW5ndGggKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJFU1BPTlNFLlZFUlNJT04sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIDAsIDMgLyogdmVyc2lvbiAqL10pO1xuLypcbiAgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi1zZWNzaC1maWxleGZlci0wMjpcblxuICAgICBUaGUgbWF4aW11bSBzaXplIG9mIGEgcGFja2V0IGlzIGluIHByYWN0aWNlIGRldGVybWluZWQgYnkgdGhlIGNsaWVudFxuICAgICAodGhlIG1heGltdW0gc2l6ZSBvZiByZWFkIG9yIHdyaXRlIHJlcXVlc3RzIHRoYXQgaXQgc2VuZHMsIHBsdXMgYSBmZXdcbiAgICAgYnl0ZXMgb2YgcGFja2V0IG92ZXJoZWFkKS4gIEFsbCBzZXJ2ZXJzIFNIT1VMRCBzdXBwb3J0IHBhY2tldHMgb2YgYXRcbiAgICAgbGVhc3QgMzQwMDAgYnl0ZXMgKHdoZXJlIHRoZSBwYWNrZXQgc2l6ZSByZWZlcnMgdG8gdGhlIGZ1bGwgbGVuZ3RoLFxuICAgICBpbmNsdWRpbmcgdGhlIGhlYWRlciBhYm92ZSkuICBUaGlzIHNob3VsZCBhbGxvdyBmb3IgcmVhZHMgYW5kIHdyaXRlc1xuICAgICBvZiBhdCBtb3N0IDMyNzY4IGJ5dGVzLlxuXG4gIE9wZW5TU0ggY2FwcyB0aGlzIHRvIDI1NmtiIGluc3RlYWQgb2YgdGhlIH4zNGtiIGFzIG1lbnRpb25lZCBpbiB0aGUgc2Z0cHYzXG4gIHNwZWMuXG4qL1xudmFyIFJFX09QRU5TU0ggPSAvXlNTSC0yLjAtKD86T3BlblNTSHxkcm9wYmVhcikvO1xudmFyIE9QRU5TU0hfTUFYX0RBVEFfTEVOID0gKDI1NiAqIDEwMjQpIC0gKDIgKiAxMDI0KS8qYWNjb3VudCBmb3IgaGVhZGVyIGRhdGEqLztcblxuZnVuY3Rpb24gREVCVUdfTk9PUChtc2cpIHt9XG5cbmZ1bmN0aW9uIFNGVFBTdHJlYW0oY2ZnLCByZW1vdGVJZGVudFJhdykge1xuICBpZiAodHlwZW9mIGNmZyA9PT0gJ3N0cmluZycgJiYgIXJlbW90ZUlkZW50UmF3KSB7XG4gICAgcmVtb3RlSWRlbnRSYXcgPSBjZmc7XG4gICAgY2ZnID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh0eXBlb2YgY2ZnICE9PSAnb2JqZWN0JyB8fCAhY2ZnKVxuICAgIGNmZyA9IHt9O1xuXG4gIFRyYW5zZm9ybVN0cmVhbS5jYWxsKHRoaXMsIHtcbiAgICBoaWdoV2F0ZXJNYXJrOiAodHlwZW9mIGNmZy5oaWdoV2F0ZXJNYXJrID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICA/IGNmZy5oaWdoV2F0ZXJNYXJrXG4gICAgICAgICAgICAgICAgICAgIDogMzIgKiAxMDI0KVxuICB9KTtcblxuICB0aGlzLmRlYnVnID0gKHR5cGVvZiBjZmcuZGVidWcgPT09ICdmdW5jdGlvbicgPyBjZmcuZGVidWcgOiBERUJVR19OT09QKTtcbiAgdGhpcy5zZXJ2ZXIgPSAoY2ZnLnNlcnZlciA/IHRydWUgOiBmYWxzZSk7XG4gIHRoaXMuX2lzT3BlblNTSCA9IChyZW1vdGVJZGVudFJhdyAmJiBSRV9PUEVOU1NILnRlc3QocmVtb3RlSWRlbnRSYXcpKTtcbiAgdGhpcy5fbmVlZENvbnRpbnVlID0gZmFsc2U7XG4gIHRoaXMuX3N0YXRlID0ge1xuICAgIC8vIGNvbW1vblxuICAgIHN0YXR1czogJ3BhY2tldF9oZWFkZXInLFxuICAgIHdyaXRlUmVxaWQ6IC0xLFxuICAgIHBrdExlZnQ6IHVuZGVmaW5lZCxcbiAgICBwa3RIZHJCdWY6IEJ1ZmZlci5hbGxvY1Vuc2FmZSg5KSwgLy8gcm9vbSBmb3IgcGt0TGVuICsgcGt0VHlwZSArIHJlcSBpZFxuICAgIHBrdEJ1ZjogdW5kZWZpbmVkLFxuICAgIHBrdFR5cGU6IHVuZGVmaW5lZCxcbiAgICB2ZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgZXh0ZW5zaW9uczoge30sXG5cbiAgICAvLyBjbGllbnRcbiAgICBtYXhEYXRhTGVuOiAodGhpcy5faXNPcGVuU1NIID8gT1BFTlNTSF9NQVhfREFUQV9MRU4gOiAzMjc2OCksXG4gICAgcmVxdWVzdHM6IHt9XG4gIH07XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLnJlYWRhYmxlID0gZmFsc2U7XG4gIH0pLm9uKCdmaW5pc2gnLCBvbkZpbmlzaClcbiAgICAub24oJ3ByZWZpbmlzaCcsIG9uRmluaXNoKTtcbiAgZnVuY3Rpb24gb25GaW5pc2goKSB7XG4gICAgc2VsZi53cml0YWJsZSA9IGZhbHNlO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aGlzLnB1c2goQ0xJRU5UX1ZFUlNJT05fQlVGRkVSKTtcbn1cbmluaGVyaXRzKFNGVFBTdHJlYW0sIFRyYW5zZm9ybVN0cmVhbSk7XG5cblNGVFBTdHJlYW0ucHJvdG90eXBlLl9fcmVhZCA9IFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUuX3JlYWQ7XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKHRoaXMuX25lZWRDb250aW51ZSkge1xuICAgIHRoaXMuX25lZWRDb250aW51ZSA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgnY29udGludWUnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fX3JlYWQobik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuX19wdXNoID0gVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZS5wdXNoO1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXRoaXMucmVhZGFibGUpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpXG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICB2YXIgcmV0ID0gdGhpcy5fX3B1c2goY2h1bmssIGVuY29kaW5nKTtcbiAgdGhpcy5fbmVlZENvbnRpbnVlID0gKHJldCA9PT0gZmFsc2UpO1xuICByZXR1cm4gcmV0O1xufTtcblxuU0ZUUFN0cmVhbS5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBzdGF0ZS5wa3RCdWYgPSB1bmRlZmluZWQ7IC8vIGdpdmUgR0Mgc29tZXRoaW5nIHRvIGRvXG5cbiAgdmFyIHJlcXVlc3RzID0gc3RhdGUucmVxdWVzdHM7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVxdWVzdHMpO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGlmIChsZW4pIHtcbiAgICBpZiAodGhpcy5yZWFkYWJsZSkge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignU0ZUUCBzZXNzaW9uIGVuZGVkIGVhcmx5Jyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgY2I7IGkgPCBsZW47ICsraSlcbiAgICAgICAgKGNiID0gcmVxdWVzdHNba2V5c1tpXV0uY2IpICYmIGNiKGVycik7XG4gICAgfVxuICAgIHN0YXRlLnJlcXVlc3RzID0ge307XG4gIH1cblxuICBpZiAodGhpcy5yZWFkYWJsZSlcbiAgICB0aGlzLnB1c2gobnVsbCk7XG4gIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICAvLyBVZ2ghXG4gICAgdGhpcy5yZXN1bWUoKTtcbiAgfVxuICBpZiAoY2FsbGJhY2sgIT09IGZhbHNlKSB7XG4gICAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IFBhcnNlcjogTWFsZm9ybWVkIHBhY2tldCcpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG5ldyBFcnJvcignTWFsZm9ybWVkIHBhY2tldCcpKTtcbiAgfVxufTtcblxuU0ZUUFN0cmVhbS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gIHZhciBzZXJ2ZXIgPSB0aGlzLnNlcnZlcjtcbiAgdmFyIHN0YXR1cyA9IHN0YXRlLnN0YXR1cztcbiAgdmFyIHBrdFR5cGUgPSBzdGF0ZS5wa3RUeXBlO1xuICB2YXIgcGt0QnVmID0gc3RhdGUucGt0QnVmO1xuICB2YXIgcGt0TGVmdCA9IHN0YXRlLnBrdExlZnQ7XG4gIHZhciB2ZXJzaW9uID0gc3RhdGUudmVyc2lvbjtcbiAgdmFyIHBrdEhkckJ1ZiA9IHN0YXRlLnBrdEhkckJ1ZjtcbiAgdmFyIHJlcXVlc3RzID0gc3RhdGUucmVxdWVzdHM7XG4gIHZhciBkZWJ1ZyA9IHRoaXMuZGVidWc7XG4gIHZhciBjaHVua0xlbiA9IGNodW5rLmxlbmd0aDtcbiAgdmFyIGNodW5rUG9zID0gMDtcbiAgdmFyIGJ1ZmZlcjtcbiAgdmFyIGNodW5rTGVmdDtcbiAgdmFyIGlkO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ2Rpc2NhcmQnKSB7XG4gICAgICBjaHVua0xlZnQgPSAoY2h1bmtMZW4gLSBjaHVua1Bvcyk7XG4gICAgICBpZiAocGt0TGVmdCA8PSBjaHVua0xlZnQpIHtcbiAgICAgICAgY2h1bmtQb3MgKz0gcGt0TGVmdDtcbiAgICAgICAgcGt0TGVmdCA9IDA7XG4gICAgICAgIHN0YXR1cyA9ICdwYWNrZXRfaGVhZGVyJztcbiAgICAgICAgYnVmZmVyID0gcGt0QnVmID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGt0TGVmdCAtPSBjaHVua0xlZnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGt0QnVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNodW5rTGVmdCA9IChjaHVua0xlbiAtIGNodW5rUG9zKTtcbiAgICAgIGlmIChwa3RMZWZ0IDw9IGNodW5rTGVmdCkge1xuICAgICAgICBjaHVuay5jb3B5KHBrdEJ1ZixcbiAgICAgICAgICAgICAgICAgICBwa3RCdWYubGVuZ3RoIC0gcGt0TGVmdCxcbiAgICAgICAgICAgICAgICAgICBjaHVua1BvcyxcbiAgICAgICAgICAgICAgICAgICBjaHVua1BvcyArIHBrdExlZnQpO1xuICAgICAgICBjaHVua1BvcyArPSBwa3RMZWZ0O1xuICAgICAgICBwa3RMZWZ0ID0gMDtcbiAgICAgICAgYnVmZmVyID0gcGt0QnVmO1xuICAgICAgICBwa3RCdWYgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2h1bmsuY29weShwa3RCdWYsIHBrdEJ1Zi5sZW5ndGggLSBwa3RMZWZ0LCBjaHVua1Bvcyk7XG4gICAgICAgIHBrdExlZnQgLT0gY2h1bmtMZWZ0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ3BhY2tldF9oZWFkZXInKSB7XG4gICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICBwa3RMZWZ0ID0gNTtcbiAgICAgICAgcGt0QnVmID0gcGt0SGRyQnVmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGVyZSB3ZSByZWFkIHRoZSByaWdodC1tb3N0IDUgYnl0ZXMgZnJvbSBidWZmZXIgKHBrdEhkckJ1ZilcbiAgICAgICAgcGt0TGVmdCA9IHJlYWRVSW50MzJCRShidWZmZXIsIDQpIC0gMTsgLy8gYWNjb3VudCBmb3IgdHlwZSBieXRlXG4gICAgICAgIHBrdFR5cGUgPSBidWZmZXJbOF07XG5cbiAgICAgICAgaWYgKHNlcnZlcikge1xuICAgICAgICAgIGlmICh2ZXJzaW9uID09PSB1bmRlZmluZWQgJiYgcGt0VHlwZSAhPT0gUkVRVUVTVC5JTklUKSB7XG4gICAgICAgICAgICBkZWJ1ZygnREVCVUdbU0ZUUF06IFBhcnNlcjogVW5leHBlY3RlZCBwYWNrZXQgYmVmb3JlIGluaXQnKTtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignVW5leHBlY3RlZCBwYWNrZXQgYmVmb3JlIGluaXQnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcGt0VHlwZSA9PT0gUkVRVUVTVC5JTklUKSB7XG4gICAgICAgICAgICBkZWJ1ZygnREVCVUdbU0ZUUF06IFBhcnNlcjogVW5leHBlY3RlZCBkdXBsaWNhdGUgaW5pdCcpO1xuICAgICAgICAgICAgc3RhdHVzID0gJ2JhZF9wa3QnO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGt0TGVmdCA+IE1BWF9QS1RfTEVOKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gJ1BhY2tldCBsZW5ndGggKCdcbiAgICAgICAgICAgICAgICAgICAgICArIHBrdExlZnRcbiAgICAgICAgICAgICAgICAgICAgICArICcpIGV4Y2VlZHMgbWF4IGxlbmd0aCAoJ1xuICAgICAgICAgICAgICAgICAgICAgICsgTUFYX1BLVF9MRU5cbiAgICAgICAgICAgICAgICAgICAgICArICcpJztcbiAgICAgICAgICAgIGRlYnVnKCdERUJVR1tTRlRQXTogUGFyc2VyOiAnICsgbXNnKTtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihtc2cpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBrdFR5cGUgPT09IFJFUVVFU1QuRVhURU5ERUQpIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdiYWRfcGt0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKFJFUVVFU1RbcGt0VHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVidWcoJ0RFQlVHW1NGVFBdOiBQYXJzZXI6IFVuc3VwcG9ydGVkIHBhY2tldCB0eXBlOiAnICsgcGt0VHlwZSk7XG4gICAgICAgICAgICBzdGF0dXMgPSAnZGlzY2FyZCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IHVuZGVmaW5lZCAmJiBwa3RUeXBlICE9PSBSRVNQT05TRS5WRVJTSU9OKSB7XG4gICAgICAgICAgZGVidWcoJ0RFQlVHW1NGVFBdOiBQYXJzZXI6IFVuZXhwZWN0ZWQgcGFja2V0IGJlZm9yZSB2ZXJzaW9uJyk7XG4gICAgICAgICAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignVW5leHBlY3RlZCBwYWNrZXQgYmVmb3JlIHZlcnNpb24nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHBrdFR5cGUgPT09IFJFU1BPTlNFLlZFUlNJT04pIHtcbiAgICAgICAgICBkZWJ1ZygnREVCVUdbU0ZUUF06IFBhcnNlcjogVW5leHBlY3RlZCBkdXBsaWNhdGUgdmVyc2lvbicpO1xuICAgICAgICAgIHN0YXR1cyA9ICdiYWRfcGt0JztcbiAgICAgICAgfSBlbHNlIGlmIChSRVNQT05TRVtwa3RUeXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RhdHVzID0gJ2Rpc2NhcmQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2JhZF9wa3QnKSB7XG4gICAgICAgICAgLy8gQ29weSBvcmlnaW5hbCBwYWNrZXQgaW5mbyB0byBsZWZ0IG9mIHBrdEhkckJ1ZlxuICAgICAgICAgIHdyaXRlVUludDMyQkUocGt0SGRyQnVmLCBwa3RMZWZ0ICsgMSwgMCk7XG4gICAgICAgICAgcGt0SGRyQnVmWzRdID0gcGt0VHlwZTtcblxuICAgICAgICAgIHBrdExlZnQgPSA0O1xuICAgICAgICAgIHBrdEJ1ZiA9IHBrdEhkckJ1ZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwa3RCdWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUocGt0TGVmdCk7XG4gICAgICAgICAgc3RhdHVzID0gJ3BheWxvYWQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdwYXlsb2FkJykge1xuICAgICAgaWYgKHBrdFR5cGUgPT09IFJFU1BPTlNFLlZFUlNJT04gfHwgcGt0VHlwZSA9PT0gUkVRVUVTVC5JTklUKSB7XG4gICAgICAgIC8qXG4gICAgICAgICAgdWludDMyIHZlcnNpb25cbiAgICAgICAgICA8ZXh0ZW5zaW9uIGRhdGE+XG4gICAgICAgICovXG4gICAgICAgIHZlcnNpb24gPSBzdGF0ZS52ZXJzaW9uID0gcmVhZEludChidWZmZXIsIDAsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKHZlcnNpb24gPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHZlcnNpb24gPCAzKSB7XG4gICAgICAgICAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignSW5jb21wYXRpYmxlIFNGVFAgdmVyc2lvbjogJyArIHZlcnNpb24pKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZXJ2ZXIpXG4gICAgICAgICAgdGhpcy5wdXNoKFNFUlZFUl9WRVJTSU9OX0JVRkZFUik7XG5cbiAgICAgICAgdmFyIGJ1ZmxlbiA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIHZhciBleHRuYW1lO1xuICAgICAgICB2YXIgZXh0ZGF0YTtcbiAgICAgICAgYnVmZmVyLl9wb3MgPSA0O1xuICAgICAgICB3aGlsZSAoYnVmZmVyLl9wb3MgPCBidWZsZW4pIHtcbiAgICAgICAgICBleHRuYW1lID0gcmVhZFN0cmluZyhidWZmZXIsIGJ1ZmZlci5fcG9zLCAnYXNjaWknLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgaWYgKGV4dG5hbWUgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGV4dGRhdGEgPSByZWFkU3RyaW5nKGJ1ZmZlciwgYnVmZmVyLl9wb3MsICdhc2NpaScsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoZXh0ZGF0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgaWYgKHN0YXRlLmV4dGVuc2lvbnNbZXh0bmFtZV0pXG4gICAgICAgICAgICBzdGF0ZS5leHRlbnNpb25zW2V4dG5hbWVdLnB1c2goZXh0ZGF0YSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3RhdGUuZXh0ZW5zaW9uc1tleHRuYW1lXSA9IFsgZXh0ZGF0YSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLypcbiAgICAgICAgICBBbGwgb3RoZXIgcGFja2V0cyAoY2xpZW50IGFuZCBzZXJ2ZXIpIGJlZ2luIHdpdGggYSAoY2xpZW50KSByZXF1ZXN0XG4gICAgICAgICAgaWQ6XG4gICAgICAgICAgdWludDMyICAgICBpZFxuICAgICAgICAqL1xuICAgICAgICBpZCA9IHJlYWRJbnQoYnVmZmVyLCAwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgIGlmIChpZCA9PT0gZmFsc2UpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBmaWxlbmFtZTtcbiAgICAgICAgdmFyIGF0dHJzO1xuICAgICAgICB2YXIgaGFuZGxlO1xuICAgICAgICB2YXIgZGF0YTtcblxuICAgICAgICBpZiAoIXNlcnZlcikge1xuICAgICAgICAgIHZhciByZXEgPSByZXF1ZXN0c1tpZF07XG4gICAgICAgICAgdmFyIGNiID0gcmVxICYmIHJlcS5jYjtcbiAgICAgICAgICBkZWJ1ZygnREVCVUdbU0ZUUF06IFBhcnNlcjogUmVzcG9uc2U6ICcgKyBSRVNQT05TRVtwa3RUeXBlXSk7XG4gICAgICAgICAgaWYgKHJlcSAmJiBjYikge1xuICAgICAgICAgICAgaWYgKHBrdFR5cGUgPT09IFJFU1BPTlNFLlNUQVRVUykge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHVpbnQzMiAgICAgZXJyb3Ivc3RhdHVzIGNvZGVcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIGVycm9yIG1lc3NhZ2UgKElTTy0xMDY0NiBVVEYtOClcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIGxhbmd1YWdlIHRhZ1xuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICB2YXIgY29kZSA9IHJlYWRJbnQoYnVmZmVyLCA0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChjb2RlID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIGlmIChjb2RlID09PSBTVEFUVVNfQ09ERS5PSykge1xuICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYm9ycm93IE9wZW5TU0ggYmVoYXZpb3IgaGVyZSwgc3BlY2lmaWNhbGx5IHdlIG1ha2UgdGhlXG4gICAgICAgICAgICAgICAgLy8gbWVzc2FnZSBhbmQgbGFuZ3VhZ2UgZmllbGRzIG9wdGlvbmFsLCBkZXNwaXRlIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNwZWNpZmljYXRpb24gcmVxdWlyaW5nIHRoZW0gKGV2ZW4gaWYgdGhleSBhcmUgZW1wdHkpLiBUaGlzXG4gICAgICAgICAgICAgICAgLy8gaGVscHMgdG8gYXZvaWQgcHJvYmxlbXMgd2l0aCBidWdneSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBkb1xuICAgICAgICAgICAgICAgIC8vIG5vdCBmdWxseSBjb25mb3JtIHRvIHRoZSBTRlRQKHYzKSBzcGVjaWZpY2F0aW9uLlxuICAgICAgICAgICAgICAgIHZhciBtc2c7XG4gICAgICAgICAgICAgICAgdmFyIGxhbmcgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+PSAxMikge1xuICAgICAgICAgICAgICAgICAgbXNnID0gcmVhZFN0cmluZyhidWZmZXIsIDgsICd1dGY4JywgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgaWYgKG1zZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIGlmICgoYnVmZmVyLl9wb3MgKyA0KSA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZyA9IHJlYWRTdHJpbmcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIuX3BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FzY2lpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgU1RBVFVTX0NPREVfU1RSW2NvZGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAnVW5rbm93biBzdGF0dXMnKTtcbiAgICAgICAgICAgICAgICBlcnIuY29kZSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgZXJyLmxhbmcgPSBsYW5nO1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVTUE9OU0UuSEFORExFKSB7XG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgc3RyaW5nICAgICBoYW5kbGVcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgaGFuZGxlID0gcmVhZFN0cmluZyhidWZmZXIsIDQsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBjYih1bmRlZmluZWQsIGhhbmRsZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBrdFR5cGUgPT09IFJFU1BPTlNFLkRBVEEpIHtcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIGRhdGFcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgaWYgKHJlcS5idWZmZXIpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIGFscmVhZHkgcHJlLWFsbG9jYXRlZCBzcGFjZSB0byBzdG9yZSB0aGUgZGF0YVxuICAgICAgICAgICAgICAgIHZhciBkYXRhTGVuID0gcmVhZEludChidWZmZXIsIDQsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YUxlbiA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHJlcUJ1ZkxlbiA9IHJlcS5idWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhTGVuID4gcmVxQnVmTGVuKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSByZXNwb25zZSBkYXRhIHRvIGZpdCBleHBlY3RlZCBzaXplXG4gICAgICAgICAgICAgICAgICB3cml0ZVVJbnQzMkJFKGJ1ZmZlciwgcmVxQnVmTGVuLCA0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YSA9IHJlYWRTdHJpbmcoYnVmZmVyLCA0LCByZXEuYnVmZmVyLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNiKHVuZGVmaW5lZCwgZGF0YSwgZGF0YUxlbik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHJlYWRTdHJpbmcoYnVmZmVyLCA0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNiKHVuZGVmaW5lZCwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVTUE9OU0UuTkFNRSkge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHVpbnQzMiAgICAgY291bnRcbiAgICAgICAgICAgICAgICByZXBlYXRzIGNvdW50IHRpbWVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICAgICBmaWxlbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICAgICBsb25nbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgQVRUUlMgICAgICBhdHRyc1xuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICB2YXIgbmFtZXNMZW4gPSByZWFkSW50KGJ1ZmZlciwgNCwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAobmFtZXNMZW4gPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdmFyIG5hbWVzID0gW10sXG4gICAgICAgICAgICAgICAgICBsb25nbmFtZTtcbiAgICAgICAgICAgICAgYnVmZmVyLl9wb3MgPSA4O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzTGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgZ29pbmcgdG8gYXNzdW1lIFVURi04IGZvciBmaWxlbmFtZXMgZGVzcGl0ZSB0aGUgU0ZUUHYzXG4gICAgICAgICAgICAgICAgLy8gc3BlYyBub3Qgc3BlY2lmeWluZyBhbiBlbmNvZGluZyBiZWNhdXNlIHRoZSBzcGVjcyBmb3IgbmV3ZXJcbiAgICAgICAgICAgICAgICAvLyB2ZXJzaW9ucyBvZiB0aGUgcHJvdG9jb2wgYWxsIGV4cGxpY2l0bHkgc3BlY2lmeSBVVEYtOCBmb3JcbiAgICAgICAgICAgICAgICAvLyBmaWxlbmFtZXNcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHJlYWRTdHJpbmcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIuX3BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3V0ZjgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVuYW1lID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAvLyBgbG9uZ25hbWVgIG9ubHkgZXhpc3RzIGluIFNGVFB2MyBhbmQgc2luY2UgaXQgdHlwaWNhbGx5IHdpbGxcbiAgICAgICAgICAgICAgICAvLyBjb250YWluIHRoZSBmaWxlbmFtZSwgd2UgYXNzdW1lIGl0IGlzIGFsc28gVVRGLThcbiAgICAgICAgICAgICAgICBsb25nbmFtZSA9IHJlYWRTdHJpbmcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIuX3BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3V0ZjgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGxvbmduYW1lID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBhdHRycyA9IHJlYWRBdHRycyhidWZmZXIsIGJ1ZmZlci5fcG9zLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICAgIGxvbmduYW1lOiBsb25nbmFtZSxcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiBhdHRyc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNiKHVuZGVmaW5lZCwgbmFtZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwa3RUeXBlID09PSBSRVNQT05TRS5BVFRSUykge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIEFUVFJTICAgICAgYXR0cnNcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgYXR0cnMgPSByZWFkQXR0cnMoYnVmZmVyLCA0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChhdHRycyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBjYih1bmRlZmluZWQsIGF0dHJzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVTUE9OU0UuRVhURU5ERUQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlcS5leHRlbmRlZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVxLmV4dGVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlICdzdGF0dmZzQG9wZW5zc2guY29tJzpcbiAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZzdGF0dmZzQG9wZW5zc2guY29tJzpcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICB1aW50NjQgICAgZl9ic2l6ZSAgIC8vIGZpbGUgc3lzdGVtIGJsb2NrIHNpemVcbiAgICAgICAgICAgICAgICAgICAgICB1aW50NjQgICAgZl9mcnNpemUgIC8vIGZ1bmRhbWVudGFsIGZzIGJsb2NrIHNpemVcbiAgICAgICAgICAgICAgICAgICAgICB1aW50NjQgICAgZl9ibG9ja3MgIC8vIG51bWJlciBvZiBibG9ja3MgKHVuaXQgZl9mcnNpemUpXG4gICAgICAgICAgICAgICAgICAgICAgdWludDY0ICAgIGZfYmZyZWUgICAvLyBmcmVlIGJsb2NrcyBpbiBmaWxlIHN5c3RlbVxuICAgICAgICAgICAgICAgICAgICAgIHVpbnQ2NCAgICBmX2JhdmFpbCAgLy8gZnJlZSBibG9ja3MgZm9yIG5vbi1yb290XG4gICAgICAgICAgICAgICAgICAgICAgdWludDY0ICAgIGZfZmlsZXMgICAvLyB0b3RhbCBmaWxlIGlub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgIHVpbnQ2NCAgICBmX2ZmcmVlICAgLy8gZnJlZSBmaWxlIGlub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgIHVpbnQ2NCAgICBmX2ZhdmFpbCAgLy8gZnJlZSBmaWxlIGlub2RlcyBmb3IgdG8gbm9uLXJvb3RcbiAgICAgICAgICAgICAgICAgICAgICB1aW50NjQgICAgZl9mc2lkICAgIC8vIGZpbGUgc3lzdGVtIGlkXG4gICAgICAgICAgICAgICAgICAgICAgdWludDY0ICAgIGZfZmxhZyAgICAvLyBiaXQgbWFzayBvZiBmX2ZsYWcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgdWludDY0ICAgIGZfbmFtZW1heCAvLyBtYXhpbXVtIGZpbGVuYW1lIGxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgZl9ic2l6ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgIGZfZnJzaXplOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZl9ibG9ja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICBmX2JmcmVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZl9iYXZhaWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICBmX2ZpbGVzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZl9mZnJlZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgIGZfZmF2YWlsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZl9zaWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICBmX2ZsYWc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICBmX25hbWVtYXg6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2JzaXplID0gcmVhZFVJbnQ2NEJFKGJ1ZmZlciwgNCwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHMuZl9ic2l6ZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2Zyc2l6ZSA9IHJlYWRVSW50NjRCRShidWZmZXIsIDEyLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX2Zyc2l6ZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2Jsb2NrcyA9IHJlYWRVSW50NjRCRShidWZmZXIsIDIwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX2Jsb2NrcyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2JmcmVlID0gcmVhZFVJbnQ2NEJFKGJ1ZmZlciwgMjgsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRzLmZfYmZyZWUgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMuZl9iYXZhaWwgPSByZWFkVUludDY0QkUoYnVmZmVyLCAzNiwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHMuZl9iYXZhaWwgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMuZl9maWxlcyA9IHJlYWRVSW50NjRCRShidWZmZXIsIDQ0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX2ZpbGVzID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLmZfZmZyZWUgPSByZWFkVUludDY0QkUoYnVmZmVyLCA1MiwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHMuZl9mZnJlZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2ZhdmFpbCA9IHJlYWRVSW50NjRCRShidWZmZXIsIDYwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX2ZhdmFpbCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX3NpZCA9IHJlYWRVSW50NjRCRShidWZmZXIsIDY4LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX3NpZCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5mX2ZsYWcgPSByZWFkVUludDY0QkUoYnVmZmVyLCA3NiwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHMuZl9mbGFnID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLmZfbmFtZW1heCA9IHJlYWRVSW50NjRCRShidWZmZXIsIDg0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5mX25hbWVtYXggPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2IodW5kZWZpbmVkLCBzdGF0cyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gWFhYOiBhdCBsZWFzdCBwcm92aWRlIHRoZSByYXcgYnVmZmVyIGRhdGEgdG8gdGhlIGNhbGxiYWNrIGluXG4gICAgICAgICAgICAgIC8vIGNhc2Ugb2YgdW5leHBlY3RlZCBleHRlbmRlZCByZXNwb25zZT9cbiAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlcSlcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0c1tpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc2VydmVyXG4gICAgICAgICAgdmFyIGV2TmFtZSA9IFJFUVVFU1RbcGt0VHlwZV07XG4gICAgICAgICAgdmFyIG9mZnNldDtcbiAgICAgICAgICB2YXIgcGF0aDtcblxuICAgICAgICAgIGRlYnVnKCdERUJVR1tTRlRQXTogUGFyc2VyOiBSZXF1ZXN0OiAnICsgZXZOYW1lKTtcbiAgICAgICAgICBpZiAobGlzdGVuZXJDb3VudCh0aGlzLCBldk5hbWUpKSB7XG4gICAgICAgICAgICBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5PUEVOKSB7XG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICBmaWxlbmFtZVxuICAgICAgICAgICAgICAgIHVpbnQzMiAgICAgICAgcGZsYWdzXG4gICAgICAgICAgICAgICAgQVRUUlMgICAgICAgICBhdHRyc1xuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBmaWxlbmFtZSA9IHJlYWRTdHJpbmcoYnVmZmVyLCA0LCAndXRmOCcsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGZpbGVuYW1lID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBwZmxhZ3MgPSByZWFkSW50KGJ1ZmZlciwgYnVmZmVyLl9wb3MsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKHBmbGFncyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBhdHRycyA9IHJlYWRBdHRycyhidWZmZXIsIGJ1ZmZlci5fcG9zICsgNCwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAoYXR0cnMgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2TmFtZSwgaWQsIGZpbGVuYW1lLCBwZmxhZ3MsIGF0dHJzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5DTE9TRVxuICAgICAgICAgICAgICAgICAgICAgICB8fCBwa3RUeXBlID09PSBSRVFVRVNULkZTVEFUXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IHBrdFR5cGUgPT09IFJFUVVFU1QuUkVBRERJUikge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGhhbmRsZSA9IHJlYWRTdHJpbmcoYnVmZmVyLCA0LCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChoYW5kbGUgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2TmFtZSwgaWQsIGhhbmRsZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBrdFR5cGUgPT09IFJFUVVFU1QuUkVBRCkge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICAgICAgICAgICAgICAgdWludDY0ICAgICBvZmZzZXRcbiAgICAgICAgICAgICAgICB1aW50MzIgICAgIGxlblxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBoYW5kbGUgPSByZWFkU3RyaW5nKGJ1ZmZlciwgNCwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAoaGFuZGxlID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIG9mZnNldCA9IHJlYWRVSW50NjRCRShidWZmZXIsIGJ1ZmZlci5fcG9zLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IHJlYWRJbnQoYnVmZmVyLCBidWZmZXIuX3BvcywgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAobGVuID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIHRoaXMuZW1pdChldk5hbWUsIGlkLCBoYW5kbGUsIG9mZnNldCwgbGVuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5XUklURSkge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICAgICAgICAgICAgICAgdWludDY0ICAgICBvZmZzZXRcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIGRhdGFcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgaGFuZGxlID0gcmVhZFN0cmluZyhidWZmZXIsIDQsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBvZmZzZXQgPSByZWFkVUludDY0QkUoYnVmZmVyLCBidWZmZXIuX3BvcywgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIGRhdGEgPSByZWFkU3RyaW5nKGJ1ZmZlciwgYnVmZmVyLl9wb3MsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2TmFtZSwgaWQsIGhhbmRsZSwgb2Zmc2V0LCBkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5MU1RBVFxuICAgICAgICAgICAgICAgICAgICAgICB8fCBwa3RUeXBlID09PSBSRVFVRVNULlNUQVRcbiAgICAgICAgICAgICAgICAgICAgICAgfHwgcGt0VHlwZSA9PT0gUkVRVUVTVC5PUEVORElSXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IHBrdFR5cGUgPT09IFJFUVVFU1QuUkVNT1ZFXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IHBrdFR5cGUgPT09IFJFUVVFU1QuUk1ESVJcbiAgICAgICAgICAgICAgICAgICAgICAgfHwgcGt0VHlwZSA9PT0gUkVRVUVTVC5SRUFMUEFUSFxuICAgICAgICAgICAgICAgICAgICAgICB8fCBwa3RUeXBlID09PSBSRVFVRVNULlJFQURMSU5LKSB7XG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgc3RyaW5nICAgICBwYXRoXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIHBhdGggPSByZWFkU3RyaW5nKGJ1ZmZlciwgNCwgJ3V0ZjgnLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChwYXRoID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIHRoaXMuZW1pdChldk5hbWUsIGlkLCBwYXRoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5TRVRTVEFUXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IHBrdFR5cGUgPT09IFJFUVVFU1QuTUtESVIpIHtcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIHBhdGhcbiAgICAgICAgICAgICAgICBBVFRSUyAgICAgIGF0dHJzXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIHBhdGggPSByZWFkU3RyaW5nKGJ1ZmZlciwgNCwgJ3V0ZjgnLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChwYXRoID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIGF0dHJzID0gcmVhZEF0dHJzKGJ1ZmZlciwgYnVmZmVyLl9wb3MsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGF0dHJzID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIHRoaXMuZW1pdChldk5hbWUsIGlkLCBwYXRoLCBhdHRycyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBrdFR5cGUgPT09IFJFUVVFU1QuRlNFVFNUQVQpIHtcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBzdHJpbmcgICAgIGhhbmRsZVxuICAgICAgICAgICAgICAgIEFUVFJTICAgICAgYXR0cnNcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgaGFuZGxlID0gcmVhZFN0cmluZyhidWZmZXIsIDQsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBhdHRycyA9IHJlYWRBdHRycyhidWZmZXIsIGJ1ZmZlci5fcG9zLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChhdHRycyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB0aGlzLmVtaXQoZXZOYW1lLCBpZCwgaGFuZGxlLCBhdHRycyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBrdFR5cGUgPT09IFJFUVVFU1QuUkVOQU1FXG4gICAgICAgICAgICAgICAgICAgICAgIHx8IHBrdFR5cGUgPT09IFJFUVVFU1QuU1lNTElOSykge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIFJFTkFNRTpcbiAgICAgICAgICAgICAgICAgIHN0cmluZyAgICAgb2xkcGF0aFxuICAgICAgICAgICAgICAgICAgc3RyaW5nICAgICBuZXdwYXRoXG4gICAgICAgICAgICAgICAgU1lNTElOSzpcbiAgICAgICAgICAgICAgICAgIHN0cmluZyAgICAgbGlua3BhdGhcbiAgICAgICAgICAgICAgICAgIHN0cmluZyAgICAgdGFyZ2V0cGF0aFxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICB2YXIgc3RyMTtcbiAgICAgICAgICAgICAgdmFyIHN0cjI7XG4gICAgICAgICAgICAgIHN0cjEgPSByZWFkU3RyaW5nKGJ1ZmZlciwgNCwgJ3V0ZjgnLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIGlmIChzdHIxID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIHN0cjIgPSByZWFkU3RyaW5nKGJ1ZmZlciwgYnVmZmVyLl9wb3MsICd1dGY4JywgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBpZiAoc3RyMiA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBpZiAocGt0VHlwZSA9PT0gUkVRVUVTVC5TWU1MSU5LICYmIHRoaXMuX2lzT3BlblNTSCkge1xuICAgICAgICAgICAgICAgIC8vIE9wZW5TU0ggaGFzIGxpbmtwYXRoIGFuZCB0YXJnZXRwYXRoIHBvc2l0aW9ucyBzd2l0Y2hlZFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChldk5hbWUsIGlkLCBzdHIyLCBzdHIxKTtcbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2TmFtZSwgaWQsIHN0cjEsIHN0cjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHJlamVjdCByZXF1ZXN0IGlmIG5vIGhhbmRsZXIgZm9yIHJlcXVlc3QgdHlwZVxuICAgICAgICAgICAgdGhpcy5zdGF0dXMoaWQsIFNUQVRVU19DT0RFLk9QX1VOU1VQUE9SVEVEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcHJlcGFyZSBmb3IgbmV4dCBwYWNrZXRcbiAgICAgIHN0YXR1cyA9ICdwYWNrZXRfaGVhZGVyJztcbiAgICAgIGJ1ZmZlciA9IHBrdEJ1ZiA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2JhZF9wa3QnKSB7XG4gICAgICBpZiAoc2VydmVyICYmIGJ1ZmZlcls0XSAhPT0gUkVRVUVTVC5JTklUKSB7XG4gICAgICAgIHZhciBlcnJDb2RlID0gKGJ1ZmZlcls0XSA9PT0gUkVRVUVTVC5FWFRFTkRFRFxuICAgICAgICAgICAgICAgICAgICAgICA/IFNUQVRVU19DT0RFLk9QX1VOU1VQUE9SVEVEXG4gICAgICAgICAgICAgICAgICAgICAgIDogU1RBVFVTX0NPREUuRkFJTFVSRSk7XG5cbiAgICAgICAgLy8gbm8gcmVxdWVzdCBpZCBmb3IgaW5pdC92ZXJzaW9uIHBhY2tldHMsIHNvIHdlIGhhdmUgbm8gd2F5IHRvIHNlbmQgYVxuICAgICAgICAvLyBzdGF0dXMgcmVzcG9uc2UsIHNvIHdlIGp1c3QgY2xvc2UgdXAgc2hvcCAuLi5cbiAgICAgICAgaWYgKGJ1ZmZlcls0XSA9PT0gUkVRVUVTVC5JTklUIHx8IGJ1ZmZlcls0XSA9PT0gUkVTUE9OU0UuVkVSU0lPTilcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2xlYW51cChjYWxsYmFjayk7XG5cbiAgICAgICAgaWQgPSByZWFkSW50KGJ1ZmZlciwgNSwgdGhpcywgY2FsbGJhY2spO1xuICAgICAgICBpZiAoaWQgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0dXMoaWQsIGVyckNvZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBieSB0aGlzIHBvaW50IHdlIGhhdmUgYWxyZWFkeSByZWFkIHRoZSB0eXBlIGJ5dGUgYW5kIHRoZSBpZCBieXRlcywgc29cbiAgICAgIC8vIHdlIHN1YnRyYWN0IHRob3NlIGZyb20gdGhlIG51bWJlciBvZiBieXRlcyB0byBza2lwXG4gICAgICBwa3RMZWZ0ID0gcmVhZFVJbnQzMkJFKGJ1ZmZlciwgMCkgLSA1O1xuXG4gICAgICBzdGF0dXMgPSAnZGlzY2FyZCc7XG4gICAgfVxuXG4gICAgaWYgKGNodW5rUG9zID49IGNodW5rTGVuKVxuICAgICAgYnJlYWs7XG4gIH1cblxuICBzdGF0ZS5zdGF0dXMgPSBzdGF0dXM7XG4gIHN0YXRlLnBrdFR5cGUgPSBwa3RUeXBlO1xuICBzdGF0ZS5wa3RCdWYgPSBwa3RCdWY7XG4gIHN0YXRlLnBrdExlZnQgPSBwa3RMZWZ0O1xuICBzdGF0ZS52ZXJzaW9uID0gdmVyc2lvbjtcblxuICBjYWxsYmFjaygpO1xufTtcblxuLy8gY2xpZW50XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5jcmVhdGVSZWFkU3RyZWFtID0gZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgcmV0dXJuIG5ldyBSZWFkU3RyZWFtKHRoaXMsIHBhdGgsIG9wdGlvbnMpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmNyZWF0ZVdyaXRlU3RyZWFtID0gZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgcmV0dXJuIG5ldyBXcml0ZVN0cmVhbSh0aGlzLCBwYXRoLCBvcHRpb25zKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24ocGF0aCwgZmxhZ3NfLCBhdHRycywgY2IpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIGlmICh0eXBlb2YgYXR0cnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGF0dHJzO1xuICAgIGF0dHJzID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGZsYWdzID0gKHR5cGVvZiBmbGFnc18gPT09ICdudW1iZXInID8gZmxhZ3NfIDogc3RyaW5nVG9GbGFncyhmbGFnc18pKTtcbiAgaWYgKGZsYWdzID09PSBudWxsKVxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBmbGFncyBzdHJpbmc6ICcgKyBmbGFnc18pO1xuXG4gIHZhciBhdHRyRmxhZ3MgPSAwO1xuICB2YXIgYXR0ckJ5dGVzID0gMDtcbiAgaWYgKHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGF0dHJzID09PSAnbnVtYmVyJykge1xuICAgIGF0dHJzID0geyBtb2RlOiBhdHRycyB9O1xuICB9XG4gIGlmICh0eXBlb2YgYXR0cnMgPT09ICdvYmplY3QnICYmIGF0dHJzICE9PSBudWxsKSB7XG4gICAgYXR0cnMgPSBhdHRyc1RvQnl0ZXMoYXR0cnMpO1xuICAgIGF0dHJGbGFncyA9IGF0dHJzLmZsYWdzO1xuICAgIGF0dHJCeXRlcyA9IGF0dHJzLm5ieXRlcztcbiAgICBhdHRycyA9IGF0dHJzLmJ5dGVzO1xuICB9XG5cbiAgLypcbiAgICB1aW50MzIgICAgICAgIGlkXG4gICAgc3RyaW5nICAgICAgICBmaWxlbmFtZVxuICAgIHVpbnQzMiAgICAgICAgcGZsYWdzXG4gICAgQVRUUlMgICAgICAgICBhdHRyc1xuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIHBhdGhsZW4gKyA0ICsgNCArIGF0dHJCeXRlcyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5PUEVOO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG4gIHdyaXRlVUludDMyQkUoYnVmLCBmbGFncywgcCArPSBwYXRobGVuKTtcbiAgd3JpdGVVSW50MzJCRShidWYsIGF0dHJGbGFncywgcCArPSA0KTtcbiAgaWYgKGF0dHJzICYmIGF0dHJGbGFncykge1xuICAgIHAgKz0gNDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXR0cnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpXG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuMiA9IGF0dHJzW2ldLmxlbmd0aDsgaiA8IGxlbjI7ICsrailcbiAgICAgICAgYnVmW3ArK10gPSBhdHRyc1tpXVtqXTtcbiAgfVxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBPUEVOJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGhhbmRsZSwgY2IpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuICBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGhhbmRsZSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdoYW5kbGUgaXMgbm90IGEgQnVmZmVyJyk7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cbiAgLypcbiAgICB1aW50MzIgICAgIGlkXG4gICAgc3RyaW5nICAgICBoYW5kbGVcbiAgKi9cbiAgdmFyIGhhbmRsZWxlbiA9IGhhbmRsZS5sZW5ndGg7XG4gIHZhciBwID0gOTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgaGFuZGxlbGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULkNMT1NFO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGFuZGxlbGVuLCBwKTtcbiAgaGFuZGxlLmNvcHkoYnVmLCBwICs9IDQpO1xuXG4gIHN0YXRlLnJlcXVlc3RzW3JlcWlkXSA9IHsgY2I6IGNiIH07XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IE91dGdvaW5nOiBXcml0aW5nIENMT1NFJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5yZWFkRGF0YSA9IGZ1bmN0aW9uKGhhbmRsZSwgYnVmLCBvZmYsIGxlbiwgcG9zaXRpb24sIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcbiAgZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYW5kbGUpKVxuICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlIGlzIG5vdCBhIEJ1ZmZlcicpO1xuICBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdidWZmZXIgaXMgbm90IGEgQnVmZmVyJyk7XG4gIGVsc2UgaWYgKG9mZiA+PSBidWYubGVuZ3RoKVxuICAgIHRocm93IG5ldyBFcnJvcignb2Zmc2V0IGlzIG91dCBvZiBib3VuZHMnKTtcbiAgZWxzZSBpZiAob2ZmICsgbGVuID4gYnVmLmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xlbmd0aCBleHRlbmRzIGJleW9uZCBidWZmZXInKTtcbiAgZWxzZSBpZiAocG9zaXRpb24gPT09IG51bGwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdudWxsIHBvc2l0aW9uIGN1cnJlbnRseSB1bnN1cHBvcnRlZCcpO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIC8qXG4gICAgdWludDMyICAgICBpZFxuICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICAgdWludDY0ICAgICBvZmZzZXRcbiAgICB1aW50MzIgICAgIGxlblxuICAqL1xuICB2YXIgaGFuZGxlbGVuID0gaGFuZGxlLmxlbmd0aDtcbiAgdmFyIHAgPSA5O1xuICB2YXIgcG9zID0gcG9zaXRpb247XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIGhhbmRsZWxlbiArIDggKyA0KTtcblxuICB3cml0ZVVJbnQzMkJFKG91dCwgb3V0Lmxlbmd0aCAtIDQsIDApO1xuICBvdXRbNF0gPSBSRVFVRVNULlJFQUQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKG91dCwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUob3V0LCBoYW5kbGVsZW4sIHApO1xuICBoYW5kbGUuY29weShvdXQsIHAgKz0gNCk7XG4gIHAgKz0gaGFuZGxlbGVuO1xuICBmb3IgKHZhciBpID0gNzsgaSA+PSAwOyAtLWkpIHtcbiAgICBvdXRbcCArIGldID0gcG9zICYgMHhGRjtcbiAgICBwb3MgLz0gMjU2O1xuICB9XG4gIHdyaXRlVUludDMyQkUob3V0LCBsZW4sIHAgKz0gOCk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0ge1xuICAgIGNiOiBmdW5jdGlvbihlcnIsIGRhdGEsIG5iKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChjYi5fd2FudEVPRkVycm9yIHx8IGVyci5jb2RlICE9PSBTVEFUVVNfQ09ERS5FT0YpXG4gICAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICB9IGVsc2UgaWYgKG5iID4gbGVuKSB7XG4gICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoJ1JlY2VpdmVkIG1vcmUgZGF0YSB0aGFuIHJlcXVlc3RlZCcpKTtcbiAgICAgIH1cbiAgICAgIGNiKHVuZGVmaW5lZCwgbmIgfHwgMCwgZGF0YSwgcG9zaXRpb24pO1xuICAgIH0sXG4gICAgYnVmZmVyOiBidWYuc2xpY2Uob2ZmLCBvZmYgKyBsZW4pXG4gIH07XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IE91dGdvaW5nOiBXcml0aW5nIFJFQUQnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChvdXQpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLndyaXRlRGF0YSA9IGZ1bmN0aW9uKGhhbmRsZSwgYnVmLCBvZmYsIGxlbiwgcG9zaXRpb24sIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcbiAgZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYW5kbGUpKVxuICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlIGlzIG5vdCBhIEJ1ZmZlcicpO1xuICBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdidWZmZXIgaXMgbm90IGEgQnVmZmVyJyk7XG4gIGVsc2UgaWYgKG9mZiA+IGJ1Zi5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvZmZzZXQgaXMgb3V0IG9mIGJvdW5kcycpO1xuICBlbHNlIGlmIChvZmYgKyBsZW4gPiBidWYubGVuZ3RoKVxuICAgIHRocm93IG5ldyBFcnJvcignbGVuZ3RoIGV4dGVuZHMgYmV5b25kIGJ1ZmZlcicpO1xuICBlbHNlIGlmIChwb3NpdGlvbiA9PT0gbnVsbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ251bGwgcG9zaXRpb24gY3VycmVudGx5IHVuc3VwcG9ydGVkJyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAoIWxlbikge1xuICAgIGNiICYmIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7IGNiKHVuZGVmaW5lZCwgMCk7IH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvdmVyZmxvdyA9IChsZW4gPiBzdGF0ZS5tYXhEYXRhTGVuXG4gICAgICAgICAgICAgICAgICA/IGxlbiAtIHN0YXRlLm1heERhdGFMZW5cbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gIHZhciBvcmlnUG9zaXRpb24gPSBwb3NpdGlvbjtcblxuICBpZiAob3ZlcmZsb3cpXG4gICAgbGVuID0gc3RhdGUubWF4RGF0YUxlbjtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIGhhbmRsZVxuICAgIHVpbnQ2NCAgICAgb2Zmc2V0XG4gICAgc3RyaW5nICAgICBkYXRhXG4gICovXG4gIHZhciBoYW5kbGVsZW4gPSBoYW5kbGUubGVuZ3RoO1xuICB2YXIgcCA9IDk7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIGhhbmRsZWxlbiArIDggKyA0ICsgbGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKG91dCwgb3V0Lmxlbmd0aCAtIDQsIDApO1xuICBvdXRbNF0gPSBSRVFVRVNULldSSVRFO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShvdXQsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKG91dCwgaGFuZGxlbGVuLCBwKTtcbiAgaGFuZGxlLmNvcHkob3V0LCBwICs9IDQpO1xuICBwICs9IGhhbmRsZWxlbjtcbiAgZm9yICh2YXIgaSA9IDc7IGkgPj0gMDsgLS1pKSB7XG4gICAgb3V0W3AgKyBpXSA9IHBvc2l0aW9uICYgMHhGRjtcbiAgICBwb3NpdGlvbiAvPSAyNTY7XG4gIH1cbiAgd3JpdGVVSW50MzJCRShvdXQsIGxlbiwgcCArPSA4KTtcbiAgYnVmLmNvcHkob3V0LCBwICs9IDQsIG9mZiwgb2ZmICsgbGVuKTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7XG4gICAgY2I6IGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycilcbiAgICAgICAgY2IgJiYgY2IoZXJyKTtcbiAgICAgIGVsc2UgaWYgKG92ZXJmbG93KSB7XG4gICAgICAgIHNlbGYud3JpdGVEYXRhKGhhbmRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgYnVmLFxuICAgICAgICAgICAgICAgICAgICAgICBvZmYgKyBsZW4sXG4gICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93LFxuICAgICAgICAgICAgICAgICAgICAgICBvcmlnUG9zaXRpb24gKyBsZW4sXG4gICAgICAgICAgICAgICAgICAgICAgIGNiKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICBjYiAmJiBjYih1bmRlZmluZWQsIG9mZiArIGxlbik7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBXUklURScpO1xuICByZXR1cm4gdGhpcy5wdXNoKG91dCk7XG59O1xuZnVuY3Rpb24gdHJ5Q3JlYXRlQnVmZmVyKHNpemUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpO1xuICB9IGNhdGNoIChleCkge1xuICAgIHJldHVybiBleDtcbiAgfVxufVxuZnVuY3Rpb24gZmFzdFhmZXIoc3JjLCBkc3QsIHNyY1BhdGgsIGRzdFBhdGgsIG9wdHMsIGNiKSB7XG4gIHZhciBjb25jdXJyZW5jeSA9IDY0O1xuICB2YXIgY2h1bmtTaXplID0gMzI3Njg7XG4gIC8vdmFyIHByZXNlcnZlID0gZmFsc2U7XG4gIHZhciBvbnN0ZXA7XG4gIHZhciBtb2RlO1xuICB2YXIgZmlsZVNpemU7XG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvcHRzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzID09PSAnb2JqZWN0JyAmJiBvcHRzICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNvbmN1cnJlbmN5ID09PSAnbnVtYmVyJ1xuICAgICAgICAmJiBvcHRzLmNvbmN1cnJlbmN5ID4gMFxuICAgICAgICAmJiAhaXNOYU4ob3B0cy5jb25jdXJyZW5jeSkpXG4gICAgICBjb25jdXJyZW5jeSA9IG9wdHMuY29uY3VycmVuY3k7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNodW5rU2l6ZSA9PT0gJ251bWJlcidcbiAgICAgICAgJiYgb3B0cy5jaHVua1NpemUgPiAwXG4gICAgICAgICYmICFpc05hTihvcHRzLmNodW5rU2l6ZSkpXG4gICAgICBjaHVua1NpemUgPSBvcHRzLmNodW5rU2l6ZTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZmlsZVNpemUgPT09ICdudW1iZXInXG4gICAgICAgICYmIG9wdHMuZmlsZVNpemUgPiAwXG4gICAgICAgICYmICFpc05hTihvcHRzLmZpbGVTaXplKSlcbiAgICAgIGZpbGVTaXplID0gb3B0cy5maWxlU2l6ZTtcbiAgICBpZiAodHlwZW9mIG9wdHMuc3RlcCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIG9uc3RlcCA9IG9wdHMuc3RlcDtcbiAgICAvL3ByZXNlcnZlID0gKG9wdHMucHJlc2VydmUgPyB0cnVlIDogZmFsc2UpO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5tb2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0cy5tb2RlID09PSAnbnVtYmVyJylcbiAgICAgIG1vZGUgPSBtb2RlTnVtKG9wdHMubW9kZSk7XG4gIH1cblxuICAvLyBpbnRlcm5hbCBzdGF0ZSB2YXJpYWJsZXNcbiAgdmFyIGZzaXplO1xuICB2YXIgcGRzdCA9IDA7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciBoYWRFcnJvciA9IGZhbHNlO1xuICB2YXIgc3JjSGFuZGxlO1xuICB2YXIgZHN0SGFuZGxlO1xuICB2YXIgcmVhZGJ1ZjtcbiAgdmFyIGJ1ZnNpemUgPSBjaHVua1NpemUgKiBjb25jdXJyZW5jeTtcblxuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGlmIChoYWRFcnJvcilcbiAgICAgIHJldHVybjtcblxuICAgIGhhZEVycm9yID0gdHJ1ZTtcblxuICAgIHZhciBsZWZ0ID0gMDtcbiAgICB2YXIgY2JmaW5hbDtcblxuICAgIGlmIChzcmNIYW5kbGUgfHwgZHN0SGFuZGxlKSB7XG4gICAgICBjYmZpbmFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLWxlZnQgPT09IDApXG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgIH07XG4gICAgICBpZiAoc3JjSGFuZGxlICYmIChzcmMgPT09IGZzIHx8IHNyYy53cml0YWJsZSkpXG4gICAgICAgICsrbGVmdDtcbiAgICAgIGlmIChkc3RIYW5kbGUgJiYgKGRzdCA9PT0gZnMgfHwgZHN0LndyaXRhYmxlKSlcbiAgICAgICAgKytsZWZ0O1xuICAgICAgaWYgKHNyY0hhbmRsZSAmJiAoc3JjID09PSBmcyB8fCBzcmMud3JpdGFibGUpKVxuICAgICAgICBzcmMuY2xvc2Uoc3JjSGFuZGxlLCBjYmZpbmFsKTtcbiAgICAgIGlmIChkc3RIYW5kbGUgJiYgKGRzdCA9PT0gZnMgfHwgZHN0LndyaXRhYmxlKSlcbiAgICAgICAgZHN0LmNsb3NlKGRzdEhhbmRsZSwgY2JmaW5hbCk7XG4gICAgfSBlbHNlXG4gICAgICBjYihlcnIpO1xuICB9XG5cbiAgc3JjLm9wZW4oc3JjUGF0aCwgJ3InLCBmdW5jdGlvbihlcnIsIHNvdXJjZUhhbmRsZSkge1xuICAgIGlmIChlcnIpXG4gICAgICByZXR1cm4gb25lcnJvcihlcnIpO1xuXG4gICAgc3JjSGFuZGxlID0gc291cmNlSGFuZGxlO1xuXG4gICAgaWYgKGZpbGVTaXplID09PSB1bmRlZmluZWQpXG4gICAgICBzcmMuZnN0YXQoc3JjSGFuZGxlLCB0cnlTdGF0KTtcbiAgICBlbHNlXG4gICAgICB0cnlTdGF0KG51bGwsIHsgc2l6ZTogZmlsZVNpemUgfSk7XG5cbiAgICBmdW5jdGlvbiB0cnlTdGF0KGVyciwgYXR0cnMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKHNyYyAhPT0gZnMpIHtcbiAgICAgICAgICAvLyBUcnkgc3RhdCgpIGZvciBzZnRwIHNlcnZlcnMgdGhhdCBtYXkgbm90IHN1cHBvcnQgZnN0YXQoKSBmb3JcbiAgICAgICAgICAvLyB3aGF0ZXZlciByZWFzb25cbiAgICAgICAgICBzcmMuc3RhdChzcmNQYXRoLCBmdW5jdGlvbihlcnJfLCBhdHRyc18pIHtcbiAgICAgICAgICAgIGlmIChlcnJfKVxuICAgICAgICAgICAgICByZXR1cm4gb25lcnJvcihlcnIpO1xuICAgICAgICAgICAgdHJ5U3RhdChudWxsLCBhdHRyc18pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25lcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgZnNpemUgPSBhdHRycy5zaXplO1xuXG4gICAgICBkc3Qub3Blbihkc3RQYXRoLCAndycsIGZ1bmN0aW9uKGVyciwgZGVzdEhhbmRsZSkge1xuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgIHJldHVybiBvbmVycm9yKGVycik7XG5cbiAgICAgICAgZHN0SGFuZGxlID0gZGVzdEhhbmRsZTtcblxuICAgICAgICBpZiAoZnNpemUgPD0gMClcbiAgICAgICAgICByZXR1cm4gb25lcnJvcigpO1xuXG4gICAgICAgIC8vIFVzZSBsZXNzIG1lbW9yeSB3aGVyZSBwb3NzaWJsZVxuICAgICAgICB3aGlsZSAoYnVmc2l6ZSA+IGZzaXplKSB7XG4gICAgICAgICAgaWYgKGNvbmN1cnJlbmN5ID09PSAxKSB7XG4gICAgICAgICAgICBidWZzaXplID0gZnNpemU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmc2l6ZSAtPSBjaHVua1NpemU7XG4gICAgICAgICAgLS1jb25jdXJyZW5jeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlYWRidWYgPSB0cnlDcmVhdGVCdWZmZXIoYnVmc2l6ZSk7XG4gICAgICAgIGlmIChyZWFkYnVmIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgICAgcmV0dXJuIG9uZXJyb3IocmVhZGJ1Zik7XG5cbiAgICAgICAgaWYgKG1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRzdC5mY2htb2QoZHN0SGFuZGxlLCBtb2RlLCBmdW5jdGlvbiB0cnlBZ2FpbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgLy8gVHJ5IGNobW9kKCkgZm9yIHNmdHAgc2VydmVycyB0aGF0IG1heSBub3Qgc3VwcG9ydCBmY2htb2QoKSBmb3JcbiAgICAgICAgICAgICAgLy8gd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICAgIGRzdC5jaG1vZChkc3RQYXRoLCBtb2RlLCBmdW5jdGlvbihlcnJfKSB7XG4gICAgICAgICAgICAgICAgdHJ5QWdhaW4oKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0UmVhZHMoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFJlYWRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvbnJlYWQoZXJyLCBuYiwgZGF0YSwgZHN0cG9zLCBkYXRhcG9zLCBvcmlnQ2h1bmtMZW4pIHtcbiAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgcmV0dXJuIG9uZXJyb3IoZXJyKTtcblxuICAgICAgICAgIGRhdGFwb3MgPSBkYXRhcG9zIHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3JjID09PSBmcylcbiAgICAgICAgICAgIGRzdC53cml0ZURhdGEoZHN0SGFuZGxlLCByZWFkYnVmLCBkYXRhcG9zLCBuYiwgZHN0cG9zLCB3cml0ZUNiKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkc3Qud3JpdGUoZHN0SGFuZGxlLCByZWFkYnVmLCBkYXRhcG9zLCBuYiwgZHN0cG9zLCB3cml0ZUNiKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIHdyaXRlQ2IoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICByZXR1cm4gb25lcnJvcihlcnIpO1xuXG4gICAgICAgICAgICB0b3RhbCArPSBuYjtcbiAgICAgICAgICAgIG9uc3RlcCAmJiBvbnN0ZXAodG90YWwsIG5iLCBmc2l6ZSk7XG5cbiAgICAgICAgICAgIGlmIChuYiA8IG9yaWdDaHVua0xlbilcbiAgICAgICAgICAgICAgcmV0dXJuIHNpbmdsZVJlYWQoZGF0YXBvcywgZHN0cG9zICsgbmIsIG9yaWdDaHVua0xlbiAtIG5iKTtcblxuICAgICAgICAgICAgaWYgKHRvdGFsID09PSBmc2l6ZSkge1xuICAgICAgICAgICAgICBkc3QuY2xvc2UoZHN0SGFuZGxlLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBkc3RIYW5kbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvbmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgc3JjLmNsb3NlKHNyY0hhbmRsZSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICBzcmNIYW5kbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBkc3QgPj0gZnNpemUpXG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIGNodW5rID0gKHBkc3QgKyBjaHVua1NpemUgPiBmc2l6ZSA/IGZzaXplIC0gcGRzdCA6IGNodW5rU2l6ZSk7XG4gICAgICAgICAgICBzaW5nbGVSZWFkKGRhdGFwb3MsIHBkc3QsIGNodW5rKTtcbiAgICAgICAgICAgIHBkc3QgKz0gY2h1bms7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZUNiKHBzcmMsIHBkc3QsIGNodW5rKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVyciwgbmIsIGRhdGEpIHtcbiAgICAgICAgICAgIG9ucmVhZChlcnIsIG5iLCBkYXRhLCBwZHN0LCBwc3JjLCBjaHVuayk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNpbmdsZVJlYWQocHNyYywgcGRzdCwgY2h1bmspIHtcbiAgICAgICAgICBpZiAoc3JjID09PSBmcykge1xuICAgICAgICAgICAgc3JjLnJlYWQoc3JjSGFuZGxlLFxuICAgICAgICAgICAgICAgICAgICAgcmVhZGJ1ZixcbiAgICAgICAgICAgICAgICAgICAgIHBzcmMsXG4gICAgICAgICAgICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgIHBkc3QsXG4gICAgICAgICAgICAgICAgICAgICBtYWtlQ2IocHNyYywgcGRzdCwgY2h1bmspKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3JjLnJlYWREYXRhKHNyY0hhbmRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZWFkYnVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGRzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlQ2IocHNyYywgcGRzdCwgY2h1bmspKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdGFydFJlYWRzKCkge1xuICAgICAgICAgIHZhciByZWFkcyA9IDA7XG4gICAgICAgICAgdmFyIHBzcmMgPSAwO1xuICAgICAgICAgIHdoaWxlIChwZHN0IDwgZnNpemUgJiYgcmVhZHMgPCBjb25jdXJyZW5jeSkge1xuICAgICAgICAgICAgdmFyIGNodW5rID0gKHBkc3QgKyBjaHVua1NpemUgPiBmc2l6ZSA/IGZzaXplIC0gcGRzdCA6IGNodW5rU2l6ZSk7XG4gICAgICAgICAgICBzaW5nbGVSZWFkKHBzcmMsIHBkc3QsIGNodW5rKTtcbiAgICAgICAgICAgIHBzcmMgKz0gY2h1bms7XG4gICAgICAgICAgICBwZHN0ICs9IGNodW5rO1xuICAgICAgICAgICAgKytyZWFkcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5mYXN0R2V0ID0gZnVuY3Rpb24ocmVtb3RlUGF0aCwgbG9jYWxQYXRoLCBvcHRzLCBjYikge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgZmFzdFhmZXIodGhpcywgZnMsIHJlbW90ZVBhdGgsIGxvY2FsUGF0aCwgb3B0cywgY2IpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmZhc3RQdXQgPSBmdW5jdGlvbihsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIG9wdHMsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICBmYXN0WGZlcihmcywgdGhpcywgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCBvcHRzLCBjYik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUucmVhZEZpbGUgPSBmdW5jdGlvbihwYXRoLCBvcHRpb25zLCBjYWxsYmFja18pIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBjYWxsYmFjaztcbiAgaWYgKHR5cGVvZiBjYWxsYmFja18gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrXztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMsIGZsYWc6ICdyJyB9O1xuICBlbHNlIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0geyBlbmNvZGluZzogbnVsbCwgZmxhZzogJ3InIH07XG4gIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgYXJndW1lbnRzJyk7XG5cbiAgdmFyIGVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgaWYgKGVuY29kaW5nICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuXG4gIC8vIGZpcnN0LCBzdGF0IHRoZSBmaWxlLCBzbyB3ZSBrbm93IHRoZSBzaXplLlxuICB2YXIgc2l6ZTtcbiAgdmFyIGJ1ZmZlcjsgLy8gc2luZ2xlIGJ1ZmZlciB3aXRoIGZpbGUgZGF0YVxuICB2YXIgYnVmZmVyczsgLy8gbGlzdCBmb3Igd2hlbiBzaXplIGlzIHVua25vd25cbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBoYW5kbGU7XG5cbiAgLy8gU0ZUUHYzIGRvZXMgbm90IHN1cHBvcnQgdXNpbmcgLTEgZm9yIHJlYWQgcG9zaXRpb24sIHNvIHdlIGhhdmUgdG8gdHJhY2tcbiAgLy8gcmVhZCBwb3NpdGlvbiBtYW51YWxseVxuICB2YXIgYnl0ZXNSZWFkID0gMDtcblxuICB2YXIgZmxhZyA9IG9wdGlvbnMuZmxhZyB8fCAncic7XG4gIHRoaXMub3BlbihwYXRoLCBmbGFnLCA0MzggLyo9MDY2NiovLCBmdW5jdGlvbihlciwgaGFuZGxlXykge1xuICAgIGlmIChlcilcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjayhlcik7XG4gICAgaGFuZGxlID0gaGFuZGxlXztcblxuICAgIHNlbGYuZnN0YXQoaGFuZGxlLCBmdW5jdGlvbiB0cnlTdGF0KGVyLCBzdCkge1xuICAgICAgaWYgKGVyKSB7XG4gICAgICAgIC8vIFRyeSBzdGF0KCkgZm9yIHNmdHAgc2VydmVycyB0aGF0IG1heSBub3Qgc3VwcG9ydCBmc3RhdCgpIGZvclxuICAgICAgICAvLyB3aGF0ZXZlciByZWFzb25cbiAgICAgICAgc2VsZi5zdGF0KHBhdGgsIGZ1bmN0aW9uKGVyXywgc3RfKSB7XG4gICAgICAgICAgaWYgKGVyXykge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2xvc2UoaGFuZGxlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeVN0YXQobnVsbCwgc3RfKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2l6ZSA9IHN0LnNpemUgfHwgMDtcbiAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgIC8vIHRoZSBrZXJuZWwgbGllcyBhYm91dCBtYW55IGZpbGVzLlxuICAgICAgICAvLyBHbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBieXRlcy5cbiAgICAgICAgYnVmZmVycyA9IFtdO1xuICAgICAgICByZXR1cm4gcmVhZCgpO1xuICAgICAgfVxuXG4gICAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgICByZWFkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg4MTkyKTtcbiAgICAgIHNlbGYucmVhZERhdGEoaGFuZGxlLCBidWZmZXIsIDAsIDgxOTIsIGJ5dGVzUmVhZCwgYWZ0ZXJSZWFkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZWFkRGF0YShoYW5kbGUsIGJ1ZmZlciwgcG9zLCBzaXplIC0gcG9zLCBieXRlc1JlYWQsIGFmdGVyUmVhZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJSZWFkKGVyLCBuYnl0ZXMpIHtcbiAgICB2YXIgZW9mO1xuICAgIGlmIChlcikge1xuICAgICAgZW9mID0gKGVyLmNvZGUgPT09IFNUQVRVU19DT0RFLkVPRik7XG4gICAgICBpZiAoIWVvZikge1xuICAgICAgICByZXR1cm4gc2VsZi5jbG9zZShoYW5kbGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjayhlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlb2YgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZW9mIHx8IChzaXplID09PSAwICYmIG5ieXRlcyA9PT0gMCkpXG4gICAgICByZXR1cm4gY2xvc2UoKTtcblxuICAgIGJ5dGVzUmVhZCArPSBuYnl0ZXM7XG4gICAgcG9zICs9IG5ieXRlcztcbiAgICBpZiAoc2l6ZSAhPT0gMCkge1xuICAgICAgaWYgKHBvcyA9PT0gc2l6ZSlcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVhZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIHNpemUsIGp1c3QgcmVhZCB1bnRpbCB3ZSBkb24ndCBnZXQgYnl0ZXMuXG4gICAgICBidWZmZXJzLnB1c2goYnVmZmVyLnNsaWNlKDAsIG5ieXRlcykpO1xuICAgICAgcmVhZCgpO1xuICAgIH1cbiAgfVxuICBhZnRlclJlYWQuX3dhbnRFT0ZFcnJvciA9IHRydWU7XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgc2VsZi5jbG9zZShoYW5kbGUsIGZ1bmN0aW9uKGVyKSB7XG4gICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBjb2xsZWN0ZWQgdGhlIGRhdGEgaW50byB0aGUgYnVmZmVycyBsaXN0LlxuICAgICAgICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIHBvcyk7XG4gICAgICB9IGVsc2UgaWYgKHBvcyA8IHNpemUpIHtcbiAgICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKDAsIHBvcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmNvZGluZylcbiAgICAgICAgYnVmZmVyID0gYnVmZmVyLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjayhlciwgYnVmZmVyKTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHdyaXRlQWxsKHNlbGYsIGhhbmRsZSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrXykge1xuICB2YXIgY2FsbGJhY2sgPSAodHlwZW9mIGNhbGxiYWNrXyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrXyA6IHVuZGVmaW5lZCk7XG5cbiAgc2VsZi53cml0ZURhdGEoaGFuZGxlLFxuICAgICAgICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgZnVuY3Rpb24od3JpdGVFcnIsIHdyaXR0ZW4pIHtcbiAgICBpZiAod3JpdGVFcnIpIHtcbiAgICAgIHJldHVybiBzZWxmLmNsb3NlKGhhbmRsZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHdyaXRlRXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAod3JpdHRlbiA9PT0gbGVuZ3RoKVxuICAgICAgc2VsZi5jbG9zZShoYW5kbGUsIGNhbGxiYWNrKTtcbiAgICBlbHNlIHtcbiAgICAgIG9mZnNldCArPSB3cml0dGVuO1xuICAgICAgbGVuZ3RoIC09IHdyaXR0ZW47XG4gICAgICBwb3NpdGlvbiArPSB3cml0dGVuO1xuICAgICAgd3JpdGVBbGwoc2VsZiwgaGFuZGxlLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG59XG5TRlRQU3RyZWFtLnByb3RvdHlwZS53cml0ZUZpbGUgPSBmdW5jdGlvbihwYXRoLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFja18pIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBjYWxsYmFjaztcbiAgaWYgKHR5cGVvZiBjYWxsYmFja18gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrXztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKVxuICAgIG9wdGlvbnMgPSB7IGVuY29kaW5nOiBvcHRpb25zLCBtb2RlOiA0MzgsIGZsYWc6ICd3JyB9O1xuICBlbHNlIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0geyBlbmNvZGluZzogJ3V0ZjgnLCBtb2RlOiA0MzggLyo9MDY2NiovLCBmbGFnOiAndycgfTtcbiAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBhcmd1bWVudHMnKTtcblxuICBpZiAob3B0aW9ucy5lbmNvZGluZyAmJiAhQnVmZmVyLmlzRW5jb2Rpbmcob3B0aW9ucy5lbmNvZGluZykpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgb3B0aW9ucy5lbmNvZGluZyk7XG5cbiAgdmFyIGZsYWcgPSBvcHRpb25zLmZsYWcgfHwgJ3cnO1xuICB0aGlzLm9wZW4ocGF0aCwgZmxhZywgb3B0aW9ucy5tb2RlLCBmdW5jdGlvbihvcGVuRXJyLCBoYW5kbGUpIHtcbiAgICBpZiAob3BlbkVycilcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG9wZW5FcnIpO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGJ1ZmZlciA9IChCdWZmZXIuaXNCdWZmZXIoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgPyBkYXRhXG4gICAgICAgICAgICAgICAgICAgIDogQnVmZmVyLmZyb20oJycgKyBkYXRhLCBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4JykpO1xuICAgICAgdmFyIHBvc2l0aW9uID0gKC9hLy50ZXN0KGZsYWcpID8gbnVsbCA6IDApO1xuXG4gICAgICAvLyBTRlRQdjMgZG9lcyBub3Qgc3VwcG9ydCB0aGUgbm90aW9uIG9mICdjdXJyZW50IHBvc2l0aW9uJ1xuICAgICAgLy8gKG51bGwgcG9zaXRpb24pLCBzbyB3ZSBqdXN0IGF0dGVtcHQgdG8gYXBwZW5kIHRvIHRoZSBlbmQgb2YgdGhlIGZpbGVcbiAgICAgIC8vIGluc3RlYWRcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICBzZWxmLmZzdGF0KGhhbmRsZSwgZnVuY3Rpb24gdHJ5U3RhdChlciwgc3QpIHtcbiAgICAgICAgICBpZiAoZXIpIHtcbiAgICAgICAgICAgIC8vIFRyeSBzdGF0KCkgZm9yIHNmdHAgc2VydmVycyB0aGF0IG1heSBub3Qgc3VwcG9ydCBmc3RhdCgpIGZvclxuICAgICAgICAgICAgLy8gd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICBzZWxmLnN0YXQocGF0aCwgZnVuY3Rpb24oZXJfLCBzdF8pIHtcbiAgICAgICAgICAgICAgaWYgKGVyXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNsb3NlKGhhbmRsZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdHJ5U3RhdChudWxsLCBzdF8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHdyaXRlQWxsKHNlbGYsIGhhbmRsZSwgYnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoLCBzdC5zaXplLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3cml0ZUFsbChzZWxmLCBoYW5kbGUsIGJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0pO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmFwcGVuZEZpbGUgPSBmdW5jdGlvbihwYXRoLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFja18pIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBjYWxsYmFjaztcbiAgaWYgKHR5cGVvZiBjYWxsYmFja18gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrXztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJylcbiAgICBvcHRpb25zID0geyBlbmNvZGluZzogb3B0aW9ucywgbW9kZTogNDM4LCBmbGFnOiAnYScgfTtcbiAgZWxzZSBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6ICd1dGY4JywgbW9kZTogNDM4IC8qPTA2NjYqLywgZmxhZzogJ2EnIH07XG4gIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgYXJndW1lbnRzJyk7XG5cbiAgaWYgKCFvcHRpb25zLmZsYWcpXG4gICAgb3B0aW9ucyA9IHV0aWwuX2V4dGVuZCh7IGZsYWc6ICdhJyB9LCBvcHRpb25zKTtcbiAgdGhpcy53cml0ZUZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uKHBhdGgsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB0aGlzLnN0YXQocGF0aCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgY2IgJiYgY2IoZXJyID8gZmFsc2UgOiB0cnVlKTtcbiAgfSk7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24oZmlsZW5hbWUsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIGZpbGVuYW1lXG4gICovXG4gIHZhciBmbmFtZWxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGZpbGVuYW1lKTtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBmbmFtZWxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5SRU1PVkU7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBmbmFtZWxlbiwgcCk7XG4gIGJ1Zi53cml0ZShmaWxlbmFtZSwgcCArPSA0LCBmbmFtZWxlbiwgJ3V0ZjgnKTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBSRU1PVkUnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLnJlbmFtZSA9IGZ1bmN0aW9uKG9sZFBhdGgsIG5ld1BhdGgsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIG9sZHBhdGhcbiAgICBzdHJpbmcgICAgIG5ld3BhdGhcbiAgKi9cbiAgdmFyIG9sZGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG9sZFBhdGgpO1xuICB2YXIgbmV3bGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgobmV3UGF0aCk7XG4gIHZhciBwID0gOTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgb2xkbGVuICsgNCArIG5ld2xlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5SRU5BTUU7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBvbGRsZW4sIHApO1xuICBidWYud3JpdGUob2xkUGF0aCwgcCArPSA0LCBvbGRsZW4sICd1dGY4Jyk7XG4gIHdyaXRlVUludDMyQkUoYnVmLCBuZXdsZW4sIHAgKz0gb2xkbGVuKTtcbiAgYnVmLndyaXRlKG5ld1BhdGgsIHAgKz0gNCwgbmV3bGVuLCAndXRmOCcpO1xuXG4gIHN0YXRlLnJlcXVlc3RzW3JlcWlkXSA9IHsgY2I6IGNiIH07XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IE91dGdvaW5nOiBXcml0aW5nIFJFTkFNRScpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUubWtkaXIgPSBmdW5jdGlvbihwYXRoLCBhdHRycywgY2IpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBmbGFncyA9IDA7XG4gIHZhciBhdHRyQnl0ZXMgPSAwO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAodHlwZW9mIGF0dHJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBhdHRycztcbiAgICBhdHRycyA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodHlwZW9mIGF0dHJzID09PSAnb2JqZWN0JyAmJiBhdHRycyAhPT0gbnVsbCkge1xuICAgIGF0dHJzID0gYXR0cnNUb0J5dGVzKGF0dHJzKTtcbiAgICBmbGFncyA9IGF0dHJzLmZsYWdzO1xuICAgIGF0dHJCeXRlcyA9IGF0dHJzLm5ieXRlcztcbiAgICBhdHRycyA9IGF0dHJzLmJ5dGVzO1xuICB9XG5cbiAgLypcbiAgICB1aW50MzIgICAgIGlkXG4gICAgc3RyaW5nICAgICBwYXRoXG4gICAgQVRUUlMgICAgICBhdHRyc1xuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIHBhdGhsZW4gKyA0ICsgYXR0ckJ5dGVzKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULk1LRElSO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG4gIHdyaXRlVUludDMyQkUoYnVmLCBmbGFncywgcCArPSBwYXRobGVuKTtcbiAgaWYgKGZsYWdzKSB7XG4gICAgcCArPSA0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhdHRycy5sZW5ndGg7IGkgPCBsZW47ICsraSlcbiAgICAgIGZvciAodmFyIGogPSAwLCBsZW4yID0gYXR0cnNbaV0ubGVuZ3RoOyBqIDwgbGVuMjsgKytqKVxuICAgICAgICBidWZbcCsrXSA9IGF0dHJzW2ldW2pdO1xuICB9XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgTUtESVInKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLnJtZGlyID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIC8qXG4gICAgdWludDMyICAgICBpZFxuICAgIHN0cmluZyAgICAgcGF0aFxuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIHBhdGhsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuUk1ESVI7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCBwKTtcbiAgYnVmLndyaXRlKHBhdGgsIHAgKz0gNCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBSTURJUicpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUucmVhZGRpciA9IGZ1bmN0aW9uKHdoZXJlLCBvcHRzLCBjYikge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gIHZhciBkb0ZpbHRlcjtcblxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcgfHwgb3B0cyA9PT0gbnVsbClcbiAgICBvcHRzID0ge307XG5cbiAgZG9GaWx0ZXIgPSAob3B0cyAmJiBvcHRzLmZ1bGwgPyBmYWxzZSA6IHRydWUpO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHdoZXJlKSAmJiB0eXBlb2Ygd2hlcmUgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBkaXJlY3RvcnkgaGFuZGxlIG9yIHBhdGgnKTtcblxuICBpZiAodHlwZW9mIHdoZXJlID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIHZhciBlID0gMDtcblxuICAgIHJldHVybiB0aGlzLm9wZW5kaXIod2hlcmUsIGZ1bmN0aW9uIHJlcmVhZChlcnIsIGhhbmRsZSkge1xuICAgICAgaWYgKGVycilcbiAgICAgICAgcmV0dXJuIGNiKGVycik7XG5cbiAgICAgIHNlbGYucmVhZGRpcihoYW5kbGUsIG9wdHMsIGZ1bmN0aW9uKGVyciwgbGlzdCkge1xuICAgICAgICB2YXIgZW9mID0gKGVyciAmJiBlcnIuY29kZSA9PT0gU1RBVFVTX0NPREUuRU9GKTtcblxuICAgICAgICBpZiAoZXJyICYmICFlb2YpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5jbG9zZShoYW5kbGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChlb2YpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5jbG9zZShoYW5kbGUsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICAgICAgICBjYih1bmRlZmluZWQsIGVudHJpZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyArK2ksICsrZSlcbiAgICAgICAgICBlbnRyaWVzW2VdID0gbGlzdFtpXTtcblxuICAgICAgICByZXJlYWQodW5kZWZpbmVkLCBoYW5kbGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIGhhbmRsZVxuICAqL1xuICB2YXIgaGFuZGxlbGVuID0gd2hlcmUubGVuZ3RoO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIGhhbmRsZWxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5SRUFERElSO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGFuZGxlbGVuLCBwKTtcbiAgd2hlcmUuY29weShidWYsIHAgKz0gNCk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0ge1xuICAgIGNiOiAoZG9GaWx0ZXJcbiAgICAgICAgID8gZnVuY3Rpb24oZXJyLCBsaXN0KSB7XG4gICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgIHJldHVybiBjYihlcnIpO1xuXG4gICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgIGlmIChsaXN0W2ldLmZpbGVuYW1lID09PSAnLicgfHwgbGlzdFtpXS5maWxlbmFtZSA9PT0gJy4uJylcbiAgICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgY2IodW5kZWZpbmVkLCBsaXN0KTtcbiAgICAgICAgICAgfVxuICAgICAgICAgOiBjYilcbiAgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgUkVBRERJUicpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuZnN0YXQgPSBmdW5jdGlvbihoYW5kbGUsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcbiAgZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYW5kbGUpKVxuICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlIGlzIG5vdCBhIEJ1ZmZlcicpO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIC8qXG4gICAgdWludDMyICAgICBpZFxuICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICovXG4gIHZhciBoYW5kbGVsZW4gPSBoYW5kbGUubGVuZ3RoO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIGhhbmRsZWxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5GU1RBVDtcbiAgdmFyIHJlcWlkID0gc3RhdGUud3JpdGVSZXFpZCA9IChzdGF0ZS53cml0ZVJlcWlkICsgMSkgJSBNQVhfUkVRSUQ7XG4gIHdyaXRlVUludDMyQkUoYnVmLCByZXFpZCwgNSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGhhbmRsZWxlbiwgcCk7XG4gIGhhbmRsZS5jb3B5KGJ1ZiwgcCArPSA0KTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBGU1RBVCcpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuc3RhdCA9IGZ1bmN0aW9uKHBhdGgsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIHBhdGhcbiAgKi9cbiAgdmFyIHBhdGhsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChwYXRoKTtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBwYXRobGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULlNUQVQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCBwKTtcbiAgYnVmLndyaXRlKHBhdGgsIHAgKz0gNCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBTVEFUJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5sc3RhdCA9IGZ1bmN0aW9uKHBhdGgsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIHBhdGhcbiAgKi9cbiAgdmFyIHBhdGhsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChwYXRoKTtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBwYXRobGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULkxTVEFUO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgTFNUQVQnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLm9wZW5kaXIgPSBmdW5jdGlvbihwYXRoLCBjYikge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cbiAgLypcbiAgICB1aW50MzIgICAgIGlkXG4gICAgc3RyaW5nICAgICBwYXRoXG4gICovXG4gIHZhciBwYXRobGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgocGF0aCk7XG4gIHZhciBwID0gOTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgcGF0aGxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5PUEVORElSO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgT1BFTkRJUicpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuc2V0c3RhdCA9IGZ1bmN0aW9uKHBhdGgsIGF0dHJzLCBjYikge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIGZsYWdzID0gMDtcbiAgdmFyIGF0dHJCeXRlcyA9IDA7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIGlmICh0eXBlb2YgYXR0cnMgPT09ICdvYmplY3QnICYmIGF0dHJzICE9PSBudWxsKSB7XG4gICAgYXR0cnMgPSBhdHRyc1RvQnl0ZXMoYXR0cnMpO1xuICAgIGZsYWdzID0gYXR0cnMuZmxhZ3M7XG4gICAgYXR0ckJ5dGVzID0gYXR0cnMubmJ5dGVzO1xuICAgIGF0dHJzID0gYXR0cnMuYnl0ZXM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGF0dHJzID09PSAnZnVuY3Rpb24nKVxuICAgIGNiID0gYXR0cnM7XG5cbiAgLypcbiAgICB1aW50MzIgICAgIGlkXG4gICAgc3RyaW5nICAgICBwYXRoXG4gICAgQVRUUlMgICAgICBhdHRyc1xuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIHBhdGhsZW4gKyA0ICsgYXR0ckJ5dGVzKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULlNFVFNUQVQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCBwKTtcbiAgYnVmLndyaXRlKHBhdGgsIHAgKz0gNCwgcGF0aGxlbiwgJ3V0ZjgnKTtcbiAgd3JpdGVVSW50MzJCRShidWYsIGZsYWdzLCBwICs9IHBhdGhsZW4pO1xuICBpZiAoZmxhZ3MpIHtcbiAgICBwICs9IDQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKVxuICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbjIgPSBhdHRyc1tpXS5sZW5ndGg7IGogPCBsZW4yOyArK2opXG4gICAgICAgIGJ1ZltwKytdID0gYXR0cnNbaV1bal07XG4gIH1cblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBTRVRTVEFUJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5mc2V0c3RhdCA9IGZ1bmN0aW9uKGhhbmRsZSwgYXR0cnMsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcbiAgZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYW5kbGUpKVxuICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlIGlzIG5vdCBhIEJ1ZmZlcicpO1xuXG4gIHZhciBmbGFncyA9IDA7XG4gIHZhciBhdHRyQnl0ZXMgPSAwO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAodHlwZW9mIGF0dHJzID09PSAnb2JqZWN0JyAmJiBhdHRycyAhPT0gbnVsbCkge1xuICAgIGF0dHJzID0gYXR0cnNUb0J5dGVzKGF0dHJzKTtcbiAgICBmbGFncyA9IGF0dHJzLmZsYWdzO1xuICAgIGF0dHJCeXRlcyA9IGF0dHJzLm5ieXRlcztcbiAgICBhdHRycyA9IGF0dHJzLmJ5dGVzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhdHRycyA9PT0gJ2Z1bmN0aW9uJylcbiAgICBjYiA9IGF0dHJzO1xuXG4gIC8qXG4gICAgdWludDMyICAgICBpZFxuICAgIHN0cmluZyAgICAgaGFuZGxlXG4gICAgQVRUUlMgICAgICBhdHRyc1xuICAqL1xuICB2YXIgaGFuZGxlbGVuID0gaGFuZGxlLmxlbmd0aDtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBoYW5kbGVsZW4gKyA0ICsgYXR0ckJ5dGVzKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULkZTRVRTVEFUO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGFuZGxlbGVuLCBwKTtcbiAgaGFuZGxlLmNvcHkoYnVmLCBwICs9IDQpO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgZmxhZ3MsIHAgKz0gaGFuZGxlbGVuKTtcbiAgaWYgKGZsYWdzKSB7XG4gICAgcCArPSA0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhdHRycy5sZW5ndGg7IGkgPCBsZW47ICsraSlcbiAgICAgIGZvciAodmFyIGogPSAwLCBsZW4yID0gYXR0cnNbaV0ubGVuZ3RoOyBqIDwgbGVuMjsgKytqKVxuICAgICAgICBidWZbcCsrXSA9IGF0dHJzW2ldW2pdO1xuICB9XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgRlNFVFNUQVQnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmZ1dGltZXMgPSBmdW5jdGlvbihoYW5kbGUsIGF0aW1lLCBtdGltZSwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuZnNldHN0YXQoaGFuZGxlLCB7XG4gICAgYXRpbWU6IHRvVW5peFRpbWVzdGFtcChhdGltZSksXG4gICAgbXRpbWU6IHRvVW5peFRpbWVzdGFtcChtdGltZSlcbiAgfSwgY2IpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLnV0aW1lcyA9IGZ1bmN0aW9uKHBhdGgsIGF0aW1lLCBtdGltZSwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuc2V0c3RhdChwYXRoLCB7XG4gICAgYXRpbWU6IHRvVW5peFRpbWVzdGFtcChhdGltZSksXG4gICAgbXRpbWU6IHRvVW5peFRpbWVzdGFtcChtdGltZSlcbiAgfSwgY2IpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmZjaG93biA9IGZ1bmN0aW9uKGhhbmRsZSwgdWlkLCBnaWQsIGNiKSB7XG4gIHJldHVybiB0aGlzLmZzZXRzdGF0KGhhbmRsZSwge1xuICAgIHVpZDogdWlkLFxuICAgIGdpZDogZ2lkXG4gIH0sIGNiKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5jaG93biA9IGZ1bmN0aW9uKHBhdGgsIHVpZCwgZ2lkLCBjYikge1xuICByZXR1cm4gdGhpcy5zZXRzdGF0KHBhdGgsIHtcbiAgICB1aWQ6IHVpZCxcbiAgICBnaWQ6IGdpZFxuICB9LCBjYik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuZmNobW9kID0gZnVuY3Rpb24oaGFuZGxlLCBtb2RlLCBjYikge1xuICByZXR1cm4gdGhpcy5mc2V0c3RhdChoYW5kbGUsIHtcbiAgICBtb2RlOiBtb2RlXG4gIH0sIGNiKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5jaG1vZCA9IGZ1bmN0aW9uKHBhdGgsIG1vZGUsIGNiKSB7XG4gIHJldHVybiB0aGlzLnNldHN0YXQocGF0aCwge1xuICAgIG1vZGU6IG1vZGVcbiAgfSwgY2IpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLnJlYWRsaW5rID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXG4gIC8qXG4gICAgdWludDMyICAgICBpZFxuICAgIHN0cmluZyAgICAgcGF0aFxuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIHBhdGhsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuUkVBRExJTks7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCBwKTtcbiAgYnVmLndyaXRlKHBhdGgsIHAgKz0gNCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7XG4gICAgY2I6IGZ1bmN0aW9uKGVyciwgbmFtZXMpIHtcbiAgICAgIGlmIChlcnIpXG4gICAgICAgIHJldHVybiBjYihlcnIpO1xuICAgICAgZWxzZSBpZiAoIW5hbWVzIHx8ICFuYW1lcy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoJ1Jlc3BvbnNlIG1pc3NpbmcgbGluayBpbmZvJykpO1xuICAgICAgY2IodW5kZWZpbmVkLCBuYW1lc1swXS5maWxlbmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBSRUFETElOSycpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUuc3ltbGluayA9IGZ1bmN0aW9uKHRhcmdldFBhdGgsIGxpbmtQYXRoLCBjYikge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cbiAgLypcbiAgICB1aW50MzIgICAgIGlkXG4gICAgc3RyaW5nICAgICBsaW5rcGF0aFxuICAgIHN0cmluZyAgICAgdGFyZ2V0cGF0aFxuICAqL1xuICB2YXIgbGlua2xlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGxpbmtQYXRoKTtcbiAgdmFyIHRhcmdldGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHRhcmdldFBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIGxpbmtsZW4gKyA0ICsgdGFyZ2V0bGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULlNZTUxJTks7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuXG4gIGlmICh0aGlzLl9pc09wZW5TU0gpIHtcbiAgICAvLyBPcGVuU1NIIGhhcyBsaW5rcGF0aCBhbmQgdGFyZ2V0cGF0aCBwb3NpdGlvbnMgc3dpdGNoZWRcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdGFyZ2V0bGVuLCBwKTtcbiAgICBidWYud3JpdGUodGFyZ2V0UGF0aCwgcCArPSA0LCB0YXJnZXRsZW4sICd1dGY4Jyk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGxpbmtsZW4sIHAgKz0gdGFyZ2V0bGVuKTtcbiAgICBidWYud3JpdGUobGlua1BhdGgsIHAgKz0gNCwgbGlua2xlbiwgJ3V0ZjgnKTtcbiAgfSBlbHNlIHtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbGlua2xlbiwgcCk7XG4gICAgYnVmLndyaXRlKGxpbmtQYXRoLCBwICs9IDQsIGxpbmtsZW4sICd1dGY4Jyk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIHRhcmdldGxlbiwgcCArPSBsaW5rbGVuKTtcbiAgICBidWYud3JpdGUodGFyZ2V0UGF0aCwgcCArPSA0LCB0YXJnZXRsZW4sICd1dGY4Jyk7XG4gIH1cblxuICBzdGF0ZS5yZXF1ZXN0c1tyZXFpZF0gPSB7IGNiOiBjYiB9O1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBTWU1MSU5LJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5yZWFscGF0aCA9IGZ1bmN0aW9uKHBhdGgsIGNiKSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICAvKlxuICAgIHVpbnQzMiAgICAgaWRcbiAgICBzdHJpbmcgICAgIHBhdGhcbiAgKi9cbiAgdmFyIHBhdGhsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChwYXRoKTtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBwYXRobGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVFVRVNULlJFQUxQQVRIO1xuICB2YXIgcmVxaWQgPSBzdGF0ZS53cml0ZVJlcWlkID0gKHN0YXRlLndyaXRlUmVxaWQgKyAxKSAlIE1BWF9SRVFJRDtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlcWlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0ge1xuICAgIGNiOiBmdW5jdGlvbihlcnIsIG5hbWVzKSB7XG4gICAgICBpZiAoZXJyKVxuICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgIGVsc2UgaWYgKCFuYW1lcyB8fCAhbmFtZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCdSZXNwb25zZSBtaXNzaW5nIHBhdGggaW5mbycpKTtcbiAgICAgIGNiKHVuZGVmaW5lZCwgbmFtZXNbMF0uZmlsZW5hbWUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgUkVBTFBBVEgnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcbi8vIGV4dGVuZGVkIHJlcXVlc3RzXG5TRlRQU3RyZWFtLnByb3RvdHlwZS5leHRfb3BlbnNzaF9yZW5hbWUgPSBmdW5jdGlvbihvbGRQYXRoLCBuZXdQYXRoLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG4gIGVsc2UgaWYgKCFzdGF0ZS5leHRlbnNpb25zWydwb3NpeC1yZW5hbWVAb3BlbnNzaC5jb20nXVxuICAgICAgICAgICB8fCBzdGF0ZS5leHRlbnNpb25zWydwb3NpeC1yZW5hbWVAb3BlbnNzaC5jb20nXS5pbmRleE9mKCcxJykgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBleHRlbmRlZCByZXF1ZXN0Jyk7XG5cbiAgLypcbiAgICB1aW50MzIgICAgaWRcbiAgICBzdHJpbmcgICAgXCJwb3NpeC1yZW5hbWVAb3BlbnNzaC5jb21cIlxuICAgIHN0cmluZyAgICBvbGRwYXRoXG4gICAgc3RyaW5nICAgIG5ld3BhdGhcbiAgKi9cbiAgdmFyIG9sZGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG9sZFBhdGgpO1xuICB2YXIgbmV3bGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgobmV3UGF0aCk7XG4gIHZhciBwID0gOTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgMjQgKyA0ICsgb2xkbGVuICsgNCArIG5ld2xlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGJ1Zi5sZW5ndGggLSA0LCAwKTtcbiAgYnVmWzRdID0gUkVRVUVTVC5FWFRFTkRFRDtcbiAgdmFyIHJlcWlkID0gc3RhdGUud3JpdGVSZXFpZCA9IChzdGF0ZS53cml0ZVJlcWlkICsgMSkgJSBNQVhfUkVRSUQ7XG4gIHdyaXRlVUludDMyQkUoYnVmLCByZXFpZCwgNSk7XG4gIHdyaXRlVUludDMyQkUoYnVmLCAyNCwgcCk7XG4gIGJ1Zi53cml0ZSgncG9zaXgtcmVuYW1lQG9wZW5zc2guY29tJywgcCArPSA0LCAyNCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG9sZGxlbiwgcCArPSAyNCk7XG4gIGJ1Zi53cml0ZShvbGRQYXRoLCBwICs9IDQsIG9sZGxlbiwgJ3V0ZjgnKTtcbiAgd3JpdGVVSW50MzJCRShidWYsIG5ld2xlbiwgcCArPSBvbGRsZW4pO1xuICBidWYud3JpdGUobmV3UGF0aCwgcCArPSA0LCBuZXdsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgcG9zaXgtcmVuYW1lQG9wZW5zc2guY29tJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5leHRfb3BlbnNzaF9zdGF0dmZzID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuICBlbHNlIGlmICghc3RhdGUuZXh0ZW5zaW9uc1snc3RhdHZmc0BvcGVuc3NoLmNvbSddXG4gICAgICAgICAgIHx8IHN0YXRlLmV4dGVuc2lvbnNbJ3N0YXR2ZnNAb3BlbnNzaC5jb20nXS5pbmRleE9mKCcyJykgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBleHRlbmRlZCByZXF1ZXN0Jyk7XG5cbiAgLypcbiAgICB1aW50MzIgICAgaWRcbiAgICBzdHJpbmcgICAgXCJzdGF0dmZzQG9wZW5zc2guY29tXCJcbiAgICBzdHJpbmcgICAgcGF0aFxuICAqL1xuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIDE5ICsgNCArIHBhdGhsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuRVhURU5ERUQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMTksIHApO1xuICBidWYud3JpdGUoJ3N0YXR2ZnNAb3BlbnNzaC5jb20nLCBwICs9IDQsIDE5LCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcGF0aGxlbiwgcCArPSAxOSk7XG4gIGJ1Zi53cml0ZShwYXRoLCBwICs9IDQsIHBhdGhsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0ge1xuICAgIGV4dGVuZGVkOiAnc3RhdHZmc0BvcGVuc3NoLmNvbScsXG4gICAgY2I6IGNiXG4gIH07XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IE91dGdvaW5nOiBXcml0aW5nIHN0YXR2ZnNAb3BlbnNzaC5jb20nKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmV4dF9vcGVuc3NoX2ZzdGF0dmZzID0gZnVuY3Rpb24oaGFuZGxlLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG4gIGVsc2UgaWYgKCFzdGF0ZS5leHRlbnNpb25zWydmc3RhdHZmc0BvcGVuc3NoLmNvbSddXG4gICAgICAgICAgIHx8IHN0YXRlLmV4dGVuc2lvbnNbJ2ZzdGF0dmZzQG9wZW5zc2guY29tJ10uaW5kZXhPZignMicpID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgZXh0ZW5kZWQgcmVxdWVzdCcpO1xuICBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGhhbmRsZSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdoYW5kbGUgaXMgbm90IGEgQnVmZmVyJyk7XG5cbiAgLypcbiAgICB1aW50MzIgICAgaWRcbiAgICBzdHJpbmcgICAgXCJmc3RhdHZmc0BvcGVuc3NoLmNvbVwiXG4gICAgc3RyaW5nICAgIGhhbmRsZVxuICAqL1xuICB2YXIgaGFuZGxlbGVuID0gaGFuZGxlLmxlbmd0aDtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyAyMCArIDQgKyBoYW5kbGVsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuRVhURU5ERUQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMjAsIHApO1xuICBidWYud3JpdGUoJ2ZzdGF0dmZzQG9wZW5zc2guY29tJywgcCArPSA0LCAyMCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGhhbmRsZWxlbiwgcCArPSAyMCk7XG4gIGJ1Zi53cml0ZShoYW5kbGUsIHAgKz0gNCwgaGFuZGxlbGVuLCAndXRmOCcpO1xuXG4gIHN0YXRlLnJlcXVlc3RzW3JlcWlkXSA9IHtcbiAgICBleHRlbmRlZDogJ2ZzdGF0dmZzQG9wZW5zc2guY29tJyxcbiAgICBjYjogY2JcbiAgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgZnN0YXR2ZnNAb3BlbnNzaC5jb20nKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmV4dF9vcGVuc3NoX2hhcmRsaW5rID0gZnVuY3Rpb24ob2xkUGF0aCwgbmV3UGF0aCwgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuICBlbHNlIGlmICghc3RhdGUuZXh0ZW5zaW9uc1snaGFyZGxpbmtAb3BlbnNzaC5jb20nXVxuICAgICAgICAgICB8fCBzdGF0ZS5leHRlbnNpb25zWydoYXJkbGlua0BvcGVuc3NoLmNvbSddLmluZGV4T2YoJzEnKSA9PT0gLTEpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGV4dGVuZGVkIHJlcXVlc3QnKTtcblxuICAvKlxuICAgIHVpbnQzMiAgICBpZFxuICAgIHN0cmluZyAgICBcImhhcmRsaW5rQG9wZW5zc2guY29tXCJcbiAgICBzdHJpbmcgICAgb2xkcGF0aFxuICAgIHN0cmluZyAgICBuZXdwYXRoXG4gICovXG4gIHZhciBvbGRsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChvbGRQYXRoKTtcbiAgdmFyIG5ld2xlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG5ld1BhdGgpO1xuICB2YXIgcCA9IDk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsgNCArIDIwICsgNCArIG9sZGxlbiArIDQgKyBuZXdsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuRVhURU5ERUQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMjAsIHApO1xuICBidWYud3JpdGUoJ2hhcmRsaW5rQG9wZW5zc2guY29tJywgcCArPSA0LCAyMCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG9sZGxlbiwgcCArPSAyMCk7XG4gIGJ1Zi53cml0ZShvbGRQYXRoLCBwICs9IDQsIG9sZGxlbiwgJ3V0ZjgnKTtcbiAgd3JpdGVVSW50MzJCRShidWYsIG5ld2xlbiwgcCArPSBvbGRsZW4pO1xuICBidWYud3JpdGUobmV3UGF0aCwgcCArPSA0LCBuZXdsZW4sICd1dGY4Jyk7XG5cbiAgc3RhdGUucmVxdWVzdHNbcmVxaWRdID0geyBjYjogY2IgfTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgaGFyZGxpbmtAb3BlbnNzaC5jb20nKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmV4dF9vcGVuc3NoX2ZzeW5jID0gZnVuY3Rpb24oaGFuZGxlLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG4gIGVsc2UgaWYgKCFzdGF0ZS5leHRlbnNpb25zWydmc3luY0BvcGVuc3NoLmNvbSddXG4gICAgICAgICAgIHx8IHN0YXRlLmV4dGVuc2lvbnNbJ2ZzeW5jQG9wZW5zc2guY29tJ10uaW5kZXhPZignMScpID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgZXh0ZW5kZWQgcmVxdWVzdCcpO1xuICBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGhhbmRsZSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdoYW5kbGUgaXMgbm90IGEgQnVmZmVyJyk7XG5cbiAgLypcbiAgICB1aW50MzIgICAgaWRcbiAgICBzdHJpbmcgICAgXCJmc3luY0BvcGVuc3NoLmNvbVwiXG4gICAgc3RyaW5nICAgIGhhbmRsZVxuICAqL1xuICB2YXIgaGFuZGxlbGVuID0gaGFuZGxlLmxlbmd0aDtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyAxNyArIDQgKyBoYW5kbGVsZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFUVVFU1QuRVhURU5ERUQ7XG4gIHZhciByZXFpZCA9IHN0YXRlLndyaXRlUmVxaWQgPSAoc3RhdGUud3JpdGVSZXFpZCArIDEpICUgTUFYX1JFUUlEO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVxaWQsIDUpO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMTcsIHApO1xuICBidWYud3JpdGUoJ2ZzeW5jQG9wZW5zc2guY29tJywgcCArPSA0LCAxNywgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGhhbmRsZWxlbiwgcCArPSAxNyk7XG4gIGJ1Zi53cml0ZShoYW5kbGUsIHAgKz0gNCwgaGFuZGxlbGVuLCAndXRmOCcpO1xuXG4gIHN0YXRlLnJlcXVlc3RzW3JlcWlkXSA9IHsgY2I6IGNiIH07XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUdbU0ZUUF06IE91dGdvaW5nOiBXcml0aW5nIGZzeW5jQG9wZW5zc2guY29tJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5cbi8vIHNlcnZlclxuU0ZUUFN0cmVhbS5wcm90b3R5cGUuc3RhdHVzID0gZnVuY3Rpb24oaWQsIGNvZGUsIG1lc3NhZ2UsIGxhbmcpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICBpZiAoIVNUQVRVU19DT0RFW2NvZGVdIHx8IHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBzdGF0dXMgY29kZTogJyArIGNvZGUpO1xuXG4gIG1lc3NhZ2UgfHwgKG1lc3NhZ2UgPSAnJyk7XG4gIGxhbmcgfHwgKGxhbmcgPSAnJyk7XG5cbiAgdmFyIG1zZ0xlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG1lc3NhZ2UpO1xuICB2YXIgbGFuZ0xlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGxhbmcpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyA0ICsgbXNnTGVuICsgNCArIGxhbmdMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFU1BPTlNFLlNUQVRVUztcbiAgd3JpdGVVSW50MzJCRShidWYsIGlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY29kZSwgOSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG1zZ0xlbiwgMTMpO1xuICBpZiAobXNnTGVuKVxuICAgIGJ1Zi53cml0ZShtZXNzYWdlLCAxNywgbXNnTGVuLCAndXRmOCcpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBsYW5nTGVuLCAxNyArIG1zZ0xlbik7XG4gIGlmIChsYW5nTGVuKVxuICAgIGJ1Zi53cml0ZShsYW5nLCAxNyArIG1zZ0xlbiArIDQsIGxhbmdMZW4sICdhc2NpaScpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBTVEFUVVMnKTtcbiAgcmV0dXJuIHRoaXMucHVzaChidWYpO1xufTtcblNGVFBTdHJlYW0ucHJvdG90eXBlLmhhbmRsZSA9IGZ1bmN0aW9uKGlkLCBoYW5kbGUpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYW5kbGUpKVxuICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlIGlzIG5vdCBhIEJ1ZmZlcicpO1xuXG4gIHZhciBoYW5kbGVMZW4gPSBoYW5kbGUubGVuZ3RoO1xuXG4gIGlmIChoYW5kbGVMZW4gPiAyNTYpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdoYW5kbGUgdG9vIGxhcmdlICg+IDI1NiBieXRlcyknKTtcblxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBoYW5kbGVMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFU1BPTlNFLkhBTkRMRTtcbiAgd3JpdGVVSW50MzJCRShidWYsIGlkLCA1KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGFuZGxlTGVuLCA5KTtcbiAgaWYgKGhhbmRsZUxlbilcbiAgICBoYW5kbGUuY29weShidWYsIDEzKTtcblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgSEFORExFJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24oaWQsIGRhdGEsIGVuY29kaW5nKSB7XG4gIGlmICghdGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXItb25seSBtZXRob2QgY2FsbGVkIGluIGNsaWVudCBtb2RlJyk7XG5cbiAgdmFyIGlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyKGRhdGEpO1xuXG4gIGlmICghaXNCdWZmZXIgJiYgdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBpcyBub3QgYSBCdWZmZXIgb3Igc3RyaW5nJyk7XG5cbiAgaWYgKCFpc0J1ZmZlcilcbiAgICBlbmNvZGluZyB8fCAoZW5jb2RpbmcgPSAndXRmOCcpO1xuXG4gIHZhciBkYXRhTGVuID0gKGlzQnVmZmVyID8gZGF0YS5sZW5ndGggOiBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhLCBlbmNvZGluZykpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQgKyAxICsgNCArIDQgKyBkYXRhTGVuKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYnVmLmxlbmd0aCAtIDQsIDApO1xuICBidWZbNF0gPSBSRVNQT05TRS5EQVRBO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBkYXRhTGVuLCA5KTtcbiAgaWYgKGRhdGFMZW4pIHtcbiAgICBpZiAoaXNCdWZmZXIpXG4gICAgICBkYXRhLmNvcHkoYnVmLCAxMyk7XG4gICAgZWxzZVxuICAgICAgYnVmLndyaXRlKGRhdGEsIDEzLCBkYXRhTGVuLCBlbmNvZGluZyk7XG4gIH1cblxuICB0aGlzLmRlYnVnKCdERUJVR1tTRlRQXTogT3V0Z29pbmc6IFdyaXRpbmcgREFUQScpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuU0ZUUFN0cmVhbS5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uKGlkLCBuYW1lcykge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShuYW1lcykpIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzICE9PSAnb2JqZWN0JyB8fCBuYW1lcyA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBFcnJvcignbmFtZXMgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheScpO1xuICAgIG5hbWVzID0gWyBuYW1lcyBdO1xuICB9XG5cbiAgdmFyIGNvdW50ID0gbmFtZXMubGVuZ3RoO1xuICB2YXIgbmFtZXNMZW4gPSAwO1xuICB2YXIgbmFtZUF0dHJzO1xuICB2YXIgYXR0cnMgPSBbXTtcbiAgdmFyIG5hbWU7XG4gIHZhciBmaWxlbmFtZTtcbiAgdmFyIGxvbmduYW1lO1xuICB2YXIgYXR0cjtcbiAgdmFyIGxlbjtcbiAgdmFyIGxlbjI7XG4gIHZhciBidWY7XG4gIHZhciBwO1xuICB2YXIgaTtcbiAgdmFyIGo7XG4gIHZhciBrO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgbmFtZSA9IG5hbWVzW2ldO1xuICAgIGZpbGVuYW1lID0gKCFuYW1lIHx8ICFuYW1lLmZpbGVuYW1lIHx8IHR5cGVvZiBuYW1lLmZpbGVuYW1lICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICA6IG5hbWUuZmlsZW5hbWUpO1xuICAgIG5hbWVzTGVuICs9IDQgKyBCdWZmZXIuYnl0ZUxlbmd0aChmaWxlbmFtZSk7XG4gICAgbG9uZ25hbWUgPSAoIW5hbWUgfHwgIW5hbWUubG9uZ25hbWUgfHwgdHlwZW9mIG5hbWUubG9uZ25hbWUgIT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgIDogbmFtZS5sb25nbmFtZSk7XG4gICAgbmFtZXNMZW4gKz0gNCArIEJ1ZmZlci5ieXRlTGVuZ3RoKGxvbmduYW1lKTtcblxuICAgIGlmICh0eXBlb2YgbmFtZS5hdHRycyA9PT0gJ29iamVjdCcgJiYgbmFtZS5hdHRycyAhPT0gbnVsbCkge1xuICAgICAgbmFtZUF0dHJzID0gYXR0cnNUb0J5dGVzKG5hbWUuYXR0cnMpO1xuICAgICAgbmFtZXNMZW4gKz0gNCArIG5hbWVBdHRycy5uYnl0ZXM7XG4gICAgICBhdHRycy5wdXNoKG5hbWVBdHRycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWVzTGVuICs9IDQ7XG4gICAgICBhdHRycy5wdXNoKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgbmFtZXNMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFU1BPTlNFLk5BTUU7XG4gIHdyaXRlVUludDMyQkUoYnVmLCBpZCwgNSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNvdW50LCA5KTtcblxuICBwID0gMTM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICBuYW1lID0gbmFtZXNbaV07XG5cbiAgICBmaWxlbmFtZSA9ICghbmFtZSB8fCAhbmFtZS5maWxlbmFtZSB8fCB0eXBlb2YgbmFtZS5maWxlbmFtZSAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgOiBuYW1lLmZpbGVuYW1lKTtcbiAgICBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChmaWxlbmFtZSk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGxlbiwgcCk7XG4gICAgcCArPSA0O1xuICAgIGlmIChsZW4pIHtcbiAgICAgIGJ1Zi53cml0ZShmaWxlbmFtZSwgcCwgbGVuLCAndXRmOCcpO1xuICAgICAgcCArPSBsZW47XG4gICAgfVxuXG4gICAgbG9uZ25hbWUgPSAoIW5hbWUgfHwgIW5hbWUubG9uZ25hbWUgfHwgdHlwZW9mIG5hbWUubG9uZ25hbWUgIT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgIDogbmFtZS5sb25nbmFtZSk7XG4gICAgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgobG9uZ25hbWUpO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCBsZW4sIHApO1xuICAgIHAgKz0gNDtcbiAgICBpZiAobGVuKSB7XG4gICAgICBidWYud3JpdGUobG9uZ25hbWUsIHAsIGxlbiwgJ3V0ZjgnKTtcbiAgICAgIHAgKz0gbGVuO1xuICAgIH1cblxuICAgIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoYXR0cikge1xuICAgICAgd3JpdGVVSW50MzJCRShidWYsIGF0dHIuZmxhZ3MsIHApO1xuICAgICAgcCArPSA0O1xuICAgICAgaWYgKGF0dHIuZmxhZ3MgJiYgYXR0ci5ieXRlcykge1xuICAgICAgICB2YXIgYnl0ZXMgPSBhdHRyLmJ5dGVzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBieXRlcy5sZW5ndGg7IGogPCBsZW47ICsrailcbiAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4yID0gYnl0ZXNbal0ubGVuZ3RoOyBrIDwgbGVuMjsgKytrKVxuICAgICAgICAgICAgYnVmW3ArK10gPSBieXRlc1tqXVtrXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd3JpdGVVSW50MzJCRShidWYsIDAsIHApO1xuICAgICAgcCArPSA0O1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBOQU1FJyk7XG4gIHJldHVybiB0aGlzLnB1c2goYnVmKTtcbn07XG5TRlRQU3RyZWFtLnByb3RvdHlwZS5hdHRycyA9IGZ1bmN0aW9uKGlkLCBhdHRycykge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIGlmICh0eXBlb2YgYXR0cnMgIT09ICdvYmplY3QnIHx8IGF0dHJzID09PSBudWxsKVxuICAgIHRocm93IG5ldyBFcnJvcignYXR0cnMgaXMgbm90IGFuIG9iamVjdCcpO1xuXG4gIHZhciBpbmZvID0gYXR0cnNUb0J5dGVzKGF0dHJzKTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgMSArIDQgKyA0ICsgaW5mby5uYnl0ZXMpO1xuICB2YXIgcCA9IDEzO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gIGJ1Zls0XSA9IFJFU1BPTlNFLkFUVFJTO1xuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaWQsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBpbmZvLmZsYWdzLCA5KTtcblxuICBpZiAoaW5mby5mbGFncyAmJiBpbmZvLmJ5dGVzKSB7XG4gICAgdmFyIGJ5dGVzID0gaW5mby5ieXRlcztcbiAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gYnl0ZXMubGVuZ3RoOyBqIDwgbGVuOyArK2opXG4gICAgICBmb3IgKHZhciBrID0gMCwgbGVuMiA9IGJ5dGVzW2pdLmxlbmd0aDsgayA8IGxlbjI7ICsraylcbiAgICAgICAgYnVmW3ArK10gPSBieXRlc1tqXVtrXTtcbiAgfVxuXG4gIHRoaXMuZGVidWcoJ0RFQlVHW1NGVFBdOiBPdXRnb2luZzogV3JpdGluZyBBVFRSUycpO1xuICByZXR1cm4gdGhpcy5wdXNoKGJ1Zik7XG59O1xuXG5mdW5jdGlvbiByZWFkQXR0cnMoYnVmLCBwLCBzdHJlYW0sIGNhbGxiYWNrKSB7XG4gIC8qXG4gICAgdWludDMyICAgZmxhZ3NcbiAgICB1aW50NjQgICBzaXplICAgICAgICAgICBwcmVzZW50IG9ubHkgaWYgZmxhZyBTU0hfRklMRVhGRVJfQVRUUl9TSVpFXG4gICAgdWludDMyICAgdWlkICAgICAgICAgICAgcHJlc2VudCBvbmx5IGlmIGZsYWcgU1NIX0ZJTEVYRkVSX0FUVFJfVUlER0lEXG4gICAgdWludDMyICAgZ2lkICAgICAgICAgICAgcHJlc2VudCBvbmx5IGlmIGZsYWcgU1NIX0ZJTEVYRkVSX0FUVFJfVUlER0lEXG4gICAgdWludDMyICAgcGVybWlzc2lvbnMgICAgcHJlc2VudCBvbmx5IGlmIGZsYWcgU1NIX0ZJTEVYRkVSX0FUVFJfUEVSTUlTU0lPTlNcbiAgICB1aW50MzIgICBhdGltZSAgICAgICAgICBwcmVzZW50IG9ubHkgaWYgZmxhZyBTU0hfRklMRVhGRVJfQUNNT0RUSU1FXG4gICAgdWludDMyICAgbXRpbWUgICAgICAgICAgcHJlc2VudCBvbmx5IGlmIGZsYWcgU1NIX0ZJTEVYRkVSX0FDTU9EVElNRVxuICAgIHVpbnQzMiAgIGV4dGVuZGVkX2NvdW50IHByZXNlbnQgb25seSBpZiBmbGFnIFNTSF9GSUxFWEZFUl9BVFRSX0VYVEVOREVEXG4gICAgc3RyaW5nICAgZXh0ZW5kZWRfdHlwZVxuICAgIHN0cmluZyAgIGV4dGVuZGVkX2RhdGFcbiAgICAuLi4gICAgICBtb3JlIGV4dGVuZGVkIGRhdGEgKGV4dGVuZGVkX3R5cGUgLSBleHRlbmRlZF9kYXRhIHBhaXJzKSxcbiAgICAgICAgICAgICAgIHNvIHRoYXQgbnVtYmVyIG9mIHBhaXJzIGVxdWFscyBleHRlbmRlZF9jb3VudFxuICAqL1xuICB2YXIgZmxhZ3MgPSByZWFkVUludDMyQkUoYnVmLCBwKTtcbiAgdmFyIGF0dHJzID0gbmV3IFN0YXRzKCk7XG5cbiAgcCArPSA0O1xuXG4gIGlmIChmbGFncyAmIEFUVFIuU0laRSkge1xuICAgIHZhciBzaXplID0gcmVhZFVJbnQ2NEJFKGJ1ZiwgcCwgc3RyZWFtLCBjYWxsYmFjayk7XG4gICAgaWYgKHNpemUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGF0dHJzLnNpemUgPSBzaXplO1xuICAgIHAgKz0gODtcbiAgfVxuICBpZiAoZmxhZ3MgJiBBVFRSLlVJREdJRCkge1xuICAgIHZhciB1aWQ7XG4gICAgdmFyIGdpZDtcbiAgICB1aWQgPSByZWFkSW50KGJ1ZiwgcCwgdGhpcywgY2FsbGJhY2spO1xuICAgIGlmICh1aWQgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGF0dHJzLnVpZCA9IHVpZDtcbiAgICBwICs9IDQ7XG4gICAgZ2lkID0gcmVhZEludChidWYsIHAsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICBpZiAoZ2lkID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBhdHRycy5naWQgPSBnaWQ7XG4gICAgcCArPSA0O1xuICB9XG4gIGlmIChmbGFncyAmIEFUVFIuUEVSTUlTU0lPTlMpIHtcbiAgICB2YXIgbW9kZSA9IHJlYWRJbnQoYnVmLCBwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgaWYgKG1vZGUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGF0dHJzLm1vZGUgPSBtb2RlO1xuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgYXR0cnMucGVybWlzc2lvbnMgPSBtb2RlO1xuICAgIHAgKz0gNDtcbiAgfVxuICBpZiAoZmxhZ3MgJiBBVFRSLkFDTU9EVElNRSkge1xuICAgIHZhciBhdGltZTtcbiAgICB2YXIgbXRpbWU7XG4gICAgYXRpbWUgPSByZWFkSW50KGJ1ZiwgcCwgdGhpcywgY2FsbGJhY2spO1xuICAgIGlmIChhdGltZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgYXR0cnMuYXRpbWUgPSBhdGltZTtcbiAgICBwICs9IDQ7XG4gICAgbXRpbWUgPSByZWFkSW50KGJ1ZiwgcCwgdGhpcywgY2FsbGJhY2spO1xuICAgIGlmIChtdGltZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgYXR0cnMubXRpbWUgPSBtdGltZTtcbiAgICBwICs9IDQ7XG4gIH1cbiAgaWYgKGZsYWdzICYgQVRUUi5FWFRFTkRFRCkge1xuICAgIC8vIFRPRE86IHJlYWQvcGFyc2UgZXh0ZW5kZWQgZGF0YVxuICAgIHZhciBleHRjb3VudCA9IHJlYWRJbnQoYnVmLCBwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgaWYgKGV4dGNvdW50ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBwICs9IDQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbjsgaSA8IGV4dGNvdW50OyArK2kpIHtcbiAgICAgIGxlbiA9IHJlYWRJbnQoYnVmLCBwLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgICBpZiAobGVuID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgcCArPSA0ICsgbGVuO1xuICAgIH1cbiAgfVxuXG4gIGJ1Zi5fcG9zID0gcDtcblxuICByZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIHJlYWRVSW50NjRCRShidWZmZXIsIHAsIHN0cmVhbSwgY2FsbGJhY2spIHtcbiAgaWYgKChidWZmZXIubGVuZ3RoIC0gcCkgPCA4KSB7XG4gICAgc3RyZWFtICYmIHN0cmVhbS5fY2xlYW51cChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHZhbCA9IDA7XG5cbiAgZm9yICh2YXIgbGVuID0gcCArIDg7IHAgPCBsZW47ICsrcCkge1xuICAgIHZhbCAqPSAyNTY7XG4gICAgdmFsICs9IGJ1ZmZlcltwXTtcbiAgfVxuXG4gIGJ1ZmZlci5fcG9zID0gcDtcblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBhdHRyc1RvQnl0ZXMoYXR0cnMpIHtcbiAgdmFyIGZsYWdzID0gMDtcbiAgdmFyIGF0dHJCeXRlcyA9IDA7XG4gIHZhciByZXQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuXG4gIGlmICh0eXBlb2YgYXR0cnMgIT09ICdvYmplY3QnIHx8IGF0dHJzID09PSBudWxsKVxuICAgIHJldHVybiB7IGZsYWdzOiBmbGFncywgbmJ5dGVzOiBhdHRyQnl0ZXMsIGJ5dGVzOiByZXQgfTtcblxuICBpZiAodHlwZW9mIGF0dHJzLnNpemUgPT09ICdudW1iZXInKSB7XG4gICAgZmxhZ3MgfD0gQVRUUi5TSVpFO1xuICAgIGF0dHJCeXRlcyArPSA4O1xuICAgIHZhciBzaXplQnl0ZXMgPSBuZXcgQXJyYXkoOCk7XG4gICAgdmFyIHZhbCA9IGF0dHJzLnNpemU7XG4gICAgZm9yIChpID0gNzsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHNpemVCeXRlc1tpXSA9IHZhbCAmIDB4RkY7XG4gICAgICB2YWwgLz0gMjU2O1xuICAgIH1cbiAgICByZXQucHVzaChzaXplQnl0ZXMpO1xuICB9XG4gIGlmICh0eXBlb2YgYXR0cnMudWlkID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgYXR0cnMuZ2lkID09PSAnbnVtYmVyJykge1xuICAgIGZsYWdzIHw9IEFUVFIuVUlER0lEO1xuICAgIGF0dHJCeXRlcyArPSA4O1xuICAgIHJldC5wdXNoKFsoYXR0cnMudWlkID4+IDI0KSAmIDB4RkYsIChhdHRycy51aWQgPj4gMTYpICYgMHhGRixcbiAgICAgICAgICAgICAgKGF0dHJzLnVpZCA+PiA4KSAmIDB4RkYsIGF0dHJzLnVpZCAmIDB4RkZdKTtcbiAgICByZXQucHVzaChbKGF0dHJzLmdpZCA+PiAyNCkgJiAweEZGLCAoYXR0cnMuZ2lkID4+IDE2KSAmIDB4RkYsXG4gICAgICAgICAgICAgIChhdHRycy5naWQgPj4gOCkgJiAweEZGLCBhdHRycy5naWQgJiAweEZGXSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBhdHRycy5wZXJtaXNzaW9ucyA9PT0gJ251bWJlcidcbiAgICAgIHx8IHR5cGVvZiBhdHRycy5wZXJtaXNzaW9ucyA9PT0gJ3N0cmluZydcbiAgICAgIHx8IHR5cGVvZiBhdHRycy5tb2RlID09PSAnbnVtYmVyJ1xuICAgICAgfHwgdHlwZW9mIGF0dHJzLm1vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG1vZGUgPSBtb2RlTnVtKGF0dHJzLm1vZGUgfHwgYXR0cnMucGVybWlzc2lvbnMpO1xuICAgIGZsYWdzIHw9IEFUVFIuUEVSTUlTU0lPTlM7XG4gICAgYXR0ckJ5dGVzICs9IDQ7XG4gICAgcmV0LnB1c2goWyhtb2RlID4+IDI0KSAmIDB4RkYsXG4gICAgICAgICAgICAgIChtb2RlID4+IDE2KSAmIDB4RkYsXG4gICAgICAgICAgICAgIChtb2RlID4+IDgpICYgMHhGRixcbiAgICAgICAgICAgICAgbW9kZSAmIDB4RkZdKTtcbiAgfVxuICBpZiAoKHR5cGVvZiBhdHRycy5hdGltZSA9PT0gJ251bWJlcicgfHwgaXNEYXRlKGF0dHJzLmF0aW1lKSlcbiAgICAgICYmICh0eXBlb2YgYXR0cnMubXRpbWUgPT09ICdudW1iZXInIHx8IGlzRGF0ZShhdHRycy5tdGltZSkpKSB7XG4gICAgdmFyIGF0aW1lID0gdG9Vbml4VGltZXN0YW1wKGF0dHJzLmF0aW1lKTtcbiAgICB2YXIgbXRpbWUgPSB0b1VuaXhUaW1lc3RhbXAoYXR0cnMubXRpbWUpO1xuXG4gICAgZmxhZ3MgfD0gQVRUUi5BQ01PRFRJTUU7XG4gICAgYXR0ckJ5dGVzICs9IDg7XG4gICAgcmV0LnB1c2goWyhhdGltZSA+PiAyNCkgJiAweEZGLCAoYXRpbWUgPj4gMTYpICYgMHhGRixcbiAgICAgICAgICAgICAgKGF0aW1lID4+IDgpICYgMHhGRiwgYXRpbWUgJiAweEZGXSk7XG4gICAgcmV0LnB1c2goWyhtdGltZSA+PiAyNCkgJiAweEZGLCAobXRpbWUgPj4gMTYpICYgMHhGRixcbiAgICAgICAgICAgICAgKG10aW1lID4+IDgpICYgMHhGRiwgbXRpbWUgJiAweEZGXSk7XG4gIH1cbiAgLy8gVE9ETzogZXh0ZW5kZWQgYXR0cmlidXRlc1xuXG4gIHJldHVybiB7IGZsYWdzOiBmbGFncywgbmJ5dGVzOiBhdHRyQnl0ZXMsIGJ5dGVzOiByZXQgfTtcbn1cblxuZnVuY3Rpb24gdG9Vbml4VGltZXN0YW1wKHRpbWUpIHtcbiAgaWYgKHR5cGVvZiB0aW1lID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odGltZSkpXG4gICAgcmV0dXJuIHRpbWU7XG4gIGVsc2UgaWYgKGlzRGF0ZSh0aW1lKSlcbiAgICByZXR1cm4gcGFyc2VJbnQodGltZS5nZXRUaW1lKCkgLyAxMDAwLCAxMCk7XG4gIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHBhcnNlIHRpbWU6ICcgKyB0aW1lKTtcbn1cblxuZnVuY3Rpb24gbW9kZU51bShtb2RlKSB7XG4gIGlmICh0eXBlb2YgbW9kZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG1vZGUpKVxuICAgIHJldHVybiBtb2RlO1xuICBlbHNlIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycpXG4gICAgcmV0dXJuIG1vZGVOdW0ocGFyc2VJbnQobW9kZSwgOCkpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwYXJzZSBtb2RlOiAnICsgbW9kZSk7XG59XG5cbnZhciBzdHJpbmdGbGFnTWFwID0ge1xuICAncic6IE9QRU5fTU9ERS5SRUFELFxuICAncisnOiBPUEVOX01PREUuUkVBRCB8IE9QRU5fTU9ERS5XUklURSxcbiAgJ3cnOiBPUEVOX01PREUuVFJVTkMgfCBPUEVOX01PREUuQ1JFQVQgfCBPUEVOX01PREUuV1JJVEUsXG4gICd3eCc6IE9QRU5fTU9ERS5UUlVOQyB8IE9QRU5fTU9ERS5DUkVBVCB8IE9QRU5fTU9ERS5XUklURSB8IE9QRU5fTU9ERS5FWENMLFxuICAneHcnOiBPUEVOX01PREUuVFJVTkMgfCBPUEVOX01PREUuQ1JFQVQgfCBPUEVOX01PREUuV1JJVEUgfCBPUEVOX01PREUuRVhDTCxcbiAgJ3crJzogT1BFTl9NT0RFLlRSVU5DIHwgT1BFTl9NT0RFLkNSRUFUIHwgT1BFTl9NT0RFLlJFQUQgfCBPUEVOX01PREUuV1JJVEUsXG4gICd3eCsnOiBPUEVOX01PREUuVFJVTkMgfCBPUEVOX01PREUuQ1JFQVQgfCBPUEVOX01PREUuUkVBRCB8IE9QRU5fTU9ERS5XUklURVxuICAgICAgICAgfCBPUEVOX01PREUuRVhDTCxcbiAgJ3h3Kyc6IE9QRU5fTU9ERS5UUlVOQyB8IE9QRU5fTU9ERS5DUkVBVCB8IE9QRU5fTU9ERS5SRUFEIHwgT1BFTl9NT0RFLldSSVRFXG4gICAgICAgICB8IE9QRU5fTU9ERS5FWENMLFxuICAnYSc6IE9QRU5fTU9ERS5BUFBFTkQgfCBPUEVOX01PREUuQ1JFQVQgfCBPUEVOX01PREUuV1JJVEUsXG4gICdheCc6IE9QRU5fTU9ERS5BUFBFTkQgfCBPUEVOX01PREUuQ1JFQVQgfCBPUEVOX01PREUuV1JJVEUgfCBPUEVOX01PREUuRVhDTCxcbiAgJ3hhJzogT1BFTl9NT0RFLkFQUEVORCB8IE9QRU5fTU9ERS5DUkVBVCB8IE9QRU5fTU9ERS5XUklURSB8IE9QRU5fTU9ERS5FWENMLFxuICAnYSsnOiBPUEVOX01PREUuQVBQRU5EIHwgT1BFTl9NT0RFLkNSRUFUIHwgT1BFTl9NT0RFLlJFQUQgfCBPUEVOX01PREUuV1JJVEUsXG4gICdheCsnOiBPUEVOX01PREUuQVBQRU5EIHwgT1BFTl9NT0RFLkNSRUFUIHwgT1BFTl9NT0RFLlJFQUQgfCBPUEVOX01PREUuV1JJVEVcbiAgICAgICAgIHwgT1BFTl9NT0RFLkVYQ0wsXG4gICd4YSsnOiBPUEVOX01PREUuQVBQRU5EIHwgT1BFTl9NT0RFLkNSRUFUIHwgT1BFTl9NT0RFLlJFQUQgfCBPUEVOX01PREUuV1JJVEVcbiAgICAgICAgIHwgT1BFTl9NT0RFLkVYQ0xcbn07XG52YXIgc3RyaW5nRmxhZ01hcEtleXMgPSBPYmplY3Qua2V5cyhzdHJpbmdGbGFnTWFwKTtcblxuZnVuY3Rpb24gc3RyaW5nVG9GbGFncyhzdHIpIHtcbiAgdmFyIGZsYWdzID0gc3RyaW5nRmxhZ01hcFtzdHJdO1xuICBpZiAoZmxhZ3MgIT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmxhZ3M7XG4gIHJldHVybiBudWxsO1xufVxuU0ZUUFN0cmVhbS5zdHJpbmdUb0ZsYWdzID0gc3RyaW5nVG9GbGFncztcblxuZnVuY3Rpb24gZmxhZ3NUb1N0cmluZyhmbGFncykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ0ZsYWdNYXBLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGtleSA9IHN0cmluZ0ZsYWdNYXBLZXlzW2ldO1xuICAgIGlmIChzdHJpbmdGbGFnTWFwW2tleV0gPT09IGZsYWdzKVxuICAgICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblNGVFBTdHJlYW0uZmxhZ3NUb1N0cmluZyA9IGZsYWdzVG9TdHJpbmc7XG5cbmZ1bmN0aW9uIFN0YXRzKGluaXRpYWwpIHtcbiAgdGhpcy5tb2RlID0gKGluaXRpYWwgJiYgaW5pdGlhbC5tb2RlKTtcbiAgdGhpcy5wZXJtaXNzaW9ucyA9IHRoaXMubW9kZTsgLy8gYmFja3dhcmRzIGNvbXBhdGlibGl0eVxuICB0aGlzLnVpZCA9IChpbml0aWFsICYmIGluaXRpYWwudWlkKTtcbiAgdGhpcy5naWQgPSAoaW5pdGlhbCAmJiBpbml0aWFsLmdpZCk7XG4gIHRoaXMuc2l6ZSA9IChpbml0aWFsICYmIGluaXRpYWwuc2l6ZSk7XG4gIHRoaXMuYXRpbWUgPSAoaW5pdGlhbCAmJiBpbml0aWFsLmF0aW1lKTtcbiAgdGhpcy5tdGltZSA9IChpbml0aWFsICYmIGluaXRpYWwubXRpbWUpO1xufVxuU3RhdHMucHJvdG90eXBlLl9jaGVja01vZGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gIHJldHVybiAoKHRoaXMubW9kZSAmIGNvbnN0YW50cy5TX0lGTVQpID09PSBwcm9wZXJ0eSk7XG59O1xuU3RhdHMucHJvdG90eXBlLmlzRGlyZWN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jaGVja01vZGVQcm9wZXJ0eShjb25zdGFudHMuU19JRkRJUik7XG59O1xuU3RhdHMucHJvdG90eXBlLmlzRmlsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoY29uc3RhbnRzLlNfSUZSRUcpO1xufTtcblN0YXRzLnByb3RvdHlwZS5pc0Jsb2NrRGV2aWNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jaGVja01vZGVQcm9wZXJ0eShjb25zdGFudHMuU19JRkJMSyk7XG59O1xuU3RhdHMucHJvdG90eXBlLmlzQ2hhcmFjdGVyRGV2aWNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jaGVja01vZGVQcm9wZXJ0eShjb25zdGFudHMuU19JRkNIUik7XG59O1xuU3RhdHMucHJvdG90eXBlLmlzU3ltYm9saWNMaW5rID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jaGVja01vZGVQcm9wZXJ0eShjb25zdGFudHMuU19JRkxOSyk7XG59O1xuU3RhdHMucHJvdG90eXBlLmlzRklGTyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoY29uc3RhbnRzLlNfSUZJRk8pO1xufTtcblN0YXRzLnByb3RvdHlwZS5pc1NvY2tldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY2hlY2tNb2RlUHJvcGVydHkoY29uc3RhbnRzLlNfSUZTT0NLKTtcbn07XG5TRlRQU3RyZWFtLlN0YXRzID0gU3RhdHM7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBSZWFkU3RyZWFtL1dyaXRlU3RyZWFtLXJlbGF0ZWRcbnZhciBmc0NvbXBhdCA9IHJlcXVpcmUoJy4vbm9kZS1mcy1jb21wYXQnKTtcbnZhciB2YWxpZGF0ZU51bWJlciA9IGZzQ29tcGF0LnZhbGlkYXRlTnVtYmVyO1xudmFyIGRlc3Ryb3lJbXBsID0gZnNDb21wYXQuZGVzdHJveUltcGw7XG52YXIgRVJSX09VVF9PRl9SQU5HRSA9IGZzQ29tcGF0LkVSUl9PVVRfT0ZfUkFOR0U7XG52YXIgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBmc0NvbXBhdC5FUlJfSU5WQUxJRF9BUkdfVFlQRTtcblxudmFyIGtNaW5Qb29sU3BhY2UgPSAxMjg7XG5cbnZhciBwb29sO1xuLy8gSXQgY2FuIGhhcHBlbiB0aGF0IHdlIGV4cGVjdCB0byByZWFkIGEgbGFyZ2UgY2h1bmsgb2YgZGF0YSwgYW5kIHJlc2VydmVcbi8vIGEgbGFyZ2UgY2h1bmsgb2YgdGhlIHBvb2wgYWNjb3JkaW5nbHksIGJ1dCB0aGUgcmVhZCgpIGNhbGwgb25seSBmaWxsZWRcbi8vIGEgcG9ydGlvbiBvZiBpdC4gSWYgYSBjb25jdXJyZW50bHkgZXhlY3V0aW5nIHJlYWQoKSB0aGVuIHVzZXMgdGhlIHNhbWUgcG9vbCxcbi8vIHRoZSBcInJlc2VydmVkXCIgcG9ydGlvbiBjYW5ub3QgYmUgdXNlZCwgc28gd2UgYWxsb3cgaXQgdG8gYmUgcmUtdXNlZCBhcyBhXG4vLyBuZXcgcG9vbCBsYXRlci5cbnZhciBwb29sRnJhZ21lbnRzID0gW107XG5cbmZ1bmN0aW9uIGFsbG9jTmV3UG9vbChwb29sU2l6ZSkge1xuICBpZiAocG9vbEZyYWdtZW50cy5sZW5ndGggPiAwKVxuICAgIHBvb2wgPSBwb29sRnJhZ21lbnRzLnBvcCgpO1xuICBlbHNlXG4gICAgcG9vbCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShwb29sU2l6ZSk7XG4gIHBvb2wudXNlZCA9IDA7XG59XG5cbi8vIENoZWNrIHRoZSBgdGhpcy5zdGFydGAgYW5kIGB0aGlzLmVuZGAgb2Ygc3RyZWFtLlxuZnVuY3Rpb24gY2hlY2tQb3NpdGlvbihwb3MsIG5hbWUpIHtcbiAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihwb3MpKSB7XG4gICAgdmFsaWRhdGVOdW1iZXIocG9zLCBuYW1lKTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocG9zKSlcbiAgICAgIHRocm93IG5ldyBFUlJfT1VUX09GX1JBTkdFKG5hbWUsICdhbiBpbnRlZ2VyJywgcG9zKTtcbiAgICB0aHJvdyBuZXcgRVJSX09VVF9PRl9SQU5HRShuYW1lLCAnPj0gMCBhbmQgPD0gMiAqKiA1MyAtIDEnLCBwb3MpO1xuICB9XG4gIGlmIChwb3MgPCAwKVxuICAgIHRocm93IG5ldyBFUlJfT1VUX09GX1JBTkdFKG5hbWUsICc+PSAwIGFuZCA8PSAyICoqIDUzIC0gMScsIHBvcyk7XG59XG5cbmZ1bmN0aW9uIHJvdW5kVXBUb011bHRpcGxlT2Y4KG4pIHtcbiAgcmV0dXJuIChuICsgNykgJiB+NzsgIC8vIEFsaWduIHRvIDggYnl0ZSBib3VuZGFyeS5cbn1cblxuZnVuY3Rpb24gUmVhZFN0cmVhbShzZnRwLCBwYXRoLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpXG4gICAgb3B0aW9ucyA9IHt9O1xuICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfTtcbiAgZWxzZSBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJvcHRpb25zXCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QnKTtcbiAgZWxzZVxuICAgIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMpO1xuXG4gIC8vIEEgbGl0dGxlIGJpdCBiaWdnZXIgYnVmZmVyIGFuZCB3YXRlciBtYXJrcyBieSBkZWZhdWx0XG4gIGlmIChvcHRpb25zLmhpZ2hXYXRlck1hcmsgPT09IHVuZGVmaW5lZClcbiAgICBvcHRpb25zLmhpZ2hXYXRlck1hcmsgPSA2NCAqIDEwMjQ7XG5cbiAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXQgZG8gbm90IGVtaXQgY2xvc2Ugb24gZGVzdHJveS5cbiAgb3B0aW9ucy5lbWl0Q2xvc2UgPSBmYWxzZTtcblxuICBSZWFkYWJsZVN0cmVhbS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMuZmxhZ3MgPSBvcHRpb25zLmZsYWdzID09PSB1bmRlZmluZWQgPyAncicgOiBvcHRpb25zLmZsYWdzO1xuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgPT09IHVuZGVmaW5lZCA/IDBvNjY2IDogb3B0aW9ucy5tb2RlO1xuXG4gIHRoaXMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICB0aGlzLmVuZCA9IG9wdGlvbnMuZW5kO1xuICB0aGlzLmF1dG9DbG9zZSA9IG9wdGlvbnMuYXV0b0Nsb3NlID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5hdXRvQ2xvc2U7XG4gIHRoaXMucG9zID0gMDtcbiAgdGhpcy5ieXRlc1JlYWQgPSAwO1xuICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuXG4gIHRoaXMuaGFuZGxlID0gb3B0aW9ucy5oYW5kbGUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvcHRpb25zLmhhbmRsZTtcbiAgdGhpcy5zZnRwID0gc2Z0cDtcbiAgdGhpcy5fb3BlbmluZyA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjaGVja1Bvc2l0aW9uKHRoaXMuc3RhcnQsICdzdGFydCcpO1xuXG4gICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0O1xuICB9XG5cbiAgaWYgKHRoaXMuZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmVuZCA9IEluZmluaXR5O1xuICB9IGVsc2UgaWYgKHRoaXMuZW5kICE9PSBJbmZpbml0eSkge1xuICAgIGNoZWNrUG9zaXRpb24odGhpcy5lbmQsICdlbmQnKTtcblxuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zdGFydCA+IHRoaXMuZW5kKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX09VVF9PRl9SQU5HRShcbiAgICAgICAgJ3N0YXJ0JyxcbiAgICAgICAgYDw9IFwiZW5kXCIgKGhlcmU6ICR7dGhpcy5lbmR9KWAsXG4gICAgICAgIHRoaXMuc3RhcnRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuYXV0b0Nsb3NlKVxuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gIH0pO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMuaGFuZGxlKSlcbiAgICB0aGlzLm9wZW4oKTtcbn1cbmluaGVyaXRzKFJlYWRTdHJlYW0sIFJlYWRhYmxlU3RyZWFtKTtcblxuUmVhZFN0cmVhbS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fb3BlbmluZylcbiAgICByZXR1cm47XG5cbiAgdGhpcy5fb3BlbmluZyA9IHRydWU7XG5cbiAgdGhpcy5zZnRwLm9wZW4odGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIChlciwgaGFuZGxlKSA9PiB7XG4gICAgdGhpcy5fb3BlbmluZyA9IGZhbHNlO1xuXG4gICAgaWYgKGVyKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlKVxuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZSA9IGhhbmRsZTtcbiAgICB0aGlzLmVtaXQoJ29wZW4nLCBoYW5kbGUpO1xuICAgIHRoaXMuZW1pdCgncmVhZHknKTtcbiAgICAvLyBzdGFydCB0aGUgZmxvdyBvZiBkYXRhLlxuICAgIHRoaXMucmVhZCgpO1xuICB9KTtcbn07XG5cblJlYWRTdHJlYW0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24obikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLmhhbmRsZSkpIHtcbiAgICByZXR1cm4gdGhpcy5vbmNlKCdvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9yZWFkKG4pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gWFhYOiBzYWZlIHRvIHJlbW92ZSB0aGlzP1xuICBpZiAodGhpcy5kZXN0cm95ZWQpXG4gICAgcmV0dXJuO1xuXG4gIGlmICghcG9vbCB8fCBwb29sLmxlbmd0aCAtIHBvb2wudXNlZCA8IGtNaW5Qb29sU3BhY2UpIHtcbiAgICAvLyBkaXNjYXJkIHRoZSBvbGQgcG9vbC5cbiAgICBhbGxvY05ld1Bvb2wodGhpcy5yZWFkYWJsZUhpZ2hXYXRlck1hcmtcbiAgICAgICAgICAgICAgICAgfHwgdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxuXG4gIC8vIEdyYWIgYW5vdGhlciByZWZlcmVuY2UgdG8gdGhlIHBvb2wgaW4gdGhlIGNhc2UgdGhhdCB3aGlsZSB3ZSdyZVxuICAvLyBpbiB0aGUgdGhyZWFkIHBvb2wgYW5vdGhlciByZWFkKCkgZmluaXNoZXMgdXAgdGhlIHBvb2wsIGFuZFxuICAvLyBhbGxvY2F0ZXMgYSBuZXcgb25lLlxuICB2YXIgdGhpc1Bvb2wgPSBwb29sO1xuICB2YXIgdG9SZWFkID0gTWF0aC5taW4ocG9vbC5sZW5ndGggLSBwb29sLnVzZWQsIG4pO1xuICB2YXIgc3RhcnQgPSBwb29sLnVzZWQ7XG5cbiAgaWYgKHRoaXMuZW5kICE9PSB1bmRlZmluZWQpXG4gICAgdG9SZWFkID0gTWF0aC5taW4odGhpcy5lbmQgLSB0aGlzLnBvcyArIDEsIHRvUmVhZCk7XG5cbiAgLy8gQWxyZWFkeSByZWFkIGV2ZXJ5dGhpbmcgd2Ugd2VyZSBzdXBwb3NlZCB0byByZWFkIVxuICAvLyB0cmVhdCBhcyBFT0YuXG4gIGlmICh0b1JlYWQgPD0gMClcbiAgICByZXR1cm4gdGhpcy5wdXNoKG51bGwpO1xuXG4gIC8vIHRoZSBhY3R1YWwgcmVhZC5cbiAgdGhpcy5zZnRwLnJlYWREYXRhKHRoaXMuaGFuZGxlLFxuICAgICAgICAgICAgICAgICAgICAgcG9vbCxcbiAgICAgICAgICAgICAgICAgICAgIHBvb2wudXNlZCxcbiAgICAgICAgICAgICAgICAgICAgIHRvUmVhZCxcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zLFxuICAgICAgICAgICAgICAgICAgICAgKGVyLCBieXRlc1JlYWQpID0+IHtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcik7XG4gICAgICBpZiAodGhpcy5hdXRvQ2xvc2UpXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgYiA9IG51bGw7XG5cbiAgICAvLyBOb3cgdGhhdCB3ZSBrbm93IGhvdyBtdWNoIGRhdGEgd2UgaGF2ZSBhY3R1YWxseSByZWFkLCByZS13aW5kIHRoZVxuICAgIC8vICd1c2VkJyBmaWVsZCBpZiB3ZSBjYW4sIGFuZCBvdGhlcndpc2UgYWxsb3cgdGhlIHJlbWFpbmRlciBvZiBvdXJcbiAgICAvLyByZXNlcnZhdGlvbiB0byBiZSB1c2VkIGFzIGEgbmV3IHBvb2wgbGF0ZXIuXG4gICAgaWYgKHN0YXJ0ICsgdG9SZWFkID09PSB0aGlzUG9vbC51c2VkICYmIHRoaXNQb29sID09PSBwb29sKSB7XG4gICAgICB2YXIgbmV3VXNlZCA9IHRoaXNQb29sLnVzZWQgKyBieXRlc1JlYWQgLSB0b1JlYWQ7XG4gICAgICB0aGlzUG9vbC51c2VkID0gcm91bmRVcFRvTXVsdGlwbGVPZjgobmV3VXNlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJvdW5kIGRvd24gdG8gdGhlIG5leHQgbG93ZXN0IG11bHRpcGxlIG9mIDggdG8gZW5zdXJlIHRoZSBuZXcgcG9vbFxuICAgICAgLy8gZnJhZ21lbnQgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgYXJlIGFsaWduZWQgdG8gYW4gOCBieXRlIGJvdW5kYXJ5LlxuICAgICAgdmFyIGFsaWduZWRFbmQgPSAoc3RhcnQgKyB0b1JlYWQpICYgfjc7XG4gICAgICB2YXIgYWxpZ25lZFN0YXJ0ID0gcm91bmRVcFRvTXVsdGlwbGVPZjgoc3RhcnQgKyBieXRlc1JlYWQpO1xuICAgICAgaWYgKGFsaWduZWRFbmQgLSBhbGlnbmVkU3RhcnQgPj0ga01pblBvb2xTcGFjZSlcbiAgICAgICAgcG9vbEZyYWdtZW50cy5wdXNoKHRoaXNQb29sLnNsaWNlKGFsaWduZWRTdGFydCwgYWxpZ25lZEVuZCkpO1xuICAgIH1cblxuICAgIGlmIChieXRlc1JlYWQgPiAwKSB7XG4gICAgICB0aGlzLmJ5dGVzUmVhZCArPSBieXRlc1JlYWQ7XG4gICAgICBiID0gdGhpc1Bvb2wuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXNSZWFkKTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlIHRoZSBwb29sIHBvc2l0aW9ucywgYW5kIGludGVybmFsIHBvc2l0aW9uIGZvciByZWFkaW5nLlxuICAgIHRoaXMucG9zICs9IGJ5dGVzUmVhZDtcblxuICAgIHRoaXMucHVzaChiKTtcbiAgfSk7XG5cbiAgcG9vbC51c2VkID0gcm91bmRVcFRvTXVsdGlwbGVPZjgocG9vbC51c2VkICsgdG9SZWFkKTtcbn07XG5cbmlmICh0eXBlb2YgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgIT09ICdmdW5jdGlvbicpXG4gIFJlYWRTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbDtcblxuUmVhZFN0cmVhbS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbihlcnIsIGNiKSB7XG4gIGlmICh0aGlzLl9vcGVuaW5nICYmICFCdWZmZXIuaXNCdWZmZXIodGhpcy5oYW5kbGUpKSB7XG4gICAgdGhpcy5vbmNlKCdvcGVuJywgY2xvc2VTdHJlYW0uYmluZChudWxsLCB0aGlzLCBjYiwgZXJyKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2xvc2VTdHJlYW0odGhpcywgY2IsIGVycik7XG4gIHRoaXMuaGFuZGxlID0gbnVsbDtcbiAgdGhpcy5fb3BlbmluZyA9IGZhbHNlO1xufTtcblxuZnVuY3Rpb24gY2xvc2VTdHJlYW0oc3RyZWFtLCBjYiwgZXJyKSB7XG4gIGlmICghc3RyZWFtLmhhbmRsZSlcbiAgICByZXR1cm4gb25jbG9zZSgpO1xuXG4gIHN0cmVhbS5zZnRwLmNsb3NlKHN0cmVhbS5oYW5kbGUsIG9uY2xvc2UpO1xuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoZXIpIHtcbiAgICBlciA9IGVyIHx8IGVycjtcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLmNsb3NlZCA9IHRydWU7XG4gICAgaWYgKCFlcilcbiAgICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICB9XG59XG5cblJlYWRTdHJlYW0ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oY2IpIHtcbiAgdGhpcy5kZXN0cm95KG51bGwsIGNiKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkU3RyZWFtLnByb3RvdHlwZSwgJ3BlbmRpbmcnLCB7XG4gIGdldCgpIHsgcmV0dXJuIHRoaXMuaGFuZGxlID09PSBudWxsOyB9LFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBXcml0ZVN0cmVhbShzZnRwLCBwYXRoLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpXG4gICAgb3B0aW9ucyA9IHt9O1xuICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfTtcbiAgZWxzZSBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJvcHRpb25zXCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QnKTtcbiAgZWxzZVxuICAgIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMpO1xuXG4gIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0IGRvIG5vdCBlbWl0IGNsb3NlIG9uIGRlc3Ryb3kuXG4gIG9wdGlvbnMuZW1pdENsb3NlID0gZmFsc2U7XG5cbiAgV3JpdGFibGVTdHJlYW0uY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLmZsYWdzID0gb3B0aW9ucy5mbGFncyA9PT0gdW5kZWZpbmVkID8gJ3cnIDogb3B0aW9ucy5mbGFncztcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlID09PSB1bmRlZmluZWQgPyAwbzY2NiA6IG9wdGlvbnMubW9kZTtcblxuICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgdGhpcy5hdXRvQ2xvc2UgPSBvcHRpb25zLmF1dG9DbG9zZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuYXV0b0Nsb3NlO1xuICB0aGlzLnBvcyA9IDA7XG4gIHRoaXMuYnl0ZXNXcml0dGVuID0gMDtcbiAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcblxuICB0aGlzLmhhbmRsZSA9IG9wdGlvbnMuaGFuZGxlID09PSB1bmRlZmluZWQgPyBudWxsIDogb3B0aW9ucy5oYW5kbGU7XG4gIHRoaXMuc2Z0cCA9IHNmdHA7XG4gIHRoaXMuX29wZW5pbmcgPSBmYWxzZTtcblxuICBpZiAodGhpcy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY2hlY2tQb3NpdGlvbih0aGlzLnN0YXJ0LCAnc3RhcnQnKTtcblxuICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmVuY29kaW5nKVxuICAgIHRoaXMuc2V0RGVmYXVsdEVuY29kaW5nKG9wdGlvbnMuZW5jb2RpbmcpO1xuXG4gIC8vIE5vZGUgdjYueCBvbmx5XG4gIHRoaXMub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmZpbmFsQ2FsbGVkKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0aGlzLmF1dG9DbG9zZSlcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICB9KTtcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLmhhbmRsZSkpXG4gICAgdGhpcy5vcGVuKCk7XG59XG5pbmhlcml0cyhXcml0ZVN0cmVhbSwgV3JpdGFibGVTdHJlYW0pO1xuXG5Xcml0ZVN0cmVhbS5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24oY2IpIHtcbiAgaWYgKHRoaXMuYXV0b0Nsb3NlKVxuICAgIHRoaXMuZGVzdHJveSgpO1xuICBjYigpO1xufTtcblxuV3JpdGVTdHJlYW0ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX29wZW5pbmcpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuX29wZW5pbmcgPSB0cnVlO1xuXG4gIHRoaXMuc2Z0cC5vcGVuKHRoaXMucGF0aCwgdGhpcy5mbGFncywgdGhpcy5tb2RlLCAoZXIsIGhhbmRsZSkgPT4ge1xuICAgIHRoaXMuX29wZW5pbmcgPSBmYWxzZTtcblxuICAgIGlmIChlcikge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSlcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGUgPSBoYW5kbGU7XG5cbiAgICB2YXIgdHJ5QWdhaW4gPSAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIFRyeSBjaG1vZCgpIGZvciBzZnRwIHNlcnZlcnMgdGhhdCBtYXkgbm90IHN1cHBvcnQgZmNobW9kKCkgZm9yXG4gICAgICAgIC8vIHdoYXRldmVyIHJlYXNvblxuICAgICAgICB0aGlzLnNmdHAuY2htb2QodGhpcy5wYXRoLCB0aGlzLm1vZGUsIChlcnJfKSA9PiB7XG4gICAgICAgICAgdHJ5QWdhaW4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gU0ZUUHYzIHJlcXVpcmVzIGFic29sdXRlIG9mZnNldHMsIG5vIG1hdHRlciB0aGUgb3BlbiBmbGFnIHVzZWRcbiAgICAgIGlmICh0aGlzLmZsYWdzWzBdID09PSAnYScpIHtcbiAgICAgICAgdmFyIHRyeVN0YXQgPSAoZXJyLCBzdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIC8vIFRyeSBzdGF0KCkgZm9yIHNmdHAgc2VydmVycyB0aGF0IG1heSBub3Qgc3VwcG9ydCBmc3RhdCgpIGZvclxuICAgICAgICAgICAgLy8gd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICB0aGlzLnNmdHAuc3RhdCh0aGlzLnBhdGgsIChlcnJfLCBzdF8pID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycl8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdHJ5U3RhdChudWxsLCBzdF8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5wb3MgPSBzdC5zaXplO1xuICAgICAgICAgIHRoaXMuZW1pdCgnb3BlbicsIGhhbmRsZSk7XG4gICAgICAgICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2Z0cC5mc3RhdChoYW5kbGUsIHRyeVN0YXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdCgnb3BlbicsIGhhbmRsZSk7XG4gICAgICB0aGlzLmVtaXQoJ3JlYWR5Jyk7XG4gICAgfTtcblxuICAgIHRoaXMuc2Z0cC5mY2htb2QoaGFuZGxlLCB0aGlzLm1vZGUsIHRyeUFnYWluKTtcbiAgfSk7XG59O1xuXG5Xcml0ZVN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdkYXRhJywgJ0J1ZmZlcicsIGRhdGEpO1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMuaGFuZGxlKSkge1xuICAgIHJldHVybiB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3dyaXRlKGRhdGEsIGVuY29kaW5nLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnNmdHAud3JpdGVEYXRhKHRoaXMuaGFuZGxlLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAoZXIsIGJ5dGVzKSA9PiB7XG4gICAgaWYgKGVyKSB7XG4gICAgICBpZiAodGhpcy5hdXRvQ2xvc2UpXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuIGNiKGVyKTtcbiAgICB9XG4gICAgdGhpcy5ieXRlc1dyaXR0ZW4gKz0gYnl0ZXM7XG4gICAgY2IoKTtcbiAgfSk7XG5cbiAgdGhpcy5wb3MgKz0gZGF0YS5sZW5ndGg7XG59O1xuXG5Xcml0ZVN0cmVhbS5wcm90b3R5cGUuX3dyaXRldiA9IGZ1bmN0aW9uKGRhdGEsIGNiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMuaGFuZGxlKSkge1xuICAgIHJldHVybiB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3dyaXRldihkYXRhLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc2Z0cCA9IHRoaXMuc2Z0cDtcbiAgdmFyIGhhbmRsZSA9IHRoaXMuaGFuZGxlO1xuICB2YXIgd3JpdGVzTGVmdCA9IGRhdGEubGVuZ3RoO1xuXG4gIHZhciBvbndyaXRlID0gKGVyLCBieXRlcykgPT4ge1xuICAgIGlmIChlcikge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICByZXR1cm4gY2IoZXIpO1xuICAgIH1cbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiArPSBieXRlcztcbiAgICBpZiAoLS13cml0ZXNMZWZ0ID09PSAwKVxuICAgICAgY2IoKTtcbiAgfTtcblxuICAvLyBUT0RPOiB0cnkgdG8gY29tYmluZSBjaHVua3MgdG8gcmVkdWNlIG51bWJlciBvZiByZXF1ZXN0cyB0byB0aGUgc2VydmVyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjaHVuayA9IGRhdGFbaV0uY2h1bms7XG5cbiAgICBzZnRwLndyaXRlRGF0YShoYW5kbGUsIGNodW5rLCAwLCBjaHVuay5sZW5ndGgsIHRoaXMucG9zLCBvbndyaXRlKTtcbiAgICB0aGlzLnBvcyArPSBjaHVuay5sZW5ndGg7XG4gIH1cbn07XG5cbmlmICh0eXBlb2YgV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgIT09ICdmdW5jdGlvbicpXG4gIFdyaXRlU3RyZWFtLnByb3RvdHlwZS5kZXN0cm95ID0gUmVhZFN0cmVhbS5wcm90b3R5cGUuZGVzdHJveTtcblxuV3JpdGVTdHJlYW0ucHJvdG90eXBlLl9kZXN0cm95ID0gUmVhZFN0cmVhbS5wcm90b3R5cGUuX2Rlc3Ryb3k7XG5Xcml0ZVN0cmVhbS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbihjYikge1xuICBpZiAoY2IpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uKCdjbG9zZScsIGNiKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBhcmUgbm90IGF1dG9DbG9zaW5nLCB3ZSBzaG91bGQgY2FsbFxuICAvLyBkZXN0cm95IG9uICdmaW5pc2gnLlxuICBpZiAoIXRoaXMuYXV0b0Nsb3NlKVxuICAgIHRoaXMub24oJ2ZpbmlzaCcsIHRoaXMuZGVzdHJveS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLmVuZCgpO1xufTtcblxuLy8gVGhlcmUgaXMgbm8gc2h1dGRvd24oKSBmb3IgZmlsZXMuXG5Xcml0ZVN0cmVhbS5wcm90b3R5cGUuZGVzdHJveVNvb24gPSBXcml0ZVN0cmVhbS5wcm90b3R5cGUuZW5kO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGVTdHJlYW0ucHJvdG90eXBlLCAncGVuZGluZycsIHtcbiAgZ2V0KCkgeyByZXR1cm4gdGhpcy5oYW5kbGUgPT09IG51bGw7IH0sXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU0ZUUFN0cmVhbTtcblxuIiwiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcblxudmFyIFJlYWRlciA9IHJlcXVpcmUoJy4vcmVhZGVyJyk7XG52YXIgV3JpdGVyID0gcmVxdWlyZSgnLi93cml0ZXInKTtcblxuXG4vLyAtLS0gRXhwb3J0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBSZWFkZXI6IFJlYWRlcixcblxuICBXcml0ZXI6IFdyaXRlclxuXG59O1xuXG5mb3IgKHZhciB0IGluIHR5cGVzKSB7XG4gIGlmICh0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSlcbiAgICBtb2R1bGUuZXhwb3J0c1t0XSA9IHR5cGVzW3RdO1xufVxuZm9yICh2YXIgZSBpbiBlcnJvcnMpIHtcbiAgaWYgKGVycm9ycy5oYXNPd25Qcm9wZXJ0eShlKSlcbiAgICBtb2R1bGUuZXhwb3J0c1tlXSA9IGVycm9yc1tlXTtcbn1cbiIsIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIEFTTjEgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuXG4vLyAtLS0gR2xvYmFsc1xuXG52YXIgbmV3SW52YWxpZEFzbjFFcnJvciA9IGVycm9ycy5uZXdJbnZhbGlkQXNuMUVycm9yO1xuXG5cblxuLy8gLS0tIEFQSVxuXG5mdW5jdGlvbiBSZWFkZXIoZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYSBub2RlIEJ1ZmZlcicpO1xuXG4gIHRoaXMuX2J1ZiA9IGRhdGE7XG4gIHRoaXMuX3NpemUgPSBkYXRhLmxlbmd0aDtcblxuICAvLyBUaGVzZSBob2xkIHRoZSBcImN1cnJlbnRcIiBzdGF0ZVxuICB0aGlzLl9sZW4gPSAwO1xuICB0aGlzLl9vZmZzZXQgPSAwO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGVyLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fbGVuKTsgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9vZmZzZXQpOyB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRlci5wcm90b3R5cGUsICdyZW1haW4nLCB7XG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX3NpemUgLSB0aGlzLl9vZmZzZXQpOyB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRlci5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX2J1Zi5zbGljZSh0aGlzLl9vZmZzZXQpKTsgfVxufSk7XG5cblxuLyoqXG4gKiBSZWFkcyBhIHNpbmdsZSBieXRlIGFuZCBhZHZhbmNlcyBvZmZzZXQ7IHlvdSBjYW4gcGFzcyBpbiBgdHJ1ZWAgdG8gbWFrZSB0aGlzXG4gKiBhIFwicGVla1wiIG9wZXJhdGlvbiAoaS5lLiwgZ2V0IHRoZSBieXRlLCBidXQgZG9uJ3QgYWR2YW5jZSB0aGUgb2Zmc2V0KS5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBlZWsgdHJ1ZSBtZWFucyBkb24ndCBtb3ZlIG9mZnNldC5cbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIG5leHQgYnl0ZSwgbnVsbCBpZiBub3QgZW5vdWdoIGRhdGEuXG4gKi9cblJlYWRlci5wcm90b3R5cGUucmVhZEJ5dGUgPSBmdW5jdGlvbiAocGVlaykge1xuICBpZiAodGhpcy5fc2l6ZSAtIHRoaXMuX29mZnNldCA8IDEpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGIgPSB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0XSAmIDB4ZmY7XG5cbiAgaWYgKCFwZWVrKVxuICAgIHRoaXMuX29mZnNldCArPSAxO1xuXG4gIHJldHVybiBiO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlYWRCeXRlKHRydWUpO1xufTtcblxuXG4vKipcbiAqIFJlYWRzIGEgKHBvdGVudGlhbGx5KSB2YXJpYWJsZSBsZW5ndGggb2ZmIHRoZSBCRVIgYnVmZmVyLiAgVGhpcyBjYWxsIGlzXG4gKiBub3QgcmVhbGx5IG1lYW50IHRvIGJlIGNhbGxlZCBkaXJlY3RseSwgYXMgY2FsbGVycyBoYXZlIHRvIG1hbmlwdWxhdGVcbiAqIHRoZSBpbnRlcm5hbCBidWZmZXIgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBBcyBhIHJlc3VsdCBvZiB0aGlzIGNhbGwsIHlvdSBjYW4gY2FsbCBgUmVhZGVyLmxlbmd0aGAsIHVudGlsIHRoZVxuICogbmV4dCB0aGluZyBjYWxsZWQgdGhhdCBkb2VzIGEgcmVhZExlbmd0aC5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBhbW91bnQgb2Ygb2Zmc2V0IHRvIGFkdmFuY2UgdGhlIGJ1ZmZlci5cbiAqIEB0aHJvd3Mge0ludmFsaWRBc24xRXJyb3J9IG9uIGJhZCBBU04uMVxuICovXG5SZWFkZXIucHJvdG90eXBlLnJlYWRMZW5ndGggPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZClcbiAgICBvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLl9zaXplKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBsZW5CID0gdGhpcy5fYnVmW29mZnNldCsrXSAmIDB4ZmY7XG4gIGlmIChsZW5CID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmICgobGVuQiAmIDB4ODApID09PSAweDgwKSB7XG4gICAgbGVuQiAmPSAweDdmO1xuXG4gICAgaWYgKGxlbkIgPT09IDApXG4gICAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdJbmRlZmluaXRlIGxlbmd0aCBub3Qgc3VwcG9ydGVkJyk7XG5cbiAgICBpZiAobGVuQiA+IDQpXG4gICAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdlbmNvZGluZyB0b28gbG9uZycpO1xuXG4gICAgaWYgKHRoaXMuX3NpemUgLSBvZmZzZXQgPCBsZW5CKVxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB0aGlzLl9sZW4gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuQjsgaSsrKVxuICAgICAgdGhpcy5fbGVuID0gKHRoaXMuX2xlbiA8PCA4KSArICh0aGlzLl9idWZbb2Zmc2V0KytdICYgMHhmZik7XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBXYXNuJ3QgYSB2YXJpYWJsZSBsZW5ndGhcbiAgICB0aGlzLl9sZW4gPSBsZW5CO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgdGhlIG5leHQgc2VxdWVuY2UgaW4gdGhpcyBCRVIgYnVmZmVyLlxuICpcbiAqIFRvIGdldCB0aGUgbGVuZ3RoIG9mIHRoZSBzZXF1ZW5jZSwgY2FsbCBgUmVhZGVyLmxlbmd0aGAuXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgc2VxdWVuY2UncyB0YWcuXG4gKi9cblJlYWRlci5wcm90b3R5cGUucmVhZFNlcXVlbmNlID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc2VxID0gdGhpcy5wZWVrKCk7XG4gIGlmIChzZXEgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0YWcgIT09IHVuZGVmaW5lZCAmJiB0YWcgIT09IHNlcSlcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdFeHBlY3RlZCAweCcgKyB0YWcudG9TdHJpbmcoMTYpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6IGdvdCAweCcgKyBzZXEudG9TdHJpbmcoMTYpKTtcblxuICB2YXIgbyA9IHRoaXMucmVhZExlbmd0aCh0aGlzLl9vZmZzZXQgKyAxKTsgLy8gc3RvcmVkIGluIGBsZW5ndGhgXG4gIGlmIChvID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHRoaXMuX29mZnNldCA9IG87XG4gIHJldHVybiBzZXE7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUucmVhZEludCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRUYWcoQVNOMS5JbnRlZ2VyKTtcbn07XG5cblxuUmVhZGVyLnByb3RvdHlwZS5yZWFkQm9vbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLl9yZWFkVGFnKEFTTjEuQm9vbGVhbikgPT09IDAgPyBmYWxzZSA6IHRydWUpO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnJlYWRFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRUYWcoQVNOMS5FbnVtZXJhdGlvbik7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUucmVhZFN0cmluZyA9IGZ1bmN0aW9uICh0YWcsIHJldGJ1Zikge1xuICBpZiAoIXRhZylcbiAgICB0YWcgPSBBU04xLk9jdGV0U3RyaW5nO1xuXG4gIHZhciBiID0gdGhpcy5wZWVrKCk7XG4gIGlmIChiID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmIChiICE9PSB0YWcpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignRXhwZWN0ZWQgMHgnICsgdGFnLnRvU3RyaW5nKDE2KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiBnb3QgMHgnICsgYi50b1N0cmluZygxNikpO1xuXG4gIHZhciBvID0gdGhpcy5yZWFkTGVuZ3RoKHRoaXMuX29mZnNldCArIDEpOyAvLyBzdG9yZWQgaW4gYGxlbmd0aGBcblxuICBpZiAobyA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAodGhpcy5sZW5ndGggPiB0aGlzLl9zaXplIC0gbylcbiAgICByZXR1cm4gbnVsbDtcblxuICB0aGlzLl9vZmZzZXQgPSBvO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gcmV0YnVmID8gQnVmZmVyLmFsbG9jKDApIDogJyc7XG5cbiAgdmFyIHN0ciA9IHRoaXMuX2J1Zi5zbGljZSh0aGlzLl9vZmZzZXQsIHRoaXMuX29mZnNldCArIHRoaXMubGVuZ3RoKTtcbiAgdGhpcy5fb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuXG4gIHJldHVybiByZXRidWYgPyBzdHIgOiBzdHIudG9TdHJpbmcoJ3V0ZjgnKTtcbn07XG5cblJlYWRlci5wcm90b3R5cGUucmVhZE9JRCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgaWYgKCF0YWcpXG4gICAgdGFnID0gQVNOMS5PSUQ7XG5cbiAgdmFyIGIgPSB0aGlzLnJlYWRTdHJpbmcodGFnLCB0cnVlKTtcbiAgaWYgKGIgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgdmFsdWUgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gYltpXSAmIDB4ZmY7XG5cbiAgICB2YWx1ZSA8PD0gNztcbiAgICB2YWx1ZSArPSBieXRlICYgMHg3ZjtcbiAgICBpZiAoKGJ5dGUgJiAweDgwKSA9PT0gMCkge1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgdmFsdWUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIHZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG4gIHZhbHVlcy51bnNoaWZ0KHZhbHVlICUgNDApO1xuICB2YWx1ZXMudW5zaGlmdCgodmFsdWUgLyA0MCkgPj4gMCk7XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKCcuJyk7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUuX3JlYWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIGFzc2VydC5vayh0YWcgIT09IHVuZGVmaW5lZCk7XG5cbiAgdmFyIGIgPSB0aGlzLnBlZWsoKTtcblxuICBpZiAoYiA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAoYiAhPT0gdGFnKVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0V4cGVjdGVkIDB4JyArIHRhZy50b1N0cmluZygxNikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzogZ290IDB4JyArIGIudG9TdHJpbmcoMTYpKTtcblxuICB2YXIgbyA9IHRoaXMucmVhZExlbmd0aCh0aGlzLl9vZmZzZXQgKyAxKTsgLy8gc3RvcmVkIGluIGBsZW5ndGhgXG4gIGlmIChvID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDQpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignSW50ZWdlciB0b28gbG9uZzogJyArIHRoaXMubGVuZ3RoKTtcblxuICBpZiAodGhpcy5sZW5ndGggPiB0aGlzLl9zaXplIC0gbylcbiAgICByZXR1cm4gbnVsbDtcbiAgdGhpcy5fb2Zmc2V0ID0gbztcblxuICB2YXIgZmIgPSB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0XTtcbiAgdmFyIHZhbHVlID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YWx1ZSA8PD0gODtcbiAgICB2YWx1ZSB8PSAodGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSAmIDB4ZmYpO1xuICB9XG5cbiAgaWYgKChmYiAmIDB4ODApID09PSAweDgwICYmIGkgIT09IDQpXG4gICAgdmFsdWUgLT0gKDEgPDwgKGkgKiA4KSk7XG5cbiAgcmV0dXJuIHZhbHVlID4+IDA7XG59O1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgQVNOMSA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuXG5cbi8vIC0tLSBHbG9iYWxzXG5cbnZhciBuZXdJbnZhbGlkQXNuMUVycm9yID0gZXJyb3JzLm5ld0ludmFsaWRBc24xRXJyb3I7XG5cbnZhciBERUZBVUxUX09QVFMgPSB7XG4gIHNpemU6IDEwMjQsXG4gIGdyb3d0aEZhY3RvcjogOFxufTtcblxuXG4vLyAtLS0gSGVscGVyc1xuXG5mdW5jdGlvbiBtZXJnZShmcm9tLCB0bykge1xuICBhc3NlcnQub2soZnJvbSk7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgKGZyb20pLCAnb2JqZWN0Jyk7XG4gIGFzc2VydC5vayh0byk7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgKHRvKSwgJ29iamVjdCcpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHRvW2tleV0pXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgdmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZyb20sIGtleSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCBrZXksIHZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5cblxuLy8gLS0tIEFQSVxuXG5mdW5jdGlvbiBXcml0ZXIob3B0aW9ucykge1xuICBvcHRpb25zID0gbWVyZ2UoREVGQVVMVF9PUFRTLCBvcHRpb25zIHx8IHt9KTtcblxuICB0aGlzLl9idWYgPSBCdWZmZXIuYWxsb2Mob3B0aW9ucy5zaXplIHx8IDEwMjQpO1xuICB0aGlzLl9zaXplID0gdGhpcy5fYnVmLmxlbmd0aDtcbiAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgLy8gQSBsaXN0IG9mIG9mZnNldHMgaW4gdGhlIGJ1ZmZlciB3aGVyZSB3ZSBuZWVkIHRvIGluc2VydFxuICAvLyBzZXF1ZW5jZSB0YWcvbGVuIHBhaXJzLlxuICB0aGlzLl9zZXEgPSBbXTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRlci5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9zZXEubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcih0aGlzLl9zZXEubGVuZ3RoICsgJyB1bmVuZGVkIHNlcXVlbmNlKHMpJyk7XG5cbiAgICByZXR1cm4gKHRoaXMuX2J1Zi5zbGljZSgwLCB0aGlzLl9vZmZzZXQpKTtcbiAgfVxufSk7XG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVCeXRlID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKHR5cGVvZiAoYikgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcblxuICB0aGlzLl9lbnN1cmUoMSk7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBiO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlSW50ID0gZnVuY3Rpb24gKGksIHRhZykge1xuICBpZiAodHlwZW9mIChpKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLkludGVnZXI7XG5cbiAgdmFyIHN6ID0gNDtcblxuICB3aGlsZSAoKCgoaSAmIDB4ZmY4MDAwMDApID09PSAwKSB8fCAoKGkgJiAweGZmODAwMDAwKSA9PT0gMHhmZjgwMDAwMCA+PiAwKSkgJiZcbiAgICAgICAgKHN6ID4gMSkpIHtcbiAgICBzei0tO1xuICAgIGkgPDw9IDg7XG4gIH1cblxuICBpZiAoc3ogPiA0KVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0JFUiBpbnRzIGNhbm5vdCBiZSA+IDB4ZmZmZmZmZmYnKTtcblxuICB0aGlzLl9lbnN1cmUoMiArIHN6KTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IHRhZztcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IHN6O1xuXG4gIHdoaWxlIChzei0tID4gMCkge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAoKGkgJiAweGZmMDAwMDAwKSA+Pj4gMjQpO1xuICAgIGkgPDw9IDg7XG4gIH1cblxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlTnVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ5dGUoQVNOMS5OdWxsKTtcbiAgdGhpcy53cml0ZUJ5dGUoMHgwMCk7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uIChpLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAoaSkgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5FbnVtZXJhdGlvbjtcblxuICByZXR1cm4gdGhpcy53cml0ZUludChpLCB0YWcpO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlQm9vbGVhbiA9IGZ1bmN0aW9uIChiLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAoYikgIT09ICdib29sZWFuJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgQm9vbGVhbicpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLkJvb2xlYW47XG5cbiAgdGhpcy5fZW5zdXJlKDMpO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gdGFnO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gMHgwMTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGIgPyAweGZmIDogMHgwMDtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZyA9IGZ1bmN0aW9uIChzLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAocykgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcgKHdhczogJyArIHR5cGVvZiAocykgKyAnKScpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLk9jdGV0U3RyaW5nO1xuXG4gIHZhciBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChzKTtcbiAgdGhpcy53cml0ZUJ5dGUodGFnKTtcbiAgdGhpcy53cml0ZUxlbmd0aChsZW4pO1xuICBpZiAobGVuKSB7XG4gICAgdGhpcy5fZW5zdXJlKGxlbik7XG4gICAgdGhpcy5fYnVmLndyaXRlKHMsIHRoaXMuX29mZnNldCk7XG4gICAgdGhpcy5fb2Zmc2V0ICs9IGxlbjtcbiAgfVxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZiwgdGFnKSB7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhZyBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIGJ1ZmZlcicpO1xuXG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMud3JpdGVMZW5ndGgoYnVmLmxlbmd0aCk7XG4gIHRoaXMuX2Vuc3VyZShidWYubGVuZ3RoKTtcbiAgYnVmLmNvcHkodGhpcy5fYnVmLCB0aGlzLl9vZmZzZXQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLl9vZmZzZXQgKz0gYnVmLmxlbmd0aDtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZ0FycmF5ID0gZnVuY3Rpb24gKHN0cmluZ3MpIHtcbiAgaWYgKCghc3RyaW5ncyBpbnN0YW5jZW9mIEFycmF5KSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5W1N0cmluZ10nKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHNlbGYud3JpdGVTdHJpbmcocyk7XG4gIH0pO1xufTtcblxuLy8gVGhpcyBpcyByZWFsbHkgdG8gc29sdmUgREVSIGNhc2VzLCBidXQgd2hhdGV2ZXIgZm9yIG5vd1xuV3JpdGVyLnByb3RvdHlwZS53cml0ZU9JRCA9IGZ1bmN0aW9uIChzLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAocykgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5PSUQ7XG5cbiAgaWYgKCEvXihbMC05XStcXC4pezMsfVswLTldKyQvLnRlc3QocykpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdhcmd1bWVudCBpcyBub3QgYSB2YWxpZCBPSUQgc3RyaW5nJyk7XG5cbiAgZnVuY3Rpb24gZW5jb2RlT2N0ZXQoYnl0ZXMsIG9jdGV0KSB7XG4gICAgaWYgKG9jdGV0IDwgMTI4KSB7XG4gICAgICAgIGJ5dGVzLnB1c2gob2N0ZXQpO1xuICAgIH0gZWxzZSBpZiAob2N0ZXQgPCAxNjM4NCkge1xuICAgICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gNykgfCAweDgwKTtcbiAgICAgICAgYnl0ZXMucHVzaChvY3RldCAmIDB4N0YpO1xuICAgIH0gZWxzZSBpZiAob2N0ZXQgPCAyMDk3MTUyKSB7XG4gICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gMTQpIHwgMHg4MCk7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDcpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9IGVsc2UgaWYgKG9jdGV0IDwgMjY4NDM1NDU2KSB7XG4gICAgICBieXRlcy5wdXNoKChvY3RldCA+Pj4gMjEpIHwgMHg4MCk7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDE0KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDcpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAyOCkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAyMSkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAxNCkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiA3KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKG9jdGV0ICYgMHg3Rik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRtcCA9IHMuc3BsaXQoJy4nKTtcbiAgdmFyIGJ5dGVzID0gW107XG4gIGJ5dGVzLnB1c2gocGFyc2VJbnQodG1wWzBdLCAxMCkgKiA0MCArIHBhcnNlSW50KHRtcFsxXSwgMTApKTtcbiAgdG1wLnNsaWNlKDIpLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICBlbmNvZGVPY3RldChieXRlcywgcGFyc2VJbnQoYiwgMTApKTtcbiAgfSk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9lbnN1cmUoMiArIGJ5dGVzLmxlbmd0aCk7XG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMud3JpdGVMZW5ndGgoYnl0ZXMubGVuZ3RoKTtcbiAgYnl0ZXMuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgIHNlbGYud3JpdGVCeXRlKGIpO1xuICB9KTtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUxlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgaWYgKHR5cGVvZiAobGVuKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuXG4gIHRoaXMuX2Vuc3VyZSg0KTtcblxuICBpZiAobGVuIDw9IDB4N2YpIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODE7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZmZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODI7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbiA+PiA4O1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZmZmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4ODM7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbiA+PiAxNjtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuID4+IDg7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdMZW5ndGggdG9vIGxvbmcgKD4gNCBieXRlcyknKTtcbiAgfVxufTtcblxuV3JpdGVyLnByb3RvdHlwZS5zdGFydFNlcXVlbmNlID0gZnVuY3Rpb24gKHRhZykge1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLlNlcXVlbmNlIHwgQVNOMS5Db25zdHJ1Y3RvcjtcblxuICB0aGlzLndyaXRlQnl0ZSh0YWcpO1xuICB0aGlzLl9zZXEucHVzaCh0aGlzLl9vZmZzZXQpO1xuICB0aGlzLl9lbnN1cmUoMyk7XG4gIHRoaXMuX29mZnNldCArPSAzO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLmVuZFNlcXVlbmNlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VxID0gdGhpcy5fc2VxLnBvcCgpO1xuICB2YXIgc3RhcnQgPSBzZXEgKyAzO1xuICB2YXIgbGVuID0gdGhpcy5fb2Zmc2V0IC0gc3RhcnQ7XG5cbiAgaWYgKGxlbiA8PSAweDdmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgLTIpO1xuICAgIHRoaXMuX2J1ZltzZXFdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgLTEpO1xuICAgIHRoaXMuX2J1ZltzZXFdID0gMHg4MTtcbiAgICB0aGlzLl9idWZbc2VxICsgMV0gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZikge1xuICAgIHRoaXMuX2J1ZltzZXFdID0gMHg4MjtcbiAgICB0aGlzLl9idWZbc2VxICsgMV0gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbc2VxICsgMl0gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZmZmKSB7XG4gICAgdGhpcy5fc2hpZnQoc3RhcnQsIGxlbiwgMSk7XG4gICAgdGhpcy5fYnVmW3NlcV0gPSAweDgzO1xuICAgIHRoaXMuX2J1ZltzZXEgKyAxXSA9IGxlbiA+PiAxNjtcbiAgICB0aGlzLl9idWZbc2VxICsgMl0gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbc2VxICsgM10gPSBsZW47XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignU2VxdWVuY2UgdG9vIGxvbmcnKTtcbiAgfVxufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLl9zaGlmdCA9IGZ1bmN0aW9uIChzdGFydCwgbGVuLCBzaGlmdCkge1xuICBhc3NlcnQub2soc3RhcnQgIT09IHVuZGVmaW5lZCk7XG4gIGFzc2VydC5vayhsZW4gIT09IHVuZGVmaW5lZCk7XG4gIGFzc2VydC5vayhzaGlmdCk7XG5cbiAgdGhpcy5fYnVmLmNvcHkodGhpcy5fYnVmLCBzdGFydCArIHNoaWZ0LCBzdGFydCwgc3RhcnQgKyBsZW4pO1xuICB0aGlzLl9vZmZzZXQgKz0gc2hpZnQ7XG59O1xuXG5Xcml0ZXIucHJvdG90eXBlLl9lbnN1cmUgPSBmdW5jdGlvbiAobGVuKSB7XG4gIGFzc2VydC5vayhsZW4pO1xuXG4gIGlmICh0aGlzLl9zaXplIC0gdGhpcy5fb2Zmc2V0IDwgbGVuKSB7XG4gICAgdmFyIHN6ID0gdGhpcy5fc2l6ZSAqIHRoaXMuX29wdGlvbnMuZ3Jvd3RoRmFjdG9yO1xuICAgIGlmIChzeiAtIHRoaXMuX29mZnNldCA8IGxlbilcbiAgICAgIHN6ICs9IGxlbjtcblxuICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2Moc3opO1xuXG4gICAgdGhpcy5fYnVmLmNvcHkoYnVmLCAwLCAwLCB0aGlzLl9vZmZzZXQpO1xuICAgIHRoaXMuX2J1ZiA9IGJ1ZjtcbiAgICB0aGlzLl9zaXplID0gc3o7XG4gIH1cbn07XG5cblxuXG4vLyAtLS0gRXhwb3J0ZWQgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvX2hhc2hfc2hhNTEyID0gcmVxdWlyZSgndHdlZXRuYWNsJykubG93bGV2ZWwuY3J5cHRvX2hhc2g7XG5cbi8qXG4gKiBUaGlzIGZpbGUgaXMgYSAxOjEgcG9ydCBmcm9tIHRoZSBPcGVuQlNEIGJsb3dmaXNoLmMgYW5kIGJjcnlwdF9wYmtkZi5jLiBBcyBhXG4gKiByZXN1bHQsIGl0IHJldGFpbnMgdGhlIG9yaWdpbmFsIGNvcHlyaWdodCBhbmQgbGljZW5zZS4gVGhlIHR3byBmaWxlcyBhcmVcbiAqIHVuZGVyIHNsaWdodGx5IGRpZmZlcmVudCAoYnV0IGNvbXBhdGlibGUpIGxpY2Vuc2VzLCBhbmQgYXJlIGhlcmUgY29tYmluZWQgaW5cbiAqIG9uZSBmaWxlLlxuICpcbiAqIENyZWRpdCBmb3IgdGhlIGFjdHVhbCBwb3J0aW5nIHdvcmsgZ29lcyB0bzpcbiAqICBEZXZpIE1hbmRpcmkgPG1lQGRldmkud2ViLmlkPlxuICovXG5cbi8qXG4gKiBUaGUgQmxvd2Zpc2ggcG9ydGlvbnMgYXJlIHVuZGVyIHRoZSBmb2xsb3dpbmcgbGljZW5zZTpcbiAqXG4gKiBCbG93ZmlzaCBibG9jayBjaXBoZXIgZm9yIE9wZW5CU0RcbiAqIENvcHlyaWdodCAxOTk3IE5pZWxzIFByb3ZvcyA8cHJvdm9zQHBoeXNuZXQudW5pLWhhbWJ1cmcuZGU+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGFkdmljZSBieSBEYXZpZCBNYXppZXJlcyA8ZG1AbGNzLm1pdC5lZHU+LlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXG4gKiBhcmUgbWV0OlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogMy4gVGhlIG5hbWUgb2YgdGhlIGF1dGhvciBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBBVVRIT1IgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxuICogSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFU1xuICogT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiAqIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVFxuICogTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcbiAqIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLypcbiAqIFRoZSBiY3J5cHRfcGJrZGYgcG9ydGlvbnMgYXJlIHVuZGVyIHRoZSBmb2xsb3dpbmcgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgVGVkIFVuYW5nc3QgPHRlZHVAb3BlbmJzZC5vcmc+XG4gKlxuICogUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4gKiBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4gKiBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4gKiBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuICogQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuICogV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4gKiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuICogT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbiAqL1xuXG4vKlxuICogUGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIChKYXZhc2NyaXB0LXNwZWNpZmljKTpcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNiwgSm95ZW50IEluY1xuICogQXV0aG9yOiBBbGV4IFdpbHNvbiA8YWxleC53aWxzb25Aam95ZW50LmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbiAqIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbiAqIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVNcbiAqIFdJVEggUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SXG4gKiBBTlkgU1BFQ0lBTCwgRElSRUNULCBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTXG4gKiBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU5cbiAqIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GXG4gKiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuICovXG5cbi8vIFBvcnRlZCBmcm9tIE9wZW5CU0QgYmNyeXB0X3Bia2RmLmMgdjEuOVxuXG52YXIgQkxGX0ogPSAwO1xuXG52YXIgQmxvd2Zpc2ggPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5TID0gW1xuICAgIG5ldyBVaW50MzJBcnJheShbXG4gICAgICAweGQxMzEwYmE2LCAweDk4ZGZiNWFjLCAweDJmZmQ3MmRiLCAweGQwMWFkZmI3LFxuICAgICAgMHhiOGUxYWZlZCwgMHg2YTI2N2U5NiwgMHhiYTdjOTA0NSwgMHhmMTJjN2Y5OSxcbiAgICAgIDB4MjRhMTk5NDcsIDB4YjM5MTZjZjcsIDB4MDgwMWYyZTIsIDB4ODU4ZWZjMTYsXG4gICAgICAweDYzNjkyMGQ4LCAweDcxNTc0ZTY5LCAweGE0NThmZWEzLCAweGY0OTMzZDdlLFxuICAgICAgMHgwZDk1NzQ4ZiwgMHg3MjhlYjY1OCwgMHg3MThiY2Q1OCwgMHg4MjE1NGFlZSxcbiAgICAgIDB4N2I1NGE0MWQsIDB4YzI1YTU5YjUsIDB4OWMzMGQ1MzksIDB4MmFmMjYwMTMsXG4gICAgICAweGM1ZDFiMDIzLCAweDI4NjA4NWYwLCAweGNhNDE3OTE4LCAweGI4ZGIzOGVmLFxuICAgICAgMHg4ZTc5ZGNiMCwgMHg2MDNhMTgwZSwgMHg2YzllMGU4YiwgMHhiMDFlOGEzZSxcbiAgICAgIDB4ZDcxNTc3YzEsIDB4YmQzMTRiMjcsIDB4NzhhZjJmZGEsIDB4NTU2MDVjNjAsXG4gICAgICAweGU2NTUyNWYzLCAweGFhNTVhYjk0LCAweDU3NDg5ODYyLCAweDYzZTgxNDQwLFxuICAgICAgMHg1NWNhMzk2YSwgMHgyYWFiMTBiNiwgMHhiNGNjNWMzNCwgMHgxMTQxZThjZSxcbiAgICAgIDB4YTE1NDg2YWYsIDB4N2M3MmU5OTMsIDB4YjNlZTE0MTEsIDB4NjM2ZmJjMmEsXG4gICAgICAweDJiYTljNTVkLCAweDc0MTgzMWY2LCAweGNlNWMzZTE2LCAweDliODc5MzFlLFxuICAgICAgMHhhZmQ2YmEzMywgMHg2YzI0Y2Y1YywgMHg3YTMyNTM4MSwgMHgyODk1ODY3NyxcbiAgICAgIDB4M2I4ZjQ4OTgsIDB4NmI0YmI5YWYsIDB4YzRiZmU4MWIsIDB4NjYyODIxOTMsXG4gICAgICAweDYxZDgwOWNjLCAweGZiMjFhOTkxLCAweDQ4N2NhYzYwLCAweDVkZWM4MDMyLFxuICAgICAgMHhlZjg0NWQ1ZCwgMHhlOTg1NzViMSwgMHhkYzI2MjMwMiwgMHhlYjY1MWI4OCxcbiAgICAgIDB4MjM4OTNlODEsIDB4ZDM5NmFjYzUsIDB4MGY2ZDZmZjMsIDB4ODNmNDQyMzksXG4gICAgICAweDJlMGI0NDgyLCAweGE0ODQyMDA0LCAweDY5YzhmMDRhLCAweDllMWY5YjVlLFxuICAgICAgMHgyMWM2Njg0MiwgMHhmNmU5NmM5YSwgMHg2NzBjOWM2MSwgMHhhYmQzODhmMCxcbiAgICAgIDB4NmE1MWEwZDIsIDB4ZDg1NDJmNjgsIDB4OTYwZmE3MjgsIDB4YWI1MTMzYTMsXG4gICAgICAweDZlZWYwYjZjLCAweDEzN2EzYmU0LCAweGJhM2JmMDUwLCAweDdlZmIyYTk4LFxuICAgICAgMHhhMWYxNjUxZCwgMHgzOWFmMDE3NiwgMHg2NmNhNTkzZSwgMHg4MjQzMGU4OCxcbiAgICAgIDB4OGNlZTg2MTksIDB4NDU2ZjlmYjQsIDB4N2Q4NGE1YzMsIDB4M2I4YjVlYmUsXG4gICAgICAweGUwNmY3NWQ4LCAweDg1YzEyMDczLCAweDQwMWE0NDlmLCAweDU2YzE2YWE2LFxuICAgICAgMHg0ZWQzYWE2MiwgMHgzNjNmNzcwNiwgMHgxYmZlZGY3MiwgMHg0MjliMDIzZCxcbiAgICAgIDB4MzdkMGQ3MjQsIDB4ZDAwYTEyNDgsIDB4ZGIwZmVhZDMsIDB4NDlmMWMwOWIsXG4gICAgICAweDA3NTM3MmM5LCAweDgwOTkxYjdiLCAweDI1ZDQ3OWQ4LCAweGY2ZThkZWY3LFxuICAgICAgMHhlM2ZlNTAxYSwgMHhiNjc5NGMzYiwgMHg5NzZjZTBiZCwgMHgwNGMwMDZiYSxcbiAgICAgIDB4YzFhOTRmYjYsIDB4NDA5ZjYwYzQsIDB4NWU1YzllYzIsIDB4MTk2YTI0NjMsXG4gICAgICAweDY4ZmI2ZmFmLCAweDNlNmM1M2I1LCAweDEzMzliMmViLCAweDNiNTJlYzZmLFxuICAgICAgMHg2ZGZjNTExZiwgMHg5YjMwOTUyYywgMHhjYzgxNDU0NCwgMHhhZjVlYmQwOSxcbiAgICAgIDB4YmVlM2QwMDQsIDB4ZGUzMzRhZmQsIDB4NjYwZjI4MDcsIDB4MTkyZTRiYjMsXG4gICAgICAweGMwY2JhODU3LCAweDQ1Yzg3NDBmLCAweGQyMGI1ZjM5LCAweGI5ZDNmYmRiLFxuICAgICAgMHg1NTc5YzBiZCwgMHgxYTYwMzIwYSwgMHhkNmExMDBjNiwgMHg0MDJjNzI3OSxcbiAgICAgIDB4Njc5ZjI1ZmUsIDB4ZmIxZmEzY2MsIDB4OGVhNWU5ZjgsIDB4ZGIzMjIyZjgsXG4gICAgICAweDNjNzUxNmRmLCAweGZkNjE2YjE1LCAweDJmNTAxZWM4LCAweGFkMDU1MmFiLFxuICAgICAgMHgzMjNkYjVmYSwgMHhmZDIzODc2MCwgMHg1MzMxN2I0OCwgMHgzZTAwZGY4MixcbiAgICAgIDB4OWU1YzU3YmIsIDB4Y2E2ZjhjYTAsIDB4MWE4NzU2MmUsIDB4ZGYxNzY5ZGIsXG4gICAgICAweGQ1NDJhOGY2LCAweDI4N2VmZmMzLCAweGFjNjczMmM2LCAweDhjNGY1NTczLFxuICAgICAgMHg2OTViMjdiMCwgMHhiYmNhNThjOCwgMHhlMWZmYTM1ZCwgMHhiOGYwMTFhMCxcbiAgICAgIDB4MTBmYTNkOTgsIDB4ZmQyMTgzYjgsIDB4NGFmY2I1NmMsIDB4MmRkMWQzNWIsXG4gICAgICAweDlhNTNlNDc5LCAweGI2Zjg0NTY1LCAweGQyOGU0OWJjLCAweDRiZmI5NzkwLFxuICAgICAgMHhlMWRkZjJkYSwgMHhhNGNiN2UzMywgMHg2MmZiMTM0MSwgMHhjZWU0YzZlOCxcbiAgICAgIDB4ZWYyMGNhZGEsIDB4MzY3NzRjMDEsIDB4ZDA3ZTllZmUsIDB4MmJmMTFmYjQsXG4gICAgICAweDk1ZGJkYTRkLCAweGFlOTA5MTk4LCAweGVhYWQ4ZTcxLCAweDZiOTNkNWEwLFxuICAgICAgMHhkMDhlZDFkMCwgMHhhZmM3MjVlMCwgMHg4ZTNjNWIyZiwgMHg4ZTc1OTRiNyxcbiAgICAgIDB4OGZmNmUyZmIsIDB4ZjIxMjJiNjQsIDB4ODg4OGI4MTIsIDB4OTAwZGYwMWMsXG4gICAgICAweDRmYWQ1ZWEwLCAweDY4OGZjMzFjLCAweGQxY2ZmMTkxLCAweGIzYThjMWFkLFxuICAgICAgMHgyZjJmMjIxOCwgMHhiZTBlMTc3NywgMHhlYTc1MmRmZSwgMHg4YjAyMWZhMSxcbiAgICAgIDB4ZTVhMGNjMGYsIDB4YjU2Zjc0ZTgsIDB4MThhY2YzZDYsIDB4Y2U4OWUyOTksXG4gICAgICAweGI0YTg0ZmUwLCAweGZkMTNlMGI3LCAweDdjYzQzYjgxLCAweGQyYWRhOGQ5LFxuICAgICAgMHgxNjVmYTI2NiwgMHg4MDk1NzcwNSwgMHg5M2NjNzMxNCwgMHgyMTFhMTQ3NyxcbiAgICAgIDB4ZTZhZDIwNjUsIDB4NzdiNWZhODYsIDB4Yzc1NDQyZjUsIDB4ZmI5ZDM1Y2YsXG4gICAgICAweGViY2RhZjBjLCAweDdiM2U4OWEwLCAweGQ2NDExYmQzLCAweGFlMWU3ZTQ5LFxuICAgICAgMHgwMDI1MGUyZCwgMHgyMDcxYjM1ZSwgMHgyMjY4MDBiYiwgMHg1N2I4ZTBhZixcbiAgICAgIDB4MjQ2NDM2OWIsIDB4ZjAwOWI5MWUsIDB4NTU2MzkxMWQsIDB4NTlkZmE2YWEsXG4gICAgICAweDc4YzE0Mzg5LCAweGQ5NWE1MzdmLCAweDIwN2Q1YmEyLCAweDAyZTViOWM1LFxuICAgICAgMHg4MzI2MDM3NiwgMHg2Mjk1Y2ZhOSwgMHgxMWM4MTk2OCwgMHg0ZTczNGE0MSxcbiAgICAgIDB4YjM0NzJkY2EsIDB4N2IxNGE5NGEsIDB4MWI1MTAwNTIsIDB4OWE1MzI5MTUsXG4gICAgICAweGQ2MGY1NzNmLCAweGJjOWJjNmU0LCAweDJiNjBhNDc2LCAweDgxZTY3NDAwLFxuICAgICAgMHgwOGJhNmZiNSwgMHg1NzFiZTkxZiwgMHhmMjk2ZWM2YiwgMHgyYTBkZDkxNSxcbiAgICAgIDB4YjY2MzY1MjEsIDB4ZTdiOWY5YjYsIDB4ZmYzNDA1MmUsIDB4YzU4NTU2NjQsXG4gICAgICAweDUzYjAyZDVkLCAweGE5OWY4ZmExLCAweDA4YmE0Nzk5LCAweDZlODUwNzZhXSksXG4gICAgbmV3IFVpbnQzMkFycmF5KFtcbiAgICAgIDB4NGI3YTcwZTksIDB4YjViMzI5NDQsIDB4ZGI3NTA5MmUsIDB4YzQxOTI2MjMsXG4gICAgICAweGFkNmVhNmIwLCAweDQ5YTdkZjdkLCAweDljZWU2MGI4LCAweDhmZWRiMjY2LFxuICAgICAgMHhlY2FhOGM3MSwgMHg2OTlhMTdmZiwgMHg1NjY0NTI2YywgMHhjMmIxOWVlMSxcbiAgICAgIDB4MTkzNjAyYTUsIDB4NzUwOTRjMjksIDB4YTA1OTEzNDAsIDB4ZTQxODNhM2UsXG4gICAgICAweDNmNTQ5ODlhLCAweDViNDI5ZDY1LCAweDZiOGZlNGQ2LCAweDk5ZjczZmQ2LFxuICAgICAgMHhhMWQyOWMwNywgMHhlZmU4MzBmNSwgMHg0ZDJkMzhlNiwgMHhmMDI1NWRjMSxcbiAgICAgIDB4NGNkZDIwODYsIDB4ODQ3MGViMjYsIDB4NjM4MmU5YzYsIDB4MDIxZWNjNWUsXG4gICAgICAweDA5Njg2YjNmLCAweDNlYmFlZmM5LCAweDNjOTcxODE0LCAweDZiNmE3MGExLFxuICAgICAgMHg2ODdmMzU4NCwgMHg1MmEwZTI4NiwgMHhiNzljNTMwNSwgMHhhYTUwMDczNyxcbiAgICAgIDB4M2UwNzg0MWMsIDB4N2ZkZWFlNWMsIDB4OGU3ZDQ0ZWMsIDB4NTcxNmYyYjgsXG4gICAgICAweGIwM2FkYTM3LCAweGYwNTAwYzBkLCAweGYwMWMxZjA0LCAweDAyMDBiM2ZmLFxuICAgICAgMHhhZTBjZjUxYSwgMHgzY2I1NzRiMiwgMHgyNTgzN2E1OCwgMHhkYzA5MjFiZCxcbiAgICAgIDB4ZDE5MTEzZjksIDB4N2NhOTJmZjYsIDB4OTQzMjQ3NzMsIDB4MjJmNTQ3MDEsXG4gICAgICAweDNhZTVlNTgxLCAweDM3YzJkYWRjLCAweGM4YjU3NjM0LCAweDlhZjNkZGE3LFxuICAgICAgMHhhOTQ0NjE0NiwgMHgwZmQwMDMwZSwgMHhlY2M4YzczZSwgMHhhNDc1MWU0MSxcbiAgICAgIDB4ZTIzOGNkOTksIDB4M2JlYTBlMmYsIDB4MzI4MGJiYTEsIDB4MTgzZWIzMzEsXG4gICAgICAweDRlNTQ4YjM4LCAweDRmNmRiOTA4LCAweDZmNDIwZDAzLCAweGY2MGEwNGJmLFxuICAgICAgMHgyY2I4MTI5MCwgMHgyNDk3N2M3OSwgMHg1Njc5YjA3MiwgMHhiY2FmODlhZixcbiAgICAgIDB4ZGU5YTc3MWYsIDB4ZDk5MzA4MTAsIDB4YjM4YmFlMTIsIDB4ZGNjZjNmMmUsXG4gICAgICAweDU1MTI3MjFmLCAweDJlNmI3MTI0LCAweDUwMWFkZGU2LCAweDlmODRjZDg3LFxuICAgICAgMHg3YTU4NDcxOCwgMHg3NDA4ZGExNywgMHhiYzlmOWFiYywgMHhlOTRiN2Q4YyxcbiAgICAgIDB4ZWM3YWVjM2EsIDB4ZGI4NTFkZmEsIDB4NjMwOTQzNjYsIDB4YzQ2NGMzZDIsXG4gICAgICAweGVmMWMxODQ3LCAweDMyMTVkOTA4LCAweGRkNDMzYjM3LCAweDI0YzJiYTE2LFxuICAgICAgMHgxMmExNGQ0MywgMHgyYTY1YzQ1MSwgMHg1MDk0MDAwMiwgMHgxMzNhZTRkZCxcbiAgICAgIDB4NzFkZmY4OWUsIDB4MTAzMTRlNTUsIDB4ODFhYzc3ZDYsIDB4NWYxMTE5OWIsXG4gICAgICAweDA0MzU1NmYxLCAweGQ3YTNjNzZiLCAweDNjMTExODNiLCAweDU5MjRhNTA5LFxuICAgICAgMHhmMjhmZTZlZCwgMHg5N2YxZmJmYSwgMHg5ZWJhYmYyYywgMHgxZTE1M2M2ZSxcbiAgICAgIDB4ODZlMzQ1NzAsIDB4ZWFlOTZmYjEsIDB4ODYwZTVlMGEsIDB4NWEzZTJhYjMsXG4gICAgICAweDc3MWZlNzFjLCAweDRlM2QwNmZhLCAweDI5NjVkY2I5LCAweDk5ZTcxZDBmLFxuICAgICAgMHg4MDNlODlkNiwgMHg1MjY2YzgyNSwgMHgyZTRjYzk3OCwgMHg5YzEwYjM2YSxcbiAgICAgIDB4YzYxNTBlYmEsIDB4OTRlMmVhNzgsIDB4YTVmYzNjNTMsIDB4MWUwYTJkZjQsXG4gICAgICAweGYyZjc0ZWE3LCAweDM2MWQyYjNkLCAweDE5MzkyNjBmLCAweDE5YzI3OTYwLFxuICAgICAgMHg1MjIzYTcwOCwgMHhmNzEzMTJiNiwgMHhlYmFkZmU2ZSwgMHhlYWMzMWY2NixcbiAgICAgIDB4ZTNiYzQ1OTUsIDB4YTY3YmM4ODMsIDB4YjE3ZjM3ZDEsIDB4MDE4Y2ZmMjgsXG4gICAgICAweGMzMzJkZGVmLCAweGJlNmM1YWE1LCAweDY1NTgyMTg1LCAweDY4YWI5ODAyLFxuICAgICAgMHhlZWNlYTUwZiwgMHhkYjJmOTUzYiwgMHgyYWVmN2RhZCwgMHg1YjZlMmY4NCxcbiAgICAgIDB4MTUyMWI2MjgsIDB4MjkwNzYxNzAsIDB4ZWNkZDQ3NzUsIDB4NjE5ZjE1MTAsXG4gICAgICAweDEzY2NhODMwLCAweGViNjFiZDk2LCAweDAzMzRmZTFlLCAweGFhMDM2M2NmLFxuICAgICAgMHhiNTczNWM5MCwgMHg0YzcwYTIzOSwgMHhkNTllOWUwYiwgMHhjYmFhZGUxNCxcbiAgICAgIDB4ZWVjYzg2YmMsIDB4NjA2MjJjYTcsIDB4OWNhYjVjYWIsIDB4YjJmMzg0NmUsXG4gICAgICAweDY0OGIxZWFmLCAweDE5YmRmMGNhLCAweGEwMjM2OWI5LCAweDY1NWFiYjUwLFxuICAgICAgMHg0MDY4NWEzMiwgMHgzYzJhYjRiMywgMHgzMTllZTlkNSwgMHhjMDIxYjhmNyxcbiAgICAgIDB4OWI1NDBiMTksIDB4ODc1ZmEwOTksIDB4OTVmNzk5N2UsIDB4NjIzZDdkYTgsXG4gICAgICAweGY4Mzc4ODlhLCAweDk3ZTMyZDc3LCAweDExZWQ5MzVmLCAweDE2NjgxMjgxLFxuICAgICAgMHgwZTM1ODgyOSwgMHhjN2U2MWZkNiwgMHg5NmRlZGZhMSwgMHg3ODU4YmE5OSxcbiAgICAgIDB4NTdmNTg0YTUsIDB4MWIyMjcyNjMsIDB4OWI4M2MzZmYsIDB4MWFjMjQ2OTYsXG4gICAgICAweGNkYjMwYWViLCAweDUzMmUzMDU0LCAweDhmZDk0OGU0LCAweDZkYmMzMTI4LFxuICAgICAgMHg1OGViZjJlZiwgMHgzNGM2ZmZlYSwgMHhmZTI4ZWQ2MSwgMHhlZTdjM2M3MyxcbiAgICAgIDB4NWQ0YTE0ZDksIDB4ZTg2NGI3ZTMsIDB4NDIxMDVkMTQsIDB4MjAzZTEzZTAsXG4gICAgICAweDQ1ZWVlMmI2LCAweGEzYWFhYmVhLCAweGRiNmM0ZjE1LCAweGZhY2I0ZmQwLFxuICAgICAgMHhjNzQyZjQ0MiwgMHhlZjZhYmJiNSwgMHg2NTRmM2IxZCwgMHg0MWNkMjEwNSxcbiAgICAgIDB4ZDgxZTc5OWUsIDB4ODY4NTRkYzcsIDB4ZTQ0YjQ3NmEsIDB4M2Q4MTYyNTAsXG4gICAgICAweGNmNjJhMWYyLCAweDViOGQyNjQ2LCAweGZjODg4M2EwLCAweGMxYzdiNmEzLFxuICAgICAgMHg3ZjE1MjRjMywgMHg2OWNiNzQ5MiwgMHg0Nzg0OGEwYiwgMHg1NjkyYjI4NSxcbiAgICAgIDB4MDk1YmJmMDAsIDB4YWQxOTQ4OWQsIDB4MTQ2MmIxNzQsIDB4MjM4MjBlMDAsXG4gICAgICAweDU4NDI4ZDJhLCAweDBjNTVmNWVhLCAweDFkYWRmNDNlLCAweDIzM2Y3MDYxLFxuICAgICAgMHgzMzcyZjA5MiwgMHg4ZDkzN2U0MSwgMHhkNjVmZWNmMSwgMHg2YzIyM2JkYixcbiAgICAgIDB4N2NkZTM3NTksIDB4Y2JlZTc0NjAsIDB4NDA4NWYyYTcsIDB4Y2U3NzMyNmUsXG4gICAgICAweGE2MDc4MDg0LCAweDE5Zjg1MDllLCAweGU4ZWZkODU1LCAweDYxZDk5NzM1LFxuICAgICAgMHhhOTY5YTdhYSwgMHhjNTBjMDZjMiwgMHg1YTA0YWJmYywgMHg4MDBiY2FkYyxcbiAgICAgIDB4OWU0NDdhMmUsIDB4YzM0NTM0ODQsIDB4ZmRkNTY3MDUsIDB4MGUxZTllYzksXG4gICAgICAweGRiNzNkYmQzLCAweDEwNTU4OGNkLCAweDY3NWZkYTc5LCAweGUzNjc0MzQwLFxuICAgICAgMHhjNWM0MzQ2NSwgMHg3MTNlMzhkOCwgMHgzZDI4Zjg5ZSwgMHhmMTZkZmYyMCxcbiAgICAgIDB4MTUzZTIxZTcsIDB4OGZiMDNkNGEsIDB4ZTZlMzlmMmIsIDB4ZGI4M2FkZjddKSxcbiAgICBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgMHhlOTNkNWE2OCwgMHg5NDgxNDBmNywgMHhmNjRjMjYxYywgMHg5NDY5MjkzNCxcbiAgICAgIDB4NDExNTIwZjcsIDB4NzYwMmQ0ZjcsIDB4YmNmNDZiMmUsIDB4ZDRhMjAwNjgsXG4gICAgICAweGQ0MDgyNDcxLCAweDMzMjBmNDZhLCAweDQzYjdkNGI3LCAweDUwMDA2MWFmLFxuICAgICAgMHgxZTM5ZjYyZSwgMHg5NzI0NDU0NiwgMHgxNDIxNGY3NCwgMHhiZjhiODg0MCxcbiAgICAgIDB4NGQ5NWZjMWQsIDB4OTZiNTkxYWYsIDB4NzBmNGRkZDMsIDB4NjZhMDJmNDUsXG4gICAgICAweGJmYmMwOWVjLCAweDAzYmQ5Nzg1LCAweDdmYWM2ZGQwLCAweDMxY2I4NTA0LFxuICAgICAgMHg5NmViMjdiMywgMHg1NWZkMzk0MSwgMHhkYTI1NDdlNiwgMHhhYmNhMGE5YSxcbiAgICAgIDB4Mjg1MDc4MjUsIDB4NTMwNDI5ZjQsIDB4MGEyYzg2ZGEsIDB4ZTliNjZkZmIsXG4gICAgICAweDY4ZGMxNDYyLCAweGQ3NDg2OTAwLCAweDY4MGVjMGE0LCAweDI3YTE4ZGVlLFxuICAgICAgMHg0ZjNmZmVhMiwgMHhlODg3YWQ4YywgMHhiNThjZTAwNiwgMHg3YWY0ZDZiNixcbiAgICAgIDB4YWFjZTFlN2MsIDB4ZDMzNzVmZWMsIDB4Y2U3OGEzOTksIDB4NDA2YjJhNDIsXG4gICAgICAweDIwZmU5ZTM1LCAweGQ5ZjM4NWI5LCAweGVlMzlkN2FiLCAweDNiMTI0ZThiLFxuICAgICAgMHgxZGM5ZmFmNywgMHg0YjZkMTg1NiwgMHgyNmEzNjYzMSwgMHhlYWUzOTdiMixcbiAgICAgIDB4M2E2ZWZhNzQsIDB4ZGQ1YjQzMzIsIDB4Njg0MWU3ZjcsIDB4Y2E3ODIwZmIsXG4gICAgICAweGZiMGFmNTRlLCAweGQ4ZmViMzk3LCAweDQ1NDA1NmFjLCAweGJhNDg5NTI3LFxuICAgICAgMHg1NTUzM2EzYSwgMHgyMDgzOGQ4NywgMHhmZTZiYTliNywgMHhkMDk2OTU0YixcbiAgICAgIDB4NTVhODY3YmMsIDB4YTExNTlhNTgsIDB4Y2NhOTI5NjMsIDB4OTllMWRiMzMsXG4gICAgICAweGE2MmE0YTU2LCAweDNmMzEyNWY5LCAweDVlZjQ3ZTFjLCAweDkwMjkzMTdjLFxuICAgICAgMHhmZGY4ZTgwMiwgMHgwNDI3MmY3MCwgMHg4MGJiMTU1YywgMHgwNTI4MmNlMyxcbiAgICAgIDB4OTVjMTE1NDgsIDB4ZTRjNjZkMjIsIDB4NDhjMTEzM2YsIDB4YzcwZjg2ZGMsXG4gICAgICAweDA3ZjljOWVlLCAweDQxMDQxZjBmLCAweDQwNDc3OWE0LCAweDVkODg2ZTE3LFxuICAgICAgMHgzMjVmNTFlYiwgMHhkNTliYzBkMSwgMHhmMmJjYzE4ZiwgMHg0MTExMzU2NCxcbiAgICAgIDB4MjU3Yjc4MzQsIDB4NjAyYTljNjAsIDB4ZGZmOGU4YTMsIDB4MWY2MzZjMWIsXG4gICAgICAweDBlMTJiNGMyLCAweDAyZTEzMjllLCAweGFmNjY0ZmQxLCAweGNhZDE4MTE1LFxuICAgICAgMHg2YjIzOTVlMCwgMHgzMzNlOTJlMSwgMHgzYjI0MGI2MiwgMHhlZWJlYjkyMixcbiAgICAgIDB4ODViMmEyMGUsIDB4ZTZiYTBkOTksIDB4ZGU3MjBjOGMsIDB4MmRhMmY3MjgsXG4gICAgICAweGQwMTI3ODQ1LCAweDk1Yjc5NGZkLCAweDY0N2QwODYyLCAweGU3Y2NmNWYwLFxuICAgICAgMHg1NDQ5YTM2ZiwgMHg4NzdkNDhmYSwgMHhjMzlkZmQyNywgMHhmMzNlOGQxZSxcbiAgICAgIDB4MGE0NzYzNDEsIDB4OTkyZWZmNzQsIDB4M2E2ZjZlYWIsIDB4ZjRmOGZkMzcsXG4gICAgICAweGE4MTJkYzYwLCAweGExZWJkZGY4LCAweDk5MWJlMTRjLCAweGRiNmU2YjBkLFxuICAgICAgMHhjNjdiNTUxMCwgMHg2ZDY3MmMzNywgMHgyNzY1ZDQzYiwgMHhkY2QwZTgwNCxcbiAgICAgIDB4ZjEyOTBkYzcsIDB4Y2MwMGZmYTMsIDB4YjUzOTBmOTIsIDB4NjkwZmVkMGIsXG4gICAgICAweDY2N2I5ZmZiLCAweGNlZGI3ZDljLCAweGEwOTFjZjBiLCAweGQ5MTU1ZWEzLFxuICAgICAgMHhiYjEzMmY4OCwgMHg1MTViYWQyNCwgMHg3Yjk0NzliZiwgMHg3NjNiZDZlYixcbiAgICAgIDB4MzczOTJlYjMsIDB4Y2MxMTU5NzksIDB4ODAyNmUyOTcsIDB4ZjQyZTMxMmQsXG4gICAgICAweDY4NDJhZGE3LCAweGM2NmEyYjNiLCAweDEyNzU0Y2NjLCAweDc4MmVmMTFjLFxuICAgICAgMHg2YTEyNDIzNywgMHhiNzkyNTFlNywgMHgwNmExYmJlNiwgMHg0YmZiNjM1MCxcbiAgICAgIDB4MWE2YjEwMTgsIDB4MTFjYWVkZmEsIDB4M2QyNWJkZDgsIDB4ZTJlMWMzYzksXG4gICAgICAweDQ0NDIxNjU5LCAweDBhMTIxMzg2LCAweGQ5MGNlYzZlLCAweGQ1YWJlYTJhLFxuICAgICAgMHg2NGFmNjc0ZSwgMHhkYTg2YTg1ZiwgMHhiZWJmZTk4OCwgMHg2NGU0YzNmZSxcbiAgICAgIDB4OWRiYzgwNTcsIDB4ZjBmN2MwODYsIDB4NjA3ODdiZjgsIDB4NjAwMzYwNGQsXG4gICAgICAweGQxZmQ4MzQ2LCAweGY2MzgxZmIwLCAweDc3NDVhZTA0LCAweGQ3MzZmY2NjLFxuICAgICAgMHg4MzQyNmIzMywgMHhmMDFlYWI3MSwgMHhiMDgwNDE4NywgMHgzYzAwNWU1ZixcbiAgICAgIDB4NzdhMDU3YmUsIDB4YmRlOGFlMjQsIDB4NTU0NjQyOTksIDB4YmY1ODJlNjEsXG4gICAgICAweDRlNThmNDhmLCAweGYyZGRmZGEyLCAweGY0NzRlZjM4LCAweDg3ODliZGMyLFxuICAgICAgMHg1MzY2ZjljMywgMHhjOGIzOGU3NCwgMHhiNDc1ZjI1NSwgMHg0NmZjZDliOSxcbiAgICAgIDB4N2FlYjI2NjEsIDB4OGIxZGRmODQsIDB4ODQ2YTBlNzksIDB4OTE1Zjk1ZTIsXG4gICAgICAweDQ2NmU1OThlLCAweDIwYjQ1NzcwLCAweDhjZDU1NTkxLCAweGM5MDJkZTRjLFxuICAgICAgMHhiOTBiYWNlMSwgMHhiYjgyMDVkMCwgMHgxMWE4NjI0OCwgMHg3NTc0YTk5ZSxcbiAgICAgIDB4Yjc3ZjE5YjYsIDB4ZTBhOWRjMDksIDB4NjYyZDA5YTEsIDB4YzQzMjQ2MzMsXG4gICAgICAweGU4NWExZjAyLCAweDA5ZjBiZThjLCAweDRhOTlhMDI1LCAweDFkNmVmZTEwLFxuICAgICAgMHgxYWI5M2QxZCwgMHgwYmE1YTRkZiwgMHhhMTg2ZjIwZiwgMHgyODY4ZjE2OSxcbiAgICAgIDB4ZGNiN2RhODMsIDB4NTczOTA2ZmUsIDB4YTFlMmNlOWIsIDB4NGZjZDdmNTIsXG4gICAgICAweDUwMTE1ZTAxLCAweGE3MDY4M2ZhLCAweGEwMDJiNWM0LCAweDBkZTZkMDI3LFxuICAgICAgMHg5YWY4OGMyNywgMHg3NzNmODY0MSwgMHhjMzYwNGMwNiwgMHg2MWE4MDZiNSxcbiAgICAgIDB4ZjAxNzdhMjgsIDB4YzBmNTg2ZTAsIDB4MDA2MDU4YWEsIDB4MzBkYzdkNjIsXG4gICAgICAweDExZTY5ZWQ3LCAweDIzMzhlYTYzLCAweDUzYzJkZDk0LCAweGMyYzIxNjM0LFxuICAgICAgMHhiYmNiZWU1NiwgMHg5MGJjYjZkZSwgMHhlYmZjN2RhMSwgMHhjZTU5MWQ3NixcbiAgICAgIDB4NmYwNWU0MDksIDB4NGI3YzAxODgsIDB4Mzk3MjBhM2QsIDB4N2M5MjdjMjQsXG4gICAgICAweDg2ZTM3MjVmLCAweDcyNGQ5ZGI5LCAweDFhYzE1YmI0LCAweGQzOWViOGZjLFxuICAgICAgMHhlZDU0NTU3OCwgMHgwOGZjYTViNSwgMHhkODNkN2NkMywgMHg0ZGFkMGZjNCxcbiAgICAgIDB4MWU1MGVmNWUsIDB4YjE2MWU2ZjgsIDB4YTI4NTE0ZDksIDB4NmM1MTEzM2MsXG4gICAgICAweDZmZDVjN2U3LCAweDU2ZTE0ZWM0LCAweDM2MmFiZmNlLCAweGRkYzZjODM3LFxuICAgICAgMHhkNzlhMzIzNCwgMHg5MjYzODIxMiwgMHg2NzBlZmE4ZSwgMHg0MDYwMDBlMF0pLFxuICAgIG5ldyBVaW50MzJBcnJheShbXG4gICAgICAweDNhMzljZTM3LCAweGQzZmFmNWNmLCAweGFiYzI3NzM3LCAweDVhYzUyZDFiLFxuICAgICAgMHg1Y2IwNjc5ZSwgMHg0ZmEzMzc0MiwgMHhkMzgyMjc0MCwgMHg5OWJjOWJiZSxcbiAgICAgIDB4ZDUxMThlOWQsIDB4YmYwZjczMTUsIDB4ZDYyZDFjN2UsIDB4YzcwMGM0N2IsXG4gICAgICAweGI3OGMxYjZiLCAweDIxYTE5MDQ1LCAweGIyNmViMWJlLCAweDZhMzY2ZWI0LFxuICAgICAgMHg1NzQ4YWIyZiwgMHhiYzk0NmU3OSwgMHhjNmEzNzZkMiwgMHg2NTQ5YzJjOCxcbiAgICAgIDB4NTMwZmY4ZWUsIDB4NDY4ZGRlN2QsIDB4ZDU3MzBhMWQsIDB4NGNkMDRkYzYsXG4gICAgICAweDI5MzliYmRiLCAweGE5YmE0NjUwLCAweGFjOTUyNmU4LCAweGJlNWVlMzA0LFxuICAgICAgMHhhMWZhZDVmMCwgMHg2YTJkNTE5YSwgMHg2M2VmOGNlMiwgMHg5YTg2ZWUyMixcbiAgICAgIDB4YzA4OWMyYjgsIDB4NDMyNDJlZjYsIDB4YTUxZTAzYWEsIDB4OWNmMmQwYTQsXG4gICAgICAweDgzYzA2MWJhLCAweDliZTk2YTRkLCAweDhmZTUxNTUwLCAweGJhNjQ1YmQ2LFxuICAgICAgMHgyODI2YTJmOSwgMHhhNzNhM2FlMSwgMHg0YmE5OTU4NiwgMHhlZjU1NjJlOSxcbiAgICAgIDB4YzcyZmVmZDMsIDB4Zjc1MmY3ZGEsIDB4M2YwNDZmNjksIDB4NzdmYTBhNTksXG4gICAgICAweDgwZTRhOTE1LCAweDg3YjA4NjAxLCAweDliMDllNmFkLCAweDNiM2VlNTkzLFxuICAgICAgMHhlOTkwZmQ1YSwgMHg5ZTM0ZDc5NywgMHgyY2YwYjdkOSwgMHgwMjJiOGI1MSxcbiAgICAgIDB4OTZkNWFjM2EsIDB4MDE3ZGE2N2QsIDB4ZDFjZjNlZDYsIDB4N2M3ZDJkMjgsXG4gICAgICAweDFmOWYyNWNmLCAweGFkZjJiODliLCAweDVhZDZiNDcyLCAweDVhODhmNTRjLFxuICAgICAgMHhlMDI5YWM3MSwgMHhlMDE5YTVlNiwgMHg0N2IwYWNmZCwgMHhlZDkzZmE5YixcbiAgICAgIDB4ZThkM2M0OGQsIDB4MjgzYjU3Y2MsIDB4ZjhkNTY2MjksIDB4NzkxMzJlMjgsXG4gICAgICAweDc4NWYwMTkxLCAweGVkNzU2MDU1LCAweGY3OTYwZTQ0LCAweGUzZDM1ZThjLFxuICAgICAgMHgxNTA1NmRkNCwgMHg4OGY0NmRiYSwgMHgwM2ExNjEyNSwgMHgwNTY0ZjBiZCxcbiAgICAgIDB4YzNlYjllMTUsIDB4M2M5MDU3YTIsIDB4OTcyNzFhZWMsIDB4YTkzYTA3MmEsXG4gICAgICAweDFiM2Y2ZDliLCAweDFlNjMyMWY1LCAweGY1OWM2NmZiLCAweDI2ZGNmMzE5LFxuICAgICAgMHg3NTMzZDkyOCwgMHhiMTU1ZmRmNSwgMHgwMzU2MzQ4MiwgMHg4YWJhM2NiYixcbiAgICAgIDB4Mjg1MTc3MTEsIDB4YzIwYWQ5ZjgsIDB4YWJjYzUxNjcsIDB4Y2NhZDkyNWYsXG4gICAgICAweDRkZTgxNzUxLCAweDM4MzBkYzhlLCAweDM3OWQ1ODYyLCAweDkzMjBmOTkxLFxuICAgICAgMHhlYTdhOTBjMiwgMHhmYjNlN2JjZSwgMHg1MTIxY2U2NCwgMHg3NzRmYmUzMixcbiAgICAgIDB4YThiNmUzN2UsIDB4YzMyOTNkNDYsIDB4NDhkZTUzNjksIDB4NjQxM2U2ODAsXG4gICAgICAweGEyYWUwODEwLCAweGRkNmRiMjI0LCAweDY5ODUyZGZkLCAweDA5MDcyMTY2LFxuICAgICAgMHhiMzlhNDYwYSwgMHg2NDQ1YzBkZCwgMHg1ODZjZGVjZiwgMHgxYzIwYzhhZSxcbiAgICAgIDB4NWJiZWY3ZGQsIDB4MWI1ODhkNDAsIDB4Y2NkMjAxN2YsIDB4NmJiNGUzYmIsXG4gICAgICAweGRkYTI2YTdlLCAweDNhNTlmZjQ1LCAweDNlMzUwYTQ0LCAweGJjYjRjZGQ1LFxuICAgICAgMHg3MmVhY2VhOCwgMHhmYTY0ODRiYiwgMHg4ZDY2MTJhZSwgMHhiZjNjNmY0NyxcbiAgICAgIDB4ZDI5YmU0NjMsIDB4NTQyZjVkOWUsIDB4YWVjMjc3MWIsIDB4ZjY0ZTYzNzAsXG4gICAgICAweDc0MGUwZDhkLCAweGU3NWIxMzU3LCAweGY4NzIxNjcxLCAweGFmNTM3ZDVkLFxuICAgICAgMHg0MDQwY2IwOCwgMHg0ZWI0ZTJjYywgMHgzNGQyNDY2YSwgMHgwMTE1YWY4NCxcbiAgICAgIDB4ZTFiMDA0MjgsIDB4OTU5ODNhMWQsIDB4MDZiODlmYjQsIDB4Y2U2ZWEwNDgsXG4gICAgICAweDZmM2YzYjgyLCAweDM1MjBhYjgyLCAweDAxMWExZDRiLCAweDI3NzIyN2Y4LFxuICAgICAgMHg2MTE1NjBiMSwgMHhlNzkzM2ZkYywgMHhiYjNhNzkyYiwgMHgzNDQ1MjViZCxcbiAgICAgIDB4YTA4ODM5ZTEsIDB4NTFjZTc5NGIsIDB4MmYzMmM5YjcsIDB4YTAxZmJhYzksXG4gICAgICAweGUwMWNjODdlLCAweGJjYzdkMWY2LCAweGNmMDExMWMzLCAweGExZThhYWM3LFxuICAgICAgMHgxYTkwODc0OSwgMHhkNDRmYmQ5YSwgMHhkMGRhZGVjYiwgMHhkNTBhZGEzOCxcbiAgICAgIDB4MDMzOWMzMmEsIDB4YzY5MTM2NjcsIDB4OGRmOTMxN2MsIDB4ZTBiMTJiNGYsXG4gICAgICAweGY3OWU1OWI3LCAweDQzZjViYjNhLCAweGYyZDUxOWZmLCAweDI3ZDk0NTljLFxuICAgICAgMHhiZjk3MjIyYywgMHgxNWU2ZmMyYSwgMHgwZjkxZmM3MSwgMHg5Yjk0MTUyNSxcbiAgICAgIDB4ZmFlNTkzNjEsIDB4Y2ViNjljZWIsIDB4YzJhODY0NTksIDB4MTJiYWE4ZDEsXG4gICAgICAweGI2YzEwNzVlLCAweGUzMDU2YTBjLCAweDEwZDI1MDY1LCAweGNiMDNhNDQyLFxuICAgICAgMHhlMGVjNmUwZSwgMHgxNjk4ZGIzYiwgMHg0Yzk4YTBiZSwgMHgzMjc4ZTk2NCxcbiAgICAgIDB4OWYxZjk1MzIsIDB4ZTBkMzkyZGYsIDB4ZDNhMDM0MmIsIDB4ODk3MWYyMWUsXG4gICAgICAweDFiMGE3NDQxLCAweDRiYTMzNDhjLCAweGM1YmU3MTIwLCAweGMzNzYzMmQ4LFxuICAgICAgMHhkZjM1OWY4ZCwgMHg5Yjk5MmYyZSwgMHhlNjBiNmY0NywgMHgwZmUzZjExZCxcbiAgICAgIDB4ZTU0Y2RhNTQsIDB4MWVkYWQ4OTEsIDB4Y2U2Mjc5Y2YsIDB4Y2QzZTdlNmYsXG4gICAgICAweDE2MThiMTY2LCAweGZkMmMxZDA1LCAweDg0OGZkMmM1LCAweGY2ZmIyMjk5LFxuICAgICAgMHhmNTIzZjM1NywgMHhhNjMyNzYyMywgMHg5M2E4MzUzMSwgMHg1NmNjY2QwMixcbiAgICAgIDB4YWNmMDgxNjIsIDB4NWE3NWViYjUsIDB4NmUxNjM2OTcsIDB4ODhkMjczY2MsXG4gICAgICAweGRlOTY2MjkyLCAweDgxYjk0OWQwLCAweDRjNTA5MDFiLCAweDcxYzY1NjE0LFxuICAgICAgMHhlNmM2YzdiZCwgMHgzMjdhMTQwYSwgMHg0NWUxZDAwNiwgMHhjM2YyN2I5YSxcbiAgICAgIDB4YzlhYTUzZmQsIDB4NjJhODBmMDAsIDB4YmIyNWJmZTIsIDB4MzViZGQyZjYsXG4gICAgICAweDcxMTI2OTA1LCAweGIyMDQwMjIyLCAweGI2Y2JjZjdjLCAweGNkNzY5YzJiLFxuICAgICAgMHg1MzExM2VjMCwgMHgxNjQwZTNkMywgMHgzOGFiYmQ2MCwgMHgyNTQ3YWRmMCxcbiAgICAgIDB4YmEzODIwOWMsIDB4Zjc0NmNlNzYsIDB4NzdhZmExYzUsIDB4MjA3NTYwNjAsXG4gICAgICAweDg1Y2JmZTRlLCAweDhhZTg4ZGQ4LCAweDdhYWFmOWIwLCAweDRjZjlhYTdlLFxuICAgICAgMHgxOTQ4YzI1YywgMHgwMmZiOGE4YywgMHgwMWMzNmFlNCwgMHhkNmViZTFmOSxcbiAgICAgIDB4OTBkNGY4NjksIDB4YTY1Y2RlYTAsIDB4M2YwOTI1MmQsIDB4YzIwOGU2OWYsXG4gICAgICAweGI3NGU2MTMyLCAweGNlNzdlMjViLCAweDU3OGZkZmUzLCAweDNhYzM3MmU2XSlcbiAgICBdO1xuICB0aGlzLlAgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4MjQzZjZhODgsIDB4ODVhMzA4ZDMsIDB4MTMxOThhMmUsIDB4MDM3MDczNDQsXG4gICAgMHhhNDA5MzgyMiwgMHgyOTlmMzFkMCwgMHgwODJlZmE5OCwgMHhlYzRlNmM4OSxcbiAgICAweDQ1MjgyMWU2LCAweDM4ZDAxMzc3LCAweGJlNTQ2NmNmLCAweDM0ZTkwYzZjLFxuICAgIDB4YzBhYzI5YjcsIDB4Yzk3YzUwZGQsIDB4M2Y4NGQ1YjUsIDB4YjU0NzA5MTcsXG4gICAgMHg5MjE2ZDVkOSwgMHg4OTc5ZmIxYl0pO1xufTtcblxuZnVuY3Rpb24gRihTLCB4OCwgaSkge1xuICByZXR1cm4gKCgoU1swXVt4OFtpKzNdXSArXG4gICAgICAgICAgICBTWzFdW3g4W2krMl1dKSBeXG4gICAgICAgICAgICBTWzJdW3g4W2krMV1dKSArXG4gICAgICAgICAgICBTWzNdW3g4W2ldXSk7XG59O1xuXG5CbG93ZmlzaC5wcm90b3R5cGUuZW5jaXBoZXIgPSBmdW5jdGlvbih4LCB4OCkge1xuICBpZiAoeDggPT09IHVuZGVmaW5lZCkge1xuICAgIHg4ID0gbmV3IFVpbnQ4QXJyYXkoeC5idWZmZXIpO1xuICAgIGlmICh4LmJ5dGVPZmZzZXQgIT09IDApXG4gICAgICB4OCA9IHg4LnN1YmFycmF5KHguYnl0ZU9mZnNldCk7XG4gIH1cbiAgeFswXSBePSB0aGlzLlBbMF07XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgMTY7IGkgKz0gMikge1xuICAgIHhbMV0gXj0gRih0aGlzLlMsIHg4LCAwKSBeIHRoaXMuUFtpXTtcbiAgICB4WzBdIF49IEYodGhpcy5TLCB4OCwgNCkgXiB0aGlzLlBbaSsxXTtcbiAgfVxuICB2YXIgdCA9IHhbMF07XG4gIHhbMF0gPSB4WzFdIF4gdGhpcy5QWzE3XTtcbiAgeFsxXSA9IHQ7XG59O1xuXG5CbG93ZmlzaC5wcm90b3R5cGUuZGVjaXBoZXIgPSBmdW5jdGlvbih4KSB7XG4gIHZhciB4OCA9IG5ldyBVaW50OEFycmF5KHguYnVmZmVyKTtcbiAgaWYgKHguYnl0ZU9mZnNldCAhPT0gMClcbiAgICB4OCA9IHg4LnN1YmFycmF5KHguYnl0ZU9mZnNldCk7XG4gIHhbMF0gXj0gdGhpcy5QWzE3XTtcbiAgZm9yICh2YXIgaSA9IDE2OyBpID4gMDsgaSAtPSAyKSB7XG4gICAgeFsxXSBePSBGKHRoaXMuUywgeDgsIDApIF4gdGhpcy5QW2ldO1xuICAgIHhbMF0gXj0gRih0aGlzLlMsIHg4LCA0KSBeIHRoaXMuUFtpLTFdO1xuICB9XG4gIHZhciB0ID0geFswXTtcbiAgeFswXSA9IHhbMV0gXiB0aGlzLlBbMF07XG4gIHhbMV0gPSB0O1xufTtcblxuZnVuY3Rpb24gc3RyZWFtMndvcmQoZGF0YSwgZGF0YWJ5dGVzKXtcbiAgdmFyIGksIHRlbXAgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgNDsgaSsrLCBCTEZfSisrKSB7XG4gICAgaWYgKEJMRl9KID49IGRhdGFieXRlcykgQkxGX0ogPSAwO1xuICAgIHRlbXAgPSAodGVtcCA8PCA4KSB8IGRhdGFbQkxGX0pdO1xuICB9XG4gIHJldHVybiB0ZW1wO1xufTtcblxuQmxvd2Zpc2gucHJvdG90eXBlLmV4cGFuZDBzdGF0ZSA9IGZ1bmN0aW9uKGtleSwga2V5Ynl0ZXMpIHtcbiAgdmFyIGQgPSBuZXcgVWludDMyQXJyYXkoMiksIGksIGs7XG4gIHZhciBkOCA9IG5ldyBVaW50OEFycmF5KGQuYnVmZmVyKTtcblxuICBmb3IgKGkgPSAwLCBCTEZfSiA9IDA7IGkgPCAxODsgaSsrKSB7XG4gICAgdGhpcy5QW2ldIF49IHN0cmVhbTJ3b3JkKGtleSwga2V5Ynl0ZXMpO1xuICB9XG4gIEJMRl9KID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgMTg7IGkgKz0gMikge1xuICAgIHRoaXMuZW5jaXBoZXIoZCwgZDgpO1xuICAgIHRoaXMuUFtpXSAgID0gZFswXTtcbiAgICB0aGlzLlBbaSsxXSA9IGRbMV07XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgZm9yIChrID0gMDsgayA8IDI1NjsgayArPSAyKSB7XG4gICAgICB0aGlzLmVuY2lwaGVyKGQsIGQ4KTtcbiAgICAgIHRoaXMuU1tpXVtrXSAgID0gZFswXTtcbiAgICAgIHRoaXMuU1tpXVtrKzFdID0gZFsxXTtcbiAgICB9XG4gIH1cbn07XG5cbkJsb3dmaXNoLnByb3RvdHlwZS5leHBhbmRzdGF0ZSA9IGZ1bmN0aW9uKGRhdGEsIGRhdGFieXRlcywga2V5LCBrZXlieXRlcykge1xuICB2YXIgZCA9IG5ldyBVaW50MzJBcnJheSgyKSwgaSwgaztcblxuICBmb3IgKGkgPSAwLCBCTEZfSiA9IDA7IGkgPCAxODsgaSsrKSB7XG4gICAgdGhpcy5QW2ldIF49IHN0cmVhbTJ3b3JkKGtleSwga2V5Ynl0ZXMpO1xuICB9XG5cbiAgZm9yIChpID0gMCwgQkxGX0ogPSAwOyBpIDwgMTg7IGkgKz0gMikge1xuICAgIGRbMF0gXj0gc3RyZWFtMndvcmQoZGF0YSwgZGF0YWJ5dGVzKTtcbiAgICBkWzFdIF49IHN0cmVhbTJ3b3JkKGRhdGEsIGRhdGFieXRlcyk7XG4gICAgdGhpcy5lbmNpcGhlcihkKTtcbiAgICB0aGlzLlBbaV0gICA9IGRbMF07XG4gICAgdGhpcy5QW2krMV0gPSBkWzFdO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAoayA9IDA7IGsgPCAyNTY7IGsgKz0gMikge1xuICAgICAgZFswXSBePSBzdHJlYW0yd29yZChkYXRhLCBkYXRhYnl0ZXMpO1xuICAgICAgZFsxXSBePSBzdHJlYW0yd29yZChkYXRhLCBkYXRhYnl0ZXMpO1xuICAgICAgdGhpcy5lbmNpcGhlcihkKTtcbiAgICAgIHRoaXMuU1tpXVtrXSAgID0gZFswXTtcbiAgICAgIHRoaXMuU1tpXVtrKzFdID0gZFsxXTtcbiAgICB9XG4gIH1cbiAgQkxGX0ogPSAwO1xufTtcblxuQmxvd2Zpc2gucHJvdG90eXBlLmVuYyA9IGZ1bmN0aW9uKGRhdGEsIGJsb2Nrcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrczsgaSsrKSB7XG4gICAgdGhpcy5lbmNpcGhlcihkYXRhLnN1YmFycmF5KGkqMikpO1xuICB9XG59O1xuXG5CbG93ZmlzaC5wcm90b3R5cGUuZGVjID0gZnVuY3Rpb24oZGF0YSwgYmxvY2tzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzOyBpKyspIHtcbiAgICB0aGlzLmRlY2lwaGVyKGRhdGEuc3ViYXJyYXkoaSoyKSk7XG4gIH1cbn07XG5cbnZhciBCQ1JZUFRfQkxPQ0tTID0gOCxcbiAgICBCQ1JZUFRfSEFTSFNJWkUgPSAzMjtcblxuZnVuY3Rpb24gYmNyeXB0X2hhc2goc2hhMnBhc3MsIHNoYTJzYWx0LCBvdXQpIHtcbiAgdmFyIHN0YXRlID0gbmV3IEJsb3dmaXNoKCksXG4gICAgICBjZGF0YSA9IG5ldyBVaW50MzJBcnJheShCQ1JZUFRfQkxPQ0tTKSwgaSxcbiAgICAgIGNpcGhlcnRleHQgPSBuZXcgVWludDhBcnJheShbNzksMTIwLDEyMSw5OSwxMDQsMTE0LDExMSwxMDksOTcsMTE2LDEwNSxcbiAgICAgICAgICAgIDk5LDY2LDEwOCwxMTEsMTE5LDEwMiwxMDUsMTE1LDEwNCw4MywxMTksOTcsMTE2LDY4LDEyMSwxMTAsOTcsMTA5LFxuICAgICAgICAgICAgMTA1LDExNiwxMDFdKTsgLy9cIk94eWNocm9tYXRpY0Jsb3dmaXNoU3dhdER5bmFtaXRlXCJcblxuICBzdGF0ZS5leHBhbmRzdGF0ZShzaGEyc2FsdCwgNjQsIHNoYTJwYXNzLCA2NCk7XG4gIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgc3RhdGUuZXhwYW5kMHN0YXRlKHNoYTJzYWx0LCA2NCk7XG4gICAgc3RhdGUuZXhwYW5kMHN0YXRlKHNoYTJwYXNzLCA2NCk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgQkNSWVBUX0JMT0NLUzsgaSsrKVxuICAgIGNkYXRhW2ldID0gc3RyZWFtMndvcmQoY2lwaGVydGV4dCwgY2lwaGVydGV4dC5ieXRlTGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspXG4gICAgc3RhdGUuZW5jKGNkYXRhLCBjZGF0YS5ieXRlTGVuZ3RoIC8gOCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IEJDUllQVF9CTE9DS1M7IGkrKykge1xuICAgIG91dFs0KmkrM10gPSBjZGF0YVtpXSA+Pj4gMjQ7XG4gICAgb3V0WzQqaSsyXSA9IGNkYXRhW2ldID4+PiAxNjtcbiAgICBvdXRbNCppKzFdID0gY2RhdGFbaV0gPj4+IDg7XG4gICAgb3V0WzQqaSswXSA9IGNkYXRhW2ldO1xuICB9XG59O1xuXG5mdW5jdGlvbiBiY3J5cHRfcGJrZGYocGFzcywgcGFzc2xlbiwgc2FsdCwgc2FsdGxlbiwga2V5LCBrZXlsZW4sIHJvdW5kcykge1xuICB2YXIgc2hhMnBhc3MgPSBuZXcgVWludDhBcnJheSg2NCksXG4gICAgICBzaGEyc2FsdCA9IG5ldyBVaW50OEFycmF5KDY0KSxcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KEJDUllQVF9IQVNIU0laRSksXG4gICAgICB0bXBvdXQgPSBuZXcgVWludDhBcnJheShCQ1JZUFRfSEFTSFNJWkUpLFxuICAgICAgY291bnRzYWx0ID0gbmV3IFVpbnQ4QXJyYXkoc2FsdGxlbis0KSxcbiAgICAgIGksIGosIGFtdCwgc3RyaWRlLCBkZXN0LCBjb3VudCxcbiAgICAgIG9yaWdrZXlsZW4gPSBrZXlsZW47XG5cbiAgaWYgKHJvdW5kcyA8IDEpXG4gICAgcmV0dXJuIC0xO1xuICBpZiAocGFzc2xlbiA9PT0gMCB8fCBzYWx0bGVuID09PSAwIHx8IGtleWxlbiA9PT0gMCB8fFxuICAgICAga2V5bGVuID4gKG91dC5ieXRlTGVuZ3RoICogb3V0LmJ5dGVMZW5ndGgpIHx8IHNhbHRsZW4gPiAoMTw8MjApKVxuICAgIHJldHVybiAtMTtcblxuICBzdHJpZGUgPSBNYXRoLmZsb29yKChrZXlsZW4gKyBvdXQuYnl0ZUxlbmd0aCAtIDEpIC8gb3V0LmJ5dGVMZW5ndGgpO1xuICBhbXQgPSBNYXRoLmZsb29yKChrZXlsZW4gKyBzdHJpZGUgLSAxKSAvIHN0cmlkZSk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNhbHRsZW47IGkrKylcbiAgICBjb3VudHNhbHRbaV0gPSBzYWx0W2ldO1xuXG4gIGNyeXB0b19oYXNoX3NoYTUxMihzaGEycGFzcywgcGFzcywgcGFzc2xlbik7XG5cbiAgZm9yIChjb3VudCA9IDE7IGtleWxlbiA+IDA7IGNvdW50KyspIHtcbiAgICBjb3VudHNhbHRbc2FsdGxlbiswXSA9IGNvdW50ID4+PiAyNDtcbiAgICBjb3VudHNhbHRbc2FsdGxlbisxXSA9IGNvdW50ID4+PiAxNjtcbiAgICBjb3VudHNhbHRbc2FsdGxlbisyXSA9IGNvdW50ID4+PiAgODtcbiAgICBjb3VudHNhbHRbc2FsdGxlbiszXSA9IGNvdW50O1xuXG4gICAgY3J5cHRvX2hhc2hfc2hhNTEyKHNoYTJzYWx0LCBjb3VudHNhbHQsIHNhbHRsZW4gKyA0KTtcbiAgICBiY3J5cHRfaGFzaChzaGEycGFzcywgc2hhMnNhbHQsIHRtcG91dCk7XG4gICAgZm9yIChpID0gb3V0LmJ5dGVMZW5ndGg7IGktLTspXG4gICAgICBvdXRbaV0gPSB0bXBvdXRbaV07XG5cbiAgICBmb3IgKGkgPSAxOyBpIDwgcm91bmRzOyBpKyspIHtcbiAgICAgIGNyeXB0b19oYXNoX3NoYTUxMihzaGEyc2FsdCwgdG1wb3V0LCB0bXBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgICBiY3J5cHRfaGFzaChzaGEycGFzcywgc2hhMnNhbHQsIHRtcG91dCk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgb3V0LmJ5dGVMZW5ndGg7IGorKylcbiAgICAgICAgb3V0W2pdIF49IHRtcG91dFtqXTtcbiAgICB9XG5cbiAgICBhbXQgPSBNYXRoLm1pbihhbXQsIGtleWxlbik7XG4gICAgZm9yIChpID0gMDsgaSA8IGFtdDsgaSsrKSB7XG4gICAgICBkZXN0ID0gaSAqIHN0cmlkZSArIChjb3VudCAtIDEpO1xuICAgICAgaWYgKGRlc3QgPj0gb3JpZ2tleWxlbilcbiAgICAgICAgYnJlYWs7XG4gICAgICBrZXlbZGVzdF0gPSBvdXRbaV07XG4gICAgfVxuICAgIGtleWxlbiAtPSBpO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgIEJMT0NLUzogQkNSWVBUX0JMT0NLUyxcbiAgICAgIEhBU0hTSVpFOiBCQ1JZUFRfSEFTSFNJWkUsXG4gICAgICBoYXNoOiBiY3J5cHRfaGFzaCxcbiAgICAgIHBia2RmOiBiY3J5cHRfcGJrZGZcbn07XG4iLCIoZnVuY3Rpb24obmFjbCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBQb3J0ZWQgaW4gMjAxNCBieSBEbWl0cnkgQ2hlc3RueWtoIGFuZCBEZXZpIE1hbmRpcmkuXG4vLyBQdWJsaWMgZG9tYWluLlxuLy9cbi8vIEltcGxlbWVudGF0aW9uIGRlcml2ZWQgZnJvbSBUd2VldE5hQ2wgdmVyc2lvbiAyMDE0MDQyNy5cbi8vIFNlZSBmb3IgZGV0YWlsczogaHR0cDovL3R3ZWV0bmFjbC5jci55cC50by9cblxudmFyIGdmID0gZnVuY3Rpb24oaW5pdCkge1xuICB2YXIgaSwgciA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpO1xuICBpZiAoaW5pdCkgZm9yIChpID0gMDsgaSA8IGluaXQubGVuZ3RoOyBpKyspIHJbaV0gPSBpbml0W2ldO1xuICByZXR1cm4gcjtcbn07XG5cbi8vICBQbHVnZ2FibGUsIGluaXRpYWxpemVkIGluIGhpZ2gtbGV2ZWwgQVBJIGJlbG93LlxudmFyIHJhbmRvbWJ5dGVzID0gZnVuY3Rpb24oLyogeCwgbiAqLykgeyB0aHJvdyBuZXcgRXJyb3IoJ25vIFBSTkcnKTsgfTtcblxudmFyIF8wID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xudmFyIF85ID0gbmV3IFVpbnQ4QXJyYXkoMzIpOyBfOVswXSA9IDk7XG5cbnZhciBnZjAgPSBnZigpLFxuICAgIGdmMSA9IGdmKFsxXSksXG4gICAgXzEyMTY2NSA9IGdmKFsweGRiNDEsIDFdKSxcbiAgICBEID0gZ2YoWzB4NzhhMywgMHgxMzU5LCAweDRkY2EsIDB4NzVlYiwgMHhkOGFiLCAweDQxNDEsIDB4MGE0ZCwgMHgwMDcwLCAweGU4OTgsIDB4Nzc3OSwgMHg0MDc5LCAweDhjYzcsIDB4ZmU3MywgMHgyYjZmLCAweDZjZWUsIDB4NTIwM10pLFxuICAgIEQyID0gZ2YoWzB4ZjE1OSwgMHgyNmIyLCAweDliOTQsIDB4ZWJkNiwgMHhiMTU2LCAweDgyODMsIDB4MTQ5YSwgMHgwMGUwLCAweGQxMzAsIDB4ZWVmMywgMHg4MGYyLCAweDE5OGUsIDB4ZmNlNywgMHg1NmRmLCAweGQ5ZGMsIDB4MjQwNl0pLFxuICAgIFggPSBnZihbMHhkNTFhLCAweDhmMjUsIDB4MmQ2MCwgMHhjOTU2LCAweGE3YjIsIDB4OTUyNSwgMHhjNzYwLCAweDY5MmMsIDB4ZGM1YywgMHhmZGQ2LCAweGUyMzEsIDB4YzBhNCwgMHg1M2ZlLCAweGNkNmUsIDB4MzZkMywgMHgyMTY5XSksXG4gICAgWSA9IGdmKFsweDY2NTgsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjZdKSxcbiAgICBJID0gZ2YoWzB4YTBiMCwgMHg0YTBlLCAweDFiMjcsIDB4YzRlZSwgMHhlNDc4LCAweGFkMmYsIDB4MTgwNiwgMHgyZjQzLCAweGQ3YTcsIDB4M2RmYiwgMHgwMDk5LCAweDJiNGQsIDB4ZGYwYiwgMHg0ZmMxLCAweDI0ODAsIDB4MmI4M10pO1xuXG5mdW5jdGlvbiB0czY0KHgsIGksIGgsIGwpIHtcbiAgeFtpXSAgID0gKGggPj4gMjQpICYgMHhmZjtcbiAgeFtpKzFdID0gKGggPj4gMTYpICYgMHhmZjtcbiAgeFtpKzJdID0gKGggPj4gIDgpICYgMHhmZjtcbiAgeFtpKzNdID0gaCAmIDB4ZmY7XG4gIHhbaSs0XSA9IChsID4+IDI0KSAgJiAweGZmO1xuICB4W2krNV0gPSAobCA+PiAxNikgICYgMHhmZjtcbiAgeFtpKzZdID0gKGwgPj4gIDgpICAmIDB4ZmY7XG4gIHhbaSs3XSA9IGwgJiAweGZmO1xufVxuXG5mdW5jdGlvbiB2bih4LCB4aSwgeSwgeWksIG4pIHtcbiAgdmFyIGksZCA9IDA7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGQgfD0geFt4aStpXV55W3lpK2ldO1xuICByZXR1cm4gKDEgJiAoKGQgLSAxKSA+Pj4gOCkpIC0gMTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3ZlcmlmeV8xNih4LCB4aSwgeSwgeWkpIHtcbiAgcmV0dXJuIHZuKHgseGkseSx5aSwxNik7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b192ZXJpZnlfMzIoeCwgeGksIHksIHlpKSB7XG4gIHJldHVybiB2bih4LHhpLHkseWksMzIpO1xufVxuXG5mdW5jdGlvbiBjb3JlX3NhbHNhMjAobywgcCwgaywgYykge1xuICB2YXIgajAgID0gY1sgMF0gJiAweGZmIHwgKGNbIDFdICYgMHhmZik8PDggfCAoY1sgMl0gJiAweGZmKTw8MTYgfCAoY1sgM10gJiAweGZmKTw8MjQsXG4gICAgICBqMSAgPSBrWyAwXSAmIDB4ZmYgfCAoa1sgMV0gJiAweGZmKTw8OCB8IChrWyAyXSAmIDB4ZmYpPDwxNiB8IChrWyAzXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoyICA9IGtbIDRdICYgMHhmZiB8IChrWyA1XSAmIDB4ZmYpPDw4IHwgKGtbIDZdICYgMHhmZik8PDE2IHwgKGtbIDddICYgMHhmZik8PDI0LFxuICAgICAgajMgID0ga1sgOF0gJiAweGZmIHwgKGtbIDldICYgMHhmZik8PDggfCAoa1sxMF0gJiAweGZmKTw8MTYgfCAoa1sxMV0gJiAweGZmKTw8MjQsXG4gICAgICBqNCAgPSBrWzEyXSAmIDB4ZmYgfCAoa1sxM10gJiAweGZmKTw8OCB8IChrWzE0XSAmIDB4ZmYpPDwxNiB8IChrWzE1XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo1ICA9IGNbIDRdICYgMHhmZiB8IChjWyA1XSAmIDB4ZmYpPDw4IHwgKGNbIDZdICYgMHhmZik8PDE2IHwgKGNbIDddICYgMHhmZik8PDI0LFxuICAgICAgajYgID0gcFsgMF0gJiAweGZmIHwgKHBbIDFdICYgMHhmZik8PDggfCAocFsgMl0gJiAweGZmKTw8MTYgfCAocFsgM10gJiAweGZmKTw8MjQsXG4gICAgICBqNyAgPSBwWyA0XSAmIDB4ZmYgfCAocFsgNV0gJiAweGZmKTw8OCB8IChwWyA2XSAmIDB4ZmYpPDwxNiB8IChwWyA3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo4ICA9IHBbIDhdICYgMHhmZiB8IChwWyA5XSAmIDB4ZmYpPDw4IHwgKHBbMTBdICYgMHhmZik8PDE2IHwgKHBbMTFdICYgMHhmZik8PDI0LFxuICAgICAgajkgID0gcFsxMl0gJiAweGZmIHwgKHBbMTNdICYgMHhmZik8PDggfCAocFsxNF0gJiAweGZmKTw8MTYgfCAocFsxNV0gJiAweGZmKTw8MjQsXG4gICAgICBqMTAgPSBjWyA4XSAmIDB4ZmYgfCAoY1sgOV0gJiAweGZmKTw8OCB8IChjWzEwXSAmIDB4ZmYpPDwxNiB8IChjWzExXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxMSA9IGtbMTZdICYgMHhmZiB8IChrWzE3XSAmIDB4ZmYpPDw4IHwgKGtbMThdICYgMHhmZik8PDE2IHwgKGtbMTldICYgMHhmZik8PDI0LFxuICAgICAgajEyID0ga1syMF0gJiAweGZmIHwgKGtbMjFdICYgMHhmZik8PDggfCAoa1syMl0gJiAweGZmKTw8MTYgfCAoa1syM10gJiAweGZmKTw8MjQsXG4gICAgICBqMTMgPSBrWzI0XSAmIDB4ZmYgfCAoa1syNV0gJiAweGZmKTw8OCB8IChrWzI2XSAmIDB4ZmYpPDwxNiB8IChrWzI3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxNCA9IGtbMjhdICYgMHhmZiB8IChrWzI5XSAmIDB4ZmYpPDw4IHwgKGtbMzBdICYgMHhmZik8PDE2IHwgKGtbMzFdICYgMHhmZik8PDI0LFxuICAgICAgajE1ID0gY1sxMl0gJiAweGZmIHwgKGNbMTNdICYgMHhmZik8PDggfCAoY1sxNF0gJiAweGZmKTw8MTYgfCAoY1sxNV0gJiAweGZmKTw8MjQ7XG5cbiAgdmFyIHgwID0gajAsIHgxID0gajEsIHgyID0gajIsIHgzID0gajMsIHg0ID0gajQsIHg1ID0gajUsIHg2ID0gajYsIHg3ID0gajcsXG4gICAgICB4OCA9IGo4LCB4OSA9IGo5LCB4MTAgPSBqMTAsIHgxMSA9IGoxMSwgeDEyID0gajEyLCB4MTMgPSBqMTMsIHgxNCA9IGoxNCxcbiAgICAgIHgxNSA9IGoxNSwgdTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDIwOyBpICs9IDIpIHtcbiAgICB1ID0geDAgKyB4MTIgfCAwO1xuICAgIHg0IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4NCArIHgwIHwgMDtcbiAgICB4OCBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDggKyB4NCB8IDA7XG4gICAgeDEyIF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgxMiArIHg4IHwgMDtcbiAgICB4MCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHg1ICsgeDEgfCAwO1xuICAgIHg5IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4OSArIHg1IHwgMDtcbiAgICB4MTMgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHgxMyArIHg5IHwgMDtcbiAgICB4MSBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MSArIHgxMyB8IDA7XG4gICAgeDUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MTAgKyB4NiB8IDA7XG4gICAgeDE0IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MTQgKyB4MTAgfCAwO1xuICAgIHgyIF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4MiArIHgxNCB8IDA7XG4gICAgeDYgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDYgKyB4MiB8IDA7XG4gICAgeDEwIF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDE1ICsgeDExIHwgMDtcbiAgICB4MyBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDMgKyB4MTUgfCAwO1xuICAgIHg3IF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4NyArIHgzIHwgMDtcbiAgICB4MTEgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDExICsgeDcgfCAwO1xuICAgIHgxNSBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgwICsgeDMgfCAwO1xuICAgIHgxIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MSArIHgwIHwgMDtcbiAgICB4MiBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDIgKyB4MSB8IDA7XG4gICAgeDMgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDMgKyB4MiB8IDA7XG4gICAgeDAgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4NSArIHg0IHwgMDtcbiAgICB4NiBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDYgKyB4NSB8IDA7XG4gICAgeDcgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHg3ICsgeDYgfCAwO1xuICAgIHg0IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHg0ICsgeDcgfCAwO1xuICAgIHg1IF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDEwICsgeDkgfCAwO1xuICAgIHgxMSBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDExICsgeDEwIHwgMDtcbiAgICB4OCBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDggKyB4MTEgfCAwO1xuICAgIHg5IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHg5ICsgeDggfCAwO1xuICAgIHgxMCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgxNSArIHgxNCB8IDA7XG4gICAgeDEyIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MTIgKyB4MTUgfCAwO1xuICAgIHgxMyBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDEzICsgeDEyIHwgMDtcbiAgICB4MTQgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDE0ICsgeDEzIHwgMDtcbiAgICB4MTUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcbiAgfVxuICAgeDAgPSAgeDAgKyAgajAgfCAwO1xuICAgeDEgPSAgeDEgKyAgajEgfCAwO1xuICAgeDIgPSAgeDIgKyAgajIgfCAwO1xuICAgeDMgPSAgeDMgKyAgajMgfCAwO1xuICAgeDQgPSAgeDQgKyAgajQgfCAwO1xuICAgeDUgPSAgeDUgKyAgajUgfCAwO1xuICAgeDYgPSAgeDYgKyAgajYgfCAwO1xuICAgeDcgPSAgeDcgKyAgajcgfCAwO1xuICAgeDggPSAgeDggKyAgajggfCAwO1xuICAgeDkgPSAgeDkgKyAgajkgfCAwO1xuICB4MTAgPSB4MTAgKyBqMTAgfCAwO1xuICB4MTEgPSB4MTEgKyBqMTEgfCAwO1xuICB4MTIgPSB4MTIgKyBqMTIgfCAwO1xuICB4MTMgPSB4MTMgKyBqMTMgfCAwO1xuICB4MTQgPSB4MTQgKyBqMTQgfCAwO1xuICB4MTUgPSB4MTUgKyBqMTUgfCAwO1xuXG4gIG9bIDBdID0geDAgPj4+ICAwICYgMHhmZjtcbiAgb1sgMV0gPSB4MCA+Pj4gIDggJiAweGZmO1xuICBvWyAyXSA9IHgwID4+PiAxNiAmIDB4ZmY7XG4gIG9bIDNdID0geDAgPj4+IDI0ICYgMHhmZjtcblxuICBvWyA0XSA9IHgxID4+PiAgMCAmIDB4ZmY7XG4gIG9bIDVdID0geDEgPj4+ICA4ICYgMHhmZjtcbiAgb1sgNl0gPSB4MSA+Pj4gMTYgJiAweGZmO1xuICBvWyA3XSA9IHgxID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1sgOF0gPSB4MiA+Pj4gIDAgJiAweGZmO1xuICBvWyA5XSA9IHgyID4+PiAgOCAmIDB4ZmY7XG4gIG9bMTBdID0geDIgPj4+IDE2ICYgMHhmZjtcbiAgb1sxMV0gPSB4MiA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMTJdID0geDMgPj4+ICAwICYgMHhmZjtcbiAgb1sxM10gPSB4MyA+Pj4gIDggJiAweGZmO1xuICBvWzE0XSA9IHgzID4+PiAxNiAmIDB4ZmY7XG4gIG9bMTVdID0geDMgPj4+IDI0ICYgMHhmZjtcblxuICBvWzE2XSA9IHg0ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMTddID0geDQgPj4+ICA4ICYgMHhmZjtcbiAgb1sxOF0gPSB4NCA+Pj4gMTYgJiAweGZmO1xuICBvWzE5XSA9IHg0ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1syMF0gPSB4NSA+Pj4gIDAgJiAweGZmO1xuICBvWzIxXSA9IHg1ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMjJdID0geDUgPj4+IDE2ICYgMHhmZjtcbiAgb1syM10gPSB4NSA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMjRdID0geDYgPj4+ICAwICYgMHhmZjtcbiAgb1syNV0gPSB4NiA+Pj4gIDggJiAweGZmO1xuICBvWzI2XSA9IHg2ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMjddID0geDYgPj4+IDI0ICYgMHhmZjtcblxuICBvWzI4XSA9IHg3ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMjldID0geDcgPj4+ICA4ICYgMHhmZjtcbiAgb1szMF0gPSB4NyA+Pj4gMTYgJiAweGZmO1xuICBvWzMxXSA9IHg3ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1szMl0gPSB4OCA+Pj4gIDAgJiAweGZmO1xuICBvWzMzXSA9IHg4ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMzRdID0geDggPj4+IDE2ICYgMHhmZjtcbiAgb1szNV0gPSB4OCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMzZdID0geDkgPj4+ICAwICYgMHhmZjtcbiAgb1szN10gPSB4OSA+Pj4gIDggJiAweGZmO1xuICBvWzM4XSA9IHg5ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMzldID0geDkgPj4+IDI0ICYgMHhmZjtcblxuICBvWzQwXSA9IHgxMCA+Pj4gIDAgJiAweGZmO1xuICBvWzQxXSA9IHgxMCA+Pj4gIDggJiAweGZmO1xuICBvWzQyXSA9IHgxMCA+Pj4gMTYgJiAweGZmO1xuICBvWzQzXSA9IHgxMCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bNDRdID0geDExID4+PiAgMCAmIDB4ZmY7XG4gIG9bNDVdID0geDExID4+PiAgOCAmIDB4ZmY7XG4gIG9bNDZdID0geDExID4+PiAxNiAmIDB4ZmY7XG4gIG9bNDddID0geDExID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1s0OF0gPSB4MTIgPj4+ICAwICYgMHhmZjtcbiAgb1s0OV0gPSB4MTIgPj4+ICA4ICYgMHhmZjtcbiAgb1s1MF0gPSB4MTIgPj4+IDE2ICYgMHhmZjtcbiAgb1s1MV0gPSB4MTIgPj4+IDI0ICYgMHhmZjtcblxuICBvWzUyXSA9IHgxMyA+Pj4gIDAgJiAweGZmO1xuICBvWzUzXSA9IHgxMyA+Pj4gIDggJiAweGZmO1xuICBvWzU0XSA9IHgxMyA+Pj4gMTYgJiAweGZmO1xuICBvWzU1XSA9IHgxMyA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bNTZdID0geDE0ID4+PiAgMCAmIDB4ZmY7XG4gIG9bNTddID0geDE0ID4+PiAgOCAmIDB4ZmY7XG4gIG9bNThdID0geDE0ID4+PiAxNiAmIDB4ZmY7XG4gIG9bNTldID0geDE0ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1s2MF0gPSB4MTUgPj4+ICAwICYgMHhmZjtcbiAgb1s2MV0gPSB4MTUgPj4+ICA4ICYgMHhmZjtcbiAgb1s2Ml0gPSB4MTUgPj4+IDE2ICYgMHhmZjtcbiAgb1s2M10gPSB4MTUgPj4+IDI0ICYgMHhmZjtcbn1cblxuZnVuY3Rpb24gY29yZV9oc2Fsc2EyMChvLHAsayxjKSB7XG4gIHZhciBqMCAgPSBjWyAwXSAmIDB4ZmYgfCAoY1sgMV0gJiAweGZmKTw8OCB8IChjWyAyXSAmIDB4ZmYpPDwxNiB8IChjWyAzXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxICA9IGtbIDBdICYgMHhmZiB8IChrWyAxXSAmIDB4ZmYpPDw4IHwgKGtbIDJdICYgMHhmZik8PDE2IHwgKGtbIDNdICYgMHhmZik8PDI0LFxuICAgICAgajIgID0ga1sgNF0gJiAweGZmIHwgKGtbIDVdICYgMHhmZik8PDggfCAoa1sgNl0gJiAweGZmKTw8MTYgfCAoa1sgN10gJiAweGZmKTw8MjQsXG4gICAgICBqMyAgPSBrWyA4XSAmIDB4ZmYgfCAoa1sgOV0gJiAweGZmKTw8OCB8IChrWzEwXSAmIDB4ZmYpPDwxNiB8IChrWzExXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo0ICA9IGtbMTJdICYgMHhmZiB8IChrWzEzXSAmIDB4ZmYpPDw4IHwgKGtbMTRdICYgMHhmZik8PDE2IHwgKGtbMTVdICYgMHhmZik8PDI0LFxuICAgICAgajUgID0gY1sgNF0gJiAweGZmIHwgKGNbIDVdICYgMHhmZik8PDggfCAoY1sgNl0gJiAweGZmKTw8MTYgfCAoY1sgN10gJiAweGZmKTw8MjQsXG4gICAgICBqNiAgPSBwWyAwXSAmIDB4ZmYgfCAocFsgMV0gJiAweGZmKTw8OCB8IChwWyAyXSAmIDB4ZmYpPDwxNiB8IChwWyAzXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo3ICA9IHBbIDRdICYgMHhmZiB8IChwWyA1XSAmIDB4ZmYpPDw4IHwgKHBbIDZdICYgMHhmZik8PDE2IHwgKHBbIDddICYgMHhmZik8PDI0LFxuICAgICAgajggID0gcFsgOF0gJiAweGZmIHwgKHBbIDldICYgMHhmZik8PDggfCAocFsxMF0gJiAweGZmKTw8MTYgfCAocFsxMV0gJiAweGZmKTw8MjQsXG4gICAgICBqOSAgPSBwWzEyXSAmIDB4ZmYgfCAocFsxM10gJiAweGZmKTw8OCB8IChwWzE0XSAmIDB4ZmYpPDwxNiB8IChwWzE1XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxMCA9IGNbIDhdICYgMHhmZiB8IChjWyA5XSAmIDB4ZmYpPDw4IHwgKGNbMTBdICYgMHhmZik8PDE2IHwgKGNbMTFdICYgMHhmZik8PDI0LFxuICAgICAgajExID0ga1sxNl0gJiAweGZmIHwgKGtbMTddICYgMHhmZik8PDggfCAoa1sxOF0gJiAweGZmKTw8MTYgfCAoa1sxOV0gJiAweGZmKTw8MjQsXG4gICAgICBqMTIgPSBrWzIwXSAmIDB4ZmYgfCAoa1syMV0gJiAweGZmKTw8OCB8IChrWzIyXSAmIDB4ZmYpPDwxNiB8IChrWzIzXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxMyA9IGtbMjRdICYgMHhmZiB8IChrWzI1XSAmIDB4ZmYpPDw4IHwgKGtbMjZdICYgMHhmZik8PDE2IHwgKGtbMjddICYgMHhmZik8PDI0LFxuICAgICAgajE0ID0ga1syOF0gJiAweGZmIHwgKGtbMjldICYgMHhmZik8PDggfCAoa1szMF0gJiAweGZmKTw8MTYgfCAoa1szMV0gJiAweGZmKTw8MjQsXG4gICAgICBqMTUgPSBjWzEyXSAmIDB4ZmYgfCAoY1sxM10gJiAweGZmKTw8OCB8IChjWzE0XSAmIDB4ZmYpPDwxNiB8IChjWzE1XSAmIDB4ZmYpPDwyNDtcblxuICB2YXIgeDAgPSBqMCwgeDEgPSBqMSwgeDIgPSBqMiwgeDMgPSBqMywgeDQgPSBqNCwgeDUgPSBqNSwgeDYgPSBqNiwgeDcgPSBqNyxcbiAgICAgIHg4ID0gajgsIHg5ID0gajksIHgxMCA9IGoxMCwgeDExID0gajExLCB4MTIgPSBqMTIsIHgxMyA9IGoxMywgeDE0ID0gajE0LFxuICAgICAgeDE1ID0gajE1LCB1O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjA7IGkgKz0gMikge1xuICAgIHUgPSB4MCArIHgxMiB8IDA7XG4gICAgeDQgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHg0ICsgeDAgfCAwO1xuICAgIHg4IF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4OCArIHg0IHwgMDtcbiAgICB4MTIgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDEyICsgeDggfCAwO1xuICAgIHgwIF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDUgKyB4MSB8IDA7XG4gICAgeDkgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHg5ICsgeDUgfCAwO1xuICAgIHgxMyBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDEzICsgeDkgfCAwO1xuICAgIHgxIF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgxICsgeDEzIHwgMDtcbiAgICB4NSBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgxMCArIHg2IHwgMDtcbiAgICB4MTQgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHgxNCArIHgxMCB8IDA7XG4gICAgeDIgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHgyICsgeDE0IHwgMDtcbiAgICB4NiBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4NiArIHgyIHwgMDtcbiAgICB4MTAgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MTUgKyB4MTEgfCAwO1xuICAgIHgzIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MyArIHgxNSB8IDA7XG4gICAgeDcgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHg3ICsgeDMgfCAwO1xuICAgIHgxMSBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MTEgKyB4NyB8IDA7XG4gICAgeDE1IF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDAgKyB4MyB8IDA7XG4gICAgeDEgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHgxICsgeDAgfCAwO1xuICAgIHgyIF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4MiArIHgxIHwgMDtcbiAgICB4MyBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MyArIHgyIHwgMDtcbiAgICB4MCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHg1ICsgeDQgfCAwO1xuICAgIHg2IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4NiArIHg1IHwgMDtcbiAgICB4NyBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDcgKyB4NiB8IDA7XG4gICAgeDQgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDQgKyB4NyB8IDA7XG4gICAgeDUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MTAgKyB4OSB8IDA7XG4gICAgeDExIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MTEgKyB4MTAgfCAwO1xuICAgIHg4IF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4OCArIHgxMSB8IDA7XG4gICAgeDkgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDkgKyB4OCB8IDA7XG4gICAgeDEwIF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDE1ICsgeDE0IHwgMDtcbiAgICB4MTIgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHgxMiArIHgxNSB8IDA7XG4gICAgeDEzIF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4MTMgKyB4MTIgfCAwO1xuICAgIHgxNCBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MTQgKyB4MTMgfCAwO1xuICAgIHgxNSBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuICB9XG5cbiAgb1sgMF0gPSB4MCA+Pj4gIDAgJiAweGZmO1xuICBvWyAxXSA9IHgwID4+PiAgOCAmIDB4ZmY7XG4gIG9bIDJdID0geDAgPj4+IDE2ICYgMHhmZjtcbiAgb1sgM10gPSB4MCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bIDRdID0geDUgPj4+ICAwICYgMHhmZjtcbiAgb1sgNV0gPSB4NSA+Pj4gIDggJiAweGZmO1xuICBvWyA2XSA9IHg1ID4+PiAxNiAmIDB4ZmY7XG4gIG9bIDddID0geDUgPj4+IDI0ICYgMHhmZjtcblxuICBvWyA4XSA9IHgxMCA+Pj4gIDAgJiAweGZmO1xuICBvWyA5XSA9IHgxMCA+Pj4gIDggJiAweGZmO1xuICBvWzEwXSA9IHgxMCA+Pj4gMTYgJiAweGZmO1xuICBvWzExXSA9IHgxMCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMTJdID0geDE1ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMTNdID0geDE1ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMTRdID0geDE1ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMTVdID0geDE1ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1sxNl0gPSB4NiA+Pj4gIDAgJiAweGZmO1xuICBvWzE3XSA9IHg2ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMThdID0geDYgPj4+IDE2ICYgMHhmZjtcbiAgb1sxOV0gPSB4NiA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMjBdID0geDcgPj4+ICAwICYgMHhmZjtcbiAgb1syMV0gPSB4NyA+Pj4gIDggJiAweGZmO1xuICBvWzIyXSA9IHg3ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMjNdID0geDcgPj4+IDI0ICYgMHhmZjtcblxuICBvWzI0XSA9IHg4ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMjVdID0geDggPj4+ICA4ICYgMHhmZjtcbiAgb1syNl0gPSB4OCA+Pj4gMTYgJiAweGZmO1xuICBvWzI3XSA9IHg4ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1syOF0gPSB4OSA+Pj4gIDAgJiAweGZmO1xuICBvWzI5XSA9IHg5ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMzBdID0geDkgPj4+IDE2ICYgMHhmZjtcbiAgb1szMV0gPSB4OSA+Pj4gMjQgJiAweGZmO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fY29yZV9zYWxzYTIwKG91dCxpbnAsayxjKSB7XG4gIGNvcmVfc2Fsc2EyMChvdXQsaW5wLGssYyk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19jb3JlX2hzYWxzYTIwKG91dCxpbnAsayxjKSB7XG4gIGNvcmVfaHNhbHNhMjAob3V0LGlucCxrLGMpO1xufVxuXG52YXIgc2lnbWEgPSBuZXcgVWludDhBcnJheShbMTAxLCAxMjAsIDExMiwgOTcsIDExMCwgMTAwLCAzMiwgNTEsIDUwLCA0NSwgOTgsIDEyMSwgMTE2LCAxMDEsIDMyLCAxMDddKTtcbiAgICAgICAgICAgIC8vIFwiZXhwYW5kIDMyLWJ5dGUga1wiXG5cbmZ1bmN0aW9uIGNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3IoYyxjcG9zLG0sbXBvcyxiLG4saykge1xuICB2YXIgeiA9IG5ldyBVaW50OEFycmF5KDE2KSwgeCA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgdmFyIHUsIGk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB6W2ldID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IDg7IGkrKykgeltpXSA9IG5baV07XG4gIHdoaWxlIChiID49IDY0KSB7XG4gICAgY3J5cHRvX2NvcmVfc2Fsc2EyMCh4LHosayxzaWdtYSk7XG4gICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIGNbY3BvcytpXSA9IG1bbXBvcytpXSBeIHhbaV07XG4gICAgdSA9IDE7XG4gICAgZm9yIChpID0gODsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHUgPSB1ICsgKHpbaV0gJiAweGZmKSB8IDA7XG4gICAgICB6W2ldID0gdSAmIDB4ZmY7XG4gICAgICB1ID4+Pj0gODtcbiAgICB9XG4gICAgYiAtPSA2NDtcbiAgICBjcG9zICs9IDY0O1xuICAgIG1wb3MgKz0gNjQ7XG4gIH1cbiAgaWYgKGIgPiAwKSB7XG4gICAgY3J5cHRvX2NvcmVfc2Fsc2EyMCh4LHosayxzaWdtYSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGI7IGkrKykgY1tjcG9zK2ldID0gbVttcG9zK2ldIF4geFtpXTtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3N0cmVhbV9zYWxzYTIwKGMsY3BvcyxiLG4saykge1xuICB2YXIgeiA9IG5ldyBVaW50OEFycmF5KDE2KSwgeCA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgdmFyIHUsIGk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB6W2ldID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IDg7IGkrKykgeltpXSA9IG5baV07XG4gIHdoaWxlIChiID49IDY0KSB7XG4gICAgY3J5cHRvX2NvcmVfc2Fsc2EyMCh4LHosayxzaWdtYSk7XG4gICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIGNbY3BvcytpXSA9IHhbaV07XG4gICAgdSA9IDE7XG4gICAgZm9yIChpID0gODsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHUgPSB1ICsgKHpbaV0gJiAweGZmKSB8IDA7XG4gICAgICB6W2ldID0gdSAmIDB4ZmY7XG4gICAgICB1ID4+Pj0gODtcbiAgICB9XG4gICAgYiAtPSA2NDtcbiAgICBjcG9zICs9IDY0O1xuICB9XG4gIGlmIChiID4gMCkge1xuICAgIGNyeXB0b19jb3JlX3NhbHNhMjAoeCx6LGssc2lnbWEpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBiOyBpKyspIGNbY3BvcytpXSA9IHhbaV07XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19zdHJlYW0oYyxjcG9zLGQsbixrKSB7XG4gIHZhciBzID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBjcnlwdG9fY29yZV9oc2Fsc2EyMChzLG4sayxzaWdtYSk7XG4gIHZhciBzbiA9IG5ldyBVaW50OEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgc25baV0gPSBuW2krMTZdO1xuICByZXR1cm4gY3J5cHRvX3N0cmVhbV9zYWxzYTIwKGMsY3BvcyxkLHNuLHMpO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc3RyZWFtX3hvcihjLGNwb3MsbSxtcG9zLGQsbixrKSB7XG4gIHZhciBzID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBjcnlwdG9fY29yZV9oc2Fsc2EyMChzLG4sayxzaWdtYSk7XG4gIHZhciBzbiA9IG5ldyBVaW50OEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgc25baV0gPSBuW2krMTZdO1xuICByZXR1cm4gY3J5cHRvX3N0cmVhbV9zYWxzYTIwX3hvcihjLGNwb3MsbSxtcG9zLGQsc24scyk7XG59XG5cbi8qXG4qIFBvcnQgb2YgQW5kcmV3IE1vb24ncyBQb2x5MTMwNS1kb25uYS0xNi4gUHVibGljIGRvbWFpbi5cbiogaHR0cHM6Ly9naXRodWIuY29tL2Zsb29keWJlcnJ5L3BvbHkxMzA1LWRvbm5hXG4qL1xuXG52YXIgcG9seTEzMDUgPSBmdW5jdGlvbihrZXkpIHtcbiAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheSgxNik7XG4gIHRoaXMuciA9IG5ldyBVaW50MTZBcnJheSgxMCk7XG4gIHRoaXMuaCA9IG5ldyBVaW50MTZBcnJheSgxMCk7XG4gIHRoaXMucGFkID0gbmV3IFVpbnQxNkFycmF5KDgpO1xuICB0aGlzLmxlZnRvdmVyID0gMDtcbiAgdGhpcy5maW4gPSAwO1xuXG4gIHZhciB0MCwgdDEsIHQyLCB0MywgdDQsIHQ1LCB0NiwgdDc7XG5cbiAgdDAgPSBrZXlbIDBdICYgMHhmZiB8IChrZXlbIDFdICYgMHhmZikgPDwgODsgdGhpcy5yWzBdID0gKCB0MCAgICAgICAgICAgICAgICAgICAgICkgJiAweDFmZmY7XG4gIHQxID0ga2V5WyAyXSAmIDB4ZmYgfCAoa2V5WyAzXSAmIDB4ZmYpIDw8IDg7IHRoaXMuclsxXSA9ICgodDAgPj4+IDEzKSB8ICh0MSA8PCAgMykpICYgMHgxZmZmO1xuICB0MiA9IGtleVsgNF0gJiAweGZmIHwgKGtleVsgNV0gJiAweGZmKSA8PCA4OyB0aGlzLnJbMl0gPSAoKHQxID4+PiAxMCkgfCAodDIgPDwgIDYpKSAmIDB4MWYwMztcbiAgdDMgPSBrZXlbIDZdICYgMHhmZiB8IChrZXlbIDddICYgMHhmZikgPDwgODsgdGhpcy5yWzNdID0gKCh0MiA+Pj4gIDcpIHwgKHQzIDw8ICA5KSkgJiAweDFmZmY7XG4gIHQ0ID0ga2V5WyA4XSAmIDB4ZmYgfCAoa2V5WyA5XSAmIDB4ZmYpIDw8IDg7IHRoaXMucls0XSA9ICgodDMgPj4+ICA0KSB8ICh0NCA8PCAxMikpICYgMHgwMGZmO1xuICB0aGlzLnJbNV0gPSAoKHQ0ID4+PiAgMSkpICYgMHgxZmZlO1xuICB0NSA9IGtleVsxMF0gJiAweGZmIHwgKGtleVsxMV0gJiAweGZmKSA8PCA4OyB0aGlzLnJbNl0gPSAoKHQ0ID4+PiAxNCkgfCAodDUgPDwgIDIpKSAmIDB4MWZmZjtcbiAgdDYgPSBrZXlbMTJdICYgMHhmZiB8IChrZXlbMTNdICYgMHhmZikgPDwgODsgdGhpcy5yWzddID0gKCh0NSA+Pj4gMTEpIHwgKHQ2IDw8ICA1KSkgJiAweDFmODE7XG4gIHQ3ID0ga2V5WzE0XSAmIDB4ZmYgfCAoa2V5WzE1XSAmIDB4ZmYpIDw8IDg7IHRoaXMucls4XSA9ICgodDYgPj4+ICA4KSB8ICh0NyA8PCAgOCkpICYgMHgxZmZmO1xuICB0aGlzLnJbOV0gPSAoKHQ3ID4+PiAgNSkpICYgMHgwMDdmO1xuXG4gIHRoaXMucGFkWzBdID0ga2V5WzE2XSAmIDB4ZmYgfCAoa2V5WzE3XSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzFdID0ga2V5WzE4XSAmIDB4ZmYgfCAoa2V5WzE5XSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzJdID0ga2V5WzIwXSAmIDB4ZmYgfCAoa2V5WzIxXSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzNdID0ga2V5WzIyXSAmIDB4ZmYgfCAoa2V5WzIzXSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzRdID0ga2V5WzI0XSAmIDB4ZmYgfCAoa2V5WzI1XSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzVdID0ga2V5WzI2XSAmIDB4ZmYgfCAoa2V5WzI3XSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzZdID0ga2V5WzI4XSAmIDB4ZmYgfCAoa2V5WzI5XSAmIDB4ZmYpIDw8IDg7XG4gIHRoaXMucGFkWzddID0ga2V5WzMwXSAmIDB4ZmYgfCAoa2V5WzMxXSAmIDB4ZmYpIDw8IDg7XG59O1xuXG5wb2x5MTMwNS5wcm90b3R5cGUuYmxvY2tzID0gZnVuY3Rpb24obSwgbXBvcywgYnl0ZXMpIHtcbiAgdmFyIGhpYml0ID0gdGhpcy5maW4gPyAwIDogKDEgPDwgMTEpO1xuICB2YXIgdDAsIHQxLCB0MiwgdDMsIHQ0LCB0NSwgdDYsIHQ3LCBjO1xuICB2YXIgZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCwgZDk7XG5cbiAgdmFyIGgwID0gdGhpcy5oWzBdLFxuICAgICAgaDEgPSB0aGlzLmhbMV0sXG4gICAgICBoMiA9IHRoaXMuaFsyXSxcbiAgICAgIGgzID0gdGhpcy5oWzNdLFxuICAgICAgaDQgPSB0aGlzLmhbNF0sXG4gICAgICBoNSA9IHRoaXMuaFs1XSxcbiAgICAgIGg2ID0gdGhpcy5oWzZdLFxuICAgICAgaDcgPSB0aGlzLmhbN10sXG4gICAgICBoOCA9IHRoaXMuaFs4XSxcbiAgICAgIGg5ID0gdGhpcy5oWzldO1xuXG4gIHZhciByMCA9IHRoaXMuclswXSxcbiAgICAgIHIxID0gdGhpcy5yWzFdLFxuICAgICAgcjIgPSB0aGlzLnJbMl0sXG4gICAgICByMyA9IHRoaXMuclszXSxcbiAgICAgIHI0ID0gdGhpcy5yWzRdLFxuICAgICAgcjUgPSB0aGlzLnJbNV0sXG4gICAgICByNiA9IHRoaXMucls2XSxcbiAgICAgIHI3ID0gdGhpcy5yWzddLFxuICAgICAgcjggPSB0aGlzLnJbOF0sXG4gICAgICByOSA9IHRoaXMucls5XTtcblxuICB3aGlsZSAoYnl0ZXMgPj0gMTYpIHtcbiAgICB0MCA9IG1bbXBvcysgMF0gJiAweGZmIHwgKG1bbXBvcysgMV0gJiAweGZmKSA8PCA4OyBoMCArPSAoIHQwICAgICAgICAgICAgICAgICAgICAgKSAmIDB4MWZmZjtcbiAgICB0MSA9IG1bbXBvcysgMl0gJiAweGZmIHwgKG1bbXBvcysgM10gJiAweGZmKSA8PCA4OyBoMSArPSAoKHQwID4+PiAxMykgfCAodDEgPDwgIDMpKSAmIDB4MWZmZjtcbiAgICB0MiA9IG1bbXBvcysgNF0gJiAweGZmIHwgKG1bbXBvcysgNV0gJiAweGZmKSA8PCA4OyBoMiArPSAoKHQxID4+PiAxMCkgfCAodDIgPDwgIDYpKSAmIDB4MWZmZjtcbiAgICB0MyA9IG1bbXBvcysgNl0gJiAweGZmIHwgKG1bbXBvcysgN10gJiAweGZmKSA8PCA4OyBoMyArPSAoKHQyID4+PiAgNykgfCAodDMgPDwgIDkpKSAmIDB4MWZmZjtcbiAgICB0NCA9IG1bbXBvcysgOF0gJiAweGZmIHwgKG1bbXBvcysgOV0gJiAweGZmKSA8PCA4OyBoNCArPSAoKHQzID4+PiAgNCkgfCAodDQgPDwgMTIpKSAmIDB4MWZmZjtcbiAgICBoNSArPSAoKHQ0ID4+PiAgMSkpICYgMHgxZmZmO1xuICAgIHQ1ID0gbVttcG9zKzEwXSAmIDB4ZmYgfCAobVttcG9zKzExXSAmIDB4ZmYpIDw8IDg7IGg2ICs9ICgodDQgPj4+IDE0KSB8ICh0NSA8PCAgMikpICYgMHgxZmZmO1xuICAgIHQ2ID0gbVttcG9zKzEyXSAmIDB4ZmYgfCAobVttcG9zKzEzXSAmIDB4ZmYpIDw8IDg7IGg3ICs9ICgodDUgPj4+IDExKSB8ICh0NiA8PCAgNSkpICYgMHgxZmZmO1xuICAgIHQ3ID0gbVttcG9zKzE0XSAmIDB4ZmYgfCAobVttcG9zKzE1XSAmIDB4ZmYpIDw8IDg7IGg4ICs9ICgodDYgPj4+ICA4KSB8ICh0NyA8PCAgOCkpICYgMHgxZmZmO1xuICAgIGg5ICs9ICgodDcgPj4+IDUpKSB8IGhpYml0O1xuXG4gICAgYyA9IDA7XG5cbiAgICBkMCA9IGM7XG4gICAgZDAgKz0gaDAgKiByMDtcbiAgICBkMCArPSBoMSAqICg1ICogcjkpO1xuICAgIGQwICs9IGgyICogKDUgKiByOCk7XG4gICAgZDAgKz0gaDMgKiAoNSAqIHI3KTtcbiAgICBkMCArPSBoNCAqICg1ICogcjYpO1xuICAgIGMgPSAoZDAgPj4+IDEzKTsgZDAgJj0gMHgxZmZmO1xuICAgIGQwICs9IGg1ICogKDUgKiByNSk7XG4gICAgZDAgKz0gaDYgKiAoNSAqIHI0KTtcbiAgICBkMCArPSBoNyAqICg1ICogcjMpO1xuICAgIGQwICs9IGg4ICogKDUgKiByMik7XG4gICAgZDAgKz0gaDkgKiAoNSAqIHIxKTtcbiAgICBjICs9IChkMCA+Pj4gMTMpOyBkMCAmPSAweDFmZmY7XG5cbiAgICBkMSA9IGM7XG4gICAgZDEgKz0gaDAgKiByMTtcbiAgICBkMSArPSBoMSAqIHIwO1xuICAgIGQxICs9IGgyICogKDUgKiByOSk7XG4gICAgZDEgKz0gaDMgKiAoNSAqIHI4KTtcbiAgICBkMSArPSBoNCAqICg1ICogcjcpO1xuICAgIGMgPSAoZDEgPj4+IDEzKTsgZDEgJj0gMHgxZmZmO1xuICAgIGQxICs9IGg1ICogKDUgKiByNik7XG4gICAgZDEgKz0gaDYgKiAoNSAqIHI1KTtcbiAgICBkMSArPSBoNyAqICg1ICogcjQpO1xuICAgIGQxICs9IGg4ICogKDUgKiByMyk7XG4gICAgZDEgKz0gaDkgKiAoNSAqIHIyKTtcbiAgICBjICs9IChkMSA+Pj4gMTMpOyBkMSAmPSAweDFmZmY7XG5cbiAgICBkMiA9IGM7XG4gICAgZDIgKz0gaDAgKiByMjtcbiAgICBkMiArPSBoMSAqIHIxO1xuICAgIGQyICs9IGgyICogcjA7XG4gICAgZDIgKz0gaDMgKiAoNSAqIHI5KTtcbiAgICBkMiArPSBoNCAqICg1ICogcjgpO1xuICAgIGMgPSAoZDIgPj4+IDEzKTsgZDIgJj0gMHgxZmZmO1xuICAgIGQyICs9IGg1ICogKDUgKiByNyk7XG4gICAgZDIgKz0gaDYgKiAoNSAqIHI2KTtcbiAgICBkMiArPSBoNyAqICg1ICogcjUpO1xuICAgIGQyICs9IGg4ICogKDUgKiByNCk7XG4gICAgZDIgKz0gaDkgKiAoNSAqIHIzKTtcbiAgICBjICs9IChkMiA+Pj4gMTMpOyBkMiAmPSAweDFmZmY7XG5cbiAgICBkMyA9IGM7XG4gICAgZDMgKz0gaDAgKiByMztcbiAgICBkMyArPSBoMSAqIHIyO1xuICAgIGQzICs9IGgyICogcjE7XG4gICAgZDMgKz0gaDMgKiByMDtcbiAgICBkMyArPSBoNCAqICg1ICogcjkpO1xuICAgIGMgPSAoZDMgPj4+IDEzKTsgZDMgJj0gMHgxZmZmO1xuICAgIGQzICs9IGg1ICogKDUgKiByOCk7XG4gICAgZDMgKz0gaDYgKiAoNSAqIHI3KTtcbiAgICBkMyArPSBoNyAqICg1ICogcjYpO1xuICAgIGQzICs9IGg4ICogKDUgKiByNSk7XG4gICAgZDMgKz0gaDkgKiAoNSAqIHI0KTtcbiAgICBjICs9IChkMyA+Pj4gMTMpOyBkMyAmPSAweDFmZmY7XG5cbiAgICBkNCA9IGM7XG4gICAgZDQgKz0gaDAgKiByNDtcbiAgICBkNCArPSBoMSAqIHIzO1xuICAgIGQ0ICs9IGgyICogcjI7XG4gICAgZDQgKz0gaDMgKiByMTtcbiAgICBkNCArPSBoNCAqIHIwO1xuICAgIGMgPSAoZDQgPj4+IDEzKTsgZDQgJj0gMHgxZmZmO1xuICAgIGQ0ICs9IGg1ICogKDUgKiByOSk7XG4gICAgZDQgKz0gaDYgKiAoNSAqIHI4KTtcbiAgICBkNCArPSBoNyAqICg1ICogcjcpO1xuICAgIGQ0ICs9IGg4ICogKDUgKiByNik7XG4gICAgZDQgKz0gaDkgKiAoNSAqIHI1KTtcbiAgICBjICs9IChkNCA+Pj4gMTMpOyBkNCAmPSAweDFmZmY7XG5cbiAgICBkNSA9IGM7XG4gICAgZDUgKz0gaDAgKiByNTtcbiAgICBkNSArPSBoMSAqIHI0O1xuICAgIGQ1ICs9IGgyICogcjM7XG4gICAgZDUgKz0gaDMgKiByMjtcbiAgICBkNSArPSBoNCAqIHIxO1xuICAgIGMgPSAoZDUgPj4+IDEzKTsgZDUgJj0gMHgxZmZmO1xuICAgIGQ1ICs9IGg1ICogcjA7XG4gICAgZDUgKz0gaDYgKiAoNSAqIHI5KTtcbiAgICBkNSArPSBoNyAqICg1ICogcjgpO1xuICAgIGQ1ICs9IGg4ICogKDUgKiByNyk7XG4gICAgZDUgKz0gaDkgKiAoNSAqIHI2KTtcbiAgICBjICs9IChkNSA+Pj4gMTMpOyBkNSAmPSAweDFmZmY7XG5cbiAgICBkNiA9IGM7XG4gICAgZDYgKz0gaDAgKiByNjtcbiAgICBkNiArPSBoMSAqIHI1O1xuICAgIGQ2ICs9IGgyICogcjQ7XG4gICAgZDYgKz0gaDMgKiByMztcbiAgICBkNiArPSBoNCAqIHIyO1xuICAgIGMgPSAoZDYgPj4+IDEzKTsgZDYgJj0gMHgxZmZmO1xuICAgIGQ2ICs9IGg1ICogcjE7XG4gICAgZDYgKz0gaDYgKiByMDtcbiAgICBkNiArPSBoNyAqICg1ICogcjkpO1xuICAgIGQ2ICs9IGg4ICogKDUgKiByOCk7XG4gICAgZDYgKz0gaDkgKiAoNSAqIHI3KTtcbiAgICBjICs9IChkNiA+Pj4gMTMpOyBkNiAmPSAweDFmZmY7XG5cbiAgICBkNyA9IGM7XG4gICAgZDcgKz0gaDAgKiByNztcbiAgICBkNyArPSBoMSAqIHI2O1xuICAgIGQ3ICs9IGgyICogcjU7XG4gICAgZDcgKz0gaDMgKiByNDtcbiAgICBkNyArPSBoNCAqIHIzO1xuICAgIGMgPSAoZDcgPj4+IDEzKTsgZDcgJj0gMHgxZmZmO1xuICAgIGQ3ICs9IGg1ICogcjI7XG4gICAgZDcgKz0gaDYgKiByMTtcbiAgICBkNyArPSBoNyAqIHIwO1xuICAgIGQ3ICs9IGg4ICogKDUgKiByOSk7XG4gICAgZDcgKz0gaDkgKiAoNSAqIHI4KTtcbiAgICBjICs9IChkNyA+Pj4gMTMpOyBkNyAmPSAweDFmZmY7XG5cbiAgICBkOCA9IGM7XG4gICAgZDggKz0gaDAgKiByODtcbiAgICBkOCArPSBoMSAqIHI3O1xuICAgIGQ4ICs9IGgyICogcjY7XG4gICAgZDggKz0gaDMgKiByNTtcbiAgICBkOCArPSBoNCAqIHI0O1xuICAgIGMgPSAoZDggPj4+IDEzKTsgZDggJj0gMHgxZmZmO1xuICAgIGQ4ICs9IGg1ICogcjM7XG4gICAgZDggKz0gaDYgKiByMjtcbiAgICBkOCArPSBoNyAqIHIxO1xuICAgIGQ4ICs9IGg4ICogcjA7XG4gICAgZDggKz0gaDkgKiAoNSAqIHI5KTtcbiAgICBjICs9IChkOCA+Pj4gMTMpOyBkOCAmPSAweDFmZmY7XG5cbiAgICBkOSA9IGM7XG4gICAgZDkgKz0gaDAgKiByOTtcbiAgICBkOSArPSBoMSAqIHI4O1xuICAgIGQ5ICs9IGgyICogcjc7XG4gICAgZDkgKz0gaDMgKiByNjtcbiAgICBkOSArPSBoNCAqIHI1O1xuICAgIGMgPSAoZDkgPj4+IDEzKTsgZDkgJj0gMHgxZmZmO1xuICAgIGQ5ICs9IGg1ICogcjQ7XG4gICAgZDkgKz0gaDYgKiByMztcbiAgICBkOSArPSBoNyAqIHIyO1xuICAgIGQ5ICs9IGg4ICogcjE7XG4gICAgZDkgKz0gaDkgKiByMDtcbiAgICBjICs9IChkOSA+Pj4gMTMpOyBkOSAmPSAweDFmZmY7XG5cbiAgICBjID0gKCgoYyA8PCAyKSArIGMpKSB8IDA7XG4gICAgYyA9IChjICsgZDApIHwgMDtcbiAgICBkMCA9IGMgJiAweDFmZmY7XG4gICAgYyA9IChjID4+PiAxMyk7XG4gICAgZDEgKz0gYztcblxuICAgIGgwID0gZDA7XG4gICAgaDEgPSBkMTtcbiAgICBoMiA9IGQyO1xuICAgIGgzID0gZDM7XG4gICAgaDQgPSBkNDtcbiAgICBoNSA9IGQ1O1xuICAgIGg2ID0gZDY7XG4gICAgaDcgPSBkNztcbiAgICBoOCA9IGQ4O1xuICAgIGg5ID0gZDk7XG5cbiAgICBtcG9zICs9IDE2O1xuICAgIGJ5dGVzIC09IDE2O1xuICB9XG4gIHRoaXMuaFswXSA9IGgwO1xuICB0aGlzLmhbMV0gPSBoMTtcbiAgdGhpcy5oWzJdID0gaDI7XG4gIHRoaXMuaFszXSA9IGgzO1xuICB0aGlzLmhbNF0gPSBoNDtcbiAgdGhpcy5oWzVdID0gaDU7XG4gIHRoaXMuaFs2XSA9IGg2O1xuICB0aGlzLmhbN10gPSBoNztcbiAgdGhpcy5oWzhdID0gaDg7XG4gIHRoaXMuaFs5XSA9IGg5O1xufTtcblxucG9seTEzMDUucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKG1hYywgbWFjcG9zKSB7XG4gIHZhciBnID0gbmV3IFVpbnQxNkFycmF5KDEwKTtcbiAgdmFyIGMsIG1hc2ssIGYsIGk7XG5cbiAgaWYgKHRoaXMubGVmdG92ZXIpIHtcbiAgICBpID0gdGhpcy5sZWZ0b3ZlcjtcbiAgICB0aGlzLmJ1ZmZlcltpKytdID0gMTtcbiAgICBmb3IgKDsgaSA8IDE2OyBpKyspIHRoaXMuYnVmZmVyW2ldID0gMDtcbiAgICB0aGlzLmZpbiA9IDE7XG4gICAgdGhpcy5ibG9ja3ModGhpcy5idWZmZXIsIDAsIDE2KTtcbiAgfVxuXG4gIGMgPSB0aGlzLmhbMV0gPj4+IDEzO1xuICB0aGlzLmhbMV0gJj0gMHgxZmZmO1xuICBmb3IgKGkgPSAyOyBpIDwgMTA7IGkrKykge1xuICAgIHRoaXMuaFtpXSArPSBjO1xuICAgIGMgPSB0aGlzLmhbaV0gPj4+IDEzO1xuICAgIHRoaXMuaFtpXSAmPSAweDFmZmY7XG4gIH1cbiAgdGhpcy5oWzBdICs9IChjICogNSk7XG4gIGMgPSB0aGlzLmhbMF0gPj4+IDEzO1xuICB0aGlzLmhbMF0gJj0gMHgxZmZmO1xuICB0aGlzLmhbMV0gKz0gYztcbiAgYyA9IHRoaXMuaFsxXSA+Pj4gMTM7XG4gIHRoaXMuaFsxXSAmPSAweDFmZmY7XG4gIHRoaXMuaFsyXSArPSBjO1xuXG4gIGdbMF0gPSB0aGlzLmhbMF0gKyA1O1xuICBjID0gZ1swXSA+Pj4gMTM7XG4gIGdbMF0gJj0gMHgxZmZmO1xuICBmb3IgKGkgPSAxOyBpIDwgMTA7IGkrKykge1xuICAgIGdbaV0gPSB0aGlzLmhbaV0gKyBjO1xuICAgIGMgPSBnW2ldID4+PiAxMztcbiAgICBnW2ldICY9IDB4MWZmZjtcbiAgfVxuICBnWzldIC09ICgxIDw8IDEzKTtcblxuICBtYXNrID0gKGMgXiAxKSAtIDE7XG4gIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBnW2ldICY9IG1hc2s7XG4gIG1hc2sgPSB+bWFzaztcbiAgZm9yIChpID0gMDsgaSA8IDEwOyBpKyspIHRoaXMuaFtpXSA9ICh0aGlzLmhbaV0gJiBtYXNrKSB8IGdbaV07XG5cbiAgdGhpcy5oWzBdID0gKCh0aGlzLmhbMF0gICAgICAgKSB8ICh0aGlzLmhbMV0gPDwgMTMpICAgICAgICAgICAgICAgICAgICApICYgMHhmZmZmO1xuICB0aGlzLmhbMV0gPSAoKHRoaXMuaFsxXSA+Pj4gIDMpIHwgKHRoaXMuaFsyXSA8PCAxMCkgICAgICAgICAgICAgICAgICAgICkgJiAweGZmZmY7XG4gIHRoaXMuaFsyXSA9ICgodGhpcy5oWzJdID4+PiAgNikgfCAodGhpcy5oWzNdIDw8ICA3KSAgICAgICAgICAgICAgICAgICAgKSAmIDB4ZmZmZjtcbiAgdGhpcy5oWzNdID0gKCh0aGlzLmhbM10gPj4+ICA5KSB8ICh0aGlzLmhbNF0gPDwgIDQpICAgICAgICAgICAgICAgICAgICApICYgMHhmZmZmO1xuICB0aGlzLmhbNF0gPSAoKHRoaXMuaFs0XSA+Pj4gMTIpIHwgKHRoaXMuaFs1XSA8PCAgMSkgfCAodGhpcy5oWzZdIDw8IDE0KSkgJiAweGZmZmY7XG4gIHRoaXMuaFs1XSA9ICgodGhpcy5oWzZdID4+PiAgMikgfCAodGhpcy5oWzddIDw8IDExKSAgICAgICAgICAgICAgICAgICAgKSAmIDB4ZmZmZjtcbiAgdGhpcy5oWzZdID0gKCh0aGlzLmhbN10gPj4+ICA1KSB8ICh0aGlzLmhbOF0gPDwgIDgpICAgICAgICAgICAgICAgICAgICApICYgMHhmZmZmO1xuICB0aGlzLmhbN10gPSAoKHRoaXMuaFs4XSA+Pj4gIDgpIHwgKHRoaXMuaFs5XSA8PCAgNSkgICAgICAgICAgICAgICAgICAgICkgJiAweGZmZmY7XG5cbiAgZiA9IHRoaXMuaFswXSArIHRoaXMucGFkWzBdO1xuICB0aGlzLmhbMF0gPSBmICYgMHhmZmZmO1xuICBmb3IgKGkgPSAxOyBpIDwgODsgaSsrKSB7XG4gICAgZiA9ICgoKHRoaXMuaFtpXSArIHRoaXMucGFkW2ldKSB8IDApICsgKGYgPj4+IDE2KSkgfCAwO1xuICAgIHRoaXMuaFtpXSA9IGYgJiAweGZmZmY7XG4gIH1cblxuICBtYWNbbWFjcG9zKyAwXSA9ICh0aGlzLmhbMF0gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysgMV0gPSAodGhpcy5oWzBdID4+PiA4KSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDJdID0gKHRoaXMuaFsxXSA+Pj4gMCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyAzXSA9ICh0aGlzLmhbMV0gPj4+IDgpICYgMHhmZjtcbiAgbWFjW21hY3BvcysgNF0gPSAodGhpcy5oWzJdID4+PiAwKSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDVdID0gKHRoaXMuaFsyXSA+Pj4gOCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyA2XSA9ICh0aGlzLmhbM10gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysgN10gPSAodGhpcy5oWzNdID4+PiA4KSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDhdID0gKHRoaXMuaFs0XSA+Pj4gMCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyA5XSA9ICh0aGlzLmhbNF0gPj4+IDgpICYgMHhmZjtcbiAgbWFjW21hY3BvcysxMF0gPSAodGhpcy5oWzVdID4+PiAwKSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrMTFdID0gKHRoaXMuaFs1XSA+Pj4gOCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKzEyXSA9ICh0aGlzLmhbNl0gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysxM10gPSAodGhpcy5oWzZdID4+PiA4KSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrMTRdID0gKHRoaXMuaFs3XSA+Pj4gMCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKzE1XSA9ICh0aGlzLmhbN10gPj4+IDgpICYgMHhmZjtcbn07XG5cbnBvbHkxMzA1LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihtLCBtcG9zLCBieXRlcykge1xuICB2YXIgaSwgd2FudDtcblxuICBpZiAodGhpcy5sZWZ0b3Zlcikge1xuICAgIHdhbnQgPSAoMTYgLSB0aGlzLmxlZnRvdmVyKTtcbiAgICBpZiAod2FudCA+IGJ5dGVzKVxuICAgICAgd2FudCA9IGJ5dGVzO1xuICAgIGZvciAoaSA9IDA7IGkgPCB3YW50OyBpKyspXG4gICAgICB0aGlzLmJ1ZmZlclt0aGlzLmxlZnRvdmVyICsgaV0gPSBtW21wb3MraV07XG4gICAgYnl0ZXMgLT0gd2FudDtcbiAgICBtcG9zICs9IHdhbnQ7XG4gICAgdGhpcy5sZWZ0b3ZlciArPSB3YW50O1xuICAgIGlmICh0aGlzLmxlZnRvdmVyIDwgMTYpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5ibG9ja3ModGhpcy5idWZmZXIsIDAsIDE2KTtcbiAgICB0aGlzLmxlZnRvdmVyID0gMDtcbiAgfVxuXG4gIGlmIChieXRlcyA+PSAxNikge1xuICAgIHdhbnQgPSBieXRlcyAtIChieXRlcyAlIDE2KTtcbiAgICB0aGlzLmJsb2NrcyhtLCBtcG9zLCB3YW50KTtcbiAgICBtcG9zICs9IHdhbnQ7XG4gICAgYnl0ZXMgLT0gd2FudDtcbiAgfVxuXG4gIGlmIChieXRlcykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBieXRlczsgaSsrKVxuICAgICAgdGhpcy5idWZmZXJbdGhpcy5sZWZ0b3ZlciArIGldID0gbVttcG9zK2ldO1xuICAgIHRoaXMubGVmdG92ZXIgKz0gYnl0ZXM7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyeXB0b19vbmV0aW1lYXV0aChvdXQsIG91dHBvcywgbSwgbXBvcywgbiwgaykge1xuICB2YXIgcyA9IG5ldyBwb2x5MTMwNShrKTtcbiAgcy51cGRhdGUobSwgbXBvcywgbik7XG4gIHMuZmluaXNoKG91dCwgb3V0cG9zKTtcbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnkoaCwgaHBvcywgbSwgbXBvcywgbiwgaykge1xuICB2YXIgeCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgY3J5cHRvX29uZXRpbWVhdXRoKHgsMCxtLG1wb3MsbixrKTtcbiAgcmV0dXJuIGNyeXB0b192ZXJpZnlfMTYoaCxocG9zLHgsMCk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19zZWNyZXRib3goYyxtLGQsbixrKSB7XG4gIHZhciBpO1xuICBpZiAoZCA8IDMyKSByZXR1cm4gLTE7XG4gIGNyeXB0b19zdHJlYW1feG9yKGMsMCxtLDAsZCxuLGspO1xuICBjcnlwdG9fb25ldGltZWF1dGgoYywgMTYsIGMsIDMyLCBkIC0gMzIsIGMpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgY1tpXSA9IDA7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc2VjcmV0Ym94X29wZW4obSxjLGQsbixrKSB7XG4gIHZhciBpO1xuICB2YXIgeCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgaWYgKGQgPCAzMikgcmV0dXJuIC0xO1xuICBjcnlwdG9fc3RyZWFtKHgsMCwzMixuLGspO1xuICBpZiAoY3J5cHRvX29uZXRpbWVhdXRoX3ZlcmlmeShjLCAxNixjLCAzMixkIC0gMzIseCkgIT09IDApIHJldHVybiAtMTtcbiAgY3J5cHRvX3N0cmVhbV94b3IobSwwLGMsMCxkLG4sayk7XG4gIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSBtW2ldID0gMDtcbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIHNldDI1NTE5KHIsIGEpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSByW2ldID0gYVtpXXwwO1xufVxuXG5mdW5jdGlvbiBjYXIyNTUxOShvKSB7XG4gIHZhciBpLCB2LCBjID0gMTtcbiAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICB2ID0gb1tpXSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIG9baV0gPSB2IC0gYyAqIDY1NTM2O1xuICB9XG4gIG9bMF0gKz0gYy0xICsgMzcgKiAoYy0xKTtcbn1cblxuZnVuY3Rpb24gc2VsMjU1MTkocCwgcSwgYikge1xuICB2YXIgdCwgYyA9IH4oYi0xKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgdCA9IGMgJiAocFtpXSBeIHFbaV0pO1xuICAgIHBbaV0gXj0gdDtcbiAgICBxW2ldIF49IHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFjazI1NTE5KG8sIG4pIHtcbiAgdmFyIGksIGosIGI7XG4gIHZhciBtID0gZ2YoKSwgdCA9IGdmKCk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB0W2ldID0gbltpXTtcbiAgY2FyMjU1MTkodCk7XG4gIGNhcjI1NTE5KHQpO1xuICBjYXIyNTUxOSh0KTtcbiAgZm9yIChqID0gMDsgaiA8IDI7IGorKykge1xuICAgIG1bMF0gPSB0WzBdIC0gMHhmZmVkO1xuICAgIGZvciAoaSA9IDE7IGkgPCAxNTsgaSsrKSB7XG4gICAgICBtW2ldID0gdFtpXSAtIDB4ZmZmZiAtICgobVtpLTFdPj4xNikgJiAxKTtcbiAgICAgIG1baS0xXSAmPSAweGZmZmY7XG4gICAgfVxuICAgIG1bMTVdID0gdFsxNV0gLSAweDdmZmYgLSAoKG1bMTRdPj4xNikgJiAxKTtcbiAgICBiID0gKG1bMTVdPj4xNikgJiAxO1xuICAgIG1bMTRdICY9IDB4ZmZmZjtcbiAgICBzZWwyNTUxOSh0LCBtLCAxLWIpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgb1syKmldID0gdFtpXSAmIDB4ZmY7XG4gICAgb1syKmkrMV0gPSB0W2ldPj44O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5lcTI1NTE5KGEsIGIpIHtcbiAgdmFyIGMgPSBuZXcgVWludDhBcnJheSgzMiksIGQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIHBhY2syNTUxOShjLCBhKTtcbiAgcGFjazI1NTE5KGQsIGIpO1xuICByZXR1cm4gY3J5cHRvX3ZlcmlmeV8zMihjLCAwLCBkLCAwKTtcbn1cblxuZnVuY3Rpb24gcGFyMjU1MTkoYSkge1xuICB2YXIgZCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgcGFjazI1NTE5KGQsIGEpO1xuICByZXR1cm4gZFswXSAmIDE7XG59XG5cbmZ1bmN0aW9uIHVucGFjazI1NTE5KG8sIG4pIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSBvW2ldID0gblsyKmldICsgKG5bMippKzFdIDw8IDgpO1xuICBvWzE1XSAmPSAweDdmZmY7XG59XG5cbmZ1bmN0aW9uIEEobywgYSwgYikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIG9baV0gPSBhW2ldICsgYltpXTtcbn1cblxuZnVuY3Rpb24gWihvLCBhLCBiKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgb1tpXSA9IGFbaV0gLSBiW2ldO1xufVxuXG5mdW5jdGlvbiBNKG8sIGEsIGIpIHtcbiAgdmFyIHYsIGMsXG4gICAgIHQwID0gMCwgIHQxID0gMCwgIHQyID0gMCwgIHQzID0gMCwgIHQ0ID0gMCwgIHQ1ID0gMCwgIHQ2ID0gMCwgIHQ3ID0gMCxcbiAgICAgdDggPSAwLCAgdDkgPSAwLCB0MTAgPSAwLCB0MTEgPSAwLCB0MTIgPSAwLCB0MTMgPSAwLCB0MTQgPSAwLCB0MTUgPSAwLFxuICAgIHQxNiA9IDAsIHQxNyA9IDAsIHQxOCA9IDAsIHQxOSA9IDAsIHQyMCA9IDAsIHQyMSA9IDAsIHQyMiA9IDAsIHQyMyA9IDAsXG4gICAgdDI0ID0gMCwgdDI1ID0gMCwgdDI2ID0gMCwgdDI3ID0gMCwgdDI4ID0gMCwgdDI5ID0gMCwgdDMwID0gMCxcbiAgICBiMCA9IGJbMF0sXG4gICAgYjEgPSBiWzFdLFxuICAgIGIyID0gYlsyXSxcbiAgICBiMyA9IGJbM10sXG4gICAgYjQgPSBiWzRdLFxuICAgIGI1ID0gYls1XSxcbiAgICBiNiA9IGJbNl0sXG4gICAgYjcgPSBiWzddLFxuICAgIGI4ID0gYls4XSxcbiAgICBiOSA9IGJbOV0sXG4gICAgYjEwID0gYlsxMF0sXG4gICAgYjExID0gYlsxMV0sXG4gICAgYjEyID0gYlsxMl0sXG4gICAgYjEzID0gYlsxM10sXG4gICAgYjE0ID0gYlsxNF0sXG4gICAgYjE1ID0gYlsxNV07XG5cbiAgdiA9IGFbMF07XG4gIHQwICs9IHYgKiBiMDtcbiAgdDEgKz0gdiAqIGIxO1xuICB0MiArPSB2ICogYjI7XG4gIHQzICs9IHYgKiBiMztcbiAgdDQgKz0gdiAqIGI0O1xuICB0NSArPSB2ICogYjU7XG4gIHQ2ICs9IHYgKiBiNjtcbiAgdDcgKz0gdiAqIGI3O1xuICB0OCArPSB2ICogYjg7XG4gIHQ5ICs9IHYgKiBiOTtcbiAgdDEwICs9IHYgKiBiMTA7XG4gIHQxMSArPSB2ICogYjExO1xuICB0MTIgKz0gdiAqIGIxMjtcbiAgdDEzICs9IHYgKiBiMTM7XG4gIHQxNCArPSB2ICogYjE0O1xuICB0MTUgKz0gdiAqIGIxNTtcbiAgdiA9IGFbMV07XG4gIHQxICs9IHYgKiBiMDtcbiAgdDIgKz0gdiAqIGIxO1xuICB0MyArPSB2ICogYjI7XG4gIHQ0ICs9IHYgKiBiMztcbiAgdDUgKz0gdiAqIGI0O1xuICB0NiArPSB2ICogYjU7XG4gIHQ3ICs9IHYgKiBiNjtcbiAgdDggKz0gdiAqIGI3O1xuICB0OSArPSB2ICogYjg7XG4gIHQxMCArPSB2ICogYjk7XG4gIHQxMSArPSB2ICogYjEwO1xuICB0MTIgKz0gdiAqIGIxMTtcbiAgdDEzICs9IHYgKiBiMTI7XG4gIHQxNCArPSB2ICogYjEzO1xuICB0MTUgKz0gdiAqIGIxNDtcbiAgdDE2ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzJdO1xuICB0MiArPSB2ICogYjA7XG4gIHQzICs9IHYgKiBiMTtcbiAgdDQgKz0gdiAqIGIyO1xuICB0NSArPSB2ICogYjM7XG4gIHQ2ICs9IHYgKiBiNDtcbiAgdDcgKz0gdiAqIGI1O1xuICB0OCArPSB2ICogYjY7XG4gIHQ5ICs9IHYgKiBiNztcbiAgdDEwICs9IHYgKiBiODtcbiAgdDExICs9IHYgKiBiOTtcbiAgdDEyICs9IHYgKiBiMTA7XG4gIHQxMyArPSB2ICogYjExO1xuICB0MTQgKz0gdiAqIGIxMjtcbiAgdDE1ICs9IHYgKiBiMTM7XG4gIHQxNiArPSB2ICogYjE0O1xuICB0MTcgKz0gdiAqIGIxNTtcbiAgdiA9IGFbM107XG4gIHQzICs9IHYgKiBiMDtcbiAgdDQgKz0gdiAqIGIxO1xuICB0NSArPSB2ICogYjI7XG4gIHQ2ICs9IHYgKiBiMztcbiAgdDcgKz0gdiAqIGI0O1xuICB0OCArPSB2ICogYjU7XG4gIHQ5ICs9IHYgKiBiNjtcbiAgdDEwICs9IHYgKiBiNztcbiAgdDExICs9IHYgKiBiODtcbiAgdDEyICs9IHYgKiBiOTtcbiAgdDEzICs9IHYgKiBiMTA7XG4gIHQxNCArPSB2ICogYjExO1xuICB0MTUgKz0gdiAqIGIxMjtcbiAgdDE2ICs9IHYgKiBiMTM7XG4gIHQxNyArPSB2ICogYjE0O1xuICB0MTggKz0gdiAqIGIxNTtcbiAgdiA9IGFbNF07XG4gIHQ0ICs9IHYgKiBiMDtcbiAgdDUgKz0gdiAqIGIxO1xuICB0NiArPSB2ICogYjI7XG4gIHQ3ICs9IHYgKiBiMztcbiAgdDggKz0gdiAqIGI0O1xuICB0OSArPSB2ICogYjU7XG4gIHQxMCArPSB2ICogYjY7XG4gIHQxMSArPSB2ICogYjc7XG4gIHQxMiArPSB2ICogYjg7XG4gIHQxMyArPSB2ICogYjk7XG4gIHQxNCArPSB2ICogYjEwO1xuICB0MTUgKz0gdiAqIGIxMTtcbiAgdDE2ICs9IHYgKiBiMTI7XG4gIHQxNyArPSB2ICogYjEzO1xuICB0MTggKz0gdiAqIGIxNDtcbiAgdDE5ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzVdO1xuICB0NSArPSB2ICogYjA7XG4gIHQ2ICs9IHYgKiBiMTtcbiAgdDcgKz0gdiAqIGIyO1xuICB0OCArPSB2ICogYjM7XG4gIHQ5ICs9IHYgKiBiNDtcbiAgdDEwICs9IHYgKiBiNTtcbiAgdDExICs9IHYgKiBiNjtcbiAgdDEyICs9IHYgKiBiNztcbiAgdDEzICs9IHYgKiBiODtcbiAgdDE0ICs9IHYgKiBiOTtcbiAgdDE1ICs9IHYgKiBiMTA7XG4gIHQxNiArPSB2ICogYjExO1xuICB0MTcgKz0gdiAqIGIxMjtcbiAgdDE4ICs9IHYgKiBiMTM7XG4gIHQxOSArPSB2ICogYjE0O1xuICB0MjAgKz0gdiAqIGIxNTtcbiAgdiA9IGFbNl07XG4gIHQ2ICs9IHYgKiBiMDtcbiAgdDcgKz0gdiAqIGIxO1xuICB0OCArPSB2ICogYjI7XG4gIHQ5ICs9IHYgKiBiMztcbiAgdDEwICs9IHYgKiBiNDtcbiAgdDExICs9IHYgKiBiNTtcbiAgdDEyICs9IHYgKiBiNjtcbiAgdDEzICs9IHYgKiBiNztcbiAgdDE0ICs9IHYgKiBiODtcbiAgdDE1ICs9IHYgKiBiOTtcbiAgdDE2ICs9IHYgKiBiMTA7XG4gIHQxNyArPSB2ICogYjExO1xuICB0MTggKz0gdiAqIGIxMjtcbiAgdDE5ICs9IHYgKiBiMTM7XG4gIHQyMCArPSB2ICogYjE0O1xuICB0MjEgKz0gdiAqIGIxNTtcbiAgdiA9IGFbN107XG4gIHQ3ICs9IHYgKiBiMDtcbiAgdDggKz0gdiAqIGIxO1xuICB0OSArPSB2ICogYjI7XG4gIHQxMCArPSB2ICogYjM7XG4gIHQxMSArPSB2ICogYjQ7XG4gIHQxMiArPSB2ICogYjU7XG4gIHQxMyArPSB2ICogYjY7XG4gIHQxNCArPSB2ICogYjc7XG4gIHQxNSArPSB2ICogYjg7XG4gIHQxNiArPSB2ICogYjk7XG4gIHQxNyArPSB2ICogYjEwO1xuICB0MTggKz0gdiAqIGIxMTtcbiAgdDE5ICs9IHYgKiBiMTI7XG4gIHQyMCArPSB2ICogYjEzO1xuICB0MjEgKz0gdiAqIGIxNDtcbiAgdDIyICs9IHYgKiBiMTU7XG4gIHYgPSBhWzhdO1xuICB0OCArPSB2ICogYjA7XG4gIHQ5ICs9IHYgKiBiMTtcbiAgdDEwICs9IHYgKiBiMjtcbiAgdDExICs9IHYgKiBiMztcbiAgdDEyICs9IHYgKiBiNDtcbiAgdDEzICs9IHYgKiBiNTtcbiAgdDE0ICs9IHYgKiBiNjtcbiAgdDE1ICs9IHYgKiBiNztcbiAgdDE2ICs9IHYgKiBiODtcbiAgdDE3ICs9IHYgKiBiOTtcbiAgdDE4ICs9IHYgKiBiMTA7XG4gIHQxOSArPSB2ICogYjExO1xuICB0MjAgKz0gdiAqIGIxMjtcbiAgdDIxICs9IHYgKiBiMTM7XG4gIHQyMiArPSB2ICogYjE0O1xuICB0MjMgKz0gdiAqIGIxNTtcbiAgdiA9IGFbOV07XG4gIHQ5ICs9IHYgKiBiMDtcbiAgdDEwICs9IHYgKiBiMTtcbiAgdDExICs9IHYgKiBiMjtcbiAgdDEyICs9IHYgKiBiMztcbiAgdDEzICs9IHYgKiBiNDtcbiAgdDE0ICs9IHYgKiBiNTtcbiAgdDE1ICs9IHYgKiBiNjtcbiAgdDE2ICs9IHYgKiBiNztcbiAgdDE3ICs9IHYgKiBiODtcbiAgdDE4ICs9IHYgKiBiOTtcbiAgdDE5ICs9IHYgKiBiMTA7XG4gIHQyMCArPSB2ICogYjExO1xuICB0MjEgKz0gdiAqIGIxMjtcbiAgdDIyICs9IHYgKiBiMTM7XG4gIHQyMyArPSB2ICogYjE0O1xuICB0MjQgKz0gdiAqIGIxNTtcbiAgdiA9IGFbMTBdO1xuICB0MTAgKz0gdiAqIGIwO1xuICB0MTEgKz0gdiAqIGIxO1xuICB0MTIgKz0gdiAqIGIyO1xuICB0MTMgKz0gdiAqIGIzO1xuICB0MTQgKz0gdiAqIGI0O1xuICB0MTUgKz0gdiAqIGI1O1xuICB0MTYgKz0gdiAqIGI2O1xuICB0MTcgKz0gdiAqIGI3O1xuICB0MTggKz0gdiAqIGI4O1xuICB0MTkgKz0gdiAqIGI5O1xuICB0MjAgKz0gdiAqIGIxMDtcbiAgdDIxICs9IHYgKiBiMTE7XG4gIHQyMiArPSB2ICogYjEyO1xuICB0MjMgKz0gdiAqIGIxMztcbiAgdDI0ICs9IHYgKiBiMTQ7XG4gIHQyNSArPSB2ICogYjE1O1xuICB2ID0gYVsxMV07XG4gIHQxMSArPSB2ICogYjA7XG4gIHQxMiArPSB2ICogYjE7XG4gIHQxMyArPSB2ICogYjI7XG4gIHQxNCArPSB2ICogYjM7XG4gIHQxNSArPSB2ICogYjQ7XG4gIHQxNiArPSB2ICogYjU7XG4gIHQxNyArPSB2ICogYjY7XG4gIHQxOCArPSB2ICogYjc7XG4gIHQxOSArPSB2ICogYjg7XG4gIHQyMCArPSB2ICogYjk7XG4gIHQyMSArPSB2ICogYjEwO1xuICB0MjIgKz0gdiAqIGIxMTtcbiAgdDIzICs9IHYgKiBiMTI7XG4gIHQyNCArPSB2ICogYjEzO1xuICB0MjUgKz0gdiAqIGIxNDtcbiAgdDI2ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzEyXTtcbiAgdDEyICs9IHYgKiBiMDtcbiAgdDEzICs9IHYgKiBiMTtcbiAgdDE0ICs9IHYgKiBiMjtcbiAgdDE1ICs9IHYgKiBiMztcbiAgdDE2ICs9IHYgKiBiNDtcbiAgdDE3ICs9IHYgKiBiNTtcbiAgdDE4ICs9IHYgKiBiNjtcbiAgdDE5ICs9IHYgKiBiNztcbiAgdDIwICs9IHYgKiBiODtcbiAgdDIxICs9IHYgKiBiOTtcbiAgdDIyICs9IHYgKiBiMTA7XG4gIHQyMyArPSB2ICogYjExO1xuICB0MjQgKz0gdiAqIGIxMjtcbiAgdDI1ICs9IHYgKiBiMTM7XG4gIHQyNiArPSB2ICogYjE0O1xuICB0MjcgKz0gdiAqIGIxNTtcbiAgdiA9IGFbMTNdO1xuICB0MTMgKz0gdiAqIGIwO1xuICB0MTQgKz0gdiAqIGIxO1xuICB0MTUgKz0gdiAqIGIyO1xuICB0MTYgKz0gdiAqIGIzO1xuICB0MTcgKz0gdiAqIGI0O1xuICB0MTggKz0gdiAqIGI1O1xuICB0MTkgKz0gdiAqIGI2O1xuICB0MjAgKz0gdiAqIGI3O1xuICB0MjEgKz0gdiAqIGI4O1xuICB0MjIgKz0gdiAqIGI5O1xuICB0MjMgKz0gdiAqIGIxMDtcbiAgdDI0ICs9IHYgKiBiMTE7XG4gIHQyNSArPSB2ICogYjEyO1xuICB0MjYgKz0gdiAqIGIxMztcbiAgdDI3ICs9IHYgKiBiMTQ7XG4gIHQyOCArPSB2ICogYjE1O1xuICB2ID0gYVsxNF07XG4gIHQxNCArPSB2ICogYjA7XG4gIHQxNSArPSB2ICogYjE7XG4gIHQxNiArPSB2ICogYjI7XG4gIHQxNyArPSB2ICogYjM7XG4gIHQxOCArPSB2ICogYjQ7XG4gIHQxOSArPSB2ICogYjU7XG4gIHQyMCArPSB2ICogYjY7XG4gIHQyMSArPSB2ICogYjc7XG4gIHQyMiArPSB2ICogYjg7XG4gIHQyMyArPSB2ICogYjk7XG4gIHQyNCArPSB2ICogYjEwO1xuICB0MjUgKz0gdiAqIGIxMTtcbiAgdDI2ICs9IHYgKiBiMTI7XG4gIHQyNyArPSB2ICogYjEzO1xuICB0MjggKz0gdiAqIGIxNDtcbiAgdDI5ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzE1XTtcbiAgdDE1ICs9IHYgKiBiMDtcbiAgdDE2ICs9IHYgKiBiMTtcbiAgdDE3ICs9IHYgKiBiMjtcbiAgdDE4ICs9IHYgKiBiMztcbiAgdDE5ICs9IHYgKiBiNDtcbiAgdDIwICs9IHYgKiBiNTtcbiAgdDIxICs9IHYgKiBiNjtcbiAgdDIyICs9IHYgKiBiNztcbiAgdDIzICs9IHYgKiBiODtcbiAgdDI0ICs9IHYgKiBiOTtcbiAgdDI1ICs9IHYgKiBiMTA7XG4gIHQyNiArPSB2ICogYjExO1xuICB0MjcgKz0gdiAqIGIxMjtcbiAgdDI4ICs9IHYgKiBiMTM7XG4gIHQyOSArPSB2ICogYjE0O1xuICB0MzAgKz0gdiAqIGIxNTtcblxuICB0MCAgKz0gMzggKiB0MTY7XG4gIHQxICArPSAzOCAqIHQxNztcbiAgdDIgICs9IDM4ICogdDE4O1xuICB0MyAgKz0gMzggKiB0MTk7XG4gIHQ0ICArPSAzOCAqIHQyMDtcbiAgdDUgICs9IDM4ICogdDIxO1xuICB0NiAgKz0gMzggKiB0MjI7XG4gIHQ3ICArPSAzOCAqIHQyMztcbiAgdDggICs9IDM4ICogdDI0O1xuICB0OSAgKz0gMzggKiB0MjU7XG4gIHQxMCArPSAzOCAqIHQyNjtcbiAgdDExICs9IDM4ICogdDI3O1xuICB0MTIgKz0gMzggKiB0Mjg7XG4gIHQxMyArPSAzOCAqIHQyOTtcbiAgdDE0ICs9IDM4ICogdDMwO1xuICAvLyB0MTUgbGVmdCBhcyBpc1xuXG4gIC8vIGZpcnN0IGNhclxuICBjID0gMTtcbiAgdiA9ICB0MCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQwID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQxID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQyID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQzID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ0ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ1ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ2ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ3ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0OCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ4ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0OSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ5ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEwID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDExID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEyID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEzID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxNCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDE0ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxNSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDE1ID0gdiAtIGMgKiA2NTUzNjtcbiAgdDAgKz0gYy0xICsgMzcgKiAoYy0xKTtcblxuICAvLyBzZWNvbmQgY2FyXG4gIGMgPSAxO1xuICB2ID0gIHQwICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDAgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQxICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDEgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQyICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDIgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQzICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDMgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ0ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDQgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ1ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDUgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ2ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDYgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ3ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDcgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ4ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDggPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gIHQ5ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyAgdDkgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDEwICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTAgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDExICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTEgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDEyICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTIgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDEzICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTMgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDE0ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTQgPSB2IC0gYyAqIDY1NTM2O1xuICB2ID0gdDE1ICsgYyArIDY1NTM1OyBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpOyB0MTUgPSB2IC0gYyAqIDY1NTM2O1xuICB0MCArPSBjLTEgKyAzNyAqIChjLTEpO1xuXG4gIG9bIDBdID0gdDA7XG4gIG9bIDFdID0gdDE7XG4gIG9bIDJdID0gdDI7XG4gIG9bIDNdID0gdDM7XG4gIG9bIDRdID0gdDQ7XG4gIG9bIDVdID0gdDU7XG4gIG9bIDZdID0gdDY7XG4gIG9bIDddID0gdDc7XG4gIG9bIDhdID0gdDg7XG4gIG9bIDldID0gdDk7XG4gIG9bMTBdID0gdDEwO1xuICBvWzExXSA9IHQxMTtcbiAgb1sxMl0gPSB0MTI7XG4gIG9bMTNdID0gdDEzO1xuICBvWzE0XSA9IHQxNDtcbiAgb1sxNV0gPSB0MTU7XG59XG5cbmZ1bmN0aW9uIFMobywgYSkge1xuICBNKG8sIGEsIGEpO1xufVxuXG5mdW5jdGlvbiBpbnYyNTUxOShvLCBpKSB7XG4gIHZhciBjID0gZ2YoKTtcbiAgdmFyIGE7XG4gIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSBjW2FdID0gaVthXTtcbiAgZm9yIChhID0gMjUzOyBhID49IDA7IGEtLSkge1xuICAgIFMoYywgYyk7XG4gICAgaWYoYSAhPT0gMiAmJiBhICE9PSA0KSBNKGMsIGMsIGkpO1xuICB9XG4gIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSBvW2FdID0gY1thXTtcbn1cblxuZnVuY3Rpb24gcG93MjUyMyhvLCBpKSB7XG4gIHZhciBjID0gZ2YoKTtcbiAgdmFyIGE7XG4gIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSBjW2FdID0gaVthXTtcbiAgZm9yIChhID0gMjUwOyBhID49IDA7IGEtLSkge1xuICAgICAgUyhjLCBjKTtcbiAgICAgIGlmKGEgIT09IDEpIE0oYywgYywgaSk7XG4gIH1cbiAgZm9yIChhID0gMDsgYSA8IDE2OyBhKyspIG9bYV0gPSBjW2FdO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc2NhbGFybXVsdChxLCBuLCBwKSB7XG4gIHZhciB6ID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICB2YXIgeCA9IG5ldyBGbG9hdDY0QXJyYXkoODApLCByLCBpO1xuICB2YXIgYSA9IGdmKCksIGIgPSBnZigpLCBjID0gZ2YoKSxcbiAgICAgIGQgPSBnZigpLCBlID0gZ2YoKSwgZiA9IGdmKCk7XG4gIGZvciAoaSA9IDA7IGkgPCAzMTsgaSsrKSB6W2ldID0gbltpXTtcbiAgelszMV09KG5bMzFdJjEyNyl8NjQ7XG4gIHpbMF0mPTI0ODtcbiAgdW5wYWNrMjU1MTkoeCxwKTtcbiAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICBiW2ldPXhbaV07XG4gICAgZFtpXT1hW2ldPWNbaV09MDtcbiAgfVxuICBhWzBdPWRbMF09MTtcbiAgZm9yIChpPTI1NDsgaT49MDsgLS1pKSB7XG4gICAgcj0oeltpPj4+M10+Pj4oaSY3KSkmMTtcbiAgICBzZWwyNTUxOShhLGIscik7XG4gICAgc2VsMjU1MTkoYyxkLHIpO1xuICAgIEEoZSxhLGMpO1xuICAgIFooYSxhLGMpO1xuICAgIEEoYyxiLGQpO1xuICAgIFooYixiLGQpO1xuICAgIFMoZCxlKTtcbiAgICBTKGYsYSk7XG4gICAgTShhLGMsYSk7XG4gICAgTShjLGIsZSk7XG4gICAgQShlLGEsYyk7XG4gICAgWihhLGEsYyk7XG4gICAgUyhiLGEpO1xuICAgIFooYyxkLGYpO1xuICAgIE0oYSxjLF8xMjE2NjUpO1xuICAgIEEoYSxhLGQpO1xuICAgIE0oYyxjLGEpO1xuICAgIE0oYSxkLGYpO1xuICAgIE0oZCxiLHgpO1xuICAgIFMoYixlKTtcbiAgICBzZWwyNTUxOShhLGIscik7XG4gICAgc2VsMjU1MTkoYyxkLHIpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgeFtpKzE2XT1hW2ldO1xuICAgIHhbaSszMl09Y1tpXTtcbiAgICB4W2krNDhdPWJbaV07XG4gICAgeFtpKzY0XT1kW2ldO1xuICB9XG4gIHZhciB4MzIgPSB4LnN1YmFycmF5KDMyKTtcbiAgdmFyIHgxNiA9IHguc3ViYXJyYXkoMTYpO1xuICBpbnYyNTUxOSh4MzIseDMyKTtcbiAgTSh4MTYseDE2LHgzMik7XG4gIHBhY2syNTUxOShxLHgxNik7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc2NhbGFybXVsdF9iYXNlKHEsIG4pIHtcbiAgcmV0dXJuIGNyeXB0b19zY2FsYXJtdWx0KHEsIG4sIF85KTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX2JveF9rZXlwYWlyKHksIHgpIHtcbiAgcmFuZG9tYnl0ZXMoeCwgMzIpO1xuICByZXR1cm4gY3J5cHRvX3NjYWxhcm11bHRfYmFzZSh5LCB4KTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX2JveF9iZWZvcmVubShrLCB5LCB4KSB7XG4gIHZhciBzID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBjcnlwdG9fc2NhbGFybXVsdChzLCB4LCB5KTtcbiAgcmV0dXJuIGNyeXB0b19jb3JlX2hzYWxzYTIwKGssIF8wLCBzLCBzaWdtYSk7XG59XG5cbnZhciBjcnlwdG9fYm94X2FmdGVybm0gPSBjcnlwdG9fc2VjcmV0Ym94O1xudmFyIGNyeXB0b19ib3hfb3Blbl9hZnRlcm5tID0gY3J5cHRvX3NlY3JldGJveF9vcGVuO1xuXG5mdW5jdGlvbiBjcnlwdG9fYm94KGMsIG0sIGQsIG4sIHksIHgpIHtcbiAgdmFyIGsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIGNyeXB0b19ib3hfYmVmb3Jlbm0oaywgeSwgeCk7XG4gIHJldHVybiBjcnlwdG9fYm94X2FmdGVybm0oYywgbSwgZCwgbiwgayk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19ib3hfb3BlbihtLCBjLCBkLCBuLCB5LCB4KSB7XG4gIHZhciBrID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBjcnlwdG9fYm94X2JlZm9yZW5tKGssIHksIHgpO1xuICByZXR1cm4gY3J5cHRvX2JveF9vcGVuX2FmdGVybm0obSwgYywgZCwgbiwgayk7XG59XG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dO1xuXG5mdW5jdGlvbiBjcnlwdG9faGFzaGJsb2Nrc19obChoaCwgaGwsIG0sIG4pIHtcbiAgdmFyIHdoID0gbmV3IEludDMyQXJyYXkoMTYpLCB3bCA9IG5ldyBJbnQzMkFycmF5KDE2KSxcbiAgICAgIGJoMCwgYmgxLCBiaDIsIGJoMywgYmg0LCBiaDUsIGJoNiwgYmg3LFxuICAgICAgYmwwLCBibDEsIGJsMiwgYmwzLCBibDQsIGJsNSwgYmw2LCBibDcsXG4gICAgICB0aCwgdGwsIGksIGosIGgsIGwsIGEsIGIsIGMsIGQ7XG5cbiAgdmFyIGFoMCA9IGhoWzBdLFxuICAgICAgYWgxID0gaGhbMV0sXG4gICAgICBhaDIgPSBoaFsyXSxcbiAgICAgIGFoMyA9IGhoWzNdLFxuICAgICAgYWg0ID0gaGhbNF0sXG4gICAgICBhaDUgPSBoaFs1XSxcbiAgICAgIGFoNiA9IGhoWzZdLFxuICAgICAgYWg3ID0gaGhbN10sXG5cbiAgICAgIGFsMCA9IGhsWzBdLFxuICAgICAgYWwxID0gaGxbMV0sXG4gICAgICBhbDIgPSBobFsyXSxcbiAgICAgIGFsMyA9IGhsWzNdLFxuICAgICAgYWw0ID0gaGxbNF0sXG4gICAgICBhbDUgPSBobFs1XSxcbiAgICAgIGFsNiA9IGhsWzZdLFxuICAgICAgYWw3ID0gaGxbN107XG5cbiAgdmFyIHBvcyA9IDA7XG4gIHdoaWxlIChuID49IDEyOCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBqID0gOCAqIGkgKyBwb3M7XG4gICAgICB3aFtpXSA9IChtW2orMF0gPDwgMjQpIHwgKG1baisxXSA8PCAxNikgfCAobVtqKzJdIDw8IDgpIHwgbVtqKzNdO1xuICAgICAgd2xbaV0gPSAobVtqKzRdIDw8IDI0KSB8IChtW2orNV0gPDwgMTYpIHwgKG1bais2XSA8PCA4KSB8IG1bais3XTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDgwOyBpKyspIHtcbiAgICAgIGJoMCA9IGFoMDtcbiAgICAgIGJoMSA9IGFoMTtcbiAgICAgIGJoMiA9IGFoMjtcbiAgICAgIGJoMyA9IGFoMztcbiAgICAgIGJoNCA9IGFoNDtcbiAgICAgIGJoNSA9IGFoNTtcbiAgICAgIGJoNiA9IGFoNjtcbiAgICAgIGJoNyA9IGFoNztcblxuICAgICAgYmwwID0gYWwwO1xuICAgICAgYmwxID0gYWwxO1xuICAgICAgYmwyID0gYWwyO1xuICAgICAgYmwzID0gYWwzO1xuICAgICAgYmw0ID0gYWw0O1xuICAgICAgYmw1ID0gYWw1O1xuICAgICAgYmw2ID0gYWw2O1xuICAgICAgYmw3ID0gYWw3O1xuXG4gICAgICAvLyBhZGRcbiAgICAgIGggPSBhaDc7XG4gICAgICBsID0gYWw3O1xuXG4gICAgICBhID0gbCAmIDB4ZmZmZjsgYiA9IGwgPj4+IDE2O1xuICAgICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgICAgLy8gU2lnbWExXG4gICAgICBoID0gKChhaDQgPj4+IDE0KSB8IChhbDQgPDwgKDMyLTE0KSkpIF4gKChhaDQgPj4+IDE4KSB8IChhbDQgPDwgKDMyLTE4KSkpIF4gKChhbDQgPj4+ICg0MS0zMikpIHwgKGFoNCA8PCAoMzItKDQxLTMyKSkpKTtcbiAgICAgIGwgPSAoKGFsNCA+Pj4gMTQpIHwgKGFoNCA8PCAoMzItMTQpKSkgXiAoKGFsNCA+Pj4gMTgpIHwgKGFoNCA8PCAoMzItMTgpKSkgXiAoKGFoNCA+Pj4gKDQxLTMyKSkgfCAoYWw0IDw8ICgzMi0oNDEtMzIpKSkpO1xuXG4gICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgIC8vIENoXG4gICAgICBoID0gKGFoNCAmIGFoNSkgXiAofmFoNCAmIGFoNik7XG4gICAgICBsID0gKGFsNCAmIGFsNSkgXiAofmFsNCAmIGFsNik7XG5cbiAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgIGMgKz0gaCAmIDB4ZmZmZjsgZCArPSBoID4+PiAxNjtcblxuICAgICAgLy8gS1xuICAgICAgaCA9IEtbaSoyXTtcbiAgICAgIGwgPSBLW2kqMisxXTtcblxuICAgICAgYSArPSBsICYgMHhmZmZmOyBiICs9IGwgPj4+IDE2O1xuICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAvLyB3XG4gICAgICBoID0gd2hbaSUxNl07XG4gICAgICBsID0gd2xbaSUxNl07XG5cbiAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgIGMgKz0gaCAmIDB4ZmZmZjsgZCArPSBoID4+PiAxNjtcblxuICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICBkICs9IGMgPj4+IDE2O1xuXG4gICAgICB0aCA9IGMgJiAweGZmZmYgfCBkIDw8IDE2O1xuICAgICAgdGwgPSBhICYgMHhmZmZmIHwgYiA8PCAxNjtcblxuICAgICAgLy8gYWRkXG4gICAgICBoID0gdGg7XG4gICAgICBsID0gdGw7XG5cbiAgICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgICAvLyBTaWdtYTBcbiAgICAgIGggPSAoKGFoMCA+Pj4gMjgpIHwgKGFsMCA8PCAoMzItMjgpKSkgXiAoKGFsMCA+Pj4gKDM0LTMyKSkgfCAoYWgwIDw8ICgzMi0oMzQtMzIpKSkpIF4gKChhbDAgPj4+ICgzOS0zMikpIHwgKGFoMCA8PCAoMzItKDM5LTMyKSkpKTtcbiAgICAgIGwgPSAoKGFsMCA+Pj4gMjgpIHwgKGFoMCA8PCAoMzItMjgpKSkgXiAoKGFoMCA+Pj4gKDM0LTMyKSkgfCAoYWwwIDw8ICgzMi0oMzQtMzIpKSkpIF4gKChhaDAgPj4+ICgzOS0zMikpIHwgKGFsMCA8PCAoMzItKDM5LTMyKSkpKTtcblxuICAgICAgYSArPSBsICYgMHhmZmZmOyBiICs9IGwgPj4+IDE2O1xuICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAvLyBNYWpcbiAgICAgIGggPSAoYWgwICYgYWgxKSBeIChhaDAgJiBhaDIpIF4gKGFoMSAmIGFoMik7XG4gICAgICBsID0gKGFsMCAmIGFsMSkgXiAoYWwwICYgYWwyKSBeIChhbDEgJiBhbDIpO1xuXG4gICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgZCArPSBjID4+PiAxNjtcblxuICAgICAgYmg3ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgYmw3ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgICAvLyBhZGRcbiAgICAgIGggPSBiaDM7XG4gICAgICBsID0gYmwzO1xuXG4gICAgICBhID0gbCAmIDB4ZmZmZjsgYiA9IGwgPj4+IDE2O1xuICAgICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgICAgaCA9IHRoO1xuICAgICAgbCA9IHRsO1xuXG4gICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgZCArPSBjID4+PiAxNjtcblxuICAgICAgYmgzID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgYmwzID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgICBhaDEgPSBiaDA7XG4gICAgICBhaDIgPSBiaDE7XG4gICAgICBhaDMgPSBiaDI7XG4gICAgICBhaDQgPSBiaDM7XG4gICAgICBhaDUgPSBiaDQ7XG4gICAgICBhaDYgPSBiaDU7XG4gICAgICBhaDcgPSBiaDY7XG4gICAgICBhaDAgPSBiaDc7XG5cbiAgICAgIGFsMSA9IGJsMDtcbiAgICAgIGFsMiA9IGJsMTtcbiAgICAgIGFsMyA9IGJsMjtcbiAgICAgIGFsNCA9IGJsMztcbiAgICAgIGFsNSA9IGJsNDtcbiAgICAgIGFsNiA9IGJsNTtcbiAgICAgIGFsNyA9IGJsNjtcbiAgICAgIGFsMCA9IGJsNztcblxuICAgICAgaWYgKGklMTYgPT09IDE1KSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCAxNjsgaisrKSB7XG4gICAgICAgICAgLy8gYWRkXG4gICAgICAgICAgaCA9IHdoW2pdO1xuICAgICAgICAgIGwgPSB3bFtqXTtcblxuICAgICAgICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgICAgICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgICAgICAgIGggPSB3aFsoais5KSUxNl07XG4gICAgICAgICAgbCA9IHdsWyhqKzkpJTE2XTtcblxuICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgICAgICAvLyBzaWdtYTBcbiAgICAgICAgICB0aCA9IHdoWyhqKzEpJTE2XTtcbiAgICAgICAgICB0bCA9IHdsWyhqKzEpJTE2XTtcbiAgICAgICAgICBoID0gKCh0aCA+Pj4gMSkgfCAodGwgPDwgKDMyLTEpKSkgXiAoKHRoID4+PiA4KSB8ICh0bCA8PCAoMzItOCkpKSBeICh0aCA+Pj4gNyk7XG4gICAgICAgICAgbCA9ICgodGwgPj4+IDEpIHwgKHRoIDw8ICgzMi0xKSkpIF4gKCh0bCA+Pj4gOCkgfCAodGggPDwgKDMyLTgpKSkgXiAoKHRsID4+PiA3KSB8ICh0aCA8PCAoMzItNykpKTtcblxuICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgICAgICAvLyBzaWdtYTFcbiAgICAgICAgICB0aCA9IHdoWyhqKzE0KSUxNl07XG4gICAgICAgICAgdGwgPSB3bFsoaisxNCklMTZdO1xuICAgICAgICAgIGggPSAoKHRoID4+PiAxOSkgfCAodGwgPDwgKDMyLTE5KSkpIF4gKCh0bCA+Pj4gKDYxLTMyKSkgfCAodGggPDwgKDMyLSg2MS0zMikpKSkgXiAodGggPj4+IDYpO1xuICAgICAgICAgIGwgPSAoKHRsID4+PiAxOSkgfCAodGggPDwgKDMyLTE5KSkpIF4gKCh0aCA+Pj4gKDYxLTMyKSkgfCAodGwgPDwgKDMyLSg2MS0zMikpKSkgXiAoKHRsID4+PiA2KSB8ICh0aCA8PCAoMzItNikpKTtcblxuICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgZCArPSBjID4+PiAxNjtcblxuICAgICAgICAgIHdoW2pdID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgICAgIHdsW2pdID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkXG4gICAgaCA9IGFoMDtcbiAgICBsID0gYWwwO1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzBdO1xuICAgIGwgPSBobFswXTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzBdID0gYWgwID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzBdID0gYWwwID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoMTtcbiAgICBsID0gYWwxO1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzFdO1xuICAgIGwgPSBobFsxXTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzFdID0gYWgxID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzFdID0gYWwxID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoMjtcbiAgICBsID0gYWwyO1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzJdO1xuICAgIGwgPSBobFsyXTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzJdID0gYWgyID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzJdID0gYWwyID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoMztcbiAgICBsID0gYWwzO1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzNdO1xuICAgIGwgPSBobFszXTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzNdID0gYWgzID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzNdID0gYWwzID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoNDtcbiAgICBsID0gYWw0O1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzRdO1xuICAgIGwgPSBobFs0XTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzRdID0gYWg0ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzRdID0gYWw0ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoNTtcbiAgICBsID0gYWw1O1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzVdO1xuICAgIGwgPSBobFs1XTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzVdID0gYWg1ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzVdID0gYWw1ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoNjtcbiAgICBsID0gYWw2O1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzZdO1xuICAgIGwgPSBobFs2XTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzZdID0gYWg2ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzZdID0gYWw2ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgaCA9IGFoNztcbiAgICBsID0gYWw3O1xuXG4gICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICBjID0gaCAmIDB4ZmZmZjsgZCA9IGggPj4+IDE2O1xuXG4gICAgaCA9IGhoWzddO1xuICAgIGwgPSBobFs3XTtcblxuICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICBiICs9IGEgPj4+IDE2O1xuICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgZCArPSBjID4+PiAxNjtcblxuICAgIGhoWzddID0gYWg3ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgIGhsWzddID0gYWw3ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuXG4gICAgcG9zICs9IDEyODtcbiAgICBuIC09IDEyODtcbiAgfVxuXG4gIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9faGFzaChvdXQsIG0sIG4pIHtcbiAgdmFyIGhoID0gbmV3IEludDMyQXJyYXkoOCksXG4gICAgICBobCA9IG5ldyBJbnQzMkFycmF5KDgpLFxuICAgICAgeCA9IG5ldyBVaW50OEFycmF5KDI1NiksXG4gICAgICBpLCBiID0gbjtcblxuICBoaFswXSA9IDB4NmEwOWU2Njc7XG4gIGhoWzFdID0gMHhiYjY3YWU4NTtcbiAgaGhbMl0gPSAweDNjNmVmMzcyO1xuICBoaFszXSA9IDB4YTU0ZmY1M2E7XG4gIGhoWzRdID0gMHg1MTBlNTI3ZjtcbiAgaGhbNV0gPSAweDliMDU2ODhjO1xuICBoaFs2XSA9IDB4MWY4M2Q5YWI7XG4gIGhoWzddID0gMHg1YmUwY2QxOTtcblxuICBobFswXSA9IDB4ZjNiY2M5MDg7XG4gIGhsWzFdID0gMHg4NGNhYTczYjtcbiAgaGxbMl0gPSAweGZlOTRmODJiO1xuICBobFszXSA9IDB4NWYxZDM2ZjE7XG4gIGhsWzRdID0gMHhhZGU2ODJkMTtcbiAgaGxbNV0gPSAweDJiM2U2YzFmO1xuICBobFs2XSA9IDB4ZmI0MWJkNmI7XG4gIGhsWzddID0gMHgxMzdlMjE3OTtcblxuICBjcnlwdG9faGFzaGJsb2Nrc19obChoaCwgaGwsIG0sIG4pO1xuICBuICU9IDEyODtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB4W2ldID0gbVtiLW4raV07XG4gIHhbbl0gPSAxMjg7XG5cbiAgbiA9IDI1Ni0xMjgqKG48MTEyPzE6MCk7XG4gIHhbbi05XSA9IDA7XG4gIHRzNjQoeCwgbi04LCAgKGIgLyAweDIwMDAwMDAwKSB8IDAsIGIgPDwgMyk7XG4gIGNyeXB0b19oYXNoYmxvY2tzX2hsKGhoLCBobCwgeCwgbik7XG5cbiAgZm9yIChpID0gMDsgaSA8IDg7IGkrKykgdHM2NChvdXQsIDgqaSwgaGhbaV0sIGhsW2ldKTtcblxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gYWRkKHAsIHEpIHtcbiAgdmFyIGEgPSBnZigpLCBiID0gZ2YoKSwgYyA9IGdmKCksXG4gICAgICBkID0gZ2YoKSwgZSA9IGdmKCksIGYgPSBnZigpLFxuICAgICAgZyA9IGdmKCksIGggPSBnZigpLCB0ID0gZ2YoKTtcblxuICBaKGEsIHBbMV0sIHBbMF0pO1xuICBaKHQsIHFbMV0sIHFbMF0pO1xuICBNKGEsIGEsIHQpO1xuICBBKGIsIHBbMF0sIHBbMV0pO1xuICBBKHQsIHFbMF0sIHFbMV0pO1xuICBNKGIsIGIsIHQpO1xuICBNKGMsIHBbM10sIHFbM10pO1xuICBNKGMsIGMsIEQyKTtcbiAgTShkLCBwWzJdLCBxWzJdKTtcbiAgQShkLCBkLCBkKTtcbiAgWihlLCBiLCBhKTtcbiAgWihmLCBkLCBjKTtcbiAgQShnLCBkLCBjKTtcbiAgQShoLCBiLCBhKTtcblxuICBNKHBbMF0sIGUsIGYpO1xuICBNKHBbMV0sIGgsIGcpO1xuICBNKHBbMl0sIGcsIGYpO1xuICBNKHBbM10sIGUsIGgpO1xufVxuXG5mdW5jdGlvbiBjc3dhcChwLCBxLCBiKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgc2VsMjU1MTkocFtpXSwgcVtpXSwgYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFjayhyLCBwKSB7XG4gIHZhciB0eCA9IGdmKCksIHR5ID0gZ2YoKSwgemkgPSBnZigpO1xuICBpbnYyNTUxOSh6aSwgcFsyXSk7XG4gIE0odHgsIHBbMF0sIHppKTtcbiAgTSh0eSwgcFsxXSwgemkpO1xuICBwYWNrMjU1MTkociwgdHkpO1xuICByWzMxXSBePSBwYXIyNTUxOSh0eCkgPDwgNztcbn1cblxuZnVuY3Rpb24gc2NhbGFybXVsdChwLCBxLCBzKSB7XG4gIHZhciBiLCBpO1xuICBzZXQyNTUxOShwWzBdLCBnZjApO1xuICBzZXQyNTUxOShwWzFdLCBnZjEpO1xuICBzZXQyNTUxOShwWzJdLCBnZjEpO1xuICBzZXQyNTUxOShwWzNdLCBnZjApO1xuICBmb3IgKGkgPSAyNTU7IGkgPj0gMDsgLS1pKSB7XG4gICAgYiA9IChzWyhpLzgpfDBdID4+IChpJjcpKSAmIDE7XG4gICAgY3N3YXAocCwgcSwgYik7XG4gICAgYWRkKHEsIHApO1xuICAgIGFkZChwLCBwKTtcbiAgICBjc3dhcChwLCBxLCBiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY2FsYXJiYXNlKHAsIHMpIHtcbiAgdmFyIHEgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG4gIHNldDI1NTE5KHFbMF0sIFgpO1xuICBzZXQyNTUxOShxWzFdLCBZKTtcbiAgc2V0MjU1MTkocVsyXSwgZ2YxKTtcbiAgTShxWzNdLCBYLCBZKTtcbiAgc2NhbGFybXVsdChwLCBxLCBzKTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3NpZ25fa2V5cGFpcihwaywgc2ssIHNlZWRlZCkge1xuICB2YXIgZCA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgdmFyIHAgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG4gIHZhciBpO1xuXG4gIGlmICghc2VlZGVkKSByYW5kb21ieXRlcyhzaywgMzIpO1xuICBjcnlwdG9faGFzaChkLCBzaywgMzIpO1xuICBkWzBdICY9IDI0ODtcbiAgZFszMV0gJj0gMTI3O1xuICBkWzMxXSB8PSA2NDtcblxuICBzY2FsYXJiYXNlKHAsIGQpO1xuICBwYWNrKHBrLCBwKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykgc2tbaSszMl0gPSBwa1tpXTtcbiAgcmV0dXJuIDA7XG59XG5cbnZhciBMID0gbmV3IEZsb2F0NjRBcnJheShbMHhlZCwgMHhkMywgMHhmNSwgMHg1YywgMHgxYSwgMHg2MywgMHgxMiwgMHg1OCwgMHhkNiwgMHg5YywgMHhmNywgMHhhMiwgMHhkZSwgMHhmOSwgMHhkZSwgMHgxNCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgxMF0pO1xuXG5mdW5jdGlvbiBtb2RMKHIsIHgpIHtcbiAgdmFyIGNhcnJ5LCBpLCBqLCBrO1xuICBmb3IgKGkgPSA2MzsgaSA+PSAzMjsgLS1pKSB7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaiA9IGkgLSAzMiwgayA9IGkgLSAxMjsgaiA8IGs7ICsraikge1xuICAgICAgeFtqXSArPSBjYXJyeSAtIDE2ICogeFtpXSAqIExbaiAtIChpIC0gMzIpXTtcbiAgICAgIGNhcnJ5ID0gKHhbal0gKyAxMjgpID4+IDg7XG4gICAgICB4W2pdIC09IGNhcnJ5ICogMjU2O1xuICAgIH1cbiAgICB4W2pdICs9IGNhcnJ5O1xuICAgIHhbaV0gPSAwO1xuICB9XG4gIGNhcnJ5ID0gMDtcbiAgZm9yIChqID0gMDsgaiA8IDMyOyBqKyspIHtcbiAgICB4W2pdICs9IGNhcnJ5IC0gKHhbMzFdID4+IDQpICogTFtqXTtcbiAgICBjYXJyeSA9IHhbal0gPj4gODtcbiAgICB4W2pdICY9IDI1NTtcbiAgfVxuICBmb3IgKGogPSAwOyBqIDwgMzI7IGorKykgeFtqXSAtPSBjYXJyeSAqIExbal07XG4gIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgeFtpKzFdICs9IHhbaV0gPj4gODtcbiAgICByW2ldID0geFtpXSAmIDI1NTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2Uocikge1xuICB2YXIgeCA9IG5ldyBGbG9hdDY0QXJyYXkoNjQpLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgNjQ7IGkrKykgeFtpXSA9IHJbaV07XG4gIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSByW2ldID0gMDtcbiAgbW9kTChyLCB4KTtcbn1cblxuLy8gTm90ZTogZGlmZmVyZW5jZSBmcm9tIEMgLSBzbWxlbiByZXR1cm5lZCwgbm90IHBhc3NlZCBhcyBhcmd1bWVudC5cbmZ1bmN0aW9uIGNyeXB0b19zaWduKHNtLCBtLCBuLCBzaykge1xuICB2YXIgZCA9IG5ldyBVaW50OEFycmF5KDY0KSwgaCA9IG5ldyBVaW50OEFycmF5KDY0KSwgciA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgdmFyIGksIGosIHggPSBuZXcgRmxvYXQ2NEFycmF5KDY0KTtcbiAgdmFyIHAgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG5cbiAgY3J5cHRvX2hhc2goZCwgc2ssIDMyKTtcbiAgZFswXSAmPSAyNDg7XG4gIGRbMzFdICY9IDEyNztcbiAgZFszMV0gfD0gNjQ7XG5cbiAgdmFyIHNtbGVuID0gbiArIDY0O1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBzbVs2NCArIGldID0gbVtpXTtcbiAgZm9yIChpID0gMDsgaSA8IDMyOyBpKyspIHNtWzMyICsgaV0gPSBkWzMyICsgaV07XG5cbiAgY3J5cHRvX2hhc2gociwgc20uc3ViYXJyYXkoMzIpLCBuKzMyKTtcbiAgcmVkdWNlKHIpO1xuICBzY2FsYXJiYXNlKHAsIHIpO1xuICBwYWNrKHNtLCBwKTtcblxuICBmb3IgKGkgPSAzMjsgaSA8IDY0OyBpKyspIHNtW2ldID0gc2tbaV07XG4gIGNyeXB0b19oYXNoKGgsIHNtLCBuICsgNjQpO1xuICByZWR1Y2UoaCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIHhbaV0gPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykgeFtpXSA9IHJbaV07XG4gIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgZm9yIChqID0gMDsgaiA8IDMyOyBqKyspIHtcbiAgICAgIHhbaStqXSArPSBoW2ldICogZFtqXTtcbiAgICB9XG4gIH1cblxuICBtb2RMKHNtLnN1YmFycmF5KDMyKSwgeCk7XG4gIHJldHVybiBzbWxlbjtcbn1cblxuZnVuY3Rpb24gdW5wYWNrbmVnKHIsIHApIHtcbiAgdmFyIHQgPSBnZigpLCBjaGsgPSBnZigpLCBudW0gPSBnZigpLFxuICAgICAgZGVuID0gZ2YoKSwgZGVuMiA9IGdmKCksIGRlbjQgPSBnZigpLFxuICAgICAgZGVuNiA9IGdmKCk7XG5cbiAgc2V0MjU1MTkoclsyXSwgZ2YxKTtcbiAgdW5wYWNrMjU1MTkoclsxXSwgcCk7XG4gIFMobnVtLCByWzFdKTtcbiAgTShkZW4sIG51bSwgRCk7XG4gIFoobnVtLCBudW0sIHJbMl0pO1xuICBBKGRlbiwgclsyXSwgZGVuKTtcblxuICBTKGRlbjIsIGRlbik7XG4gIFMoZGVuNCwgZGVuMik7XG4gIE0oZGVuNiwgZGVuNCwgZGVuMik7XG4gIE0odCwgZGVuNiwgbnVtKTtcbiAgTSh0LCB0LCBkZW4pO1xuXG4gIHBvdzI1MjModCwgdCk7XG4gIE0odCwgdCwgbnVtKTtcbiAgTSh0LCB0LCBkZW4pO1xuICBNKHQsIHQsIGRlbik7XG4gIE0oclswXSwgdCwgZGVuKTtcblxuICBTKGNoaywgclswXSk7XG4gIE0oY2hrLCBjaGssIGRlbik7XG4gIGlmIChuZXEyNTUxOShjaGssIG51bSkpIE0oclswXSwgclswXSwgSSk7XG5cbiAgUyhjaGssIHJbMF0pO1xuICBNKGNoaywgY2hrLCBkZW4pO1xuICBpZiAobmVxMjU1MTkoY2hrLCBudW0pKSByZXR1cm4gLTE7XG5cbiAgaWYgKHBhcjI1NTE5KHJbMF0pID09PSAocFszMV0+PjcpKSBaKHJbMF0sIGdmMCwgclswXSk7XG5cbiAgTShyWzNdLCByWzBdLCByWzFdKTtcbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19zaWduX29wZW4obSwgc20sIG4sIHBrKSB7XG4gIHZhciBpLCBtbGVuO1xuICB2YXIgdCA9IG5ldyBVaW50OEFycmF5KDMyKSwgaCA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgdmFyIHAgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV0sXG4gICAgICBxID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuXG4gIG1sZW4gPSAtMTtcbiAgaWYgKG4gPCA2NCkgcmV0dXJuIC0xO1xuXG4gIGlmICh1bnBhY2tuZWcocSwgcGspKSByZXR1cm4gLTE7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgbVtpXSA9IHNtW2ldO1xuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykgbVtpKzMyXSA9IHBrW2ldO1xuICBjcnlwdG9faGFzaChoLCBtLCBuKTtcbiAgcmVkdWNlKGgpO1xuICBzY2FsYXJtdWx0KHAsIHEsIGgpO1xuXG4gIHNjYWxhcmJhc2UocSwgc20uc3ViYXJyYXkoMzIpKTtcbiAgYWRkKHAsIHEpO1xuICBwYWNrKHQsIHApO1xuXG4gIG4gLT0gNjQ7XG4gIGlmIChjcnlwdG9fdmVyaWZ5XzMyKHNtLCAwLCB0LCAwKSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIG1baV0gPSAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIG1baV0gPSBzbVtpICsgNjRdO1xuICBtbGVuID0gbjtcbiAgcmV0dXJuIG1sZW47XG59XG5cbnZhciBjcnlwdG9fc2VjcmV0Ym94X0tFWUJZVEVTID0gMzIsXG4gICAgY3J5cHRvX3NlY3JldGJveF9OT05DRUJZVEVTID0gMjQsXG4gICAgY3J5cHRvX3NlY3JldGJveF9aRVJPQllURVMgPSAzMixcbiAgICBjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFUyA9IDE2LFxuICAgIGNyeXB0b19zY2FsYXJtdWx0X0JZVEVTID0gMzIsXG4gICAgY3J5cHRvX3NjYWxhcm11bHRfU0NBTEFSQllURVMgPSAzMixcbiAgICBjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTID0gMzIsXG4gICAgY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUyA9IDMyLFxuICAgIGNyeXB0b19ib3hfQkVGT1JFTk1CWVRFUyA9IDMyLFxuICAgIGNyeXB0b19ib3hfTk9OQ0VCWVRFUyA9IGNyeXB0b19zZWNyZXRib3hfTk9OQ0VCWVRFUyxcbiAgICBjcnlwdG9fYm94X1pFUk9CWVRFUyA9IGNyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTLFxuICAgIGNyeXB0b19ib3hfQk9YWkVST0JZVEVTID0gY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVMsXG4gICAgY3J5cHRvX3NpZ25fQllURVMgPSA2NCxcbiAgICBjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUyA9IDMyLFxuICAgIGNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTID0gNjQsXG4gICAgY3J5cHRvX3NpZ25fU0VFREJZVEVTID0gMzIsXG4gICAgY3J5cHRvX2hhc2hfQllURVMgPSA2NDtcblxubmFjbC5sb3dsZXZlbCA9IHtcbiAgY3J5cHRvX2NvcmVfaHNhbHNhMjA6IGNyeXB0b19jb3JlX2hzYWxzYTIwLFxuICBjcnlwdG9fc3RyZWFtX3hvcjogY3J5cHRvX3N0cmVhbV94b3IsXG4gIGNyeXB0b19zdHJlYW06IGNyeXB0b19zdHJlYW0sXG4gIGNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3I6IGNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3IsXG4gIGNyeXB0b19zdHJlYW1fc2Fsc2EyMDogY3J5cHRvX3N0cmVhbV9zYWxzYTIwLFxuICBjcnlwdG9fb25ldGltZWF1dGg6IGNyeXB0b19vbmV0aW1lYXV0aCxcbiAgY3J5cHRvX29uZXRpbWVhdXRoX3ZlcmlmeTogY3J5cHRvX29uZXRpbWVhdXRoX3ZlcmlmeSxcbiAgY3J5cHRvX3ZlcmlmeV8xNjogY3J5cHRvX3ZlcmlmeV8xNixcbiAgY3J5cHRvX3ZlcmlmeV8zMjogY3J5cHRvX3ZlcmlmeV8zMixcbiAgY3J5cHRvX3NlY3JldGJveDogY3J5cHRvX3NlY3JldGJveCxcbiAgY3J5cHRvX3NlY3JldGJveF9vcGVuOiBjcnlwdG9fc2VjcmV0Ym94X29wZW4sXG4gIGNyeXB0b19zY2FsYXJtdWx0OiBjcnlwdG9fc2NhbGFybXVsdCxcbiAgY3J5cHRvX3NjYWxhcm11bHRfYmFzZTogY3J5cHRvX3NjYWxhcm11bHRfYmFzZSxcbiAgY3J5cHRvX2JveF9iZWZvcmVubTogY3J5cHRvX2JveF9iZWZvcmVubSxcbiAgY3J5cHRvX2JveF9hZnRlcm5tOiBjcnlwdG9fYm94X2FmdGVybm0sXG4gIGNyeXB0b19ib3g6IGNyeXB0b19ib3gsXG4gIGNyeXB0b19ib3hfb3BlbjogY3J5cHRvX2JveF9vcGVuLFxuICBjcnlwdG9fYm94X2tleXBhaXI6IGNyeXB0b19ib3hfa2V5cGFpcixcbiAgY3J5cHRvX2hhc2g6IGNyeXB0b19oYXNoLFxuICBjcnlwdG9fc2lnbjogY3J5cHRvX3NpZ24sXG4gIGNyeXB0b19zaWduX2tleXBhaXI6IGNyeXB0b19zaWduX2tleXBhaXIsXG4gIGNyeXB0b19zaWduX29wZW46IGNyeXB0b19zaWduX29wZW4sXG5cbiAgY3J5cHRvX3NlY3JldGJveF9LRVlCWVRFUzogY3J5cHRvX3NlY3JldGJveF9LRVlCWVRFUyxcbiAgY3J5cHRvX3NlY3JldGJveF9OT05DRUJZVEVTOiBjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVMsXG4gIGNyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTOiBjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUyxcbiAgY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVM6IGNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTLFxuICBjcnlwdG9fc2NhbGFybXVsdF9CWVRFUzogY3J5cHRvX3NjYWxhcm11bHRfQllURVMsXG4gIGNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTOiBjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUyxcbiAgY3J5cHRvX2JveF9QVUJMSUNLRVlCWVRFUzogY3J5cHRvX2JveF9QVUJMSUNLRVlCWVRFUyxcbiAgY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUzogY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUyxcbiAgY3J5cHRvX2JveF9CRUZPUkVOTUJZVEVTOiBjcnlwdG9fYm94X0JFRk9SRU5NQllURVMsXG4gIGNyeXB0b19ib3hfTk9OQ0VCWVRFUzogY3J5cHRvX2JveF9OT05DRUJZVEVTLFxuICBjcnlwdG9fYm94X1pFUk9CWVRFUzogY3J5cHRvX2JveF9aRVJPQllURVMsXG4gIGNyeXB0b19ib3hfQk9YWkVST0JZVEVTOiBjcnlwdG9fYm94X0JPWFpFUk9CWVRFUyxcbiAgY3J5cHRvX3NpZ25fQllURVM6IGNyeXB0b19zaWduX0JZVEVTLFxuICBjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUzogY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMsXG4gIGNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTOiBjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUyxcbiAgY3J5cHRvX3NpZ25fU0VFREJZVEVTOiBjcnlwdG9fc2lnbl9TRUVEQllURVMsXG4gIGNyeXB0b19oYXNoX0JZVEVTOiBjcnlwdG9faGFzaF9CWVRFU1xufTtcblxuLyogSGlnaC1sZXZlbCBBUEkgKi9cblxuZnVuY3Rpb24gY2hlY2tMZW5ndGhzKGssIG4pIHtcbiAgaWYgKGsubGVuZ3RoICE9PSBjcnlwdG9fc2VjcmV0Ym94X0tFWUJZVEVTKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBrZXkgc2l6ZScpO1xuICBpZiAobi5sZW5ndGggIT09IGNyeXB0b19zZWNyZXRib3hfTk9OQ0VCWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQgbm9uY2Ugc2l6ZScpO1xufVxuXG5mdW5jdGlvbiBjaGVja0JveExlbmd0aHMocGssIHNrKSB7XG4gIGlmIChway5sZW5ndGggIT09IGNyeXB0b19ib3hfUFVCTElDS0VZQllURVMpIHRocm93IG5ldyBFcnJvcignYmFkIHB1YmxpYyBrZXkgc2l6ZScpO1xuICBpZiAoc2subGVuZ3RoICE9PSBjcnlwdG9fYm94X1NFQ1JFVEtFWUJZVEVTKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWNyZXQga2V5IHNpemUnKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tBcnJheVR5cGVzKCkge1xuICB2YXIgdCwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICBpZiAoKHQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzW2ldKSkgIT09ICdbb2JqZWN0IFVpbnQ4QXJyYXldJylcbiAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmV4cGVjdGVkIHR5cGUgJyArIHQgKyAnLCB1c2UgVWludDhBcnJheScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoYXJyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnJbaV0gPSAwO1xufVxuXG4vLyBUT0RPOiBDb21wbGV0ZWx5IHJlbW92ZSB0aGlzIGluIHYwLjE1LlxuaWYgKCFuYWNsLnV0aWwpIHtcbiAgbmFjbC51dGlsID0ge307XG4gIG5hY2wudXRpbC5kZWNvZGVVVEY4ID0gbmFjbC51dGlsLmVuY29kZVVURjggPSBuYWNsLnV0aWwuZW5jb2RlQmFzZTY0ID0gbmFjbC51dGlsLmRlY29kZUJhc2U2NCA9IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbmFjbC51dGlsIG1vdmVkIGludG8gc2VwYXJhdGUgcGFja2FnZTogaHR0cHM6Ly9naXRodWIuY29tL2RjaGVzdC90d2VldG5hY2wtdXRpbC1qcycpO1xuICB9O1xufVxuXG5uYWNsLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24obikge1xuICB2YXIgYiA9IG5ldyBVaW50OEFycmF5KG4pO1xuICByYW5kb21ieXRlcyhiLCBuKTtcbiAgcmV0dXJuIGI7XG59O1xuXG5uYWNsLnNlY3JldGJveCA9IGZ1bmN0aW9uKG1zZywgbm9uY2UsIGtleSkge1xuICBjaGVja0FycmF5VHlwZXMobXNnLCBub25jZSwga2V5KTtcbiAgY2hlY2tMZW5ndGhzKGtleSwgbm9uY2UpO1xuICB2YXIgbSA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTICsgbXNnLmxlbmd0aCk7XG4gIHZhciBjID0gbmV3IFVpbnQ4QXJyYXkobS5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykgbVtpK2NyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTXSA9IG1zZ1tpXTtcbiAgY3J5cHRvX3NlY3JldGJveChjLCBtLCBtLmxlbmd0aCwgbm9uY2UsIGtleSk7XG4gIHJldHVybiBjLnN1YmFycmF5KGNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTKTtcbn07XG5cbm5hY2wuc2VjcmV0Ym94Lm9wZW4gPSBmdW5jdGlvbihib3gsIG5vbmNlLCBrZXkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKGJveCwgbm9uY2UsIGtleSk7XG4gIGNoZWNrTGVuZ3RocyhrZXksIG5vbmNlKTtcbiAgdmFyIGMgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFUyArIGJveC5sZW5ndGgpO1xuICB2YXIgbSA9IG5ldyBVaW50OEFycmF5KGMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3gubGVuZ3RoOyBpKyspIGNbaStjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFU10gPSBib3hbaV07XG4gIGlmIChjLmxlbmd0aCA8IDMyKSByZXR1cm4gZmFsc2U7XG4gIGlmIChjcnlwdG9fc2VjcmV0Ym94X29wZW4obSwgYywgYy5sZW5ndGgsIG5vbmNlLCBrZXkpICE9PSAwKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBtLnN1YmFycmF5KGNyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTKTtcbn07XG5cbm5hY2wuc2VjcmV0Ym94LmtleUxlbmd0aCA9IGNyeXB0b19zZWNyZXRib3hfS0VZQllURVM7XG5uYWNsLnNlY3JldGJveC5ub25jZUxlbmd0aCA9IGNyeXB0b19zZWNyZXRib3hfTk9OQ0VCWVRFUztcbm5hY2wuc2VjcmV0Ym94Lm92ZXJoZWFkTGVuZ3RoID0gY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVM7XG5cbm5hY2wuc2NhbGFyTXVsdCA9IGZ1bmN0aW9uKG4sIHApIHtcbiAgY2hlY2tBcnJheVR5cGVzKG4sIHApO1xuICBpZiAobi5sZW5ndGggIT09IGNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBuIHNpemUnKTtcbiAgaWYgKHAubGVuZ3RoICE9PSBjcnlwdG9fc2NhbGFybXVsdF9CWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQgcCBzaXplJyk7XG4gIHZhciBxID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NjYWxhcm11bHRfQllURVMpO1xuICBjcnlwdG9fc2NhbGFybXVsdChxLCBuLCBwKTtcbiAgcmV0dXJuIHE7XG59O1xuXG5uYWNsLnNjYWxhck11bHQuYmFzZSA9IGZ1bmN0aW9uKG4pIHtcbiAgY2hlY2tBcnJheVR5cGVzKG4pO1xuICBpZiAobi5sZW5ndGggIT09IGNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBuIHNpemUnKTtcbiAgdmFyIHEgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2NhbGFybXVsdF9CWVRFUyk7XG4gIGNyeXB0b19zY2FsYXJtdWx0X2Jhc2UocSwgbik7XG4gIHJldHVybiBxO1xufTtcblxubmFjbC5zY2FsYXJNdWx0LnNjYWxhckxlbmd0aCA9IGNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTO1xubmFjbC5zY2FsYXJNdWx0Lmdyb3VwRWxlbWVudExlbmd0aCA9IGNyeXB0b19zY2FsYXJtdWx0X0JZVEVTO1xuXG5uYWNsLmJveCA9IGZ1bmN0aW9uKG1zZywgbm9uY2UsIHB1YmxpY0tleSwgc2VjcmV0S2V5KSB7XG4gIHZhciBrID0gbmFjbC5ib3guYmVmb3JlKHB1YmxpY0tleSwgc2VjcmV0S2V5KTtcbiAgcmV0dXJuIG5hY2wuc2VjcmV0Ym94KG1zZywgbm9uY2UsIGspO1xufTtcblxubmFjbC5ib3guYmVmb3JlID0gZnVuY3Rpb24ocHVibGljS2V5LCBzZWNyZXRLZXkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKHB1YmxpY0tleSwgc2VjcmV0S2V5KTtcbiAgY2hlY2tCb3hMZW5ndGhzKHB1YmxpY0tleSwgc2VjcmV0S2V5KTtcbiAgdmFyIGsgPSBuZXcgVWludDhBcnJheShjcnlwdG9fYm94X0JFRk9SRU5NQllURVMpO1xuICBjcnlwdG9fYm94X2JlZm9yZW5tKGssIHB1YmxpY0tleSwgc2VjcmV0S2V5KTtcbiAgcmV0dXJuIGs7XG59O1xuXG5uYWNsLmJveC5hZnRlciA9IG5hY2wuc2VjcmV0Ym94O1xuXG5uYWNsLmJveC5vcGVuID0gZnVuY3Rpb24obXNnLCBub25jZSwgcHVibGljS2V5LCBzZWNyZXRLZXkpIHtcbiAgdmFyIGsgPSBuYWNsLmJveC5iZWZvcmUocHVibGljS2V5LCBzZWNyZXRLZXkpO1xuICByZXR1cm4gbmFjbC5zZWNyZXRib3gub3Blbihtc2csIG5vbmNlLCBrKTtcbn07XG5cbm5hY2wuYm94Lm9wZW4uYWZ0ZXIgPSBuYWNsLnNlY3JldGJveC5vcGVuO1xuXG5uYWNsLmJveC5rZXlQYWlyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwayA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19ib3hfUFVCTElDS0VZQllURVMpO1xuICB2YXIgc2sgPSBuZXcgVWludDhBcnJheShjcnlwdG9fYm94X1NFQ1JFVEtFWUJZVEVTKTtcbiAgY3J5cHRvX2JveF9rZXlwYWlyKHBrLCBzayk7XG4gIHJldHVybiB7cHVibGljS2V5OiBwaywgc2VjcmV0S2V5OiBza307XG59O1xuXG5uYWNsLmJveC5rZXlQYWlyLmZyb21TZWNyZXRLZXkgPSBmdW5jdGlvbihzZWNyZXRLZXkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKHNlY3JldEtleSk7XG4gIGlmIChzZWNyZXRLZXkubGVuZ3RoICE9PSBjcnlwdG9fYm94X1NFQ1JFVEtFWUJZVEVTKVxuICAgIHRocm93IG5ldyBFcnJvcignYmFkIHNlY3JldCBrZXkgc2l6ZScpO1xuICB2YXIgcGsgPSBuZXcgVWludDhBcnJheShjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTKTtcbiAgY3J5cHRvX3NjYWxhcm11bHRfYmFzZShwaywgc2VjcmV0S2V5KTtcbiAgcmV0dXJuIHtwdWJsaWNLZXk6IHBrLCBzZWNyZXRLZXk6IG5ldyBVaW50OEFycmF5KHNlY3JldEtleSl9O1xufTtcblxubmFjbC5ib3gucHVibGljS2V5TGVuZ3RoID0gY3J5cHRvX2JveF9QVUJMSUNLRVlCWVRFUztcbm5hY2wuYm94LnNlY3JldEtleUxlbmd0aCA9IGNyeXB0b19ib3hfU0VDUkVUS0VZQllURVM7XG5uYWNsLmJveC5zaGFyZWRLZXlMZW5ndGggPSBjcnlwdG9fYm94X0JFRk9SRU5NQllURVM7XG5uYWNsLmJveC5ub25jZUxlbmd0aCA9IGNyeXB0b19ib3hfTk9OQ0VCWVRFUztcbm5hY2wuYm94Lm92ZXJoZWFkTGVuZ3RoID0gbmFjbC5zZWNyZXRib3gub3ZlcmhlYWRMZW5ndGg7XG5cbm5hY2wuc2lnbiA9IGZ1bmN0aW9uKG1zZywgc2VjcmV0S2V5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhtc2csIHNlY3JldEtleSk7XG4gIGlmIChzZWNyZXRLZXkubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWNyZXQga2V5IHNpemUnKTtcbiAgdmFyIHNpZ25lZE1zZyA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zaWduX0JZVEVTK21zZy5sZW5ndGgpO1xuICBjcnlwdG9fc2lnbihzaWduZWRNc2csIG1zZywgbXNnLmxlbmd0aCwgc2VjcmV0S2V5KTtcbiAgcmV0dXJuIHNpZ25lZE1zZztcbn07XG5cbm5hY2wuc2lnbi5vcGVuID0gZnVuY3Rpb24oc2lnbmVkTXNnLCBwdWJsaWNLZXkpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCduYWNsLnNpZ24ub3BlbiBhY2NlcHRzIDIgYXJndW1lbnRzOyBkaWQgeW91IG1lYW4gdG8gdXNlIG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnk/Jyk7XG4gIGNoZWNrQXJyYXlUeXBlcyhzaWduZWRNc2csIHB1YmxpY0tleSk7XG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwdWJsaWMga2V5IHNpemUnKTtcbiAgdmFyIHRtcCA9IG5ldyBVaW50OEFycmF5KHNpZ25lZE1zZy5sZW5ndGgpO1xuICB2YXIgbWxlbiA9IGNyeXB0b19zaWduX29wZW4odG1wLCBzaWduZWRNc2csIHNpZ25lZE1zZy5sZW5ndGgsIHB1YmxpY0tleSk7XG4gIGlmIChtbGVuIDwgMCkgcmV0dXJuIG51bGw7XG4gIHZhciBtID0gbmV3IFVpbnQ4QXJyYXkobWxlbik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykgbVtpXSA9IHRtcFtpXTtcbiAgcmV0dXJuIG07XG59O1xuXG5uYWNsLnNpZ24uZGV0YWNoZWQgPSBmdW5jdGlvbihtc2csIHNlY3JldEtleSkge1xuICB2YXIgc2lnbmVkTXNnID0gbmFjbC5zaWduKG1zZywgc2VjcmV0S2V5KTtcbiAgdmFyIHNpZyA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zaWduX0JZVEVTKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWcubGVuZ3RoOyBpKyspIHNpZ1tpXSA9IHNpZ25lZE1zZ1tpXTtcbiAgcmV0dXJuIHNpZztcbn07XG5cbm5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnkgPSBmdW5jdGlvbihtc2csIHNpZywgcHVibGljS2V5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhtc2csIHNpZywgcHVibGljS2V5KTtcbiAgaWYgKHNpZy5sZW5ndGggIT09IGNyeXB0b19zaWduX0JZVEVTKVxuICAgIHRocm93IG5ldyBFcnJvcignYmFkIHNpZ25hdHVyZSBzaXplJyk7XG4gIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwdWJsaWMga2V5IHNpemUnKTtcbiAgdmFyIHNtID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fQllURVMgKyBtc2cubGVuZ3RoKTtcbiAgdmFyIG0gPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9CWVRFUyArIG1zZy5sZW5ndGgpO1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IGNyeXB0b19zaWduX0JZVEVTOyBpKyspIHNtW2ldID0gc2lnW2ldO1xuICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSBzbVtpK2NyeXB0b19zaWduX0JZVEVTXSA9IG1zZ1tpXTtcbiAgcmV0dXJuIChjcnlwdG9fc2lnbl9vcGVuKG0sIHNtLCBzbS5sZW5ndGgsIHB1YmxpY0tleSkgPj0gMCk7XG59O1xuXG5uYWNsLnNpZ24ua2V5UGFpciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGsgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUyk7XG4gIHZhciBzayA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTKTtcbiAgY3J5cHRvX3NpZ25fa2V5cGFpcihwaywgc2spO1xuICByZXR1cm4ge3B1YmxpY0tleTogcGssIHNlY3JldEtleTogc2t9O1xufTtcblxubmFjbC5zaWduLmtleVBhaXIuZnJvbVNlY3JldEtleSA9IGZ1bmN0aW9uKHNlY3JldEtleSkge1xuICBjaGVja0FycmF5VHlwZXMoc2VjcmV0S2V5KTtcbiAgaWYgKHNlY3JldEtleS5sZW5ndGggIT09IGNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTKVxuICAgIHRocm93IG5ldyBFcnJvcignYmFkIHNlY3JldCBrZXkgc2l6ZScpO1xuICB2YXIgcGsgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9QVUJMSUNLRVlCWVRFUyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGsubGVuZ3RoOyBpKyspIHBrW2ldID0gc2VjcmV0S2V5WzMyK2ldO1xuICByZXR1cm4ge3B1YmxpY0tleTogcGssIHNlY3JldEtleTogbmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5KX07XG59O1xuXG5uYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VlZCA9IGZ1bmN0aW9uKHNlZWQpIHtcbiAgY2hlY2tBcnJheVR5cGVzKHNlZWQpO1xuICBpZiAoc2VlZC5sZW5ndGggIT09IGNyeXB0b19zaWduX1NFRURCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWVkIHNpemUnKTtcbiAgdmFyIHBrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpO1xuICB2YXIgc2sgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgc2tbaV0gPSBzZWVkW2ldO1xuICBjcnlwdG9fc2lnbl9rZXlwYWlyKHBrLCBzaywgdHJ1ZSk7XG4gIHJldHVybiB7cHVibGljS2V5OiBwaywgc2VjcmV0S2V5OiBza307XG59O1xuXG5uYWNsLnNpZ24ucHVibGljS2V5TGVuZ3RoID0gY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVM7XG5uYWNsLnNpZ24uc2VjcmV0S2V5TGVuZ3RoID0gY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVM7XG5uYWNsLnNpZ24uc2VlZExlbmd0aCA9IGNyeXB0b19zaWduX1NFRURCWVRFUztcbm5hY2wuc2lnbi5zaWduYXR1cmVMZW5ndGggPSBjcnlwdG9fc2lnbl9CWVRFUztcblxubmFjbC5oYXNoID0gZnVuY3Rpb24obXNnKSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhtc2cpO1xuICB2YXIgaCA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19oYXNoX0JZVEVTKTtcbiAgY3J5cHRvX2hhc2goaCwgbXNnLCBtc2cubGVuZ3RoKTtcbiAgcmV0dXJuIGg7XG59O1xuXG5uYWNsLmhhc2guaGFzaExlbmd0aCA9IGNyeXB0b19oYXNoX0JZVEVTO1xuXG5uYWNsLnZlcmlmeSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKHgsIHkpO1xuICAvLyBaZXJvIGxlbmd0aCBhcmd1bWVudHMgYXJlIGNvbnNpZGVyZWQgbm90IGVxdWFsLlxuICBpZiAoeC5sZW5ndGggPT09IDAgfHwgeS5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcbiAgaWYgKHgubGVuZ3RoICE9PSB5Lmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKHZuKHgsIDAsIHksIDAsIHgubGVuZ3RoKSA9PT0gMCkgPyB0cnVlIDogZmFsc2U7XG59O1xuXG5uYWNsLnNldFBSTkcgPSBmdW5jdGlvbihmbikge1xuICByYW5kb21ieXRlcyA9IGZuO1xufTtcblxuKGZ1bmN0aW9uKCkge1xuICAvLyBJbml0aWFsaXplIFBSTkcgaWYgZW52aXJvbm1lbnQgcHJvdmlkZXMgQ1NQUk5HLlxuICAvLyBJZiBub3QsIG1ldGhvZHMgY2FsbGluZyByYW5kb21ieXRlcyB3aWxsIHRocm93LlxuICB2YXIgY3J5cHRvID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gKHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG8pIDogbnVsbDtcbiAgaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gQnJvd3NlcnMuXG4gICAgdmFyIFFVT1RBID0gNjU1MzY7XG4gICAgbmFjbC5zZXRQUk5HKGZ1bmN0aW9uKHgsIG4pIHtcbiAgICAgIHZhciBpLCB2ID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSArPSBRVU9UQSkge1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHYuc3ViYXJyYXkoaSwgaSArIE1hdGgubWluKG4gLSBpLCBRVU9UQSkpKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHhbaV0gPSB2W2ldO1xuICAgICAgY2xlYW51cCh2KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBOb2RlLmpzLlxuICAgIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAgIGlmIChjcnlwdG8gJiYgY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XG4gICAgICBuYWNsLnNldFBSTkcoZnVuY3Rpb24oeCwgbikge1xuICAgICAgICB2YXIgaSwgdiA9IGNyeXB0by5yYW5kb21CeXRlcyhuKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgeFtpXSA9IHZbaV07XG4gICAgICAgIGNsZWFudXAodik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7XG5cbn0pKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzID8gbW9kdWxlLmV4cG9ydHMgOiAoc2VsZi5uYWNsID0gc2VsZi5uYWNsIHx8IHt9KSk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIDIwMDUgIFRvbSBXdVxuLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNlZSBcIkxJQ0VOU0VcIiBmb3IgZGV0YWlscy5cblxuLy8gQmFzaWMgSmF2YVNjcmlwdCBCTiBsaWJyYXJ5IC0gc3Vic2V0IHVzZWZ1bCBmb3IgUlNBIGVuY3J5cHRpb24uXG5cbi8vIEJpdHMgcGVyIGRpZ2l0XG52YXIgZGJpdHM7XG5cbi8vIEphdmFTY3JpcHQgZW5naW5lIGFuYWx5c2lzXG52YXIgY2FuYXJ5ID0gMHhkZWFkYmVlZmNhZmU7XG52YXIgal9sbSA9ICgoY2FuYXJ5JjB4ZmZmZmZmKT09MHhlZmNhZmUpO1xuXG4vLyAocHVibGljKSBDb25zdHJ1Y3RvclxuZnVuY3Rpb24gQmlnSW50ZWdlcihhLGIsYykge1xuICBpZihhICE9IG51bGwpXG4gICAgaWYoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsYixjKTtcbiAgICBlbHNlIGlmKGIgPT0gbnVsbCAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBhKSB0aGlzLmZyb21TdHJpbmcoYSwyNTYpO1xuICAgIGVsc2UgdGhpcy5mcm9tU3RyaW5nKGEsYik7XG59XG5cbi8vIHJldHVybiBuZXcsIHVuc2V0IEJpZ0ludGVnZXJcbmZ1bmN0aW9uIG5iaSgpIHsgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpOyB9XG5cbi8vIGFtOiBDb21wdXRlIHdfaiArPSAoeCp0aGlzX2kpLCBwcm9wYWdhdGUgY2Fycmllcyxcbi8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cbi8vIGMgPCAzKmR2YWx1ZSwgeCA8IDIqZHZhbHVlLCB0aGlzX2kgPCBkdmFsdWVcbi8vIFdlIG5lZWQgdG8gc2VsZWN0IHRoZSBmYXN0ZXN0IG9uZSB0aGF0IHdvcmtzIGluIHRoaXMgZW52aXJvbm1lbnQuXG5cbi8vIFNldCBtYXggZGlnaXQgYml0cyB0byAyOCBzaW5jZSBzb21lXG4vLyBicm93c2VycyBzbG93IGRvd24gd2hlbiBkZWFsaW5nIHdpdGggMzItYml0IG51bWJlcnMuXG5mdW5jdGlvbiBhbTMoaSx4LHcsaixjLG4pIHtcbiAgdmFyIHhsID0geCYweDNmZmYsIHhoID0geD4+MTQ7XG4gIHdoaWxlKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldJjB4M2ZmZjtcbiAgICB2YXIgaCA9IHRoaXNbaSsrXT4+MTQ7XG4gICAgdmFyIG0gPSB4aCpsK2gqeGw7XG4gICAgbCA9IHhsKmwrKChtJjB4M2ZmZik8PDE0KSt3W2pdK2M7XG4gICAgYyA9IChsPj4yOCkrKG0+PjE0KSt4aCpoO1xuICAgIHdbaisrXSA9IGwmMHhmZmZmZmZmO1xuICB9XG4gIHJldHVybiBjO1xufVxuQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTM7XG5kYml0cyA9IDI4O1xuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQiA9IGRiaXRzO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRE0gPSAoKDE8PGRiaXRzKS0xKTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLkRWID0gKDE8PGRiaXRzKTtcblxudmFyIEJJX0ZQID0gNTI7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5GViA9IE1hdGgucG93KDIsQklfRlApO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjEgPSBCSV9GUC1kYml0cztcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMipkYml0cy1CSV9GUDtcblxuLy8gRGlnaXQgY29udmVyc2lvbnNcbnZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG52YXIgQklfUkMgPSBuZXcgQXJyYXkoKTtcbnZhciBycix2djtcbnJyID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbmZvcih2diA9IDA7IHZ2IDw9IDk7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG5yciA9IFwiYVwiLmNoYXJDb2RlQXQoMCk7XG5mb3IodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcbnJyID0gXCJBXCIuY2hhckNvZGVBdCgwKTtcbmZvcih2diA9IDEwOyB2diA8IDM2OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xuXG5mdW5jdGlvbiBpbnQyY2hhcihuKSB7IHJldHVybiBCSV9STS5jaGFyQXQobik7IH1cbmZ1bmN0aW9uIGludEF0KHMsaSkge1xuICB2YXIgYyA9IEJJX1JDW3MuY2hhckNvZGVBdChpKV07XG4gIHJldHVybiAoYz09bnVsbCk/LTE6Yztcbn1cblxuLy8gKHByb3RlY3RlZCkgY29weSB0aGlzIHRvIHJcbmZ1bmN0aW9uIGJucENvcHlUbyhyKSB7XG4gIGZvcih2YXIgaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgcltpXSA9IHRoaXNbaV07XG4gIHIudCA9IHRoaXMudDtcbiAgci5zID0gdGhpcy5zO1xufVxuXG4vLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBpbnRlZ2VyIHZhbHVlIHgsIC1EViA8PSB4IDwgRFZcbmZ1bmN0aW9uIGJucEZyb21JbnQoeCkge1xuICB0aGlzLnQgPSAxO1xuICB0aGlzLnMgPSAoeDwwKT8tMTowO1xuICBpZih4ID4gMCkgdGhpc1swXSA9IHg7XG4gIGVsc2UgaWYoeCA8IC0xKSB0aGlzWzBdID0geCt0aGlzLkRWO1xuICBlbHNlIHRoaXMudCA9IDA7XG59XG5cbi8vIHJldHVybiBiaWdpbnQgaW5pdGlhbGl6ZWQgdG8gdmFsdWVcbmZ1bmN0aW9uIG5idihpKSB7IHZhciByID0gbmJpKCk7IHIuZnJvbUludChpKTsgcmV0dXJuIHI7IH1cblxuLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gc3RyaW5nIGFuZCByYWRpeFxuZnVuY3Rpb24gYm5wRnJvbVN0cmluZyhzLGIpIHtcbiAgdmFyIGs7XG4gIGlmKGIgPT0gMTYpIGsgPSA0O1xuICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7XG4gIGVsc2UgaWYoYiA9PSAyNTYpIGsgPSA4OyAvLyBieXRlIGFycmF5XG4gIGVsc2UgaWYoYiA9PSAyKSBrID0gMTtcbiAgZWxzZSBpZihiID09IDMyKSBrID0gNTtcbiAgZWxzZSBpZihiID09IDQpIGsgPSAyO1xuICBlbHNlIHsgdGhpcy5mcm9tUmFkaXgocyxiKTsgcmV0dXJuOyB9XG4gIHRoaXMudCA9IDA7XG4gIHRoaXMucyA9IDA7XG4gIHZhciBpID0gcy5sZW5ndGgsIG1pID0gZmFsc2UsIHNoID0gMDtcbiAgd2hpbGUoLS1pID49IDApIHtcbiAgICB2YXIgeCA9IChrPT04KT9zW2ldJjB4ZmY6aW50QXQocyxpKTtcbiAgICBpZih4IDwgMCkge1xuICAgICAgaWYocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBtaSA9IGZhbHNlO1xuICAgIGlmKHNoID09IDApXG4gICAgICB0aGlzW3RoaXMudCsrXSA9IHg7XG4gICAgZWxzZSBpZihzaCtrID4gdGhpcy5EQikge1xuICAgICAgdGhpc1t0aGlzLnQtMV0gfD0gKHgmKCgxPDwodGhpcy5EQi1zaCkpLTEpKTw8c2g7XG4gICAgICB0aGlzW3RoaXMudCsrXSA9ICh4Pj4odGhpcy5EQi1zaCkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICB0aGlzW3RoaXMudC0xXSB8PSB4PDxzaDtcbiAgICBzaCArPSBrO1xuICAgIGlmKHNoID49IHRoaXMuREIpIHNoIC09IHRoaXMuREI7XG4gIH1cbiAgaWYoayA9PSA4ICYmIChzWzBdJjB4ODApICE9IDApIHtcbiAgICB0aGlzLnMgPSAtMTtcbiAgICBpZihzaCA+IDApIHRoaXNbdGhpcy50LTFdIHw9ICgoMTw8KHRoaXMuREItc2gpKS0xKTw8c2g7XG4gIH1cbiAgdGhpcy5jbGFtcCgpO1xuICBpZihtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyk7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNsYW1wIG9mZiBleGNlc3MgaGlnaCB3b3Jkc1xuZnVuY3Rpb24gYm5wQ2xhbXAoKSB7XG4gIHZhciBjID0gdGhpcy5zJnRoaXMuRE07XG4gIHdoaWxlKHRoaXMudCA+IDAgJiYgdGhpc1t0aGlzLnQtMV0gPT0gYykgLS10aGlzLnQ7XG59XG5cbi8vIChwdWJsaWMpIHJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gaW4gZ2l2ZW4gcmFkaXhcbmZ1bmN0aW9uIGJuVG9TdHJpbmcoYikge1xuICBpZih0aGlzLnMgPCAwKSByZXR1cm4gXCItXCIrdGhpcy5uZWdhdGUoKS50b1N0cmluZyhiKTtcbiAgdmFyIGs7XG4gIGlmKGIgPT0gMTYpIGsgPSA0O1xuICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7XG4gIGVsc2UgaWYoYiA9PSAyKSBrID0gMTtcbiAgZWxzZSBpZihiID09IDMyKSBrID0gNTtcbiAgZWxzZSBpZihiID09IDQpIGsgPSAyO1xuICBlbHNlIHJldHVybiB0aGlzLnRvUmFkaXgoYik7XG4gIHZhciBrbSA9ICgxPDxrKS0xLCBkLCBtID0gZmFsc2UsIHIgPSBcIlwiLCBpID0gdGhpcy50O1xuICB2YXIgcCA9IHRoaXMuREItKGkqdGhpcy5EQiklaztcbiAgaWYoaS0tID4gMCkge1xuICAgIGlmKHAgPCB0aGlzLkRCICYmIChkID0gdGhpc1tpXT4+cCkgPiAwKSB7IG0gPSB0cnVlOyByID0gaW50MmNoYXIoZCk7IH1cbiAgICB3aGlsZShpID49IDApIHtcbiAgICAgIGlmKHAgPCBrKSB7XG4gICAgICAgIGQgPSAodGhpc1tpXSYoKDE8PHApLTEpKTw8KGstcCk7XG4gICAgICAgIGQgfD0gdGhpc1stLWldPj4ocCs9dGhpcy5EQi1rKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkID0gKHRoaXNbaV0+PihwLT1rKSkma207XG4gICAgICAgIGlmKHAgPD0gMCkgeyBwICs9IHRoaXMuREI7IC0taTsgfVxuICAgICAgfVxuICAgICAgaWYoZCA+IDApIG0gPSB0cnVlO1xuICAgICAgaWYobSkgciArPSBpbnQyY2hhcihkKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG0/cjpcIjBcIjtcbn1cblxuLy8gKHB1YmxpYykgLXRoaXNcbmZ1bmN0aW9uIGJuTmVnYXRlKCkgeyB2YXIgciA9IG5iaSgpOyBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgfHRoaXN8XG5mdW5jdGlvbiBibkFicygpIHsgcmV0dXJuICh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzOyB9XG5cbi8vIChwdWJsaWMpIHJldHVybiArIGlmIHRoaXMgPiBhLCAtIGlmIHRoaXMgPCBhLCAwIGlmIGVxdWFsXG5mdW5jdGlvbiBibkNvbXBhcmVUbyhhKSB7XG4gIHZhciByID0gdGhpcy5zLWEucztcbiAgaWYociAhPSAwKSByZXR1cm4gcjtcbiAgdmFyIGkgPSB0aGlzLnQ7XG4gIHIgPSBpLWEudDtcbiAgaWYociAhPSAwKSByZXR1cm4gKHRoaXMuczwwKT8tcjpyO1xuICB3aGlsZSgtLWkgPj0gMCkgaWYoKHI9dGhpc1tpXS1hW2ldKSAhPSAwKSByZXR1cm4gcjtcbiAgcmV0dXJuIDA7XG59XG5cbi8vIHJldHVybnMgYml0IGxlbmd0aCBvZiB0aGUgaW50ZWdlciB4XG5mdW5jdGlvbiBuYml0cyh4KSB7XG4gIHZhciByID0gMSwgdDtcbiAgaWYoKHQ9eD4+PjE2KSAhPSAwKSB7IHggPSB0OyByICs9IDE2OyB9XG4gIGlmKCh0PXg+PjgpICE9IDApIHsgeCA9IHQ7IHIgKz0gODsgfVxuICBpZigodD14Pj40KSAhPSAwKSB7IHggPSB0OyByICs9IDQ7IH1cbiAgaWYoKHQ9eD4+MikgIT0gMCkgeyB4ID0gdDsgciArPSAyOyB9XG4gIGlmKCh0PXg+PjEpICE9IDApIHsgeCA9IHQ7IHIgKz0gMTsgfVxuICByZXR1cm4gcjtcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiBcInRoaXNcIlxuZnVuY3Rpb24gYm5CaXRMZW5ndGgoKSB7XG4gIGlmKHRoaXMudCA8PSAwKSByZXR1cm4gMDtcbiAgcmV0dXJuIHRoaXMuREIqKHRoaXMudC0xKStuYml0cyh0aGlzW3RoaXMudC0xXV4odGhpcy5zJnRoaXMuRE0pKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgbipEQlxuZnVuY3Rpb24gYm5wRExTaGlmdFRvKG4scikge1xuICB2YXIgaTtcbiAgZm9yKGkgPSB0aGlzLnQtMTsgaSA+PSAwOyAtLWkpIHJbaStuXSA9IHRoaXNbaV07XG4gIGZvcihpID0gbi0xOyBpID49IDA7IC0taSkgcltpXSA9IDA7XG4gIHIudCA9IHRoaXMudCtuO1xuICByLnMgPSB0aGlzLnM7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG4qREJcbmZ1bmN0aW9uIGJucERSU2hpZnRUbyhuLHIpIHtcbiAgZm9yKHZhciBpID0gbjsgaSA8IHRoaXMudDsgKytpKSByW2ktbl0gPSB0aGlzW2ldO1xuICByLnQgPSBNYXRoLm1heCh0aGlzLnQtbiwwKTtcbiAgci5zID0gdGhpcy5zO1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5mdW5jdGlvbiBibnBMU2hpZnRUbyhuLHIpIHtcbiAgdmFyIGJzID0gbiV0aGlzLkRCO1xuICB2YXIgY2JzID0gdGhpcy5EQi1icztcbiAgdmFyIGJtID0gKDE8PGNicyktMTtcbiAgdmFyIGRzID0gTWF0aC5mbG9vcihuL3RoaXMuREIpLCBjID0gKHRoaXMuczw8YnMpJnRoaXMuRE0sIGk7XG4gIGZvcihpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSB7XG4gICAgcltpK2RzKzFdID0gKHRoaXNbaV0+PmNicyl8YztcbiAgICBjID0gKHRoaXNbaV0mYm0pPDxicztcbiAgfVxuICBmb3IoaSA9IGRzLTE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcbiAgcltkc10gPSBjO1xuICByLnQgPSB0aGlzLnQrZHMrMTtcbiAgci5zID0gdGhpcy5zO1xuICByLmNsYW1wKCk7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG5cbmZ1bmN0aW9uIGJucFJTaGlmdFRvKG4scikge1xuICByLnMgPSB0aGlzLnM7XG4gIHZhciBkcyA9IE1hdGguZmxvb3Iobi90aGlzLkRCKTtcbiAgaWYoZHMgPj0gdGhpcy50KSB7IHIudCA9IDA7IHJldHVybjsgfVxuICB2YXIgYnMgPSBuJXRoaXMuREI7XG4gIHZhciBjYnMgPSB0aGlzLkRCLWJzO1xuICB2YXIgYm0gPSAoMTw8YnMpLTE7XG4gIHJbMF0gPSB0aGlzW2RzXT4+YnM7XG4gIGZvcih2YXIgaSA9IGRzKzE7IGkgPCB0aGlzLnQ7ICsraSkge1xuICAgIHJbaS1kcy0xXSB8PSAodGhpc1tpXSZibSk8PGNicztcbiAgICByW2ktZHNdID0gdGhpc1tpXT4+YnM7XG4gIH1cbiAgaWYoYnMgPiAwKSByW3RoaXMudC1kcy0xXSB8PSAodGhpcy5zJmJtKTw8Y2JzO1xuICByLnQgPSB0aGlzLnQtZHM7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG5mdW5jdGlvbiBibnBTdWJUbyhhLHIpIHtcbiAgdmFyIGkgPSAwLCBjID0gMCwgbSA9IE1hdGgubWluKGEudCx0aGlzLnQpO1xuICB3aGlsZShpIDwgbSkge1xuICAgIGMgKz0gdGhpc1tpXS1hW2ldO1xuICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICBjID4+PSB0aGlzLkRCO1xuICB9XG4gIGlmKGEudCA8IHRoaXMudCkge1xuICAgIGMgLT0gYS5zO1xuICAgIHdoaWxlKGkgPCB0aGlzLnQpIHtcbiAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgfVxuICAgIGMgKz0gdGhpcy5zO1xuICB9XG4gIGVsc2Uge1xuICAgIGMgKz0gdGhpcy5zO1xuICAgIHdoaWxlKGkgPCBhLnQpIHtcbiAgICAgIGMgLT0gYVtpXTtcbiAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgfVxuICAgIGMgLT0gYS5zO1xuICB9XG4gIHIucyA9IChjPDApPy0xOjA7XG4gIGlmKGMgPCAtMSkgcltpKytdID0gdGhpcy5EVitjO1xuICBlbHNlIGlmKGMgPiAwKSByW2krK10gPSBjO1xuICByLnQgPSBpO1xuICByLmNsYW1wKCk7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICogYSwgciAhPSB0aGlzLGEgKEhBQyAxNC4xMilcbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5VG8oYSxyKSB7XG4gIHZhciB4ID0gdGhpcy5hYnMoKSwgeSA9IGEuYWJzKCk7XG4gIHZhciBpID0geC50O1xuICByLnQgPSBpK3kudDtcbiAgd2hpbGUoLS1pID49IDApIHJbaV0gPSAwO1xuICBmb3IoaSA9IDA7IGkgPCB5LnQ7ICsraSkgcltpK3gudF0gPSB4LmFtKDAseVtpXSxyLGksMCx4LnQpO1xuICByLnMgPSAwO1xuICByLmNsYW1wKCk7XG4gIGlmKHRoaXMucyAhPSBhLnMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLHIpO1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbmZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpO1xuICB2YXIgaSA9IHIudCA9IDIqeC50O1xuICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gIGZvcihpID0gMDsgaSA8IHgudC0xOyArK2kpIHtcbiAgICB2YXIgYyA9IHguYW0oaSx4W2ldLHIsMippLDAsMSk7XG4gICAgaWYoKHJbaSt4LnRdKz14LmFtKGkrMSwyKnhbaV0sciwyKmkrMSxjLHgudC1pLTEpKSA+PSB4LkRWKSB7XG4gICAgICByW2kreC50XSAtPSB4LkRWO1xuICAgICAgcltpK3gudCsxXSA9IDE7XG4gICAgfVxuICB9XG4gIGlmKHIudCA+IDApIHJbci50LTFdICs9IHguYW0oaSx4W2ldLHIsMippLDAsMSk7XG4gIHIucyA9IDA7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgZGl2aWRlIHRoaXMgYnkgbSwgcXVvdGllbnQgYW5kIHJlbWFpbmRlciB0byBxLCByIChIQUMgMTQuMjApXG4vLyByICE9IHEsIHRoaXMgIT0gbS4gIHEgb3IgciBtYXkgYmUgbnVsbC5cbmZ1bmN0aW9uIGJucERpdlJlbVRvKG0scSxyKSB7XG4gIHZhciBwbSA9IG0uYWJzKCk7XG4gIGlmKHBtLnQgPD0gMCkgcmV0dXJuO1xuICB2YXIgcHQgPSB0aGlzLmFicygpO1xuICBpZihwdC50IDwgcG0udCkge1xuICAgIGlmKHEgIT0gbnVsbCkgcS5mcm9tSW50KDApO1xuICAgIGlmKHIgIT0gbnVsbCkgdGhpcy5jb3B5VG8ocik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmKHIgPT0gbnVsbCkgciA9IG5iaSgpO1xuICB2YXIgeSA9IG5iaSgpLCB0cyA9IHRoaXMucywgbXMgPSBtLnM7XG4gIHZhciBuc2ggPSB0aGlzLkRCLW5iaXRzKHBtW3BtLnQtMV0pOyAgIC8vIG5vcm1hbGl6ZSBtb2R1bHVzXG4gIGlmKG5zaCA+IDApIHsgcG0ubFNoaWZ0VG8obnNoLHkpOyBwdC5sU2hpZnRUbyhuc2gscik7IH1cbiAgZWxzZSB7IHBtLmNvcHlUbyh5KTsgcHQuY29weVRvKHIpOyB9XG4gIHZhciB5cyA9IHkudDtcbiAgdmFyIHkwID0geVt5cy0xXTtcbiAgaWYoeTAgPT0gMCkgcmV0dXJuO1xuICB2YXIgeXQgPSB5MCooMTw8dGhpcy5GMSkrKCh5cz4xKT95W3lzLTJdPj50aGlzLkYyOjApO1xuICB2YXIgZDEgPSB0aGlzLkZWL3l0LCBkMiA9ICgxPDx0aGlzLkYxKS95dCwgZSA9IDE8PHRoaXMuRjI7XG4gIHZhciBpID0gci50LCBqID0gaS15cywgdCA9IChxPT1udWxsKT9uYmkoKTpxO1xuICB5LmRsU2hpZnRUbyhqLHQpO1xuICBpZihyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgcltyLnQrK10gPSAxO1xuICAgIHIuc3ViVG8odCxyKTtcbiAgfVxuICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oeXMsdCk7XG4gIHQuc3ViVG8oeSx5KTsgIC8vIFwibmVnYXRpdmVcIiB5IHNvIHdlIGNhbiByZXBsYWNlIHN1YiB3aXRoIGFtIGxhdGVyXG4gIHdoaWxlKHkudCA8IHlzKSB5W3kudCsrXSA9IDA7XG4gIHdoaWxlKC0taiA+PSAwKSB7XG4gICAgLy8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcbiAgICB2YXIgcWQgPSAoclstLWldPT15MCk/dGhpcy5ETTpNYXRoLmZsb29yKHJbaV0qZDErKHJbaS0xXStlKSpkMik7XG4gICAgaWYoKHJbaV0rPXkuYW0oMCxxZCxyLGosMCx5cykpIDwgcWQpIHsgICAvLyBUcnkgaXQgb3V0XG4gICAgICB5LmRsU2hpZnRUbyhqLHQpO1xuICAgICAgci5zdWJUbyh0LHIpO1xuICAgICAgd2hpbGUocltpXSA8IC0tcWQpIHIuc3ViVG8odCxyKTtcbiAgICB9XG4gIH1cbiAgaWYocSAhPSBudWxsKSB7XG4gICAgci5kclNoaWZ0VG8oeXMscSk7XG4gICAgaWYodHMgIT0gbXMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhxLHEpO1xuICB9XG4gIHIudCA9IHlzO1xuICByLmNsYW1wKCk7XG4gIGlmKG5zaCA+IDApIHIuclNoaWZ0VG8obnNoLHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcbiAgaWYodHMgPCAwKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocixyKTtcbn1cblxuLy8gKHB1YmxpYykgdGhpcyBtb2QgYVxuZnVuY3Rpb24gYm5Nb2QoYSkge1xuICB2YXIgciA9IG5iaSgpO1xuICB0aGlzLmFicygpLmRpdlJlbVRvKGEsbnVsbCxyKTtcbiAgaWYodGhpcy5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkgYS5zdWJUbyhyLHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gTW9kdWxhciByZWR1Y3Rpb24gdXNpbmcgXCJjbGFzc2ljXCIgYWxnb3JpdGhtXG5mdW5jdGlvbiBDbGFzc2ljKG0pIHsgdGhpcy5tID0gbTsgfVxuZnVuY3Rpb24gY0NvbnZlcnQoeCkge1xuICBpZih4LnMgPCAwIHx8IHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgcmV0dXJuIHgubW9kKHRoaXMubSk7XG4gIGVsc2UgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBjUmV2ZXJ0KHgpIHsgcmV0dXJuIHg7IH1cbmZ1bmN0aW9uIGNSZWR1Y2UoeCkgeyB4LmRpdlJlbVRvKHRoaXMubSxudWxsLHgpOyB9XG5mdW5jdGlvbiBjTXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9XG5mdW5jdGlvbiBjU3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbkNsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcbkNsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGNSZXZlcnQ7XG5DbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2UgPSBjUmVkdWNlO1xuQ2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG87XG5DbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUbztcblxuLy8gKHByb3RlY3RlZCkgcmV0dXJuIFwiLTEvdGhpcyAlIDJeREJcIjsgdXNlZnVsIGZvciBNb250LiByZWR1Y3Rpb25cbi8vIGp1c3RpZmljYXRpb246XG4vLyAgICAgICAgIHh5ID09IDEgKG1vZCBtKVxuLy8gICAgICAgICB4eSA9ICAxK2ttXG4vLyAgIHh5KDIteHkpID0gKDEra20pKDEta20pXG4vLyB4W3koMi14eSldID0gMS1rXjJtXjJcbi8vIHhbeSgyLXh5KV0gPT0gMSAobW9kIG1eMilcbi8vIGlmIHkgaXMgMS94IG1vZCBtLCB0aGVuIHkoMi14eSkgaXMgMS94IG1vZCBtXjJcbi8vIHNob3VsZCByZWR1Y2UgeCBhbmQgeSgyLXh5KSBieSBtXjIgYXQgZWFjaCBzdGVwIHRvIGtlZXAgc2l6ZSBib3VuZGVkLlxuLy8gSlMgbXVsdGlwbHkgXCJvdmVyZmxvd3NcIiBkaWZmZXJlbnRseSBmcm9tIEMvQysrLCBzbyBjYXJlIGlzIG5lZWRlZCBoZXJlLlxuZnVuY3Rpb24gYm5wSW52RGlnaXQoKSB7XG4gIGlmKHRoaXMudCA8IDEpIHJldHVybiAwO1xuICB2YXIgeCA9IHRoaXNbMF07XG4gIGlmKCh4JjEpID09IDApIHJldHVybiAwO1xuICB2YXIgeSA9IHgmMzsgICAgICAgLy8geSA9PSAxL3ggbW9kIDJeMlxuICB5ID0gKHkqKDItKHgmMHhmKSp5KSkmMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG4gIHkgPSAoeSooMi0oeCYweGZmKSp5KSkmMHhmZjsgICAvLyB5ID09IDEveCBtb2QgMl44XG4gIHkgPSAoeSooMi0oKCh4JjB4ZmZmZikqeSkmMHhmZmZmKSkpJjB4ZmZmZjsgICAgLy8geSA9PSAxL3ggbW9kIDJeMTZcbiAgLy8gbGFzdCBzdGVwIC0gY2FsY3VsYXRlIGludmVyc2UgbW9kIERWIGRpcmVjdGx5O1xuICAvLyBhc3N1bWVzIDE2IDwgREIgPD0gMzIgYW5kIGFzc3VtZXMgYWJpbGl0eSB0byBoYW5kbGUgNDgtYml0IGludHNcbiAgeSA9ICh5KigyLXgqeSV0aGlzLkRWKSkldGhpcy5EVjsgICAgICAgLy8geSA9PSAxL3ggbW9kIDJeZGJpdHNcbiAgLy8gd2UgcmVhbGx5IHdhbnQgdGhlIG5lZ2F0aXZlIGludmVyc2UsIGFuZCAtRFYgPCB5IDwgRFZcbiAgcmV0dXJuICh5PjApP3RoaXMuRFYteToteTtcbn1cblxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbmZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICB0aGlzLm0gPSBtO1xuICB0aGlzLm1wID0gbS5pbnZEaWdpdCgpO1xuICB0aGlzLm1wbCA9IHRoaXMubXAmMHg3ZmZmO1xuICB0aGlzLm1waCA9IHRoaXMubXA+PjE1O1xuICB0aGlzLnVtID0gKDE8PChtLkRCLTE1KSktMTtcbiAgdGhpcy5tdDIgPSAyKm0udDtcbn1cblxuLy8geFIgbW9kIG1cbmZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgeC5hYnMoKS5kbFNoaWZ0VG8odGhpcy5tLnQscik7XG4gIHIuZGl2UmVtVG8odGhpcy5tLG51bGwscik7XG4gIGlmKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8geC9SIG1vZCBtXG5mdW5jdGlvbiBtb250UmV2ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgeC5jb3B5VG8ocik7XG4gIHRoaXMucmVkdWNlKHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gIHdoaWxlKHgudCA8PSB0aGlzLm10MikgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgeFt4LnQrK10gPSAwO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5tLnQ7ICsraSkge1xuICAgIC8vIGZhc3RlciB3YXkgb2YgY2FsY3VsYXRpbmcgdTAgPSB4W2ldKm1wIG1vZCBEVlxuICAgIHZhciBqID0geFtpXSYweDdmZmY7XG4gICAgdmFyIHUwID0gKGoqdGhpcy5tcGwrKCgoaip0aGlzLm1waCsoeFtpXT4+MTUpKnRoaXMubXBsKSZ0aGlzLnVtKTw8MTUpKSZ4LkRNO1xuICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgIGogPSBpK3RoaXMubS50O1xuICAgIHhbal0gKz0gdGhpcy5tLmFtKDAsdTAseCxpLDAsdGhpcy5tLnQpO1xuICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgIHdoaWxlKHhbal0gPj0geC5EVikgeyB4W2pdIC09IHguRFY7IHhbKytqXSsrOyB9XG4gIH1cbiAgeC5jbGFtcCgpO1xuICB4LmRyU2hpZnRUbyh0aGlzLm0udCx4KTtcbiAgaWYoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSx4KTtcbn1cblxuLy8gciA9IFwieF4yL1IgbW9kIG1cIjsgeCAhPSByXG5mdW5jdGlvbiBtb250U3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbi8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbmZ1bmN0aW9uIG1vbnRNdWxUbyh4LHkscikgeyB4Lm11bHRpcGx5VG8oeSxyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydDtcbk1vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZSA9IG1vbnRSZWR1Y2U7XG5Nb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbztcbk1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvO1xuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW5cbmZ1bmN0aW9uIGJucElzRXZlbigpIHsgcmV0dXJuICgodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucykgPT0gMDsgfVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzXmUsIGUgPCAyXjMyLCBkb2luZyBzcXIgYW5kIG11bCB3aXRoIFwiclwiIChIQUMgMTQuNzkpXG5mdW5jdGlvbiBibnBFeHAoZSx6KSB7XG4gIGlmKGUgPiAweGZmZmZmZmZmIHx8IGUgPCAxKSByZXR1cm4gQmlnSW50ZWdlci5PTkU7XG4gIHZhciByID0gbmJpKCksIHIyID0gbmJpKCksIGcgPSB6LmNvbnZlcnQodGhpcyksIGkgPSBuYml0cyhlKS0xO1xuICBnLmNvcHlUbyhyKTtcbiAgd2hpbGUoLS1pID49IDApIHtcbiAgICB6LnNxclRvKHIscjIpO1xuICAgIGlmKChlJigxPDxpKSkgPiAwKSB6Lm11bFRvKHIyLGcscik7XG4gICAgZWxzZSB7IHZhciB0ID0gcjsgciA9IHIyOyByMiA9IHQ7IH1cbiAgfVxuICByZXR1cm4gei5yZXZlcnQocik7XG59XG5cbi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbmZ1bmN0aW9uIGJuTW9kUG93SW50KGUsbSkge1xuICB2YXIgejtcbiAgaWYoZSA8IDI1NiB8fCBtLmlzRXZlbigpKSB6ID0gbmV3IENsYXNzaWMobSk7IGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuICByZXR1cm4gdGhpcy5leHAoZSx6KTtcbn1cblxuLy8gcHJvdGVjdGVkXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5jb3B5VG8gPSBibnBDb3B5VG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuY2xhbXAgPSBibnBDbGFtcDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbztcbkJpZ0ludGVnZXIucHJvdG90eXBlLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUbztcbkJpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvID0gYm5wTFNoaWZ0VG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuc3ViVG8gPSBibnBTdWJUbztcbkJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VG8gPSBibnBNdWx0aXBseVRvO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcbkJpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvID0gYm5wRGl2UmVtVG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnZEaWdpdCA9IGJucEludkRpZ2l0O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gYm5wSXNFdmVuO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZXhwID0gYm5wRXhwO1xuXG4vLyBwdWJsaWNcbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gYm5Ub1N0cmluZztcbkJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGJuTmVnYXRlO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuYWJzID0gYm5BYnM7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBibkNvbXBhcmVUbztcbkJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuQmlnSW50ZWdlci5wcm90b3R5cGUubW9kID0gYm5Nb2Q7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQgPSBibk1vZFBvd0ludDtcblxuLy8gXCJjb25zdGFudHNcIlxuQmlnSW50ZWdlci5aRVJPID0gbmJ2KDApO1xuQmlnSW50ZWdlci5PTkUgPSBuYnYoMSk7XG5cbi8vIENvcHlyaWdodCAoYykgMjAwNS0yMDA5ICBUb20gV3Vcbi8vIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cbi8vIEV4dGVuZGVkIEphdmFTY3JpcHQgQk4gZnVuY3Rpb25zLCByZXF1aXJlZCBmb3IgUlNBIHByaXZhdGUgb3BzLlxuXG4vLyBWZXJzaW9uIDEuMTogbmV3IEJpZ0ludGVnZXIoXCIwXCIsIDEwKSByZXR1cm5zIFwicHJvcGVyXCIgemVyb1xuLy8gVmVyc2lvbiAxLjI6IHNxdWFyZSgpIEFQSSwgaXNQcm9iYWJsZVByaW1lIGZpeFxuXG4vLyAocHVibGljKVxuZnVuY3Rpb24gYm5DbG9uZSgpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5jb3B5VG8ocik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBpbnRlZ2VyXG5mdW5jdGlvbiBibkludFZhbHVlKCkge1xuICBpZih0aGlzLnMgPCAwKSB7XG4gICAgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdLXRoaXMuRFY7XG4gICAgZWxzZSBpZih0aGlzLnQgPT0gMCkgcmV0dXJuIC0xO1xuICB9XG4gIGVsc2UgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdO1xuICBlbHNlIGlmKHRoaXMudCA9PSAwKSByZXR1cm4gMDtcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDwgMzJcbiAgcmV0dXJuICgodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdO1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgYnl0ZVxuZnVuY3Rpb24gYm5CeXRlVmFsdWUoKSB7IHJldHVybiAodGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDI0KT4+MjQ7IH1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIHNob3J0IChhc3N1bWVzIERCPj0xNilcbmZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpIHsgcmV0dXJuICh0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNjsgfVxuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG5mdW5jdGlvbiBibnBDaHVua1NpemUocikgeyByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKHIpKTsgfVxuXG4vLyAocHVibGljKSAwIGlmIHRoaXMgPT0gMCwgMSBpZiB0aGlzID4gMFxuZnVuY3Rpb24gYm5TaWdOdW0oKSB7XG4gIGlmKHRoaXMucyA8IDApIHJldHVybiAtMTtcbiAgZWxzZSBpZih0aGlzLnQgPD0gMCB8fCAodGhpcy50ID09IDEgJiYgdGhpc1swXSA8PSAwKSkgcmV0dXJuIDA7XG4gIGVsc2UgcmV0dXJuIDE7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5mdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgaWYoYiA9PSBudWxsKSBiID0gMTA7XG4gIGlmKHRoaXMuc2lnbnVtKCkgPT0gMCB8fCBiIDwgMiB8fCBiID4gMzYpIHJldHVybiBcIjBcIjtcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gIHZhciBhID0gTWF0aC5wb3coYixjcyk7XG4gIHZhciBkID0gbmJ2KGEpLCB5ID0gbmJpKCksIHogPSBuYmkoKSwgciA9IFwiXCI7XG4gIHRoaXMuZGl2UmVtVG8oZCx5LHopO1xuICB3aGlsZSh5LnNpZ251bSgpID4gMCkge1xuICAgIHIgPSAoYSt6LmludFZhbHVlKCkpLnRvU3RyaW5nKGIpLnN1YnN0cigxKSArIHI7XG4gICAgeS5kaXZSZW1UbyhkLHkseik7XG4gIH1cbiAgcmV0dXJuIHouaW50VmFsdWUoKS50b1N0cmluZyhiKSArIHI7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucEZyb21SYWRpeChzLGIpIHtcbiAgdGhpcy5mcm9tSW50KDApO1xuICBpZihiID09IG51bGwpIGIgPSAxMDtcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gIHZhciBkID0gTWF0aC5wb3coYixjcyksIG1pID0gZmFsc2UsIGogPSAwLCB3ID0gMDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgeCA9IGludEF0KHMsaSk7XG4gICAgaWYoeCA8IDApIHtcbiAgICAgIGlmKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHRoaXMuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHcgPSBiKncreDtcbiAgICBpZigrK2ogPj0gY3MpIHtcbiAgICAgIHRoaXMuZE11bHRpcGx5KGQpO1xuICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsMCk7XG4gICAgICBqID0gMDtcbiAgICAgIHcgPSAwO1xuICAgIH1cbiAgfVxuICBpZihqID4gMCkge1xuICAgIHRoaXMuZE11bHRpcGx5KE1hdGgucG93KGIsaikpO1xuICAgIHRoaXMuZEFkZE9mZnNldCh3LDApO1xuICB9XG4gIGlmKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgYWx0ZXJuYXRlIGNvbnN0cnVjdG9yXG5mdW5jdGlvbiBibnBGcm9tTnVtYmVyKGEsYixjKSB7XG4gIGlmKFwibnVtYmVyXCIgPT0gdHlwZW9mIGIpIHtcbiAgICAvLyBuZXcgQmlnSW50ZWdlcihpbnQsaW50LFJORylcbiAgICBpZihhIDwgMikgdGhpcy5mcm9tSW50KDEpO1xuICAgIGVsc2Uge1xuICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsYyk7XG4gICAgICBpZighdGhpcy50ZXN0Qml0KGEtMSkpICAvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgIHRoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhLTEpLG9wX29yLHRoaXMpO1xuICAgICAgaWYodGhpcy5pc0V2ZW4oKSkgdGhpcy5kQWRkT2Zmc2V0KDEsMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgd2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgIHRoaXMuZEFkZE9mZnNldCgyLDApO1xuICAgICAgICBpZih0aGlzLmJpdExlbmd0aCgpID4gYSkgdGhpcy5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYS0xKSx0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gbmV3IEJpZ0ludGVnZXIoaW50LFJORylcbiAgICB2YXIgeCA9IG5ldyBBcnJheSgpLCB0ID0gYSY3O1xuICAgIHgubGVuZ3RoID0gKGE+PjMpKzE7XG4gICAgYi5uZXh0Qnl0ZXMoeCk7XG4gICAgaWYodCA+IDApIHhbMF0gJj0gKCgxPDx0KS0xKTsgZWxzZSB4WzBdID0gMDtcbiAgICB0aGlzLmZyb21TdHJpbmcoeCwyNTYpO1xuICB9XG59XG5cbi8vIChwdWJsaWMpIGNvbnZlcnQgdG8gYmlnZW5kaWFuIGJ5dGUgYXJyYXlcbmZ1bmN0aW9uIGJuVG9CeXRlQXJyYXkoKSB7XG4gIHZhciBpID0gdGhpcy50LCByID0gbmV3IEFycmF5KCk7XG4gIHJbMF0gPSB0aGlzLnM7XG4gIHZhciBwID0gdGhpcy5EQi0oaSp0aGlzLkRCKSU4LCBkLCBrID0gMDtcbiAgaWYoaS0tID4gMCkge1xuICAgIGlmKHAgPCB0aGlzLkRCICYmIChkID0gdGhpc1tpXT4+cCkgIT0gKHRoaXMucyZ0aGlzLkRNKT4+cClcbiAgICAgIHJbaysrXSA9IGR8KHRoaXMuczw8KHRoaXMuREItcCkpO1xuICAgIHdoaWxlKGkgPj0gMCkge1xuICAgICAgaWYocCA8IDgpIHtcbiAgICAgICAgZCA9ICh0aGlzW2ldJigoMTw8cCktMSkpPDwoOC1wKTtcbiAgICAgICAgZCB8PSB0aGlzWy0taV0+PihwKz10aGlzLkRCLTgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGQgPSAodGhpc1tpXT4+KHAtPTgpKSYweGZmO1xuICAgICAgICBpZihwIDw9IDApIHsgcCArPSB0aGlzLkRCOyAtLWk7IH1cbiAgICAgIH1cbiAgICAgIGlmKChkJjB4ODApICE9IDApIGQgfD0gLTI1NjtcbiAgICAgIGlmKGsgPT0gMCAmJiAodGhpcy5zJjB4ODApICE9IChkJjB4ODApKSArK2s7XG4gICAgICBpZihrID4gMCB8fCBkICE9IHRoaXMucykgcltrKytdID0gZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJuRXF1YWxzKGEpIHsgcmV0dXJuKHRoaXMuY29tcGFyZVRvKGEpPT0wKTsgfVxuZnVuY3Rpb24gYm5NaW4oYSkgeyByZXR1cm4odGhpcy5jb21wYXJlVG8oYSk8MCk/dGhpczphOyB9XG5mdW5jdGlvbiBibk1heChhKSB7IHJldHVybih0aGlzLmNvbXBhcmVUbyhhKT4wKT90aGlzOmE7IH1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgb3AgYSAoYml0d2lzZSlcbmZ1bmN0aW9uIGJucEJpdHdpc2VUbyhhLG9wLHIpIHtcbiAgdmFyIGksIGYsIG0gPSBNYXRoLm1pbihhLnQsdGhpcy50KTtcbiAgZm9yKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3AodGhpc1tpXSxhW2ldKTtcbiAgaWYoYS50IDwgdGhpcy50KSB7XG4gICAgZiA9IGEucyZ0aGlzLkRNO1xuICAgIGZvcihpID0gbTsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gb3AodGhpc1tpXSxmKTtcbiAgICByLnQgPSB0aGlzLnQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgZiA9IHRoaXMucyZ0aGlzLkRNO1xuICAgIGZvcihpID0gbTsgaSA8IGEudDsgKytpKSByW2ldID0gb3AoZixhW2ldKTtcbiAgICByLnQgPSBhLnQ7XG4gIH1cbiAgci5zID0gb3AodGhpcy5zLGEucyk7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHB1YmxpYykgdGhpcyAmIGFcbmZ1bmN0aW9uIG9wX2FuZCh4LHkpIHsgcmV0dXJuIHgmeTsgfVxuZnVuY3Rpb24gYm5BbmQoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmJpdHdpc2VUbyhhLG9wX2FuZCxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgdGhpcyB8IGFcbmZ1bmN0aW9uIG9wX29yKHgseSkgeyByZXR1cm4geHx5OyB9XG5mdW5jdGlvbiBibk9yKGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5iaXR3aXNlVG8oYSxvcF9vcixyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgdGhpcyBeIGFcbmZ1bmN0aW9uIG9wX3hvcih4LHkpIHsgcmV0dXJuIHheeTsgfVxuZnVuY3Rpb24gYm5Yb3IoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmJpdHdpc2VUbyhhLG9wX3hvcixyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgdGhpcyAmIH5hXG5mdW5jdGlvbiBvcF9hbmRub3QoeCx5KSB7IHJldHVybiB4Jn55OyB9XG5mdW5jdGlvbiBibkFuZE5vdChhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3BfYW5kbm90LHIpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB+dGhpc1xuZnVuY3Rpb24gYm5Ob3QoKSB7XG4gIHZhciByID0gbmJpKCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkgcltpXSA9IHRoaXMuRE0mfnRoaXNbaV07XG4gIHIudCA9IHRoaXMudDtcbiAgci5zID0gfnRoaXMucztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIHRoaXMgPDwgblxuZnVuY3Rpb24gYm5TaGlmdExlZnQobikge1xuICB2YXIgciA9IG5iaSgpO1xuICBpZihuIDwgMCkgdGhpcy5yU2hpZnRUbygtbixyKTsgZWxzZSB0aGlzLmxTaGlmdFRvKG4scik7XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSB0aGlzID4+IG5cbmZ1bmN0aW9uIGJuU2hpZnRSaWdodChuKSB7XG4gIHZhciByID0gbmJpKCk7XG4gIGlmKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLHIpOyBlbHNlIHRoaXMuclNoaWZ0VG8obixyKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIHJldHVybiBpbmRleCBvZiBsb3dlc3QgMS1iaXQgaW4geCwgeCA8IDJeMzFcbmZ1bmN0aW9uIGxiaXQoeCkge1xuICBpZih4ID09IDApIHJldHVybiAtMTtcbiAgdmFyIHIgPSAwO1xuICBpZigoeCYweGZmZmYpID09IDApIHsgeCA+Pj0gMTY7IHIgKz0gMTY7IH1cbiAgaWYoKHgmMHhmZikgPT0gMCkgeyB4ID4+PSA4OyByICs9IDg7IH1cbiAgaWYoKHgmMHhmKSA9PSAwKSB7IHggPj49IDQ7IHIgKz0gNDsgfVxuICBpZigoeCYzKSA9PSAwKSB7IHggPj49IDI7IHIgKz0gMjsgfVxuICBpZigoeCYxKSA9PSAwKSArK3I7XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSByZXR1cm5zIGluZGV4IG9mIGxvd2VzdCAxLWJpdCAob3IgLTEgaWYgbm9uZSlcbmZ1bmN0aW9uIGJuR2V0TG93ZXN0U2V0Qml0KCkge1xuICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpXG4gICAgaWYodGhpc1tpXSAhPSAwKSByZXR1cm4gaSp0aGlzLkRCK2xiaXQodGhpc1tpXSk7XG4gIGlmKHRoaXMucyA8IDApIHJldHVybiB0aGlzLnQqdGhpcy5EQjtcbiAgcmV0dXJuIC0xO1xufVxuXG4vLyByZXR1cm4gbnVtYmVyIG9mIDEgYml0cyBpbiB4XG5mdW5jdGlvbiBjYml0KHgpIHtcbiAgdmFyIHIgPSAwO1xuICB3aGlsZSh4ICE9IDApIHsgeCAmPSB4LTE7ICsrcjsgfVxuICByZXR1cm4gcjtcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuZnVuY3Rpb24gYm5CaXRDb3VudCgpIHtcbiAgdmFyIHIgPSAwLCB4ID0gdGhpcy5zJnRoaXMuRE07XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkgciArPSBjYml0KHRoaXNbaV1eeCk7XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSB0cnVlIGlmZiBudGggYml0IGlzIHNldFxuZnVuY3Rpb24gYm5UZXN0Qml0KG4pIHtcbiAgdmFyIGogPSBNYXRoLmZsb29yKG4vdGhpcy5EQik7XG4gIGlmKGogPj0gdGhpcy50KSByZXR1cm4odGhpcy5zIT0wKTtcbiAgcmV0dXJuKCh0aGlzW2pdJigxPDwobiV0aGlzLkRCKSkpIT0wKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyBvcCAoMTw8bilcbmZ1bmN0aW9uIGJucENoYW5nZUJpdChuLG9wKSB7XG4gIHZhciByID0gQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KG4pO1xuICB0aGlzLmJpdHdpc2VUbyhyLG9wLHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gKHB1YmxpYykgdGhpcyB8ICgxPDxuKVxuZnVuY3Rpb24gYm5TZXRCaXQobikgeyByZXR1cm4gdGhpcy5jaGFuZ2VCaXQobixvcF9vcik7IH1cblxuLy8gKHB1YmxpYykgdGhpcyAmIH4oMTw8bilcbmZ1bmN0aW9uIGJuQ2xlYXJCaXQobikgeyByZXR1cm4gdGhpcy5jaGFuZ2VCaXQobixvcF9hbmRub3QpOyB9XG5cbi8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbmZ1bmN0aW9uIGJuRmxpcEJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX3hvcik7IH1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgKyBhXG5mdW5jdGlvbiBibnBBZGRUbyhhLHIpIHtcbiAgdmFyIGkgPSAwLCBjID0gMCwgbSA9IE1hdGgubWluKGEudCx0aGlzLnQpO1xuICB3aGlsZShpIDwgbSkge1xuICAgIGMgKz0gdGhpc1tpXSthW2ldO1xuICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICBjID4+PSB0aGlzLkRCO1xuICB9XG4gIGlmKGEudCA8IHRoaXMudCkge1xuICAgIGMgKz0gYS5zO1xuICAgIHdoaWxlKGkgPCB0aGlzLnQpIHtcbiAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgfVxuICAgIGMgKz0gdGhpcy5zO1xuICB9XG4gIGVsc2Uge1xuICAgIGMgKz0gdGhpcy5zO1xuICAgIHdoaWxlKGkgPCBhLnQpIHtcbiAgICAgIGMgKz0gYVtpXTtcbiAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgfVxuICAgIGMgKz0gYS5zO1xuICB9XG4gIHIucyA9IChjPDApPy0xOjA7XG4gIGlmKGMgPiAwKSByW2krK10gPSBjO1xuICBlbHNlIGlmKGMgPCAtMSkgcltpKytdID0gdGhpcy5EVitjO1xuICByLnQgPSBpO1xuICByLmNsYW1wKCk7XG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKyBhXG5mdW5jdGlvbiBibkFkZChhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYWRkVG8oYSxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgdGhpcyAtIGFcbmZ1bmN0aW9uIGJuU3VidHJhY3QoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLnN1YlRvKGEscik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXMgKiBhXG5mdW5jdGlvbiBibk11bHRpcGx5KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5tdWx0aXBseVRvKGEscik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXNeMlxuZnVuY3Rpb24gYm5TcXVhcmUoKSB7IHZhciByID0gbmJpKCk7IHRoaXMuc3F1YXJlVG8ocik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXMgLyBhXG5mdW5jdGlvbiBibkRpdmlkZShhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuZGl2UmVtVG8oYSxyLG51bGwpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB0aGlzICUgYVxuZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmRpdlJlbVRvKGEsbnVsbCxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgW3RoaXMvYSx0aGlzJWFdXG5mdW5jdGlvbiBibkRpdmlkZUFuZFJlbWFpbmRlcihhKSB7XG4gIHZhciBxID0gbmJpKCksIHIgPSBuYmkoKTtcbiAgdGhpcy5kaXZSZW1UbyhhLHEscik7XG4gIHJldHVybiBuZXcgQXJyYXkocSxyKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyAqPSBuLCB0aGlzID49IDAsIDEgPCBuIDwgRFZcbmZ1bmN0aW9uIGJucERNdWx0aXBseShuKSB7XG4gIHRoaXNbdGhpcy50XSA9IHRoaXMuYW0oMCxuLTEsdGhpcywwLDAsdGhpcy50KTtcbiAgKyt0aGlzLnQ7XG4gIHRoaXMuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuZnVuY3Rpb24gYm5wREFkZE9mZnNldChuLHcpIHtcbiAgaWYobiA9PSAwKSByZXR1cm47XG4gIHdoaWxlKHRoaXMudCA8PSB3KSB0aGlzW3RoaXMudCsrXSA9IDA7XG4gIHRoaXNbd10gKz0gbjtcbiAgd2hpbGUodGhpc1t3XSA+PSB0aGlzLkRWKSB7XG4gICAgdGhpc1t3XSAtPSB0aGlzLkRWO1xuICAgIGlmKCsrdyA+PSB0aGlzLnQpIHRoaXNbdGhpcy50KytdID0gMDtcbiAgICArK3RoaXNbd107XG4gIH1cbn1cblxuLy8gQSBcIm51bGxcIiByZWR1Y2VyXG5mdW5jdGlvbiBOdWxsRXhwKCkge31cbmZ1bmN0aW9uIG5Ob3AoeCkgeyByZXR1cm4geDsgfVxuZnVuY3Rpb24gbk11bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB9XG5mdW5jdGlvbiBuU3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IH1cblxuTnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3A7XG5OdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQgPSBuTm9wO1xuTnVsbEV4cC5wcm90b3R5cGUubXVsVG8gPSBuTXVsVG87XG5OdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUbztcblxuLy8gKHB1YmxpYykgdGhpc15lXG5mdW5jdGlvbiBiblBvdyhlKSB7IHJldHVybiB0aGlzLmV4cChlLG5ldyBOdWxsRXhwKCkpOyB9XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSBsb3dlciBuIHdvcmRzIG9mIFwidGhpcyAqIGFcIiwgYS50IDw9IG5cbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLG4scikge1xuICB2YXIgaSA9IE1hdGgubWluKHRoaXMudCthLnQsbik7XG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgci50ID0gaTtcbiAgd2hpbGUoaSA+IDApIHJbLS1pXSA9IDA7XG4gIHZhciBqO1xuICBmb3IoaiA9IHIudC10aGlzLnQ7IGkgPCBqOyArK2kpIHJbaSt0aGlzLnRdID0gdGhpcy5hbSgwLGFbaV0scixpLDAsdGhpcy50KTtcbiAgZm9yKGogPSBNYXRoLm1pbihhLnQsbik7IGkgPCBqOyArK2kpIHRoaXMuYW0oMCxhW2ldLHIsaSwwLG4taSk7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IFwidGhpcyAqIGFcIiB3aXRob3V0IGxvd2VyIG4gd29yZHMsIG4gPiAwXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSxuLHIpIHtcbiAgLS1uO1xuICB2YXIgaSA9IHIudCA9IHRoaXMudCthLnQtbjtcbiAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gIGZvcihpID0gTWF0aC5tYXgobi10aGlzLnQsMCk7IGkgPCBhLnQ7ICsraSlcbiAgICByW3RoaXMudCtpLW5dID0gdGhpcy5hbShuLWksYVtpXSxyLDAsMCx0aGlzLnQraS1uKTtcbiAgci5jbGFtcCgpO1xuICByLmRyU2hpZnRUbygxLHIpO1xufVxuXG4vLyBCYXJyZXR0IG1vZHVsYXIgcmVkdWN0aW9uXG5mdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgLy8gc2V0dXAgQmFycmV0dFxuICB0aGlzLnIyID0gbmJpKCk7XG4gIHRoaXMucTMgPSBuYmkoKTtcbiAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKDIqbS50LHRoaXMucjIpO1xuICB0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUobSk7XG4gIHRoaXMubSA9IG07XG59XG5cbmZ1bmN0aW9uIGJhcnJldHRDb252ZXJ0KHgpIHtcbiAgaWYoeC5zIDwgMCB8fCB4LnQgPiAyKnRoaXMubS50KSByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgZWxzZSBpZih4LmNvbXBhcmVUbyh0aGlzLm0pIDwgMCkgcmV0dXJuIHg7XG4gIGVsc2UgeyB2YXIgciA9IG5iaSgpOyB4LmNvcHlUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IHJldHVybiByOyB9XG59XG5cbmZ1bmN0aW9uIGJhcnJldHRSZXZlcnQoeCkgeyByZXR1cm4geDsgfVxuXG4vLyB4ID0geCBtb2QgbSAoSEFDIDE0LjQyKVxuZnVuY3Rpb24gYmFycmV0dFJlZHVjZSh4KSB7XG4gIHguZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7XG4gIGlmKHgudCA+IHRoaXMubS50KzEpIHsgeC50ID0gdGhpcy5tLnQrMTsgeC5jbGFtcCgpOyB9XG4gIHRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsdGhpcy5tLnQrMSx0aGlzLnEzKTtcbiAgdGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7XG4gIHdoaWxlKHguY29tcGFyZVRvKHRoaXMucjIpIDwgMCkgeC5kQWRkT2Zmc2V0KDEsdGhpcy5tLnQrMSk7XG4gIHguc3ViVG8odGhpcy5yMix4KTtcbiAgd2hpbGUoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSx4KTtcbn1cblxuLy8gciA9IHheMiBtb2QgbTsgeCAhPSByXG5mdW5jdGlvbiBiYXJyZXR0U3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbi8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5mdW5jdGlvbiBiYXJyZXR0TXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbkJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBiYXJyZXR0Q29udmVydDtcbkJhcnJldHQucHJvdG90eXBlLnJldmVydCA9IGJhcnJldHRSZXZlcnQ7XG5CYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlO1xuQmFycmV0dC5wcm90b3R5cGUubXVsVG8gPSBiYXJyZXR0TXVsVG87XG5CYXJyZXR0LnByb3RvdHlwZS5zcXJUbyA9IGJhcnJldHRTcXJUbztcblxuLy8gKHB1YmxpYykgdGhpc15lICUgbSAoSEFDIDE0Ljg1KVxuZnVuY3Rpb24gYm5Nb2RQb3coZSxtKSB7XG4gIHZhciBpID0gZS5iaXRMZW5ndGgoKSwgaywgciA9IG5idigxKSwgejtcbiAgaWYoaSA8PSAwKSByZXR1cm4gcjtcbiAgZWxzZSBpZihpIDwgMTgpIGsgPSAxO1xuICBlbHNlIGlmKGkgPCA0OCkgayA9IDM7XG4gIGVsc2UgaWYoaSA8IDE0NCkgayA9IDQ7XG4gIGVsc2UgaWYoaSA8IDc2OCkgayA9IDU7XG4gIGVsc2UgayA9IDY7XG4gIGlmKGkgPCA4KVxuICAgIHogPSBuZXcgQ2xhc3NpYyhtKTtcbiAgZWxzZSBpZihtLmlzRXZlbigpKVxuICAgIHogPSBuZXcgQmFycmV0dChtKTtcbiAgZWxzZVxuICAgIHogPSBuZXcgTW9udGdvbWVyeShtKTtcblxuICAvLyBwcmVjb21wdXRhdGlvblxuICB2YXIgZyA9IG5ldyBBcnJheSgpLCBuID0gMywgazEgPSBrLTEsIGttID0gKDE8PGspLTE7XG4gIGdbMV0gPSB6LmNvbnZlcnQodGhpcyk7XG4gIGlmKGsgPiAxKSB7XG4gICAgdmFyIGcyID0gbmJpKCk7XG4gICAgei5zcXJUbyhnWzFdLGcyKTtcbiAgICB3aGlsZShuIDw9IGttKSB7XG4gICAgICBnW25dID0gbmJpKCk7XG4gICAgICB6Lm11bFRvKGcyLGdbbi0yXSxnW25dKTtcbiAgICAgIG4gKz0gMjtcbiAgICB9XG4gIH1cblxuICB2YXIgaiA9IGUudC0xLCB3LCBpczEgPSB0cnVlLCByMiA9IG5iaSgpLCB0O1xuICBpID0gbmJpdHMoZVtqXSktMTtcbiAgd2hpbGUoaiA+PSAwKSB7XG4gICAgaWYoaSA+PSBrMSkgdyA9IChlW2pdPj4oaS1rMSkpJmttO1xuICAgIGVsc2Uge1xuICAgICAgdyA9IChlW2pdJigoMTw8KGkrMSkpLTEpKTw8KGsxLWkpO1xuICAgICAgaWYoaiA+IDApIHcgfD0gZVtqLTFdPj4odGhpcy5EQitpLWsxKTtcbiAgICB9XG5cbiAgICBuID0gaztcbiAgICB3aGlsZSgodyYxKSA9PSAwKSB7IHcgPj49IDE7IC0tbjsgfVxuICAgIGlmKChpIC09IG4pIDwgMCkgeyBpICs9IHRoaXMuREI7IC0tajsgfVxuICAgIGlmKGlzMSkgeyAgLy8gcmV0ID09IDEsIGRvbid0IGJvdGhlciBzcXVhcmluZyBvciBtdWx0aXBseWluZyBpdFxuICAgICAgZ1t3XS5jb3B5VG8ocik7XG4gICAgICBpczEgPSBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB3aGlsZShuID4gMSkgeyB6LnNxclRvKHIscjIpOyB6LnNxclRvKHIyLHIpOyBuIC09IDI7IH1cbiAgICAgIGlmKG4gPiAwKSB6LnNxclRvKHIscjIpOyBlbHNlIHsgdCA9IHI7IHIgPSByMjsgcjIgPSB0OyB9XG4gICAgICB6Lm11bFRvKHIyLGdbd10scik7XG4gICAgfVxuXG4gICAgd2hpbGUoaiA+PSAwICYmIChlW2pdJigxPDxpKSkgPT0gMCkge1xuICAgICAgei5zcXJUbyhyLHIyKTsgdCA9IHI7IHIgPSByMjsgcjIgPSB0O1xuICAgICAgaWYoLS1pIDwgMCkgeyBpID0gdGhpcy5EQi0xOyAtLWo7IH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xufVxuXG4vLyAocHVibGljKSBnY2QodGhpcyxhKSAoSEFDIDE0LjU0KVxuZnVuY3Rpb24gYm5HQ0QoYSkge1xuICB2YXIgeCA9ICh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzLmNsb25lKCk7XG4gIHZhciB5ID0gKGEuczwwKT9hLm5lZ2F0ZSgpOmEuY2xvbmUoKTtcbiAgaWYoeC5jb21wYXJlVG8oeSkgPCAwKSB7IHZhciB0ID0geDsgeCA9IHk7IHkgPSB0OyB9XG4gIHZhciBpID0geC5nZXRMb3dlc3RTZXRCaXQoKSwgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gIGlmKGcgPCAwKSByZXR1cm4geDtcbiAgaWYoaSA8IGcpIGcgPSBpO1xuICBpZihnID4gMCkge1xuICAgIHguclNoaWZ0VG8oZyx4KTtcbiAgICB5LnJTaGlmdFRvKGcseSk7XG4gIH1cbiAgd2hpbGUoeC5zaWdudW0oKSA+IDApIHtcbiAgICBpZigoaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkgeC5yU2hpZnRUbyhpLHgpO1xuICAgIGlmKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGkseSk7XG4gICAgaWYoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgeC5zdWJUbyh5LHgpO1xuICAgICAgeC5yU2hpZnRUbygxLHgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHkuc3ViVG8oeCx5KTtcbiAgICAgIHkuclNoaWZ0VG8oMSx5KTtcbiAgICB9XG4gIH1cbiAgaWYoZyA+IDApIHkubFNoaWZ0VG8oZyx5KTtcbiAgcmV0dXJuIHk7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgJSBuLCBuIDwgMl4yNlxuZnVuY3Rpb24gYm5wTW9kSW50KG4pIHtcbiAgaWYobiA8PSAwKSByZXR1cm4gMDtcbiAgdmFyIGQgPSB0aGlzLkRWJW4sIHIgPSAodGhpcy5zPDApP24tMTowO1xuICBpZih0aGlzLnQgPiAwKVxuICAgIGlmKGQgPT0gMCkgciA9IHRoaXNbMF0lbjtcbiAgICBlbHNlIGZvcih2YXIgaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgciA9IChkKnIrdGhpc1tpXSklbjtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbmZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gIHZhciBhYyA9IG0uaXNFdmVuKCk7XG4gIGlmKCh0aGlzLmlzRXZlbigpICYmIGFjKSB8fCBtLnNpZ251bSgpID09IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gIHZhciB1ID0gbS5jbG9uZSgpLCB2ID0gdGhpcy5jbG9uZSgpO1xuICB2YXIgYSA9IG5idigxKSwgYiA9IG5idigwKSwgYyA9IG5idigwKSwgZCA9IG5idigxKTtcbiAgd2hpbGUodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgd2hpbGUodS5pc0V2ZW4oKSkge1xuICAgICAgdS5yU2hpZnRUbygxLHUpO1xuICAgICAgaWYoYWMpIHtcbiAgICAgICAgaWYoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpIHsgYS5hZGRUbyh0aGlzLGEpOyBiLnN1YlRvKG0sYik7IH1cbiAgICAgICAgYS5yU2hpZnRUbygxLGEpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZighYi5pc0V2ZW4oKSkgYi5zdWJUbyhtLGIpO1xuICAgICAgYi5yU2hpZnRUbygxLGIpO1xuICAgIH1cbiAgICB3aGlsZSh2LmlzRXZlbigpKSB7XG4gICAgICB2LnJTaGlmdFRvKDEsdik7XG4gICAgICBpZihhYykge1xuICAgICAgICBpZighYy5pc0V2ZW4oKSB8fCAhZC5pc0V2ZW4oKSkgeyBjLmFkZFRvKHRoaXMsYyk7IGQuc3ViVG8obSxkKTsgfVxuICAgICAgICBjLnJTaGlmdFRvKDEsYyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sZCk7XG4gICAgICBkLnJTaGlmdFRvKDEsZCk7XG4gICAgfVxuICAgIGlmKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgIHUuc3ViVG8odix1KTtcbiAgICAgIGlmKGFjKSBhLnN1YlRvKGMsYSk7XG4gICAgICBiLnN1YlRvKGQsYik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdi5zdWJUbyh1LHYpO1xuICAgICAgaWYoYWMpIGMuc3ViVG8oYSxjKTtcbiAgICAgIGQuc3ViVG8oYixkKTtcbiAgICB9XG4gIH1cbiAgaWYodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gIGlmKGQuY29tcGFyZVRvKG0pID49IDApIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuICBpZihkLnNpZ251bSgpIDwgMCkgZC5hZGRUbyhtLGQpOyBlbHNlIHJldHVybiBkO1xuICBpZihkLnNpZ251bSgpIDwgMCkgcmV0dXJuIGQuYWRkKG0pOyBlbHNlIHJldHVybiBkO1xufVxuXG52YXIgbG93cHJpbWVzID0gWzIsMyw1LDcsMTEsMTMsMTcsMTksMjMsMjksMzEsMzcsNDEsNDMsNDcsNTMsNTksNjEsNjcsNzEsNzMsNzksODMsODksOTcsMTAxLDEwMywxMDcsMTA5LDExMywxMjcsMTMxLDEzNywxMzksMTQ5LDE1MSwxNTcsMTYzLDE2NywxNzMsMTc5LDE4MSwxOTEsMTkzLDE5NywxOTksMjExLDIyMywyMjcsMjI5LDIzMywyMzksMjQxLDI1MSwyNTcsMjYzLDI2OSwyNzEsMjc3LDI4MSwyODMsMjkzLDMwNywzMTEsMzEzLDMxNywzMzEsMzM3LDM0NywzNDksMzUzLDM1OSwzNjcsMzczLDM3OSwzODMsMzg5LDM5Nyw0MDEsNDA5LDQxOSw0MjEsNDMxLDQzMyw0MzksNDQzLDQ0OSw0NTcsNDYxLDQ2Myw0NjcsNDc5LDQ4Nyw0OTEsNDk5LDUwMyw1MDksNTIxLDUyMyw1NDEsNTQ3LDU1Nyw1NjMsNTY5LDU3MSw1NzcsNTg3LDU5Myw1OTksNjAxLDYwNyw2MTMsNjE3LDYxOSw2MzEsNjQxLDY0Myw2NDcsNjUzLDY1OSw2NjEsNjczLDY3Nyw2ODMsNjkxLDcwMSw3MDksNzE5LDcyNyw3MzMsNzM5LDc0Myw3NTEsNzU3LDc2MSw3NjksNzczLDc4Nyw3OTcsODA5LDgxMSw4MjEsODIzLDgyNyw4MjksODM5LDg1Myw4NTcsODU5LDg2Myw4NzcsODgxLDg4Myw4ODcsOTA3LDkxMSw5MTksOTI5LDkzNyw5NDEsOTQ3LDk1Myw5NjcsOTcxLDk3Nyw5ODMsOTkxLDk5N107XG52YXIgbHBsaW0gPSAoMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO1xuXG4vLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbmZ1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKHQpIHtcbiAgdmFyIGksIHggPSB0aGlzLmFicygpO1xuICBpZih4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKSB7XG4gICAgZm9yKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKVxuICAgICAgaWYoeFswXSA9PSBsb3dwcmltZXNbaV0pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZih4LmlzRXZlbigpKSByZXR1cm4gZmFsc2U7XG4gIGkgPSAxO1xuICB3aGlsZShpIDwgbG93cHJpbWVzLmxlbmd0aCkge1xuICAgIHZhciBtID0gbG93cHJpbWVzW2ldLCBqID0gaSsxO1xuICAgIHdoaWxlKGogPCBsb3dwcmltZXMubGVuZ3RoICYmIG0gPCBscGxpbSkgbSAqPSBsb3dwcmltZXNbaisrXTtcbiAgICBtID0geC5tb2RJbnQobSk7XG4gICAgd2hpbGUoaSA8IGopIGlmKG0lbG93cHJpbWVzW2krK10gPT0gMCkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB4Lm1pbGxlclJhYmluKHQpO1xufVxuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuZnVuY3Rpb24gYm5wTWlsbGVyUmFiaW4odCkge1xuICB2YXIgbjEgPSB0aGlzLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgdmFyIGsgPSBuMS5nZXRMb3dlc3RTZXRCaXQoKTtcbiAgaWYoayA8PSAwKSByZXR1cm4gZmFsc2U7XG4gIHZhciByID0gbjEuc2hpZnRSaWdodChrKTtcbiAgdCA9ICh0KzEpPj4xO1xuICBpZih0ID4gbG93cHJpbWVzLmxlbmd0aCkgdCA9IGxvd3ByaW1lcy5sZW5ndGg7XG4gIHZhciBhID0gbmJpKCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0OyArK2kpIHtcbiAgICAvL1BpY2sgYmFzZXMgYXQgcmFuZG9tLCBpbnN0ZWFkIG9mIHN0YXJ0aW5nIGF0IDJcbiAgICBhLmZyb21JbnQobG93cHJpbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsb3dwcmltZXMubGVuZ3RoKV0pO1xuICAgIHZhciB5ID0gYS5tb2RQb3cocix0aGlzKTtcbiAgICBpZih5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMCkge1xuICAgICAgdmFyIGogPSAxO1xuICAgICAgd2hpbGUoaisrIDwgayAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMCkge1xuICAgICAgICB5ID0geS5tb2RQb3dJbnQoMix0aGlzKTtcbiAgICAgICAgaWYoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmKHkuY29tcGFyZVRvKG4xKSAhPSAwKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBwcm90ZWN0ZWRcbkJpZ0ludGVnZXIucHJvdG90eXBlLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvUmFkaXggPSBibnBUb1JhZGl4O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4ID0gYm5wRnJvbVJhZGl4O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXI7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXR3aXNlVG8gPSBibnBCaXR3aXNlVG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQgPSBibnBDaGFuZ2VCaXQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbyA9IGJucEFkZFRvO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gYm5wRE11bHRpcGx5O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldCA9IGJucERBZGRPZmZzZXQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG8gPSBibnBNdWx0aXBseVVwcGVyVG87XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQgPSBibnBNb2RJbnQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluO1xuXG4vLyBwdWJsaWNcbkJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gYm5DbG9uZTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmludFZhbHVlID0gYm5JbnRWYWx1ZTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZSA9IGJuU2hvcnRWYWx1ZTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnNpZ251bSA9IGJuU2lnTnVtO1xuQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzID0gYm5FcXVhbHM7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5taW4gPSBibk1pbjtcbkJpZ0ludGVnZXIucHJvdG90eXBlLm1heCA9IGJuTWF4O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kID0gYm5BbmQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5vciA9IGJuT3I7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS54b3IgPSBiblhvcjtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdCA9IGJuQW5kTm90O1xuQmlnSW50ZWdlci5wcm90b3R5cGUubm90ID0gYm5Ob3Q7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBiblNoaWZ0UmlnaHQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5nZXRMb3dlc3RTZXRCaXQgPSBibkdldExvd2VzdFNldEJpdDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQgPSBiblRlc3RCaXQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5zZXRCaXQgPSBiblNldEJpdDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQgPSBibkZsaXBCaXQ7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGQgPSBibkFkZDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdDtcbkJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gYm5NdWx0aXBseTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZSA9IGJuRGl2aWRlO1xuQmlnSW50ZWdlci5wcm90b3R5cGUucmVtYWluZGVyID0gYm5SZW1haW5kZXI7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXIgPSBibkRpdmlkZUFuZFJlbWFpbmRlcjtcbkJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvdyA9IGJuTW9kUG93O1xuQmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGJuUG93O1xuQmlnSW50ZWdlci5wcm90b3R5cGUuZ2NkID0gYm5HQ0Q7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcblxuLy8gSlNCTi1zcGVjaWZpYyBleHRlbnNpb25cbkJpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGJuU3F1YXJlO1xuXG4vLyBFeHBvc2UgdGhlIEJhcnJldHQgZnVuY3Rpb25cbkJpZ0ludGVnZXIucHJvdG90eXBlLkJhcnJldHQgPSBCYXJyZXR0XG5cbi8vIEJpZ0ludGVnZXIgaW50ZXJmYWNlcyBub3QgaW1wbGVtZW50ZWQgaW4ganNibjpcblxuLy8gQmlnSW50ZWdlcihpbnQgc2lnbnVtLCBieXRlW10gbWFnbml0dWRlKVxuLy8gZG91YmxlIGRvdWJsZVZhbHVlKClcbi8vIGZsb2F0IGZsb2F0VmFsdWUoKVxuLy8gaW50IGhhc2hDb2RlKClcbi8vIGxvbmcgbG9uZ1ZhbHVlKClcbi8vIHN0YXRpYyBCaWdJbnRlZ2VyIHZhbHVlT2YobG9uZyB2YWwpXG5cbm1vZHVsZS5leHBvcnRzID0gQmlnSW50ZWdlcjtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuXG5mdW5jdGlvbiBhc3NlcnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSlcbiAgICB0aHJvdyBuZXcgRVJSX0lOVEVSTkFMX0FTU0VSVElPTihtZXNzYWdlKTtcbn1cbmFzc2VydC5mYWlsID0gZnVuY3Rpb24gZmFpbChtZXNzYWdlKSB7XG4gIHRocm93IG5ldyBFUlJfSU5URVJOQUxfQVNTRVJUSU9OKG1lc3NhZ2UpO1xufTtcblxuLy8gT25seSB1c2UgdGhpcyBmb3IgaW50ZWdlcnMhIERlY2ltYWwgbnVtYmVycyBkbyBub3Qgd29yayB3aXRoIHRoaXMgZnVuY3Rpb24uXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IodmFsKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIGkgPSB2YWwubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSB2YWxbMF0gPT09ICctJyA/IDEgOiAwO1xuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMylcbiAgICByZXMgPSBgXyR7dmFsLnNsaWNlKGkgLSAzLCBpKX0ke3Jlc31gO1xuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWA7XG59XG5cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBhc3NlcnQodHlwZW9mIHRoaW5nID09PSAnc3RyaW5nJywgJ2B0aGluZ2AgaGFzIHRvIGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgIHZhciBsZW4gPSBleHBlY3RlZC5sZW5ndGg7XG4gICAgYXNzZXJ0KGxlbiA+IDAsICdBdCBsZWFzdCBvbmUgZXhwZWN0ZWQgdmFsdWUgbmVlZHMgdG8gYmUgc3BlY2lmaWVkJyk7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoKGkpID0+IFN0cmluZyhpKSk7XG4gICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgIHJldHVybiBgb25lIG9mICR7dGhpbmd9ICR7ZXhwZWN0ZWQuc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKX0sIG9yIGBcbiAgICAgICAgICAgICAgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIGBvbmUgb2YgJHt0aGluZ30gJHtleHBlY3RlZFswXX0gb3IgJHtleHBlY3RlZFsxXX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYG9mICR7dGhpbmd9ICR7ZXhwZWN0ZWRbMF19YDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGBvZiAke3RoaW5nfSAke1N0cmluZyhleHBlY3RlZCl9YDtcbiAgfVxufVxuXG5cblxuZXhwb3J0cy5FUlJfSU5URVJOQUxfQVNTRVJUSU9OID0gY2xhc3MgRVJSX0lOVEVSTkFMX0FTU0VSVElPTiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKCk7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRVJSX0lOVEVSTkFMX0FTU0VSVElPTik7XG5cbiAgICB2YXIgc3VmZml4ID0gJ1RoaXMgaXMgY2F1c2VkIGJ5IGVpdGhlciBhIGJ1ZyBpbiBzc2gyLXN0cmVhbXMgJ1xuICAgICAgICAgICAgICAgICArICdvciBpbmNvcnJlY3QgdXNhZ2Ugb2Ygc3NoMi1zdHJlYW1zIGludGVybmFscy5cXG4nXG4gICAgICAgICAgICAgICAgICsgJ1BsZWFzZSBvcGVuIGFuIGlzc3VlIHdpdGggdGhpcyBzdGFjayB0cmFjZSBhdCAnXG4gICAgICAgICAgICAgICAgICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9tc2NkZXgvc3NoMi1zdHJlYW1zL2lzc3Vlc1xcbic7XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSAobWVzc2FnZSA9PT0gdW5kZWZpbmVkID8gc3VmZml4IDogYCR7bWVzc2FnZX1cXG4ke3N1ZmZpeH1gKTtcbiAgfVxufTtcblxudmFyIE1BWF8zMkJJVF9JTlQgPSBNYXRoLnBvdygyLCAzMik7XG52YXIgTUFYXzMyQklUX0JJR0lOVCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMm4gKiogMzJuJykoKTtcbiAgfSBjYXRjaCAoZXgpIHt9XG59KSgpO1xuZXhwb3J0cy5FUlJfT1VUX09GX1JBTkdFID0gY2xhc3MgRVJSX09VVF9PRl9SQU5HRSBleHRlbmRzIFJhbmdlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzdHIsIHJhbmdlLCBpbnB1dCwgcmVwbGFjZURlZmF1bHRCb29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFUlJfT1VUX09GX1JBTkdFKTtcblxuICAgIGFzc2VydChyYW5nZSwgJ01pc3NpbmcgXCJyYW5nZVwiIGFyZ3VtZW50Jyk7XG4gICAgdmFyIG1zZyA9IChyZXBsYWNlRGVmYXVsdEJvb2xlYW5cbiAgICAgICAgICAgICAgID8gc3RyXG4gICAgICAgICAgICAgICA6IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYCk7XG4gICAgdmFyIHJlY2VpdmVkO1xuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGlucHV0KSAmJiBNYXRoLmFicyhpbnB1dCkgPiBNQVhfMzJCSVRfSU5UKSB7XG4gICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihTdHJpbmcoaW5wdXQpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgIHJlY2VpdmVkID0gU3RyaW5nKGlucHV0KTtcbiAgICAgIGlmIChpbnB1dCA+IE1BWF8zMkJJVF9CSUdJTlQgfHwgaW5wdXQgPCAtTUFYXzMyQklUX0JJR0lOVClcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpO1xuICAgICAgcmVjZWl2ZWQgKz0gJ24nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWNlaXZlZCA9IGluc3BlY3QoaW5wdXQpO1xuICAgIH1cbiAgICBtc2cgKz0gYCBJdCBtdXN0IGJlICR7cmFuZ2V9LiBSZWNlaXZlZCAke3JlY2VpdmVkfWA7XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gIH1cbn07XG5cbmV4cG9ydHMuRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBjbGFzcyBFUlJfSU5WQUxJRF9BUkdfVFlQRSBleHRlbmRzIFR5cGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgICBzdXBlcigpO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEVSUl9JTlZBTElEX0FSR19UWVBFKTtcblxuICAgIGFzc2VydCh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycsIGAnbmFtZScgbXVzdCBiZSBhIHN0cmluZ2ApO1xuXG4gICAgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcbiAgICB2YXIgZGV0ZXJtaW5lcjtcbiAgICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBleHBlY3RlZC5zdGFydHNXaXRoKCdub3QgJykpIHtcbiAgICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcbiAgICB9XG5cbiAgICB2YXIgbXNnO1xuICAgIGlmIChuYW1lLmVuZHNXaXRoKCcgYXJndW1lbnQnKSkge1xuICAgICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgICAgbXNnID0gYFRoZSAke25hbWV9ICR7ZGV0ZXJtaW5lcn0gJHtvbmVPZihleHBlY3RlZCwgJ3R5cGUnKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdHlwZSA9IChuYW1lLmluY2x1ZGVzKCcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50Jyk7XG4gICAgICBtc2cgPSBgVGhlIFwiJHtuYW1lfVwiICR7dHlwZX0gJHtkZXRlcm1pbmVyfSAke29uZU9mKGV4cGVjdGVkLCAndHlwZScpfWA7XG4gICAgfVxuXG4gICAgbXNnICs9IGAuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWA7XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gIH1cbn07XG5cbmV4cG9ydHMudmFsaWRhdGVOdW1iZXIgPSBmdW5jdGlvbiB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKTtcbn07XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvbGxvd2luZyBjb2RlIGlzIG9ubHkgbmVlZGVkIHRvIHN1cHBvcnQgbm9kZSB2Ni54IC4uLi5cblxuLy8gVW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZXhwb3J0cy5kZXN0cm95SW1wbCA9IGZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICBjb25zdCByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiZcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgY29uc3Qgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIFdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIElmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCAoZXJyKSA9PiB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIHRoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIHRoaXMpO1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgdGhpcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKSB7XG4gIGVtaXRFcnJvck5UKHNlbGYsIGVycik7XG4gIGVtaXRDbG9zZU5UKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XG4gIGlmIChzZWxmLl93cml0YWJsZVN0YXRlICYmICFzZWxmLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZSlcbiAgICByZXR1cm47XG4gIGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlICYmICFzZWxmLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZSlcbiAgICByZXR1cm47XG4gIHNlbGYuZW1pdCgnY2xvc2UnKTtcbn1cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4iLCIvLyBUT0RPOiAqIEF1dG9tYXRpYyByZS1rZXkgZXZlcnkgKGNvbmZpZ3VyYWJsZSkgbiBieXRlcyBvciBsZW5ndGggb2YgdGltZVxuLy8gICAgICAgICAtIFJGQyBzdWdnZXN0cyBldmVyeSAxR0Igb2YgdHJhbnNtaXR0ZWQgZGF0YSBvciAxIGhvdXIsIHdoaWNoZXZlclxuLy8gICAgICAgICAgIGNvbWVzIHNvb25lclxuLy8gICAgICAgKiBGaWx0ZXIgY29udHJvbCBjb2RlcyBmcm9tIHN0cmluZ3Ncbi8vICAgICAgICAgKGFzIHBlciBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MjUxI3NlY3Rpb24tOS4yKVxuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbnZhciBUcmFuc2Zvcm1TdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm07XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuXG52YXIgU3RyZWFtU2VhcmNoID0gcmVxdWlyZSgnc3RyZWFtc2VhcmNoJyk7XG52YXIgQmVyID0gcmVxdWlyZSgnYXNuMScpLkJlcjtcblxudmFyIHJlYWRVSW50MzJCRSA9IHJlcXVpcmUoJy4vYnVmZmVyLWhlbHBlcnMnKS5yZWFkVUludDMyQkU7XG52YXIgd3JpdGVVSW50MzJCRSA9IHJlcXVpcmUoJy4vYnVmZmVyLWhlbHBlcnMnKS53cml0ZVVJbnQzMkJFO1xudmFyIGNvbnN0cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgaXZfaW5jID0gdXRpbHMuaXZfaW5jO1xudmFyIHJlYWRTdHJpbmcgPSB1dGlscy5yZWFkU3RyaW5nO1xudmFyIHJlYWRJbnQgPSB1dGlscy5yZWFkSW50O1xudmFyIERTQVNpZ0JFUlRvQmFyZSA9IHV0aWxzLkRTQVNpZ0JFUlRvQmFyZTtcbnZhciBFQ0RTQVNpZ0FTTjFUb1NTSCA9IHV0aWxzLkVDRFNBU2lnQVNOMVRvU1NIO1xudmFyIHNpZ1NTSFRvQVNOMSA9IHV0aWxzLnNpZ1NTSFRvQVNOMTtcbnZhciBwYXJzZURFUktleSA9IHJlcXVpcmUoJy4va2V5UGFyc2VyJykucGFyc2VERVJLZXk7XG5cbnZhciBDSVBIRVJfSU5GTyA9IGNvbnN0cy5DSVBIRVJfSU5GTztcbnZhciBITUFDX0lORk8gPSBjb25zdHMuSE1BQ19JTkZPO1xudmFyIE1FU1NBR0UgPSBjb25zdHMuTUVTU0FHRTtcbnZhciBEWU5BTUlDX0tFWERIX01FU1NBR0UgPSBjb25zdHMuRFlOQU1JQ19LRVhESF9NRVNTQUdFO1xudmFyIEtFWERIX01FU1NBR0UgPSBjb25zdHMuS0VYREhfTUVTU0FHRTtcbnZhciBBTEdPUklUSE1TID0gY29uc3RzLkFMR09SSVRITVM7XG52YXIgRElTQ09OTkVDVF9SRUFTT04gPSBjb25zdHMuRElTQ09OTkVDVF9SRUFTT047XG52YXIgQ0hBTk5FTF9PUEVOX0ZBSUxVUkUgPSBjb25zdHMuQ0hBTk5FTF9PUEVOX0ZBSUxVUkU7XG52YXIgU1NIX1RPX09QRU5TU0wgPSBjb25zdHMuU1NIX1RPX09QRU5TU0w7XG52YXIgVEVSTUlOQUxfTU9ERSA9IGNvbnN0cy5URVJNSU5BTF9NT0RFO1xudmFyIFNJR05BTFMgPSBjb25zdHMuU0lHTkFMUztcbnZhciBFRERTQV9TVVBQT1JURUQgPSBjb25zdHMuRUREU0FfU1VQUE9SVEVEO1xudmFyIENVUlZFMjU1MTlfU1VQUE9SVEVEID0gY29uc3RzLkNVUlZFMjU1MTlfU1VQUE9SVEVEO1xudmFyIEJVR1MgPSBjb25zdHMuQlVHUztcbnZhciBCVUdHWV9JTVBMUyA9IGNvbnN0cy5CVUdHWV9JTVBMUztcbnZhciBCVUdHWV9JTVBMU19MRU4gPSBCVUdHWV9JTVBMUy5sZW5ndGg7XG52YXIgTU9EVUxFX1ZFUiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG52YXIgSSA9IDA7XG52YXIgSU5fSU5JVCA9IEkrKztcbnZhciBJTl9HUkVFVElORyA9IEkrKztcbnZhciBJTl9IRUFERVIgPSBJKys7XG52YXIgSU5fUEFDS0VUQkVGT1JFID0gSSsrO1xudmFyIElOX1BBQ0tFVCA9IEkrKztcbnZhciBJTl9QQUNLRVREQVRBID0gSSsrO1xudmFyIElOX1BBQ0tFVERBVEFWRVJJRlkgPSBJKys7XG52YXIgSU5fUEFDS0VUREFUQUFGVEVSID0gSSsrO1xudmFyIE9VVF9JTklUID0gSSsrO1xudmFyIE9VVF9SRUFEWSA9IEkrKztcbnZhciBPVVRfUkVLRVlJTkcgPSBJKys7XG52YXIgTUFYX1NFUU5PID0gNDI5NDk2NzI5NTtcbnZhciBNQVhfUEFDS0VUX1NJWkUgPSAzNTAwMDtcbnZhciBNQVhfUEFDS0VUU19SRUtFWUlORyA9IDUwO1xudmFyIEVYUF9UWVBFX0hFQURFUiA9IDA7XG52YXIgRVhQX1RZUEVfTEYgPSAxO1xudmFyIEVYUF9UWVBFX0JZVEVTID0gMjsgLy8gV2FpdHMgdW50aWwgbiBieXRlcyBoYXZlIGJlZW4gc2VlblxudmFyIFpfUEFSVElBTF9GTFVTSCA9IHpsaWIuWl9QQVJUSUFMX0ZMVVNIO1xudmFyIFpMSUJfT1BUUyA9IHsgZmx1c2g6IFpfUEFSVElBTF9GTFVTSCB9O1xuXG52YXIgUkVfTlVMTCA9IC9cXHgwMC9nO1xuXG52YXIgSURFTlRfUFJFRklYX0JVRkZFUiA9IEJ1ZmZlci5mcm9tKCdTU0gtJyk7XG52YXIgRU1QVFlfQlVGRkVSID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApO1xudmFyIEhNQUNfQ09NUFVURSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg5KTtcbnZhciBQSU5HX1BBQ0tFVCA9IEJ1ZmZlci5mcm9tKFtcbiAgTUVTU0FHRS5HTE9CQUxfUkVRVUVTVCxcbiAgLy8gXCJrZWVwYWxpdmVAb3BlbnNzaC5jb21cIlxuICAwLCAwLCAwLCAyMSxcbiAgICAxMDcsIDEwMSwgMTAxLCAxMTIsIDk3LCAxMDgsIDEwNSwgMTE4LCAxMDEsIDY0LCAxMTEsIDExMiwgMTAxLCAxMTAsIDExNSxcbiAgICAxMTUsIDEwNCwgNDYsIDk5LCAxMTEsIDEwOSxcbiAgLy8gUmVxdWVzdCBhIHJlcGx5XG4gIDFcbl0pO1xudmFyIE5FV0tFWVNfUEFDS0VUID0gQnVmZmVyLmZyb20oW01FU1NBR0UuTkVXS0VZU10pO1xudmFyIFVTRVJBVVRIX1NVQ0NFU1NfUEFDS0VUID0gQnVmZmVyLmZyb20oW01FU1NBR0UuVVNFUkFVVEhfU1VDQ0VTU10pO1xudmFyIFJFUVVFU1RfU1VDQ0VTU19QQUNLRVQgPSBCdWZmZXIuZnJvbShbTUVTU0FHRS5SRVFVRVNUX1NVQ0NFU1NdKTtcbnZhciBSRVFVRVNUX0ZBSUxVUkVfUEFDS0VUID0gQnVmZmVyLmZyb20oW01FU1NBR0UuUkVRVUVTVF9GQUlMVVJFXSk7XG52YXIgTk9fVEVSTUlOQUxfTU9ERVNfQlVGRkVSID0gQnVmZmVyLmZyb20oW1RFUk1JTkFMX01PREUuVFRZX09QX0VORF0pO1xudmFyIEtFWERIX0dFWF9SRVFfUEFDS0VUID0gQnVmZmVyLmZyb20oW1xuICBNRVNTQUdFLktFWERIX0dFWF9SRVFVRVNULFxuICAvLyBNaW5pbWFsIHNpemUgaW4gYml0cyBvZiBhbiBhY2NlcHRhYmxlIGdyb3VwXG4gIDAsIDAsIDQsIDAsIC8vIDEwMjQsIG1vZHAyXG4gIC8vIFByZWZlcnJlZCBzaXplIGluIGJpdHMgb2YgdGhlIGdyb3VwIHRoZSBzZXJ2ZXIgd2lsbCBzZW5kXG4gIDAsIDAsIDE2LCAwLCAvLyA0MDk2LCBtb2RwMTZcbiAgLy8gTWF4aW1hbCBzaXplIGluIGJpdHMgb2YgYW4gYWNjZXB0YWJsZSBncm91cFxuICAwLCAwLCAzMiwgMCAvLyA4MTkyLCBtb2RwMThcbl0pO1xuXG5mdW5jdGlvbiBERUJVR19OT09QKG1zZykge31cblxuZnVuY3Rpb24gU1NIMlN0cmVhbShjZmcpIHtcbiAgaWYgKHR5cGVvZiBjZmcgIT09ICdvYmplY3QnIHx8IGNmZyA9PT0gbnVsbClcbiAgICBjZmcgPSB7fTtcblxuICBUcmFuc2Zvcm1TdHJlYW0uY2FsbCh0aGlzLCB7XG4gICAgaGlnaFdhdGVyTWFyazogKHR5cGVvZiBjZmcuaGlnaFdhdGVyTWFyayA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBjZmcuaGlnaFdhdGVyTWFya1xuICAgICAgICAgICAgICAgICAgICA6IDMyICogMTAyNClcbiAgfSk7XG5cbiAgdGhpcy5fbmVlZENvbnRpbnVlID0gZmFsc2U7XG4gIHRoaXMuYnl0ZXNTZW50ID0gdGhpcy5ieXRlc1JlY2VpdmVkID0gMDtcbiAgdGhpcy5kZWJ1ZyA9ICh0eXBlb2YgY2ZnLmRlYnVnID09PSAnZnVuY3Rpb24nID8gY2ZnLmRlYnVnIDogREVCVUdfTk9PUCk7XG4gIHRoaXMuc2VydmVyID0gKGNmZy5zZXJ2ZXIgPT09IHRydWUpO1xuICB0aGlzLm1heFBhY2tldFNpemUgPSAodHlwZW9mIGNmZy5tYXhQYWNrZXRTaXplID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBjZmcubWF4UGFja2V0U2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBNQVhfUEFDS0VUX1NJWkUpO1xuICAvLyBCaXRtYXAgdGhhdCBpbmRpY2F0ZXMgYW55IGJ1Z3MgdGhlIHJlbW90ZSBzaWRlIGhhcy4gVGhpcyBpcyBkZXRlcm1pbmVkXG4gIC8vIGJ5IHRoZSByZXBvcnRlZCBzb2Z0d2FyZSB2ZXJzaW9uLlxuICB0aGlzLnJlbW90ZUJ1Z3MgPSAwO1xuXG4gIGlmICh0aGlzLnNlcnZlcikge1xuICAgIC8vIFRPRE86IFJlbW92ZSB3aGVuIHdlIHN1cHBvcnQgZ3JvdXAgZXhjaGFuZ2UgZm9yIHNlcnZlciBpbXBsZW1lbnRhdGlvblxuICAgIHRoaXMucmVtb3RlQnVncyA9IEJVR1MuQkFEX0RIR0VYO1xuICB9XG5cbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBob3N0S2V5cyA9IGNmZy5ob3N0S2V5cztcbiAgaWYgKHRoaXMuc2VydmVyICYmICh0eXBlb2YgaG9zdEtleXMgIT09ICdvYmplY3QnIHx8IGhvc3RLZXlzID09PSBudWxsKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2hvc3RLZXlzIG11c3QgYmUgYW4gb2JqZWN0IGtleWVkIG9uIGhvc3Qga2V5IHR5cGUnKTtcblxuICB0aGlzLmNvbmZpZyA9IHtcbiAgICAvLyBTZXJ2ZXJcbiAgICBob3N0S2V5czogaG9zdEtleXMsIC8vIEFsbCBrZXlzIHN1cHBvcnRlZCBieSBzZXJ2ZXJcblxuICAgIC8vIENsaWVudC9TZXJ2ZXJcbiAgICBpZGVudDogJ1NTSC0yLjAtJ1xuICAgICAgICAgICArIChjZmcuaWRlbnRcbiAgICAgICAgICAgICAgfHwgKCdzc2gyanMnICsgTU9EVUxFX1ZFUiArICh0aGlzLnNlcnZlciA/ICdzcnYnIDogJycpKSksXG4gICAgYWxnb3JpdGhtczoge1xuICAgICAga2V4OiBBTEdPUklUSE1TLktFWCxcbiAgICAgIGtleEJ1ZjogQUxHT1JJVEhNUy5LRVhfQlVGLFxuICAgICAgc2VydmVySG9zdEtleTogQUxHT1JJVEhNUy5TRVJWRVJfSE9TVF9LRVksXG4gICAgICBzZXJ2ZXJIb3N0S2V5QnVmOiBBTEdPUklUSE1TLlNFUlZFUl9IT1NUX0tFWV9CVUYsXG4gICAgICBjaXBoZXI6IEFMR09SSVRITVMuQ0lQSEVSLFxuICAgICAgY2lwaGVyQnVmOiBBTEdPUklUSE1TLkNJUEhFUl9CVUYsXG4gICAgICBobWFjOiBBTEdPUklUSE1TLkhNQUMsXG4gICAgICBobWFjQnVmOiBBTEdPUklUSE1TLkhNQUNfQlVGLFxuICAgICAgY29tcHJlc3M6IEFMR09SSVRITVMuQ09NUFJFU1MsXG4gICAgICBjb21wcmVzc0J1ZjogQUxHT1JJVEhNUy5DT01QUkVTU19CVUZcbiAgICB9XG4gIH07XG4gIC8vIFJGQyA0MjUzIHN0YXRlcyB0aGUgaWRlbnRpZmljYXRpb24gc3RyaW5nIG11c3Qgbm90IGNvbnRhaW4gTlVMTFxuICB0aGlzLmNvbmZpZy5pZGVudC5yZXBsYWNlKFJFX05VTEwsICcnKTtcblxuICBpZiAodGhpcy5jb25maWcuaWRlbnQubGVuZ3RoICsgMiAvKiBBY2NvdW50IGZvciBcIlxcclxcblwiICovID4gMjU1KVxuICAgIHRocm93IG5ldyBFcnJvcignaWRlbnQgdG9vIGxvbmcnKTtcblxuICBpZiAodHlwZW9mIGNmZy5hbGdvcml0aG1zID09PSAnb2JqZWN0JyAmJiBjZmcuYWxnb3JpdGhtcyAhPT0gbnVsbCkge1xuICAgIHZhciBhbGdvcyA9IGNmZy5hbGdvcml0aG1zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFsZ29zLmtleCkgJiYgYWxnb3Mua2V4Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY29uZmlnLmFsZ29yaXRobXMua2V4ID0gYWxnb3Mua2V4O1xuICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYWxnb3Mua2V4QnVmKSlcbiAgICAgICAgYWxnb3Mua2V4QnVmID0gQnVmZmVyLmZyb20oYWxnb3Mua2V4LmpvaW4oJywnKSwgJ2FzY2lpJyk7XG4gICAgICB0aGlzLmNvbmZpZy5hbGdvcml0aG1zLmtleEJ1ZiA9IGFsZ29zLmtleEJ1ZjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb3Muc2VydmVySG9zdEtleSkgJiYgYWxnb3Muc2VydmVySG9zdEtleS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmNvbmZpZy5hbGdvcml0aG1zLnNlcnZlckhvc3RLZXkgPSBhbGdvcy5zZXJ2ZXJIb3N0S2V5O1xuICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYWxnb3Muc2VydmVySG9zdEtleUJ1ZikpIHtcbiAgICAgICAgYWxnb3Muc2VydmVySG9zdEtleUJ1ZiA9IEJ1ZmZlci5mcm9tKGFsZ29zLnNlcnZlckhvc3RLZXkuam9pbignLCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FzY2lpJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbmZpZy5hbGdvcml0aG1zLnNlcnZlckhvc3RLZXlCdWYgPSBhbGdvcy5zZXJ2ZXJIb3N0S2V5QnVmO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhbGdvcy5jaXBoZXIpICYmIGFsZ29zLmNpcGhlci5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmNvbmZpZy5hbGdvcml0aG1zLmNpcGhlciA9IGFsZ29zLmNpcGhlcjtcbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGFsZ29zLmNpcGhlckJ1ZikpXG4gICAgICAgIGFsZ29zLmNpcGhlckJ1ZiA9IEJ1ZmZlci5mcm9tKGFsZ29zLmNpcGhlci5qb2luKCcsJyksICdhc2NpaScpO1xuICAgICAgdGhpcy5jb25maWcuYWxnb3JpdGhtcy5jaXBoZXJCdWYgPSBhbGdvcy5jaXBoZXJCdWY7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGFsZ29zLmhtYWMpICYmIGFsZ29zLmhtYWMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5jb25maWcuYWxnb3JpdGhtcy5obWFjID0gYWxnb3MuaG1hYztcbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGFsZ29zLmhtYWNCdWYpKVxuICAgICAgICBhbGdvcy5obWFjQnVmID0gQnVmZmVyLmZyb20oYWxnb3MuaG1hYy5qb2luKCcsJyksICdhc2NpaScpO1xuICAgICAgdGhpcy5jb25maWcuYWxnb3JpdGhtcy5obWFjQnVmID0gYWxnb3MuaG1hY0J1ZjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb3MuY29tcHJlc3MpICYmIGFsZ29zLmNvbXByZXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY29uZmlnLmFsZ29yaXRobXMuY29tcHJlc3MgPSBhbGdvcy5jb21wcmVzcztcbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGFsZ29zLmNvbXByZXNzQnVmKSlcbiAgICAgICAgYWxnb3MuY29tcHJlc3NCdWYgPSBCdWZmZXIuZnJvbShhbGdvcy5jb21wcmVzcy5qb2luKCcsJyksICdhc2NpaScpO1xuICAgICAgdGhpcy5jb25maWcuYWxnb3JpdGhtcy5jb21wcmVzc0J1ZiA9IGFsZ29zLmNvbXByZXNzQnVmO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVzZXQodHJ1ZSk7XG5cbiAgLy8gQ29tbW9uIGV2ZW50c1xuICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBMZXQgR0MgY29sbGVjdCBhbnkgQnVmZmVycyB3ZSB3ZXJlIHByZXZpb3VzbHkgc3RvcmluZ1xuICAgIHNlbGYucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzZWxmLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBzZWxmLnJlc2V0KCk7XG4gICAgc2VsZi5fc3RhdGUub3V0Z29pbmcuYnVmU2Vxbm8gPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB0aGlzLm9uKCdESVNDT05ORUNUJywgZnVuY3Rpb24ocmVhc29uLCBjb2RlLCBkZXNjLCBsYW5nKSB7XG4gICAgb25ESVNDT05ORUNUKHNlbGYsIHJlYXNvbiwgY29kZSwgZGVzYywgbGFuZyk7XG4gIH0pO1xuICB0aGlzLm9uKCdLRVhJTklUJywgZnVuY3Rpb24oaW5pdCwgZmlyc3RGb2xsb3dzKSB7XG4gICAgb25LRVhJTklUKHNlbGYsIGluaXQsIGZpcnN0Rm9sbG93cyk7XG4gIH0pO1xuICB0aGlzLm9uKCdORVdLRVlTJywgZnVuY3Rpb24oKSB7IG9uTkVXS0VZUyhzZWxmKTsgfSk7XG5cbiAgaWYgKHRoaXMuc2VydmVyKSB7XG4gICAgLy8gU2VydmVyLXNwZWNpZmljIGV2ZW50c1xuICAgIHRoaXMub24oJ0tFWERIX0lOSVQnLCBmdW5jdGlvbihlKSB7IG9uS0VYREhfSU5JVChzZWxmLCBlKTsgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2xpZW50LXNwZWNpZmljIGV2ZW50c1xuICAgIHRoaXMub24oJ0tFWERIX1JFUExZJywgZnVuY3Rpb24oaW5mbykgeyBvbktFWERIX1JFUExZKHNlbGYsIGluZm8pOyB9KVxuICAgICAgICAub24oJ0tFWERIX0dFWF9HUk9VUCcsXG4gICAgICAgICAgICBmdW5jdGlvbihwcmltZSwgZ2VuKSB7IG9uS0VYREhfR0VYX0dST1VQKHNlbGYsIHByaW1lLCBnZW4pOyB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLnNlcnZlcikge1xuICAgIC8vIEdyZWV0aW5nIGRpc3BsYXllZCBiZWZvcmUgdGhlIHNzaCBpZGVudGlmaWNhdGlvbiBzdHJpbmcgaXMgc2VudCwgdGhpcyBpc1xuICAgIC8vIHVzdWFsbHkgaWdub3JlZCBieSBtb3N0IGNsaWVudHNcbiAgICBpZiAodHlwZW9mIGNmZy5ncmVldGluZyA9PT0gJ3N0cmluZycgJiYgY2ZnLmdyZWV0aW5nLmxlbmd0aCkge1xuICAgICAgaWYgKGNmZy5ncmVldGluZy5zbGljZSgtMikgPT09ICdcXHJcXG4nKVxuICAgICAgICB0aGlzLnB1c2goY2ZnLmdyZWV0aW5nKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5wdXNoKGNmZy5ncmVldGluZyArICdcXHJcXG4nKTtcbiAgICB9XG4gICAgLy8gQmFubmVyIHNob3duIGFmdGVyIHRoZSBoYW5kc2hha2UgY29tcGxldGVzLCBidXQgYmVmb3JlIHVzZXJcbiAgICAvLyBhdXRoZW50aWNhdGlvbiBiZWdpbnNcbiAgICBpZiAodHlwZW9mIGNmZy5iYW5uZXIgPT09ICdzdHJpbmcnICYmIGNmZy5iYW5uZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoY2ZnLmJhbm5lci5zbGljZSgtMikgPT09ICdcXHJcXG4nKVxuICAgICAgICB0aGlzLmJhbm5lciA9IGNmZy5iYW5uZXI7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuYmFubmVyID0gY2ZnLmJhbm5lciArICdcXHJcXG4nO1xuICAgIH1cbiAgfVxuICB0aGlzLmRlYnVnKCdERUJVRzogTG9jYWwgaWRlbnQ6ICcgKyBpbnNwZWN0KHRoaXMuY29uZmlnLmlkZW50KSk7XG4gIHRoaXMucHVzaCh0aGlzLmNvbmZpZy5pZGVudCArICdcXHJcXG4nKTtcblxuICB0aGlzLl9zdGF0ZS5pbmNvbWluZy5leHBlY3RlZFBhY2tldCA9ICdLRVhJTklUJztcbn1cbmluaGVyaXRzKFNTSDJTdHJlYW0sIFRyYW5zZm9ybVN0cmVhbSk7XG5cblNTSDJTdHJlYW0ucHJvdG90eXBlLl9fcmVhZCA9IFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUuX3JlYWQ7XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKHRoaXMuX25lZWRDb250aW51ZSkge1xuICAgIHRoaXMuX25lZWRDb250aW51ZSA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgnY29udGludWUnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fX3JlYWQobik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuX19wdXNoID0gVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZS5wdXNoO1xuU1NIMlN0cmVhbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgcmV0ID0gdGhpcy5fX3B1c2goY2h1bmssIGVuY29kaW5nKTtcbiAgdGhpcy5fbmVlZENvbnRpbnVlID0gKHJldCA9PT0gZmFsc2UpO1xuICByZXR1cm4gcmV0O1xufTtcblxuU1NIMlN0cmVhbS5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB0aGlzLnJlc2V0KCk7XG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IE1hbGZvcm1lZCBwYWNrZXQnKTtcbiAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IEVycm9yKCdNYWxmb3JtZWQgcGFja2V0JykpO1xufTtcblxuU1NIMlN0cmVhbS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2ssIGRlY29tcCkge1xuICB2YXIgc2tpcERlY3J5cHQgPSBmYWxzZTtcbiAgdmFyIGRlY3J5cHRBdXRoTW9kZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgdmFyIGluc3RhdGUgPSBzdGF0ZS5pbmNvbWluZztcbiAgdmFyIG91dHN0YXRlID0gc3RhdGUub3V0Z29pbmc7XG4gIHZhciBleHBlY3QgPSBpbnN0YXRlLmV4cGVjdDtcbiAgdmFyIGRlY3J5cHQgPSBpbnN0YXRlLmRlY3J5cHQ7XG4gIHZhciBkZWNvbXByZXNzID0gaW5zdGF0ZS5kZWNvbXByZXNzO1xuICB2YXIgY2hsZW4gPSBjaHVuay5sZW5ndGg7XG4gIHZhciBjaGxlZnQgPSAwO1xuICB2YXIgZGVidWcgPSB0aGlzLmRlYnVnO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpID0gMDtcbiAgdmFyIHAgPSBpO1xuICB2YXIgYmxvY2tMZW47XG4gIHZhciBidWZmZXI7XG4gIHZhciBidWY7XG4gIHZhciByO1xuXG4gIHRoaXMuYnl0ZXNSZWNlaXZlZCArPSBjaGxlbjtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChleHBlY3QudHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaSA+PSBjaGxlbilcbiAgICAgICAgYnJlYWs7XG4gICAgICBpZiAoZXhwZWN0LnR5cGUgPT09IEVYUF9UWVBFX0JZVEVTKSB7XG4gICAgICAgIGNobGVmdCA9IChjaGxlbiAtIGkpO1xuICAgICAgICB2YXIgcGt0TGVmdCA9IChleHBlY3QuYnVmLmxlbmd0aCAtIGV4cGVjdC5wdHIpO1xuICAgICAgICBpZiAocGt0TGVmdCA8PSBjaGxlZnQpIHtcbiAgICAgICAgICBjaHVuay5jb3B5KGV4cGVjdC5idWYsIGV4cGVjdC5wdHIsIGksIGkgKyBwa3RMZWZ0KTtcbiAgICAgICAgICBpICs9IHBrdExlZnQ7XG4gICAgICAgICAgYnVmZmVyID0gZXhwZWN0LmJ1ZjtcbiAgICAgICAgICBleHBlY3QuYnVmID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGV4cGVjdC5wdHIgPSAwO1xuICAgICAgICAgIGV4cGVjdC50eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNodW5rLmNvcHkoZXhwZWN0LmJ1ZiwgZXhwZWN0LnB0ciwgaSk7XG4gICAgICAgICAgZXhwZWN0LnB0ciArPSBjaGxlZnQ7XG4gICAgICAgICAgaSArPSBjaGxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdC50eXBlID09PSBFWFBfVFlQRV9IRUFERVIpIHtcbiAgICAgICAgaSArPSBpbnN0YXRlLnNlYXJjaC5wdXNoKGNodW5rKTtcbiAgICAgICAgaWYgKGV4cGVjdC50eXBlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdC50eXBlID09PSBFWFBfVFlQRV9MRikge1xuICAgICAgICBpZiAoKytleHBlY3QucHRyICsgNCAvKiBBY2NvdW50IGZvciBcIlNTSC1cIiAqLyA+IDI1NSkge1xuICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogSWRlbnRpZmljYXRpb24gc3RyaW5nIGV4Y2VlZGVkIDI1NSBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignTWF4IGlkZW50aWZpY2F0aW9uIHN0cmluZyBzaXplIGV4Y2VlZGVkJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgwQSkge1xuICAgICAgICAgIGV4cGVjdC50eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChwIDwgaSkge1xuICAgICAgICAgICAgaWYgKGV4cGVjdC5idWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgZXhwZWN0LmJ1ZiA9IGNodW5rLnRvU3RyaW5nKCdhc2NpaScsIHAsIGkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBleHBlY3QuYnVmICs9IGNodW5rLnRvU3RyaW5nKCdhc2NpaScsIHAsIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSBleHBlY3QuYnVmO1xuICAgICAgICAgIGV4cGVjdC5idWYgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgKytpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgrK2kgPT09IGNobGVuICYmIHAgPCBpKSB7XG4gICAgICAgICAgICBpZiAoZXhwZWN0LmJ1ZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICBleHBlY3QuYnVmID0gY2h1bmsudG9TdHJpbmcoJ2FzY2lpJywgcCwgaSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGV4cGVjdC5idWYgKz0gY2h1bmsudG9TdHJpbmcoJ2FzY2lpJywgcCwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluc3RhdGUuc3RhdHVzID09PSBJTl9JTklUKSB7XG4gICAgICBpZiAoIXRoaXMucmVhZGFibGUpXG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgaWYgKHRoaXMuc2VydmVyKSB7XG4gICAgICAgIC8vIFJldHJpZXZlIHdoYXQgc2hvdWxkIGJlIHRoZSBzdGFydCBvZiB0aGUgcHJvdG9jb2wgdmVyc2lvbiBleGNoYW5nZVxuICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgIGRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9JTklUICh3YWl0aW5nIGZvciBpZGVudGlmaWNhdGlvbiBiZWdpbiknKTtcbiAgICAgICAgICBleHBlY3REYXRhKHRoaXMsIEVYUF9UWVBFX0JZVEVTLCA0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYnVmZmVyWzBdID09PSAweDUzICAgICAgIC8vIFNcbiAgICAgICAgICAgICAgJiYgYnVmZmVyWzFdID09PSAweDUzICAgIC8vIFNcbiAgICAgICAgICAgICAgJiYgYnVmZmVyWzJdID09PSAweDQ4ICAgIC8vIEhcbiAgICAgICAgICAgICAgJiYgYnVmZmVyWzNdID09PSAweDJEKSB7IC8vIC1cbiAgICAgICAgICAgIGluc3RhdGUuc3RhdHVzID0gSU5fR1JFRVRJTkc7XG4gICAgICAgICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fSU5JVCAod2FpdGluZyBmb3IgcmVzdCBvZiBpZGVudGlmaWNhdGlvbiknKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IEJhZCBpZGVudGlmaWNhdGlvbiBzdGFydCcpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignQmFkIGlkZW50aWZpY2F0aW9uIHN0YXJ0JykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX0lOSVQnKTtcbiAgICAgICAgLy8gUmV0cmlldmUgYW55IGJ5dGVzIHRoYXQgbWF5IGNvbWUgYmVmb3JlIHRoZSBwcm90b2NvbCB2ZXJzaW9uIGV4Y2hhbmdlXG4gICAgICAgIHZhciBzcyA9IGluc3RhdGUuc2VhcmNoID0gbmV3IFN0cmVhbVNlYXJjaChJREVOVF9QUkVGSVhfQlVGRkVSKTtcbiAgICAgICAgc3Mub24oJ2luZm8nLCBmdW5jdGlvbiBvbkluZm8obWF0Y2hlZCwgZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGF0ZS5ncmVldGluZyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICBpbnN0YXRlLmdyZWV0aW5nID0gZGF0YS50b1N0cmluZygnYmluYXJ5Jywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGluc3RhdGUuZ3JlZXRpbmcgKz0gZGF0YS50b1N0cmluZygnYmluYXJ5Jywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICBleHBlY3QudHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGluc3RhdGUuc2VhcmNoLnJlbW92ZUxpc3RlbmVyKCdpbmZvJywgb25JbmZvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzcy5tYXhNYXRjaGVzID0gMTtcbiAgICAgICAgZXhwZWN0RGF0YSh0aGlzLCBFWFBfVFlQRV9IRUFERVIpO1xuICAgICAgICBpbnN0YXRlLnN0YXR1cyA9IElOX0dSRUVUSU5HO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5zdGF0ZS5zdGF0dXMgPT09IElOX0dSRUVUSU5HKSB7XG4gICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fR1JFRVRJTkcnKTtcbiAgICAgIGluc3RhdGUuc2VhcmNoID0gdW5kZWZpbmVkO1xuICAgICAgLy8gUmV0cmlldmUgdGhlIGlkZW50aWZpY2F0aW9uIGJ5dGVzIGFmdGVyIHRoZSBcIlNTSC1cIiBoZWFkZXJcbiAgICAgIHAgPSBpO1xuICAgICAgZXhwZWN0RGF0YSh0aGlzLCBFWFBfVFlQRV9MRik7XG4gICAgICBpbnN0YXRlLnN0YXR1cyA9IElOX0hFQURFUjtcbiAgICB9IGVsc2UgaWYgKGluc3RhdGUuc3RhdHVzID09PSBJTl9IRUFERVIpIHtcbiAgICAgIGRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9IRUFERVInKTtcbiAgICAgIGlmIChidWZmZXIuY2hhckNvZGVBdChidWZmZXIubGVuZ3RoIC0gMSkgPT09IDEzKVxuICAgICAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoMCwgLTEpO1xuICAgICAgdmFyIGlkeERhc2ggPSBidWZmZXIuaW5kZXhPZignLScpO1xuICAgICAgdmFyIGlkeFNwYWNlID0gYnVmZmVyLmluZGV4T2YoJyAnKTtcbiAgICAgIHZhciBoZWFkZXIgPSB7XG4gICAgICAgIC8vIFJGQyBzYXlzIGdyZWV0aW5nIFNIT1VMRCBiZSB1dGY4XG4gICAgICAgIGdyZWV0aW5nOiBpbnN0YXRlLmdyZWV0aW5nLFxuICAgICAgICBpZGVudFJhdzogJ1NTSC0nICsgYnVmZmVyLFxuICAgICAgICB2ZXJzaW9uczoge1xuICAgICAgICAgIHByb3RvY29sOiBidWZmZXIuc3Vic3RyKDAsIGlkeERhc2gpLFxuICAgICAgICAgIHNvZnR3YXJlOiAoaWR4U3BhY2UgPT09IC0xXG4gICAgICAgICAgICAgICAgICAgICA/IGJ1ZmZlci5zdWJzdHJpbmcoaWR4RGFzaCArIDEpXG4gICAgICAgICAgICAgICAgICAgICA6IGJ1ZmZlci5zdWJzdHJpbmcoaWR4RGFzaCArIDEsIGlkeFNwYWNlKSlcbiAgICAgICAgfSxcbiAgICAgICAgY29tbWVudHM6IChpZHhTcGFjZSA+IC0xID8gYnVmZmVyLnN1YnN0cmluZyhpZHhTcGFjZSArIDEpIDogdW5kZWZpbmVkKVxuICAgICAgfTtcbiAgICAgIGluc3RhdGUuZ3JlZXRpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChoZWFkZXIudmVyc2lvbnMucHJvdG9jb2wgIT09ICcxLjk5J1xuICAgICAgICAgICYmIGhlYWRlci52ZXJzaW9ucy5wcm90b2NvbCAhPT0gJzIuMCcpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogcHJvdG9jb2wgdmVyc2lvbiBub3Qgc3VwcG9ydGVkOiAnXG4gICAgICAgICAgICAgICsgaGVhZGVyLnZlcnNpb25zLnByb3RvY29sKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignUHJvdG9jb2wgdmVyc2lvbiBub3Qgc3VwcG9ydGVkJykpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRoaXMuZW1pdCgnaGVhZGVyJywgaGVhZGVyKTtcblxuICAgICAgaWYgKGluc3RhdGUuc3RhdHVzID09PSBJTl9JTklUKSB7XG4gICAgICAgIC8vIFdlIHJlc2V0IGZyb20gYW4gZXZlbnQgaGFuZGxlciwgcG9zc2libHkgZHVlIHRvIGFuIHVuc3VwcG9ydGVkIFNTSFxuICAgICAgICAvLyBwcm90b2NvbCB2ZXJzaW9uP1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpZGVudFJhdyA9IGhlYWRlci5pZGVudFJhdztcbiAgICAgIHZhciBzb2Z0d2FyZSA9IGhlYWRlci52ZXJzaW9ucy5zb2Z0d2FyZTtcbiAgICAgIHRoaXMuZGVidWcoJ0RFQlVHOiBSZW1vdGUgaWRlbnQ6ICcgKyBpbnNwZWN0KGlkZW50UmF3KSk7XG4gICAgICBmb3IgKHZhciBqID0gMCwgcnVsZTsgaiA8IEJVR0dZX0lNUExTX0xFTjsgKytqKSB7XG4gICAgICAgIHJ1bGUgPSBCVUdHWV9JTVBMU1tqXTtcbiAgICAgICAgaWYgKHR5cGVvZiBydWxlWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChzb2Z0d2FyZSA9PT0gcnVsZVswXSlcbiAgICAgICAgICAgIHRoaXMucmVtb3RlQnVncyB8PSBydWxlWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKHJ1bGVbMF0udGVzdChzb2Z0d2FyZSkpXG4gICAgICAgICAgdGhpcy5yZW1vdGVCdWdzIHw9IHJ1bGVbMV07XG4gICAgICB9XG4gICAgICBpbnN0YXRlLmlkZW50UmF3ID0gaWRlbnRSYXc7XG4gICAgICAvLyBBZGp1c3QgYnl0ZXNSZWNlaXZlZCBmaXJzdCBvdGhlcndpc2UgaXQgd2lsbCBoYXZlIGFuIGluY29ycmVjdGx5IGxhcmdlclxuICAgICAgLy8gdG90YWwgd2hlbiB3ZSBjYWxsIGJhY2sgaW50byB0aGlzIGZ1bmN0aW9uIGFmdGVyIGNvbXBsZXRpbmcgS0VYSU5JVFxuICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkIC09IChjaGxlbiAtIGkpO1xuICAgICAgS0VYSU5JVCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGkgPT09IGNobGVuKVxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzZWxmLl90cmFuc2Zvcm0oY2h1bmsuc2xpY2UoaSksIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICAgIGluc3RhdGUuc3RhdHVzID0gSU5fUEFDS0VUQkVGT1JFO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoaW5zdGF0ZS5zdGF0dXMgPT09IElOX1BBQ0tFVEJFRk9SRSkge1xuICAgICAgYmxvY2tMZW4gPSAoZGVjcnlwdC5pbnN0YW5jZSA/IGRlY3J5cHQuaW5mby5ibG9ja0xlbiA6IDgpO1xuICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVEJFRk9SRSAoZXhwZWN0aW5nICcgKyBibG9ja0xlbiArICcpJyk7XG4gICAgICAvLyBXYWl0IGZvciB0aGUgcmlnaHQgbnVtYmVyIG9mIGJ5dGVzIHNvIHdlIGNhbiBkZXRlcm1pbmUgdGhlIGluY29taW5nXG4gICAgICAvLyBwYWNrZXQgbGVuZ3RoXG4gICAgICBleHBlY3REYXRhKHRoaXMsIEVYUF9UWVBFX0JZVEVTLCBibG9ja0xlbiwgZGVjcnlwdC5idWYpO1xuICAgICAgaW5zdGF0ZS5zdGF0dXMgPSBJTl9QQUNLRVQ7XG4gICAgfSBlbHNlIGlmIChpbnN0YXRlLnN0YXR1cyA9PT0gSU5fUEFDS0VUKSB7XG4gICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUJyk7XG4gICAgICBpZiAoZGVjcnlwdC5pbnN0YW5jZSkge1xuICAgICAgICBkZWNyeXB0QXV0aE1vZGUgPSAoZGVjcnlwdC5pbmZvLmF1dGhMZW4gPiAwKTtcbiAgICAgICAgaWYgKCFkZWNyeXB0QXV0aE1vZGUpXG4gICAgICAgICAgYnVmZmVyID0gZGVjcnlwdERhdGEodGhpcywgYnVmZmVyKTtcbiAgICAgICAgYmxvY2tMZW4gPSBkZWNyeXB0LmluZm8uYmxvY2tMZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWNyeXB0QXV0aE1vZGUgPSBmYWxzZTtcbiAgICAgICAgYmxvY2tMZW4gPSA4O1xuICAgICAgfVxuXG4gICAgICByID0gcmVhZEludChidWZmZXIsIDAsIHRoaXMsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChyID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmFyIGhtYWNJbmZvID0gaW5zdGF0ZS5obWFjLmluZm87XG4gICAgICB2YXIgbWFjU2l6ZTtcbiAgICAgIGlmIChobWFjSW5mbylcbiAgICAgICAgbWFjU2l6ZSA9IGhtYWNJbmZvLmFjdHVhbExlbjtcbiAgICAgIGVsc2VcbiAgICAgICAgbWFjU2l6ZSA9IDA7XG4gICAgICB2YXIgZnVsbFBhY2tldExlbiA9IHIgKyA0ICsgbWFjU2l6ZTtcbiAgICAgIHZhciBtYXhQYXlsb2FkTGVuID0gdGhpcy5tYXhQYWNrZXRTaXplO1xuICAgICAgaWYgKGRlY29tcHJlc3MuaW5zdGFuY2UpIHtcbiAgICAgICAgLy8gQWNjb3VudCBmb3IgY29tcHJlc3NlZCBwYXlsb2Fkc1xuICAgICAgICAvLyBUaGlzIGZvcm11bGEgaXMgdGFrZW4gZnJvbSBkcm9wYmVhciB3aGljaCBkZXJpdmVzIGl0IGZyb20gemxpYidzXG4gICAgICAgIC8vIGRvY3VtZW50YXRpb24uIEV4cGxhbmF0aW9uIGZyb20gZHJvcGJlYXI6XG4gICAgICAgIC8qIEZvciBleGFjdCBkZXRhaWxzIHNlZSBodHRwOi8vd3d3LnpsaWIubmV0L3psaWJfdGVjaC5odG1sXG4gICAgICAgICAqIDUgYnl0ZXMgcGVyIDE2a0IgYmxvY2ssIHBsdXMgNiBieXRlcyBmb3IgdGhlIHN0cmVhbS5cbiAgICAgICAgICogV2UgbWlnaHQgYWxsb2NhdGUgNSB1bm5lY2Vzc2FyeSBieXRlcyBoZXJlIGlmIGl0J3MgYW5cbiAgICAgICAgICogZXhhY3QgbXVsdGlwbGUuICovXG4gICAgICAgIG1heFBheWxvYWRMZW4gKz0gKCgodGhpcy5tYXhQYWNrZXRTaXplIC8gMTYzODQpICsgMSkgKiA1ICsgNik7XG4gICAgICB9XG4gICAgICBpZiAociA+IG1heFBheWxvYWRMZW5cbiAgICAgICAgICAvLyBUT0RPOiBDaGFuZ2UgMTYgdG8gXCJNQVgoMTYsIGRlY3J5cHQuaW5mby5ibG9ja0xlbilcIiB3aGVuL2lmIFNTSDJcbiAgICAgICAgICAvLyBhZG9wdHMgNTEyLWJpdCBjaXBoZXJzXG4gICAgICAgICAgfHwgZnVsbFBhY2tldExlbiA8ICgxNiArIG1hY1NpemUpXG4gICAgICAgICAgfHwgKChyICsgKGRlY3J5cHRBdXRoTW9kZSA/IDAgOiA0KSkgJSBibG9ja0xlbikgIT09IDApIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLlBST1RPQ09MX0VSUk9SKTtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IEJhZCBwYWNrZXQgbGVuZ3RoICgnICsgZnVsbFBhY2tldExlbiArICcpJyk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0JhZCBwYWNrZXQgbGVuZ3RoJykpO1xuICAgICAgfVxuXG4gICAgICBpbnN0YXRlLnBrdExlbiA9IHI7XG4gICAgICB2YXIgcmVtYWluTGVuID0gaW5zdGF0ZS5wa3RMZW4gKyA0IC0gYmxvY2tMZW47XG4gICAgICBpZiAoZGVjcnlwdEF1dGhNb2RlKSB7XG4gICAgICAgIGRlY3J5cHQuaW5zdGFuY2Uuc2V0QUFEKGJ1ZmZlci5zbGljZSgwLCA0KSk7XG4gICAgICAgIGRlYnVnKCdERUJVRzogUGFyc2VyOiBwa3RMZW46J1xuICAgICAgICAgICAgICArIGluc3RhdGUucGt0TGVuXG4gICAgICAgICAgICAgICsgJyxyZW1haW5MZW46J1xuICAgICAgICAgICAgICArIHJlbWFpbkxlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YXRlLnBhZExlbiA9IGJ1ZmZlcls0XTtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IHBrdExlbjonXG4gICAgICAgICAgICAgICsgaW5zdGF0ZS5wa3RMZW5cbiAgICAgICAgICAgICAgKyAnLHBhZExlbjonXG4gICAgICAgICAgICAgICsgaW5zdGF0ZS5wYWRMZW5cbiAgICAgICAgICAgICAgKyAnLHJlbWFpbkxlbjonXG4gICAgICAgICAgICAgICsgcmVtYWluTGVuKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1haW5MZW4gPiAwKSB7XG4gICAgICAgIGlmIChkZWNyeXB0QXV0aE1vZGUpXG4gICAgICAgICAgaW5zdGF0ZS5wa3RFeHRyYSA9IGJ1ZmZlci5zbGljZSg0KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluc3RhdGUucGt0RXh0cmEgPSBidWZmZXIuc2xpY2UoNSk7XG4gICAgICAgIC8vIEdyYWIgdGhlIHJlc3Qgb2YgdGhlIHBhY2tldFxuICAgICAgICBleHBlY3REYXRhKHRoaXMsIEVYUF9UWVBFX0JZVEVTLCByZW1haW5MZW4pO1xuICAgICAgICBpbnN0YXRlLnN0YXR1cyA9IElOX1BBQ0tFVERBVEE7XG4gICAgICB9IGVsc2UgaWYgKHJlbWFpbkxlbiA8IDApXG4gICAgICAgIGluc3RhdGUuc3RhdHVzID0gSU5fUEFDS0VUQkVGT1JFO1xuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIEVudGlyZSBtZXNzYWdlIGZpdCBpbnRvIG9uZSBibG9ja1xuICAgICAgICBza2lwRGVjcnlwdCA9IHRydWU7XG4gICAgICAgIGluc3RhdGUuc3RhdHVzID0gSU5fUEFDS0VUREFUQTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbnN0YXRlLnN0YXR1cyA9PT0gSU5fUEFDS0VUREFUQSkge1xuICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEEnKTtcbiAgICAgIGlmIChkZWNyeXB0Lmluc3RhbmNlKSB7XG4gICAgICAgIGRlY3J5cHRBdXRoTW9kZSA9IChkZWNyeXB0LmluZm8uYXV0aExlbiA+IDApO1xuICAgICAgICBpZiAoIXNraXBEZWNyeXB0KSB7XG4gICAgICAgICAgaWYgKCFkZWNyeXB0QXV0aE1vZGUpXG4gICAgICAgICAgICBidWZmZXIgPSBkZWNyeXB0RGF0YSh0aGlzLCBidWZmZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNraXBEZWNyeXB0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlY3J5cHRBdXRoTW9kZSA9IGZhbHNlO1xuICAgICAgICBza2lwRGVjcnlwdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhZFN0YXJ0ID0gaW5zdGF0ZS5wa3RMZW4gLSBpbnN0YXRlLnBhZExlbiAtIDE7XG4gICAgICAvLyBUT0RPOiBBbGxvY2F0ZSBhIEJ1ZmZlciBvbmNlIHRoYXQgaXMgc2xpZ2h0bHkgbGFyZ2VyIHRoYW4gbWF4UGFja2V0U2l6ZVxuICAgICAgLy8gKHRvIGFjY29tbW9kYXRlIGZvciBwYWNrZXQgbGVuZ3RoIGZpZWxkIGFuZCBNQUMpIGFuZCByZS11c2UgdGhhdFxuICAgICAgLy8gaW5zdGVhZFxuICAgICAgaWYgKGluc3RhdGUucGt0RXh0cmEpIHtcbiAgICAgICAgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGluc3RhdGUucGt0RXh0cmEubGVuZ3RoICsgYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIGluc3RhdGUucGt0RXh0cmEuY29weShidWYpO1xuICAgICAgICBidWZmZXIuY29weShidWYsIGluc3RhdGUucGt0RXh0cmEubGVuZ3RoKTtcbiAgICAgICAgaW5zdGF0ZS5wYXlsb2FkID0gYnVmLnNsaWNlKDAsIHBhZFN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVudGlyZSBtZXNzYWdlIGZpdCBpbnRvIG9uZSBibG9ja1xuICAgICAgICBpZiAoZGVjcnlwdEF1dGhNb2RlKVxuICAgICAgICAgIGJ1ZiA9IGJ1ZmZlci5zbGljZSg0KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGJ1ZiA9IGJ1ZmZlci5zbGljZSg1KTtcbiAgICAgICAgaW5zdGF0ZS5wYXlsb2FkID0gYnVmZmVyLnNsaWNlKDUsIDUgKyBwYWRTdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGF0ZS5obWFjLmluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBXYWl0IGZvciBobWFjIGhhc2hcbiAgICAgICAgdmFyIGluSE1BQ1NpemUgPSBkZWNyeXB0LmluZm8uYXV0aExlbiB8fCBpbnN0YXRlLmhtYWMuaW5mby5hY3R1YWxMZW47XG4gICAgICAgIGRlYnVnKCdERUJVRzogUGFyc2VyOiBITUFDIHNpemU6JyArIGluSE1BQ1NpemUpO1xuICAgICAgICBleHBlY3REYXRhKHRoaXMsIEVYUF9UWVBFX0JZVEVTLCBpbkhNQUNTaXplLCBpbnN0YXRlLmhtYWMuYnVmKTtcbiAgICAgICAgaW5zdGF0ZS5zdGF0dXMgPSBJTl9QQUNLRVREQVRBVkVSSUZZO1xuICAgICAgICBpbnN0YXRlLnBhY2tldCA9IGJ1ZjtcbiAgICAgIH0gZWxzZVxuICAgICAgICBpbnN0YXRlLnN0YXR1cyA9IElOX1BBQ0tFVERBVEFBRlRFUjtcbiAgICAgIGluc3RhdGUucGt0RXh0cmEgPSB1bmRlZmluZWQ7XG4gICAgICBidWYgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChpbnN0YXRlLnN0YXR1cyA9PT0gSU5fUEFDS0VUREFUQVZFUklGWSkge1xuICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFWRVJJRlknKTtcbiAgICAgIC8vIFZlcmlmeSBwYWNrZXQgZGF0YSBpbnRlZ3JpdHlcbiAgICAgIGlmIChobWFjVmVyaWZ5KHRoaXMsIGJ1ZmZlcikpIHtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFWRVJJRlkgKFZhbGlkIEhNQUMpJyk7XG4gICAgICAgIGluc3RhdGUuc3RhdHVzID0gSU5fUEFDS0VUREFUQUFGVEVSO1xuICAgICAgICBpbnN0YXRlLnBhY2tldCA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFWRVJJRlkgKEludmFsaWQgSE1BQyknKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignSW52YWxpZCBITUFDJykpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5zdGF0ZS5zdGF0dXMgPT09IElOX1BBQ0tFVERBVEFBRlRFUikge1xuICAgICAgaWYgKGRlY29tcHJlc3MuaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKCFkZWNvbXApIHtcbiAgICAgICAgICBkZWJ1ZygnREVCVUc6IFBhcnNlcjogRGVjb21wcmVzc2luZycpO1xuICAgICAgICAgIGRlY29tcHJlc3MuaW5zdGFuY2Uud3JpdGUoaW5zdGF0ZS5wYXlsb2FkKTtcbiAgICAgICAgICB2YXIgZGVjb21wQnVmID0gW107XG4gICAgICAgICAgdmFyIGRlY29tcEJ1ZkxlbiA9IDA7XG4gICAgICAgICAgZGVjb21wcmVzcy5pbnN0YW5jZS5vbigncmVhZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBidWY7XG4gICAgICAgICAgICB3aGlsZSAoYnVmID0gdGhpcy5yZWFkKCkpIHtcbiAgICAgICAgICAgICAgZGVjb21wQnVmLnB1c2goYnVmKTtcbiAgICAgICAgICAgICAgZGVjb21wQnVmTGVuICs9IGJ1Zi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuZmx1c2goWl9QQVJUSUFMX0ZMVVNILCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRlY29tcHJlc3MuaW5zdGFuY2UucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZWFkYWJsZScpO1xuICAgICAgICAgICAgaWYgKGRlY29tcEJ1Zi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgIGluc3RhdGUucGF5bG9hZCA9IGRlY29tcEJ1ZlswXTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgaW5zdGF0ZS5wYXlsb2FkID0gQnVmZmVyLmNvbmNhdChkZWNvbXBCdWYsIGRlY29tcEJ1Zkxlbik7XG4gICAgICAgICAgICBkZWNvbXBCdWYgPSBudWxsO1xuICAgICAgICAgICAgdmFyIG5leHRTbGljZTtcbiAgICAgICAgICAgIGlmIChpID09PSBjaGxlbilcbiAgICAgICAgICAgICAgbmV4dFNsaWNlID0gRU1QVFlfQlVGRkVSOyAvLyBBdm9pZCBzbGljaW5nIGEgemVyby1sZW5ndGggYnVmZmVyXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIG5leHRTbGljZSA9IGNodW5rLnNsaWNlKGkpO1xuICAgICAgICAgICAgc2VsZi5fdHJhbnNmb3JtKG5leHRTbGljZSwgZW5jb2RpbmcsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHJlc2V0IHRoaXMgYWZ0ZXIgdGhpcyBmaXJzdCB0aW1lIGluIHRoZSBsb29wLFxuICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBjb3VsZCBlbmQgdXAgdHJ5aW5nIHRvIGludGVycHJldCBhcy1pcyBhbm90aGVyXG4gICAgICAgICAgLy8gY29tcHJlc3NlZCBwYWNrZXQgdGhhdCBpcyB3aXRoaW4gdGhlIHNhbWUgY2h1bmtcbiAgICAgICAgICBkZWNvbXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVtaXQoJ3BhY2tldCcpO1xuXG4gICAgICB2YXIgcHR5cGUgPSBpbnN0YXRlLnBheWxvYWRbMF07XG5cbiAgICAgIGlmIChkZWJ1ZyAhPT0gREVCVUdfTk9PUCkge1xuICAgICAgICB2YXIgbXNnUGFja2V0ID0gJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiAnO1xuICAgICAgICB2YXIgYXV0aE1ldGhvZCA9IHN0YXRlLmF1dGhzUXVldWVbMF07XG4gICAgICAgIHZhciBtc2dQa3RUeXBlID0gbnVsbDtcblxuICAgICAgICBpZiAob3V0c3RhdGUuc3RhdHVzID09PSBPVVRfUkVLRVlJTkdcbiAgICAgICAgICAgICYmICEocHR5cGUgPD0gNCB8fCAocHR5cGUgPj0gMjAgJiYgcHR5cGUgPD0gNDkpKSlcbiAgICAgICAgICBtc2dQYWNrZXQgKz0gJyhlbnF1ZXVlZCkgJztcblxuICAgICAgICBpZiAocHR5cGUgPT09IE1FU1NBR0UuS0VYREhfSU5JVCkge1xuICAgICAgICAgIHN3aXRjaCAoc3RhdGUua2V4LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdLRVhESF9JTklUJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdncm91cGV4JzpcbiAgICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdLRVhESF9HRVhfUkVRVUVTVCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdLRVhFQ0RIX0lOSVQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwdHlwZSA9PT0gTUVTU0FHRS5LRVhESF9SRVBMWSkge1xuICAgICAgICAgIHN3aXRjaCAoc3RhdGUua2V4LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdLRVhESF9SRVBMWSc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ3JvdXBleCc6XG4gICAgICAgICAgICAgIG1zZ1BrdFR5cGUgPSAnS0VYREhfR0VYX0dST1VQJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBtc2dQa3RUeXBlID0gJ0tFWEVDREhfUkVQTFknO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwdHlwZSA9PT0gTUVTU0FHRS5LRVhESF9HRVhfR1JPVVApIHtcbiAgICAgICAgICBtc2dQa3RUeXBlID0gJ0tFWERIX0dFWF9HUk9VUCc7XG4gICAgICAgIH0gZWxzZSBpZiAocHR5cGUgPT09IE1FU1NBR0UuS0VYREhfR0VYX1JFUExZKSB7XG4gICAgICAgICAgbXNnUGt0VHlwZSA9ICdLRVhESF9HRVhfUkVQTFknO1xuICAgICAgICB9IGVsc2UgaWYgKHB0eXBlID09PSA2MCkge1xuICAgICAgICAgIGlmIChhdXRoTWV0aG9kID09PSAncGFzc3dvcmQnKVxuICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdVU0VSQVVUSF9QQVNTV0RfQ0hBTkdFUkVRJztcbiAgICAgICAgICBlbHNlIGlmIChhdXRoTWV0aG9kID09PSAna2V5Ym9hcmQtaW50ZXJhY3RpdmUnKVxuICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdVU0VSQVVUSF9JTkZPX1JFUVVFU1QnO1xuICAgICAgICAgIGVsc2UgaWYgKGF1dGhNZXRob2QgPT09ICdwdWJsaWNrZXknKVxuICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdVU0VSQVVUSF9QS19PSyc7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbXNnUGt0VHlwZSA9ICdVTktOT1dOIFBBQ0tFVCA2MCc7XG4gICAgICAgIH0gZWxzZSBpZiAocHR5cGUgPT09IDYxKSB7XG4gICAgICAgICAgaWYgKGF1dGhNZXRob2QgPT09ICdrZXlib2FyZC1pbnRlcmFjdGl2ZScpXG4gICAgICAgICAgICBtc2dQa3RUeXBlID0gJ1VTRVJBVVRIX0lORk9fUkVTUE9OU0UnO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1zZ1BrdFR5cGUgPSAnVU5LTk9XTiBQQUNLRVQgNjEnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1zZ1BrdFR5cGUgPT09IG51bGwpXG4gICAgICAgICAgbXNnUGt0VHlwZSA9IE1FU1NBR0VbcHR5cGVdO1xuXG4gICAgICAgIC8vIERvbid0IHdyaXRlIGRlYnVnIG91dHB1dCBmb3IgbWVzc2FnZXMgd2UgY3VzdG9tIG1ha2UgaW4gcGFyc2VQYWNrZXQoKVxuICAgICAgICBpZiAocHR5cGUgIT09IE1FU1NBR0UuQ0hBTk5FTF9PUEVOXG4gICAgICAgICAgICAmJiBwdHlwZSAhPT0gTUVTU0FHRS5DSEFOTkVMX1JFUVVFU1RcbiAgICAgICAgICAgICYmIHB0eXBlICE9PSBNRVNTQUdFLkNIQU5ORUxfU1VDQ0VTU1xuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuQ0hBTk5FTF9GQUlMVVJFXG4gICAgICAgICAgICAmJiBwdHlwZSAhPT0gTUVTU0FHRS5DSEFOTkVMX0VPRlxuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuQ0hBTk5FTF9DTE9TRVxuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuQ0hBTk5FTF9EQVRBXG4gICAgICAgICAgICAmJiBwdHlwZSAhPT0gTUVTU0FHRS5DSEFOTkVMX0VYVEVOREVEX0RBVEFcbiAgICAgICAgICAgICYmIHB0eXBlICE9PSBNRVNTQUdFLkNIQU5ORUxfV0lORE9XX0FESlVTVFxuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuRElTQ09OTkVDVFxuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuVVNFUkFVVEhfUkVRVUVTVFxuICAgICAgICAgICAgJiYgcHR5cGUgIT09IE1FU1NBR0UuR0xPQkFMX1JFUVVFU1QpXG4gICAgICAgICAgZGVidWcobXNnUGFja2V0ICsgbXNnUGt0VHlwZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgcGFyc2UgcGFja2V0IGlmIHdlIGFyZSBub3QgcmUta2V5aW5nIG9yIHRoZSBwYWNrZXQgaXMgbm90IGFcbiAgICAgIC8vIHRyYW5zcG9ydCBsYXllciBwYWNrZXQgbmVlZGVkIGZvciByZS1rZXlpbmdcbiAgICAgIGlmIChvdXRzdGF0ZS5zdGF0dXMgPT09IE9VVF9SRUFEWVxuICAgICAgICAgIHx8IHB0eXBlIDw9IDRcbiAgICAgICAgICB8fCAocHR5cGUgPj0gMjAgJiYgcHR5cGUgPD0gNDkpKSB7XG4gICAgICAgIGlmIChwYXJzZVBhY2tldCh0aGlzLCBjYWxsYmFjaykgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpZiAoaW5zdGF0ZS5zdGF0dXMgPT09IElOX0lOSVQpIHtcbiAgICAgICAgICAvLyBXZSB3ZXJlIHJlc2V0IGR1ZSB0byBzb21lIGVycm9yL2Rpc2FncmVlbWVudCA/XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG91dHN0YXRlLnN0YXR1cyA9PT0gT1VUX1JFS0VZSU5HKSB7XG4gICAgICAgIGlmIChpbnN0YXRlLnJla2V5UXVldWUubGVuZ3RoID09PSBNQVhfUEFDS0VUU19SRUtFWUlORykge1xuICAgICAgICAgIGRlYnVnKCdERUJVRzogUGFyc2VyOiBNYXggaW5jb21pbmcgcmUta2V5IHF1ZXVlIGxlbmd0aCByZWFjaGVkJyk7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLlBST1RPQ09MX0VSUk9SKTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soXG4gICAgICAgICAgICBuZXcgRXJyb3IoJ0luY29taW5nIHJlLWtleSBxdWV1ZSBsZW5ndGggbGltaXQgcmVhY2hlZCcpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0byByZWNvcmQgdGhlIHNlcXVlbmNlIG51bWJlciBpbiBjYXNlIHdlIG5lZWQgaXQgbGF0ZXIgb25cbiAgICAgICAgLy8gd2hlbiB3ZSBkcmFpbiB0aGUgcXVldWUgKGUuZy4gdW5rbm93biBwYWNrZXQpXG4gICAgICAgIHZhciBzZXFubyA9IGluc3RhdGUuc2Vxbm87XG4gICAgICAgIGlmICgrK2luc3RhdGUuc2Vxbm8gPiBNQVhfU0VRTk8pXG4gICAgICAgICAgaW5zdGF0ZS5zZXFubyA9IDA7XG5cbiAgICAgICAgaW5zdGF0ZS5yZWtleVF1ZXVlLnB1c2goW3NlcW5vLCBpbnN0YXRlLnBheWxvYWRdKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGF0ZS5zdGF0dXMgPSBJTl9QQUNLRVRCRUZPUkU7XG4gICAgICBpbnN0YXRlLnBheWxvYWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChidWZmZXIgIT09IHVuZGVmaW5lZClcbiAgICAgIGJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNhbGxiYWNrKCk7XG59O1xuXG5TU0gyU3RyZWFtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKG5vZW5kKSB7XG4gIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgIHN0YXRlLmluY29taW5nLnN0YXR1cyA9IElOX0lOSVQ7XG4gICAgc3RhdGUub3V0Z29pbmcuc3RhdHVzID0gT1VUX0lOSVQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICBhdXRoc1F1ZXVlOiBbXSxcbiAgICAgIGhvc3RrZXlGb3JtYXQ6IHVuZGVmaW5lZCxcbiAgICAgIGtleDogdW5kZWZpbmVkLFxuXG4gICAgICBpbmNvbWluZzoge1xuICAgICAgICBzdGF0dXM6IElOX0lOSVQsXG4gICAgICAgIGV4cGVjdGVkUGFja2V0OiB1bmRlZmluZWQsXG4gICAgICAgIHNlYXJjaDogdW5kZWZpbmVkLFxuICAgICAgICBncmVldGluZzogdW5kZWZpbmVkLFxuICAgICAgICBzZXFubzogMCxcbiAgICAgICAgcGt0TGVuOiB1bmRlZmluZWQsXG4gICAgICAgIHBhZExlbjogdW5kZWZpbmVkLFxuICAgICAgICBwa3RFeHRyYTogdW5kZWZpbmVkLFxuICAgICAgICBwYXlsb2FkOiB1bmRlZmluZWQsXG4gICAgICAgIHBhY2tldDogdW5kZWZpbmVkLFxuICAgICAgICBrZXhpbml0OiB1bmRlZmluZWQsXG4gICAgICAgIGlkZW50UmF3OiB1bmRlZmluZWQsXG4gICAgICAgIHJla2V5UXVldWU6IFtdLFxuICAgICAgICBpZ25vcmVOZXh0OiBmYWxzZSxcblxuICAgICAgICBleHBlY3Q6IHtcbiAgICAgICAgICBhbW91bnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHRyOiAwLFxuICAgICAgICAgIGJ1ZjogdW5kZWZpbmVkXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVjcnlwdDoge1xuICAgICAgICAgIGluc3RhbmNlOiBmYWxzZSxcbiAgICAgICAgICBpbmZvOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXY6IHVuZGVmaW5lZCxcbiAgICAgICAgICBrZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBidWY6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0eXBlOiB1bmRlZmluZWRcbiAgICAgICAgfSxcblxuICAgICAgICBobWFjOiB7XG4gICAgICAgICAgaW5mbzogdW5kZWZpbmVkLFxuICAgICAgICAgIGtleTogdW5kZWZpbmVkLFxuICAgICAgICAgIGJ1ZjogdW5kZWZpbmVkLFxuICAgICAgICAgIHR5cGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVjb21wcmVzczoge1xuICAgICAgICAgIGluc3RhbmNlOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBvdXRnb2luZzoge1xuICAgICAgICBzdGF0dXM6IE9VVF9JTklULFxuICAgICAgICBzZXFubzogMCxcbiAgICAgICAgYnVmU2Vxbm86IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KSxcbiAgICAgICAgcmVrZXlRdWV1ZTogW10sXG4gICAgICAgIGtleGluaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAga2V4c2VjcmV0OiB1bmRlZmluZWQsXG4gICAgICAgIHB1YmtleTogdW5kZWZpbmVkLFxuICAgICAgICBleGNoYW5nZUhhc2g6IHVuZGVmaW5lZCxcbiAgICAgICAgc2Vzc2lvbklkOiB1bmRlZmluZWQsXG4gICAgICAgIHNlbnRORVdLRVlTOiBmYWxzZSxcblxuICAgICAgICBlbmNyeXB0OiB7XG4gICAgICAgICAgaW5zdGFuY2U6IGZhbHNlLFxuICAgICAgICAgIGluZm86IHVuZGVmaW5lZCxcbiAgICAgICAgICBpdjogdW5kZWZpbmVkLFxuICAgICAgICAgIGtleTogdW5kZWZpbmVkLFxuICAgICAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuXG4gICAgICAgIGhtYWM6IHtcbiAgICAgICAgICBpbmZvOiB1bmRlZmluZWQsXG4gICAgICAgICAga2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgYnVmOiB1bmRlZmluZWQsXG4gICAgICAgICAgdHlwZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wcmVzczoge1xuICAgICAgICAgIGluc3RhbmNlOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBmYWxzZSxcbiAgICAgICAgICBxdWV1ZTogbnVsbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBpZiAoIW5vZW5kKSB7XG4gICAgaWYgKHRoaXMucmVhZGFibGUpXG4gICAgICB0aGlzLnB1c2gobnVsbCk7XG4gIH1cbn07XG5cbi8vIENvbW1vbiBtZXRob2RzXG4vLyBHbG9iYWxcblNTSDJTdHJlYW0ucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgLypcbiAgICBieXRlICAgICAgU1NIX01TR19ESVNDT05ORUNUXG4gICAgdWludDMyICAgIHJlYXNvbiBjb2RlXG4gICAgc3RyaW5nICAgIGRlc2NyaXB0aW9uIGluIElTTy0xMDY0NiBVVEYtOCBlbmNvZGluZ1xuICAgIHN0cmluZyAgICBsYW5ndWFnZSB0YWdcbiAgKi9cbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYygxICsgNCArIDQgKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkRJU0NPTk5FQ1Q7XG5cbiAgaWYgKERJU0NPTk5FQ1RfUkVBU09OW3JlYXNvbl0gPT09IHVuZGVmaW5lZClcbiAgICByZWFzb24gPSBESVNDT05ORUNUX1JFQVNPTi5CWV9BUFBMSUNBVElPTjtcbiAgd3JpdGVVSW50MzJCRShidWYsIHJlYXNvbiwgMSk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIERJU0NPTk5FQ1QgKCdcbiAgICAgICAgICAgICArIERJU0NPTk5FQ1RfUkVBU09OW3JlYXNvbl1cbiAgICAgICAgICAgICArICcpJyk7XG4gIHNlbmQodGhpcywgYnVmKTtcbiAgdGhpcy5yZXNldCgpO1xuXG4gIHJldHVybiBmYWxzZTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBwaW5nIChHTE9CQUxfUkVRVUVTVDoga2VlcGFsaXZlQG9wZW5zc2guY29tKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBQSU5HX1BBQ0tFVCk7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUucmVrZXkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YXR1cyA9IHRoaXMuX3N0YXRlLm91dGdvaW5nLnN0YXR1cztcbiAgaWYgKHN0YXR1cyA9PT0gT1VUX1JFS0VZSU5HKVxuICAgIHRocm93IG5ldyBFcnJvcignQSByZS1rZXkgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcycpO1xuICBlbHNlIGlmIChzdGF0dXMgIT09IE9VVF9SRUFEWSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZS1rZXkgeWV0Jyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBTdGFydGluZyByZS1rZXknKTtcbiAgcmV0dXJuIEtFWElOSVQodGhpcyk7XG59O1xuXG4vLyAnc3NoLWNvbm5lY3Rpb24nIHNlcnZpY2Utc3BlY2lmaWNcblNTSDJTdHJlYW0ucHJvdG90eXBlLnJlcXVlc3RTdWNjZXNzID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgYnVmO1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBkYXRhLmxlbmd0aCk7XG5cbiAgICBidWZbMF0gPSBNRVNTQUdFLlJFUVVFU1RfU1VDQ0VTUztcblxuICAgIGRhdGEuY29weShidWYsIDEpO1xuICB9IGVsc2VcbiAgICBidWYgPSBSRVFVRVNUX1NVQ0NFU1NfUEFDS0VUO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBSRVFVRVNUX1NVQ0NFU1MnKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5yZXF1ZXN0RmFpbHVyZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgUkVRVUVTVF9GQUlMVVJFJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIFJFUVVFU1RfRkFJTFVSRV9QQUNLRVQpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxTdWNjZXNzID0gZnVuY3Rpb24oY2hhbikge1xuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfU1VDQ0VTUztcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfU1VDQ0VTUyAoJyArIGNoYW4gKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxGYWlsdXJlID0gZnVuY3Rpb24oY2hhbikge1xuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfRkFJTFVSRTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfRkFJTFVSRSAoJyArIGNoYW4gKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxFT0YgPSBmdW5jdGlvbihjaGFuKSB7XG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9FT0Y7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNoYW4sIDEpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX0VPRiAoJyArIGNoYW4gKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxDbG9zZSA9IGZ1bmN0aW9uKGNoYW4pIHtcbiAgLy8gRG9lcyBub3QgY29uc3VtZSB3aW5kb3cgc3BhY2VcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX0NMT1NFO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9DTE9TRSAoJyArIGNoYW4gKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxXaW5kb3dBZGp1c3QgPSBmdW5jdGlvbihjaGFuLCBhbW91bnQpIHtcbiAgLy8gRG9lcyBub3QgY29uc3VtZSB3aW5kb3cgc3BhY2VcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDQpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9XSU5ET1dfQURKVVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYW1vdW50LCA1KTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9XSU5ET1dfQURKVVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCAnXG4gICAgICAgICAgICAgKyBhbW91bnRcbiAgICAgICAgICAgICArICcpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuY2hhbm5lbERhdGEgPSBmdW5jdGlvbihjaGFuLCBkYXRhKSB7XG4gIHZhciBkYXRhSXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIoZGF0YSk7XG4gIHZhciBkYXRhTGVuID0gKGRhdGFJc0J1ZmZlciA/IGRhdGEubGVuZ3RoIDogQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIGRhdGFMZW4pO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9EQVRBO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgZGF0YUxlbiwgNSk7XG4gIGlmIChkYXRhSXNCdWZmZXIpXG4gICAgZGF0YS5jb3B5KGJ1ZiwgOSk7XG4gIGVsc2VcbiAgICBidWYud3JpdGUoZGF0YSwgOSwgZGF0YUxlbiwgJ3V0ZjgnKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9EQVRBICgnICsgY2hhbiArICcpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuY2hhbm5lbEV4dERhdGEgPSBmdW5jdGlvbihjaGFuLCBkYXRhLCB0eXBlKSB7XG4gIHZhciBkYXRhSXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIoZGF0YSk7XG4gIHZhciBkYXRhTGVuID0gKGRhdGFJc0J1ZmZlciA/IGRhdGEubGVuZ3RoIDogQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIDQgKyBkYXRhTGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfRVhURU5ERURfREFUQTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHR5cGUsIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBkYXRhTGVuLCA5KTtcbiAgaWYgKGRhdGFJc0J1ZmZlcilcbiAgICBkYXRhLmNvcHkoYnVmLCAxMyk7XG4gIGVsc2VcbiAgICBidWYud3JpdGUoZGF0YSwgMTMsIGRhdGFMZW4sICd1dGY4Jyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfRVhURU5ERURfREFUQSAoJyArIGNoYW4gKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmNoYW5uZWxPcGVuQ29uZmlybSA9IGZ1bmN0aW9uKHJlbW90ZUNoYW4sIGxvY2FsQ2hhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRXaW5kb3csIG1heFBhY2tldCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIDQgKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfT1BFTl9DT05GSVJNQVRJT047XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHJlbW90ZUNoYW4sIDEpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBsb2NhbENoYW4sIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBpbml0V2luZG93LCA5KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbWF4UGFja2V0LCAxMyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfT1BFTl9DT05GSVJNQVRJT04gKHI6J1xuICAgICAgICAgICAgICsgcmVtb3RlQ2hhblxuICAgICAgICAgICAgICsgJywgbDonXG4gICAgICAgICAgICAgKyBsb2NhbENoYW5cbiAgICAgICAgICAgICArICcpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuY2hhbm5lbE9wZW5GYWlsID0gZnVuY3Rpb24ocmVtb3RlQ2hhbiwgcmVhc29uLCBkZXNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZykge1xuICBpZiAodHlwZW9mIGRlc2MgIT09ICdzdHJpbmcnKVxuICAgIGRlc2MgPSAnJztcbiAgaWYgKHR5cGVvZiBsYW5nICE9PSAnc3RyaW5nJylcbiAgICBsYW5nID0gJyc7XG5cbiAgdmFyIGRlc2NMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChkZXNjKTtcbiAgdmFyIGxhbmdMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChsYW5nKTtcbiAgdmFyIHAgPSA5O1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIDQgKyBkZXNjTGVuICsgNCArIGxhbmdMZW4pO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9PUEVOX0ZBSUxVUkU7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHJlbW90ZUNoYW4sIDEpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCByZWFzb24sIDUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBkZXNjTGVuLCBwKTtcbiAgcCArPSA0O1xuICBpZiAoZGVzY0xlbikge1xuICAgIGJ1Zi53cml0ZShkZXNjLCBwLCBkZXNjTGVuLCAndXRmOCcpO1xuICAgIHAgKz0gZGVzY0xlbjtcbiAgfVxuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBsYW5nTGVuLCBwKTtcbiAgaWYgKGxhbmdMZW4pXG4gICAgYnVmLndyaXRlKGxhbmcsIHAgKz0gNCwgbGFuZ0xlbiwgJ2FzY2lpJyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfT1BFTl9GQUlMVVJFICgnXG4gICAgICAgICAgICAgKyByZW1vdGVDaGFuXG4gICAgICAgICAgICAgKyAnKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblxuLy8gQ2xpZW50LXNwZWNpZmljIG1ldGhvZHNcbi8vIEdsb2JhbFxuU1NIMlN0cmVhbS5wcm90b3R5cGUuc2VydmljZSA9IGZ1bmN0aW9uKHN2Y05hbWUpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzdmNOYW1lTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3ZjTmFtZSk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBzdmNOYW1lTGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLlNFUlZJQ0VfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1Ziwgc3ZjTmFtZUxlbiwgMSk7XG4gIGJ1Zi53cml0ZShzdmNOYW1lLCA1LCBzdmNOYW1lTGVuLCAnYXNjaWknKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgU0VSVklDRV9SRVFVRVNUICgnICsgc3ZjTmFtZSArICcpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuLy8gJ3NzaC1jb25uZWN0aW9uJyBzZXJ2aWNlLXNwZWNpZmljXG5TU0gyU3RyZWFtLnByb3RvdHlwZS50Y3BpcEZvcndhcmQgPSBmdW5jdGlvbihiaW5kQWRkciwgYmluZFBvcnQsIHdhbnRSZXBseSkge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIGFkZHJsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChiaW5kQWRkcik7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyAxMyArIDEgKyA0ICsgYWRkcmxlbiArIDQpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuR0xPQkFMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDEzLCAxKTtcbiAgYnVmLndyaXRlKCd0Y3BpcC1mb3J3YXJkJywgNSwgMTMsICdhc2NpaScpO1xuXG4gIGJ1ZlsxOF0gPSAod2FudFJlcGx5ID09PSB1bmRlZmluZWQgfHwgd2FudFJlcGx5ID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBhZGRybGVuLCAxOSk7XG4gIGJ1Zi53cml0ZShiaW5kQWRkciwgMjMsIGFkZHJsZW4sICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBiaW5kUG9ydCwgMjMgKyBhZGRybGVuKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgR0xPQkFMX1JFUVVFU1QgKHRjcGlwLWZvcndhcmQpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuY2FuY2VsVGNwaXBGb3J3YXJkID0gZnVuY3Rpb24oYmluZEFkZHIsIGJpbmRQb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FudFJlcGx5KSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgYWRkcmxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGJpbmRBZGRyKTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDIwICsgMSArIDQgKyBhZGRybGVuICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5HTE9CQUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMjAsIDEpO1xuICBidWYud3JpdGUoJ2NhbmNlbC10Y3BpcC1mb3J3YXJkJywgNSwgMjAsICdhc2NpaScpO1xuXG4gIGJ1ZlsyNV0gPSAod2FudFJlcGx5ID09PSB1bmRlZmluZWQgfHwgd2FudFJlcGx5ID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBhZGRybGVuLCAyNik7XG4gIGJ1Zi53cml0ZShiaW5kQWRkciwgMzAsIGFkZHJsZW4sICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBiaW5kUG9ydCwgMzAgKyBhZGRybGVuKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgR0xPQkFMX1JFUVVFU1QgKGNhbmNlbC10Y3BpcC1mb3J3YXJkKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLm9wZW5zc2hfc3RyZWFtTG9jYWxGb3J3YXJkID0gZnVuY3Rpb24oc29ja2V0UGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FudFJlcGx5KSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICB2YXIgcGF0aGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHNvY2tldFBhdGgpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgMzEgKyAxICsgNCArIHBhdGhsZW4pO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuR0xPQkFMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDMxLCAxKTtcbiAgYnVmLndyaXRlKCdzdHJlYW1sb2NhbC1mb3J3YXJkQG9wZW5zc2guY29tJywgNSwgMzEsICdhc2NpaScpO1xuXG4gIGJ1ZlszNl0gPSAod2FudFJlcGx5ID09PSB1bmRlZmluZWQgfHwgd2FudFJlcGx5ID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCAzNyk7XG4gIGJ1Zi53cml0ZShzb2NrZXRQYXRoLCA0MSwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgR0xPQkFMX1JFUVVFU1QgKHN0cmVhbWxvY2FsLWZvcndhcmRAb3BlbnNzaC5jb20pJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUub3BlbnNzaF9jYW5jZWxTdHJlYW1Mb2NhbEZvcndhcmQgPSBmdW5jdGlvbihzb2NrZXRQYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBwYXRobGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc29ja2V0UGF0aCk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyAzOCArIDEgKyA0ICsgcGF0aGxlbik7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5HTE9CQUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMzgsIDEpO1xuICBidWYud3JpdGUoJ2NhbmNlbC1zdHJlYW1sb2NhbC1mb3J3YXJkQG9wZW5zc2guY29tJywgNSwgMzgsICdhc2NpaScpO1xuXG4gIGJ1Zls0M10gPSAod2FudFJlcGx5ID09PSB1bmRlZmluZWQgfHwgd2FudFJlcGx5ID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXRobGVuLCA0NCk7XG4gIGJ1Zi53cml0ZShzb2NrZXRQYXRoLCA0OCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgR0xPQkFMX1JFUVVFU1QgKGNhbmNlbC1zdHJlYW1sb2NhbC1mb3J3YXJkQG9wZW5zc2guY29tKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmRpcmVjdFRjcGlwID0gZnVuY3Rpb24oY2hhbiwgaW5pdFdpbmRvdywgbWF4UGFja2V0LCBjZmcpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzcmNsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChjZmcuc3JjSVApO1xuICB2YXIgZHN0bGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoY2ZnLmRzdElQKTtcbiAgdmFyIHAgPSAyOTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDEyICsgNCArIDQgKyA0ICsgNCArIHNyY2xlbiArIDQgKyA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBkc3RsZW4gKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfT1BFTjtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMTIsIDEpO1xuICBidWYud3JpdGUoJ2RpcmVjdC10Y3BpcCcsIDUsIDEyLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMTcpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBpbml0V2luZG93LCAyMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG1heFBhY2tldCwgMjUpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBkc3RsZW4sIHApO1xuICBidWYud3JpdGUoY2ZnLmRzdElQLCBwICs9IDQsIGRzdGxlbiwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNmZy5kc3RQb3J0LCBwICs9IGRzdGxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHNyY2xlbiwgcCArPSA0KTtcbiAgYnVmLndyaXRlKGNmZy5zcmNJUCwgcCArPSA0LCBzcmNsZW4sICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjZmcuc3JjUG9ydCwgcCArPSBzcmNsZW4pO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX09QRU4gKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIGRpcmVjdC10Y3BpcCknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5vcGVuc3NoX2RpcmVjdFN0cmVhbUxvY2FsID0gZnVuY3Rpb24oY2hhbiwgaW5pdFdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQYWNrZXQsIGNmZykge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIHBhdGhsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChjZmcuc29ja2V0UGF0aCk7XG4gIHZhciBwID0gNDc7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyAzMCArIDQgKyA0ICsgNCArIDQgKyBwYXRobGVuICsgNCArIDQpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9PUEVOO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAzMCwgMSk7XG4gIGJ1Zi53cml0ZSgnZGlyZWN0LXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJywgNSwgMzAsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAzNSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGluaXRXaW5kb3csIDM5KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbWF4UGFja2V0LCA0Myk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHBhdGhsZW4sIHApO1xuICBidWYud3JpdGUoY2ZnLnNvY2tldFBhdGgsIHAgKz0gNCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICAvLyByZXNlcnZlZCBmaWVsZHMgKHN0cmluZyBhbmQgdWludDMyKVxuICBidWYuZmlsbCgwLCBidWYubGVuZ3RoIC0gOCk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfT1BFTiAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgZGlyZWN0LXN0cmVhbWxvY2FsQG9wZW5zc2guY29tKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLm9wZW5zc2hfbm9Nb3JlU2Vzc2lvbnMgPSBmdW5jdGlvbih3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyAyOCArIDEpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuR0xPQkFMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDI4LCAxKTtcbiAgYnVmLndyaXRlKCduby1tb3JlLXNlc3Npb25zQG9wZW5zc2guY29tJywgNSwgMjgsICdhc2NpaScpO1xuXG4gIGJ1ZlszM10gPSAod2FudFJlcGx5ID09PSB1bmRlZmluZWQgfHwgd2FudFJlcGx5ID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBHTE9CQUxfUkVRVUVTVCAobm8tbW9yZS1zZXNzaW9uc0BvcGVuc3NoLmNvbSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5zZXNzaW9uID0gZnVuY3Rpb24oY2hhbiwgaW5pdFdpbmRvdywgbWF4UGFja2V0KSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNyArIDQgKyA0ICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX09QRU47XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDcsIDEpO1xuICBidWYud3JpdGUoJ3Nlc3Npb24nLCA1LCA3LCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMTIpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBpbml0V2luZG93LCAxNik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG1heFBhY2tldCwgMjApO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX09QRU4gKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIHNlc3Npb24pJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUud2luZG93Q2hhbmdlID0gZnVuY3Rpb24oY2hhbiwgcm93cywgY29scywgaGVpZ2h0LCB3aWR0aCkge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgLy8gRG9lcyBub3QgY29uc3VtZSB3aW5kb3cgc3BhY2VcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDQgKyAxMyArIDEgKyA0ICsgNCArIDQgKyA0KTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDEzLCA1KTtcbiAgYnVmLndyaXRlKCd3aW5kb3ctY2hhbmdlJywgOSwgMTMsICdhc2NpaScpO1xuXG4gIGJ1ZlsyMl0gPSAwO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjb2xzLCAyMyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHJvd3MsIDI3KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1Ziwgd2lkdGgsIDMxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGVpZ2h0LCAzNSk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfUkVRVUVTVCAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgd2luZG93LWNoYW5nZSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5wdHkgPSBmdW5jdGlvbihjaGFuLCByb3dzLCBjb2xzLCBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCwgdGVybSwgbW9kZXMsIHdhbnRSZXBseSkge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgLy8gRG9lcyBub3QgY29uc3VtZSB3aW5kb3cgc3BhY2VcbiAgaWYgKCF0ZXJtIHx8ICF0ZXJtLmxlbmd0aClcbiAgICB0ZXJtID0gJ3Z0MTAwJztcbiAgaWYgKG1vZGVzXG4gICAgICAmJiAhQnVmZmVyLmlzQnVmZmVyKG1vZGVzKVxuICAgICAgJiYgIUFycmF5LmlzQXJyYXkobW9kZXMpXG4gICAgICAmJiB0eXBlb2YgbW9kZXMgPT09ICdvYmplY3QnKVxuICAgIG1vZGVzID0gbW9kZXNUb0J5dGVzKG1vZGVzKTtcbiAgaWYgKCFtb2RlcyB8fCAhbW9kZXMubGVuZ3RoKVxuICAgIG1vZGVzID0gTk9fVEVSTUlOQUxfTU9ERVNfQlVGRkVSO1xuXG4gIHZhciB0ZXJtTGVuID0gdGVybS5sZW5ndGg7XG4gIHZhciBtb2Rlc0xlbiA9IG1vZGVzLmxlbmd0aDtcbiAgdmFyIHAgPSAyMTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDQgKyA3ICsgMSArIDQgKyB0ZXJtTGVuICsgNCArIDQgKyA0ICsgNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIG1vZGVzTGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDcsIDUpO1xuICBidWYud3JpdGUoJ3B0eS1yZXEnLCA5LCA3LCAnYXNjaWknKTtcblxuICBidWZbMTZdID0gKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkIHx8IHdhbnRSZXBseSA9PT0gdHJ1ZSA/IDEgOiAwKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdGVybUxlbiwgMTcpO1xuICBidWYud3JpdGUodGVybSwgMjEsIHRlcm1MZW4sICd1dGY4Jyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNvbHMsIHAgKz0gdGVybUxlbik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHJvd3MsIHAgKz0gNCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHdpZHRoLCBwICs9IDQpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBoZWlnaHQsIHAgKz0gNCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG1vZGVzTGVuLCBwICs9IDQpO1xuICBwICs9IDQ7XG4gIGlmIChBcnJheS5pc0FycmF5KG1vZGVzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kZXNMZW47ICsraSlcbiAgICAgIGJ1ZltwKytdID0gbW9kZXNbaV07XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKG1vZGVzKSkge1xuICAgIG1vZGVzLmNvcHkoYnVmLCBwKTtcbiAgfVxuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX1JFUVVFU1QgKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIHB0eS1yZXEpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuc2hlbGwgPSBmdW5jdGlvbihjaGFuLCB3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgNSArIDEpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgNSwgNSk7XG4gIGJ1Zi53cml0ZSgnc2hlbGwnLCA5LCA1LCAnYXNjaWknKTtcblxuICBidWZbMTRdID0gKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkIHx8IHdhbnRSZXBseSA9PT0gdHJ1ZSA/IDEgOiAwKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9SRVFVRVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBzaGVsbCknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24oY2hhbiwgY21kLCB3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBjbWRsZW4gPSAoQnVmZmVyLmlzQnVmZmVyKGNtZCkgPyBjbWQubGVuZ3RoIDogQnVmZmVyLmJ5dGVMZW5ndGgoY21kKSk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgNCArIDEgKyA0ICsgY21kbGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDQsIDUpO1xuICBidWYud3JpdGUoJ2V4ZWMnLCA5LCA0LCAnYXNjaWknKTtcblxuICBidWZbMTNdID0gKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkIHx8IHdhbnRSZXBseSA9PT0gdHJ1ZSA/IDEgOiAwKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY21kbGVuLCAxNCk7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY21kKSlcbiAgICBjbWQuY29weShidWYsIDE4KTtcbiAgZWxzZVxuICAgIGJ1Zi53cml0ZShjbWQsIDE4LCBjbWRsZW4sICd1dGY4Jyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfUkVRVUVTVCAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgZXhlYyknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5zaWduYWwgPSBmdW5jdGlvbihjaGFuLCBzaWduYWwpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHNpZ25hbCA9IHNpZ25hbC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoc2lnbmFsLnNsaWNlKDAsIDMpID09PSAnU0lHJylcbiAgICBzaWduYWwgPSBzaWduYWwuc3Vic3RyaW5nKDMpO1xuXG4gIGlmIChTSUdOQUxTLmluZGV4T2Yoc2lnbmFsKSA9PT0gLTEpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hbDogJyArIHNpZ25hbCk7XG5cbiAgdmFyIHNpZ25hbExlbiA9IHNpZ25hbC5sZW5ndGg7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgNiArIDEgKyA0ICsgc2lnbmFsTGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDYsIDUpO1xuICBidWYud3JpdGUoJ3NpZ25hbCcsIDksIDYsICdhc2NpaScpO1xuXG4gIGJ1ZlsxNV0gPSAwO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBzaWduYWxMZW4sIDE2KTtcbiAgYnVmLndyaXRlKHNpZ25hbCwgMjAsIHNpZ25hbExlbiwgJ2FzY2lpJyk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfUkVRVUVTVCAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgc2lnbmFsKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmVudiA9IGZ1bmN0aW9uKGNoYW4sIGtleSwgdmFsLCB3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBrZXlMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChrZXkpO1xuICB2YXIgdmFsTGVuID0gKEJ1ZmZlci5pc0J1ZmZlcih2YWwpID8gdmFsLmxlbmd0aCA6IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbCkpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIDMgKyAxICsgNCArIGtleUxlbiArIDQgKyB2YWxMZW4pO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMywgNSk7XG4gIGJ1Zi53cml0ZSgnZW52JywgOSwgMywgJ2FzY2lpJyk7XG5cbiAgYnVmWzEyXSA9ICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZCB8fCB3YW50UmVwbHkgPT09IHRydWUgPyAxIDogMCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGtleUxlbiwgMTMpO1xuICBidWYud3JpdGUoa2V5LCAxNywga2V5TGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdmFsTGVuLCAxNyArIGtleUxlbik7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSlcbiAgICB2YWwuY29weShidWYsIDE3ICsga2V5TGVuICsgNCk7XG4gIGVsc2VcbiAgICBidWYud3JpdGUodmFsLCAxNyArIGtleUxlbiArIDQsIHZhbExlbiwgJ3V0ZjgnKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9SRVFVRVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBlbnYpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUueDExRm9yd2FyZCA9IGZ1bmN0aW9uKGNoYW4sIGNmZywgd2FudFJlcGx5KSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgcHJvdG9sZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChjZmcucHJvdG9jb2wpO1xuICB2YXIgY29va2llbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoY2ZnLmNvb2tpZSk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgNyArIDEgKyAxICsgNCArIHByb3RvbGVuICsgNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY29va2llbGVuICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNoYW4sIDEpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCA3LCA1KTtcbiAgYnVmLndyaXRlKCd4MTEtcmVxJywgOSwgNywgJ2FzY2lpJyk7XG5cbiAgYnVmWzE2XSA9ICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZCB8fCB3YW50UmVwbHkgPT09IHRydWUgPyAxIDogMCk7XG5cbiAgYnVmWzE3XSA9IChjZmcuc2luZ2xlID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwcm90b2xlbiwgMTgpO1xuICB2YXIgYnAgPSAyMjtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjZmcucHJvdG9jb2wpKVxuICAgIGNmZy5wcm90b2NvbC5jb3B5KGJ1ZiwgYnApO1xuICBlbHNlXG4gICAgYnVmLndyaXRlKGNmZy5wcm90b2NvbCwgYnAsIHByb3RvbGVuLCAndXRmOCcpO1xuICBicCArPSBwcm90b2xlbjtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY29va2llbGVuLCBicCk7XG4gIGJwICs9IDQ7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2ZnLmNvb2tpZSkpXG4gICAgY2ZnLmNvb2tpZS5jb3B5KGJ1ZiwgYnApO1xuICBlbHNlXG4gICAgYnVmLndyaXRlKGNmZy5jb29raWUsIGJwLCBjb29raWVsZW4sICdiaW5hcnknKTtcbiAgYnAgKz0gY29va2llbGVuO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAoY2ZnLnNjcmVlbiB8fCAwKSwgYnApO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX1JFUVVFU1QgKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIHgxMS1yZXEpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuc3Vic3lzdGVtID0gZnVuY3Rpb24oY2hhbiwgbmFtZSwgd2FudFJlcGx5KSB7XG4gIGlmICh0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudC1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gc2VydmVyIG1vZGUnKTtcblxuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgbmFtZUxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG5hbWUpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgNCArIDkgKyAxICsgNCArIG5hbWVMZW4pO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgOSwgNSk7XG4gIGJ1Zi53cml0ZSgnc3Vic3lzdGVtJywgOSwgOSwgJ2FzY2lpJyk7XG5cbiAgYnVmWzE4XSA9ICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZCB8fCB3YW50UmVwbHkgPT09IHRydWUgPyAxIDogMCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG5hbWVMZW4sIDE5KTtcbiAgYnVmLndyaXRlKG5hbWUsIDIzLCBuYW1lTGVuLCAnYXNjaWknKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9SRVFVRVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBzdWJzeXN0ZW06ICdcbiAgICAgICAgICAgICArIG5hbWVcbiAgICAgICAgICAgICArICcpJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUub3BlbnNzaF9hZ2VudEZvcndhcmQgPSBmdW5jdGlvbihjaGFuLCB3YW50UmVwbHkpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgMjYgKyAxKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLkNIQU5ORUxfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2hhbiwgMSk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDI2LCA1KTtcbiAgYnVmLndyaXRlKCdhdXRoLWFnZW50LXJlcUBvcGVuc3NoLmNvbScsIDksIDI2LCAnYXNjaWknKTtcblxuICBidWZbMzVdID0gKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkIHx8IHdhbnRSZXBseSA9PT0gdHJ1ZSA/IDEgOiAwKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9SRVFVRVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBhdXRoLWFnZW50LXJlcUBvcGVuc3NoLmNvbSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG4vLyAnc3NoLXVzZXJhdXRoJyBzZXJ2aWNlLXNwZWNpZmljXG5TU0gyU3RyZWFtLnByb3RvdHlwZS5hdXRoUGFzc3dvcmQgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciB1c2VyTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgodXNlcm5hbWUpO1xuICB2YXIgcGFzc0xlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhc3N3b3JkKTtcbiAgdmFyIHAgPSAwO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyB1c2VyTGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgMTQgLy8gXCJzc2gtY29ubmVjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgOCAvLyBcInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBwYXNzTGVuKTtcblxuICBidWZbcF0gPSBNRVNTQUdFLlVTRVJBVVRIX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHVzZXJMZW4sICsrcCk7XG4gIGJ1Zi53cml0ZSh1c2VybmFtZSwgcCArPSA0LCB1c2VyTGVuLCAndXRmOCcpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAxNCwgcCArPSB1c2VyTGVuKTtcbiAgYnVmLndyaXRlKCdzc2gtY29ubmVjdGlvbicsIHAgKz0gNCwgMTQsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCA4LCBwICs9IDE0KTtcbiAgYnVmLndyaXRlKCdwYXNzd29yZCcsIHAgKz0gNCwgOCwgJ2FzY2lpJyk7XG5cbiAgYnVmW3AgKz0gOF0gPSAwO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwYXNzTGVuLCArK3ApO1xuICBidWYud3JpdGUocGFzc3dvcmQsIHAgKz0gNCwgcGFzc0xlbiwgJ3V0ZjgnKTtcblxuICB0aGlzLl9zdGF0ZS5hdXRoc1F1ZXVlLnB1c2goJ3Bhc3N3b3JkJyk7XG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9SRVFVRVNUIChwYXNzd29yZCknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5hdXRoUEsgPSBmdW5jdGlvbih1c2VybmFtZSwgcHViS2V5LCBjYlNpZ24pIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG91dHN0YXRlID0gdGhpcy5fc3RhdGUub3V0Z29pbmc7XG4gIHZhciBrZXlUeXBlO1xuXG4gIGlmICh0eXBlb2YgcHViS2V5LmdldFB1YmxpY1NTSCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGtleVR5cGUgPSBwdWJLZXkudHlwZTtcbiAgICBwdWJLZXkgPSBwdWJLZXkuZ2V0UHVibGljU1NIKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5VHlwZSA9IHB1YktleS50b1N0cmluZygnYXNjaWknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgKyByZWFkVUludDMyQkUocHViS2V5LCAwKSk7XG4gIH1cblxuICB2YXIgdXNlckxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHVzZXJuYW1lKTtcbiAgdmFyIGFsZ29MZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChrZXlUeXBlKTtcbiAgdmFyIHB1YktleUxlbiA9IHB1YktleS5sZW5ndGg7XG4gIHZhciBzZXNMZW4gPSBvdXRzdGF0ZS5zZXNzaW9uSWQubGVuZ3RoO1xuICB2YXIgcCA9IDA7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoKGNiU2lnbiA/IDQgKyBzZXNMZW4gOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHVzZXJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyAxNCAvLyBcInNzaC1jb25uZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyA5IC8vIFwicHVibGlja2V5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBhbGdvTGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgcHViS2V5TGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gIGlmIChjYlNpZ24pIHtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1Ziwgc2VzTGVuLCBwKTtcbiAgICBvdXRzdGF0ZS5zZXNzaW9uSWQuY29weShidWYsIHAgKz0gNCk7XG4gICAgYnVmW3AgKz0gc2VzTGVuXSA9IE1FU1NBR0UuVVNFUkFVVEhfUkVRVUVTVDtcbiAgfSBlbHNlIHtcbiAgICBidWZbcF0gPSBNRVNTQUdFLlVTRVJBVVRIX1JFUVVFU1Q7XG4gIH1cblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdXNlckxlbiwgKytwKTtcbiAgYnVmLndyaXRlKHVzZXJuYW1lLCBwICs9IDQsIHVzZXJMZW4sICd1dGY4Jyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDE0LCBwICs9IHVzZXJMZW4pO1xuICBidWYud3JpdGUoJ3NzaC1jb25uZWN0aW9uJywgcCArPSA0LCAxNCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDksIHAgKz0gMTQpO1xuICBidWYud3JpdGUoJ3B1YmxpY2tleScsIHAgKz0gNCwgOSwgJ2FzY2lpJyk7XG5cbiAgYnVmW3AgKz0gOV0gPSAoY2JTaWduID8gMSA6IDApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBhbGdvTGVuLCArK3ApO1xuICBidWYud3JpdGUoa2V5VHlwZSwgcCArPSA0LCBhbGdvTGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcHViS2V5TGVuLCBwICs9IGFsZ29MZW4pO1xuICBwdWJLZXkuY29weShidWYsIHAgKz0gNCk7XG5cbiAgaWYgKCFjYlNpZ24pIHtcbiAgICB0aGlzLl9zdGF0ZS5hdXRoc1F1ZXVlLnB1c2goJ3B1YmxpY2tleScpO1xuICAgIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9SRVFVRVNUIChwdWJsaWNrZXkgLS0gY2hlY2spJyk7XG4gICAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbiAgfVxuXG4gIGNiU2lnbihidWYsIGZ1bmN0aW9uKHNpZ25hdHVyZSkge1xuICAgIHNpZ25hdHVyZSA9IGNvbnZlcnRTaWduYXR1cmUoc2lnbmF0dXJlLCBrZXlUeXBlKTtcbiAgICBpZiAoc2lnbmF0dXJlID09PSBmYWxzZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3Igd2hpbGUgY29udmVydGluZyBoYW5kc2hha2Ugc2lnbmF0dXJlJyk7XG5cbiAgICB2YXIgc2lnTGVuID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgICB2YXIgc2lnYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHVzZXJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIDE0IC8vIFwic3NoLWNvbm5lY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgOSAvLyBcInB1YmxpY2tleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIGFsZ29MZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHB1YktleUxlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0IC8vIDQgKyBhbGdvTGVuICsgNCArIHNpZ0xlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgYWxnb0xlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgc2lnTGVuKTtcblxuICAgIHAgPSAwO1xuXG4gICAgc2lnYnVmW3BdID0gTUVTU0FHRS5VU0VSQVVUSF9SRVFVRVNUO1xuXG4gICAgd3JpdGVVSW50MzJCRShzaWdidWYsIHVzZXJMZW4sICsrcCk7XG4gICAgc2lnYnVmLndyaXRlKHVzZXJuYW1lLCBwICs9IDQsIHVzZXJMZW4sICd1dGY4Jyk7XG5cbiAgICB3cml0ZVVJbnQzMkJFKHNpZ2J1ZiwgMTQsIHAgKz0gdXNlckxlbik7XG4gICAgc2lnYnVmLndyaXRlKCdzc2gtY29ubmVjdGlvbicsIHAgKz0gNCwgMTQsICdhc2NpaScpO1xuXG4gICAgd3JpdGVVSW50MzJCRShzaWdidWYsIDksIHAgKz0gMTQpO1xuICAgIHNpZ2J1Zi53cml0ZSgncHVibGlja2V5JywgcCArPSA0LCA5LCAnYXNjaWknKTtcblxuICAgIHNpZ2J1ZltwICs9IDldID0gMTtcblxuICAgIHdyaXRlVUludDMyQkUoc2lnYnVmLCBhbGdvTGVuLCArK3ApO1xuICAgIHNpZ2J1Zi53cml0ZShrZXlUeXBlLCBwICs9IDQsIGFsZ29MZW4sICdhc2NpaScpO1xuXG4gICAgd3JpdGVVSW50MzJCRShzaWdidWYsIHB1YktleUxlbiwgcCArPSBhbGdvTGVuKTtcbiAgICBwdWJLZXkuY29weShzaWdidWYsIHAgKz0gNCk7XG4gICAgd3JpdGVVSW50MzJCRShzaWdidWYsIDQgKyBhbGdvTGVuICsgNCArIHNpZ0xlbiwgcCArPSBwdWJLZXlMZW4pO1xuICAgIHdyaXRlVUludDMyQkUoc2lnYnVmLCBhbGdvTGVuLCBwICs9IDQpO1xuICAgIHNpZ2J1Zi53cml0ZShrZXlUeXBlLCBwICs9IDQsIGFsZ29MZW4sICdhc2NpaScpO1xuICAgIHdyaXRlVUludDMyQkUoc2lnYnVmLCBzaWdMZW4sIHAgKz0gYWxnb0xlbik7XG4gICAgc2lnbmF0dXJlLmNvcHkoc2lnYnVmLCBwICs9IDQpO1xuXG4gICAgLy8gU2VydmVycyBzaG91bGRuJ3Qgc2VuZCBwYWNrZXQgdHlwZSA2MCBpbiByZXNwb25zZSB0byBzaWduZWQgcHVibGlja2V5XG4gICAgLy8gYXR0ZW1wdHMsIGJ1dCBpZiB0aGV5IGRvLCBpbnRlcnByZXQgYXMgdHlwZSA2MC5cbiAgICBzZWxmLl9zdGF0ZS5hdXRoc1F1ZXVlLnB1c2goJ3B1YmxpY2tleScpO1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9SRVFVRVNUIChwdWJsaWNrZXkpJyk7XG4gICAgcmV0dXJuIHNlbmQoc2VsZiwgc2lnYnVmKTtcbiAgfSk7XG4gIHJldHVybiB0cnVlO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmF1dGhIb3N0YmFzZWQgPSBmdW5jdGlvbih1c2VybmFtZSwgcHViS2V5LCBob3N0bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybG9jYWwsIGNiU2lnbikge1xuICAvLyBUT0RPOiBNYWtlIERSWSBieSBzaGFyaW5nIHNpbWlsYXIgY29kZSB3aXRoIGF1dGhQSygpXG5cbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG91dHN0YXRlID0gdGhpcy5fc3RhdGUub3V0Z29pbmc7XG4gIHZhciBrZXlUeXBlO1xuXG4gIGlmICh0eXBlb2YgcHViS2V5LmdldFB1YmxpY1NTSCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGtleVR5cGUgPSBwdWJLZXkudHlwZTtcbiAgICBwdWJLZXkgPSBwdWJLZXkuZ2V0UHVibGljU1NIKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5VHlwZSA9IHB1YktleS50b1N0cmluZygnYXNjaWknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgKyByZWFkVUludDMyQkUocHViS2V5LCAwKSk7XG4gIH1cblxuICB2YXIgdXNlckxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHVzZXJuYW1lKTtcbiAgdmFyIGFsZ29MZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChrZXlUeXBlKTtcbiAgdmFyIHB1YktleUxlbiA9IHB1YktleS5sZW5ndGg7XG4gIHZhciBzZXNMZW4gPSBvdXRzdGF0ZS5zZXNzaW9uSWQubGVuZ3RoO1xuICB2YXIgaG9zdG5hbWVMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChob3N0bmFtZSk7XG4gIHZhciB1c2VybG9jYWxMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aCh1c2VybG9jYWwpO1xuICB2YXIgcCA9IDA7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIHNlc0xlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHVzZXJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyAxNCAvLyBcInNzaC1jb25uZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyA5IC8vIFwiaG9zdGJhc2VkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBhbGdvTGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgcHViS2V5TGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgaG9zdG5hbWVMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyB1c2VybG9jYWxMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHNlc0xlbiwgcCk7XG4gIG91dHN0YXRlLnNlc3Npb25JZC5jb3B5KGJ1ZiwgcCArPSA0KTtcblxuICBidWZbcCArPSBzZXNMZW5dID0gTUVTU0FHRS5VU0VSQVVUSF9SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCB1c2VyTGVuLCArK3ApO1xuICBidWYud3JpdGUodXNlcm5hbWUsIHAgKz0gNCwgdXNlckxlbiwgJ3V0ZjgnKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMTQsIHAgKz0gdXNlckxlbik7XG4gIGJ1Zi53cml0ZSgnc3NoLWNvbm5lY3Rpb24nLCBwICs9IDQsIDE0LCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgOSwgcCArPSAxNCk7XG4gIGJ1Zi53cml0ZSgnaG9zdGJhc2VkJywgcCArPSA0LCA5LCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYWxnb0xlbiwgcCArPSA5KTtcbiAgYnVmLndyaXRlKGtleVR5cGUsIHAgKz0gNCwgYWxnb0xlbiwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHB1YktleUxlbiwgcCArPSBhbGdvTGVuKTtcbiAgcHViS2V5LmNvcHkoYnVmLCBwICs9IDQpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBob3N0bmFtZUxlbiwgcCArPSBwdWJLZXlMZW4pO1xuICBidWYud3JpdGUoaG9zdG5hbWUsIHAgKz0gNCwgaG9zdG5hbWVMZW4sICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCB1c2VybG9jYWxMZW4sIHAgKz0gaG9zdG5hbWVMZW4pO1xuICBidWYud3JpdGUodXNlcmxvY2FsLCBwICs9IDQsIHVzZXJsb2NhbExlbiwgJ3V0ZjgnKTtcblxuICBjYlNpZ24oYnVmLCBmdW5jdGlvbihzaWduYXR1cmUpIHtcbiAgICBzaWduYXR1cmUgPSBjb252ZXJ0U2lnbmF0dXJlKHNpZ25hdHVyZSwga2V5VHlwZSk7XG4gICAgaWYgKHNpZ25hdHVyZSA9PT0gZmFsc2UpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIGNvbnZlcnRpbmcgaGFuZHNoYWtlIHNpZ25hdHVyZScpO1xuXG4gICAgdmFyIHNpZ0xlbiA9IHNpZ25hdHVyZS5sZW5ndGg7XG4gICAgdmFyIHNpZ2J1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgoYnVmLmxlbmd0aCAtIHNlc0xlbikgKyBzaWdMZW4pO1xuXG4gICAgYnVmLmNvcHkoc2lnYnVmLCAwLCA0ICsgc2VzTGVuKTtcbiAgICB3cml0ZVVJbnQzMkJFKHNpZ2J1Ziwgc2lnTGVuLCBzaWdidWYubGVuZ3RoIC0gc2lnTGVuIC0gNCk7XG4gICAgc2lnbmF0dXJlLmNvcHkoc2lnYnVmLCBzaWdidWYubGVuZ3RoIC0gc2lnTGVuKTtcblxuICAgIHNlbGYuX3N0YXRlLmF1dGhzUXVldWUucHVzaCgnaG9zdGJhc2VkJyk7XG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIFVTRVJBVVRIX1JFUVVFU1QgKGhvc3RiYXNlZCknKTtcbiAgICByZXR1cm4gc2VuZChzZWxmLCBzaWdidWYpO1xuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuYXV0aEtleWJvYXJkID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciB1c2VyTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgodXNlcm5hbWUpO1xuICB2YXIgcCA9IDA7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHVzZXJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyAxNCAvLyBcInNzaC1jb25uZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyAyMCAvLyBcImtleWJvYXJkLWludGVyYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgLy8gbm8gbGFuZ3VhZ2Ugc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0IC8vIG5vIHN1Ym1ldGhvZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgYnVmW3BdID0gTUVTU0FHRS5VU0VSQVVUSF9SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCB1c2VyTGVuLCArK3ApO1xuICBidWYud3JpdGUodXNlcm5hbWUsIHAgKz0gNCwgdXNlckxlbiwgJ3V0ZjgnKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMTQsIHAgKz0gdXNlckxlbik7XG4gIGJ1Zi53cml0ZSgnc3NoLWNvbm5lY3Rpb24nLCBwICs9IDQsIDE0LCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMjAsIHAgKz0gMTQpO1xuICBidWYud3JpdGUoJ2tleWJvYXJkLWludGVyYWN0aXZlJywgcCArPSA0LCAyMCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDAsIHAgKz0gMjApO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAwLCBwICs9IDQpO1xuXG4gIHRoaXMuX3N0YXRlLmF1dGhzUXVldWUucHVzaCgna2V5Ym9hcmQtaW50ZXJhY3RpdmUnKTtcbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIFVTRVJBVVRIX1JFUVVFU1QgKGtleWJvYXJkLWludGVyYWN0aXZlKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmF1dGhOb25lID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgaWYgKHRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50LW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBzZXJ2ZXIgbW9kZScpO1xuXG4gIHZhciB1c2VyTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgodXNlcm5hbWUpO1xuICB2YXIgcCA9IDA7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIHVzZXJMZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyAxNCAvLyBcInNzaC1jb25uZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyA0IC8vIFwibm9uZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gIGJ1ZltwXSA9IE1FU1NBR0UuVVNFUkFVVEhfUkVRVUVTVDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdXNlckxlbiwgKytwKTtcbiAgYnVmLndyaXRlKHVzZXJuYW1lLCBwICs9IDQsIHVzZXJMZW4sICd1dGY4Jyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDE0LCBwICs9IHVzZXJMZW4pO1xuICBidWYud3JpdGUoJ3NzaC1jb25uZWN0aW9uJywgcCArPSA0LCAxNCwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDQsIHAgKz0gMTQpO1xuICBidWYud3JpdGUoJ25vbmUnLCBwICs9IDQsIDQsICdhc2NpaScpO1xuXG4gIHRoaXMuX3N0YXRlLmF1dGhzUXVldWUucHVzaCgnbm9uZScpO1xuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgVVNFUkFVVEhfUkVRVUVTVCAobm9uZSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5hdXRoSW5mb1JlcyA9IGZ1bmN0aW9uKHJlc3BvbnNlcykge1xuICBpZiAodGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQtb25seSBtZXRob2QgY2FsbGVkIGluIHNlcnZlciBtb2RlJyk7XG5cbiAgdmFyIHJlc3BvbnNlc0xlbiA9IDA7XG4gIHZhciBwID0gMDtcbiAgdmFyIHJlc0xlbjtcbiAgdmFyIGxlbjtcbiAgdmFyIGk7XG5cbiAgaWYgKHJlc3BvbnNlcykge1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlc3BvbnNlcy5sZW5ndGg7IGkgPCBsZW47ICsraSlcbiAgICAgIHJlc3BvbnNlc0xlbiArPSA0ICsgQnVmZmVyLmJ5dGVMZW5ndGgocmVzcG9uc2VzW2ldKTtcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgcmVzcG9uc2VzTGVuKTtcblxuICBidWZbcCsrXSA9IE1FU1NBR0UuVVNFUkFVVEhfSU5GT19SRVNQT05TRTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcmVzcG9uc2VzID8gcmVzcG9uc2VzLmxlbmd0aCA6IDAsIHApO1xuICBpZiAocmVzcG9uc2VzKSB7XG4gICAgcCArPSA0O1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlc3BvbnNlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgcmVzTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgocmVzcG9uc2VzW2ldKTtcbiAgICAgIHdyaXRlVUludDMyQkUoYnVmLCByZXNMZW4sIHApO1xuICAgICAgcCArPSA0O1xuICAgICAgaWYgKHJlc0xlbikge1xuICAgICAgICBidWYud3JpdGUocmVzcG9uc2VzW2ldLCBwLCByZXNMZW4sICd1dGY4Jyk7XG4gICAgICAgIHAgKz0gcmVzTGVuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9JTkZPX1JFU1BPTlNFJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuXG4vLyBTZXJ2ZXItc3BlY2lmaWMgbWV0aG9kc1xuLy8gR2xvYmFsXG5TU0gyU3RyZWFtLnByb3RvdHlwZS5zZXJ2aWNlQWNjZXB0ID0gZnVuY3Rpb24oc3ZjTmFtZSkge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIHZhciBzdmNOYW1lTGVuID0gc3ZjTmFtZS5sZW5ndGg7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBzdmNOYW1lTGVuKTtcblxuICBidWZbMF0gPSBNRVNTQUdFLlNFUlZJQ0VfQUNDRVBUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBzdmNOYW1lTGVuLCAxKTtcbiAgYnVmLndyaXRlKHN2Y05hbWUsIDUsIHN2Y05hbWVMZW4sICdhc2NpaScpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBTRVJWSUNFX0FDQ0VQVCAoJyArIHN2Y05hbWUgKyAnKScpO1xuICBzZW5kKHRoaXMsIGJ1Zik7XG5cbiAgaWYgKHRoaXMuc2VydmVyICYmIHRoaXMuYmFubmVyICYmIHN2Y05hbWUgPT09ICdzc2gtdXNlcmF1dGgnKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX0JBTk5FUlxuICAgICAgc3RyaW5nICAgIG1lc3NhZ2UgaW4gSVNPLTEwNjQ2IFVURi04IGVuY29kaW5nXG4gICAgICBzdHJpbmcgICAgbGFuZ3VhZ2UgdGFnXG4gICAgKi9cbiAgICB2YXIgYmFubmVyTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgodGhpcy5iYW5uZXIpO1xuICAgIHZhciBwYWNrZXRMZW4gPSAxICsgNCArIGJhbm5lckxlbiArIDQ7XG4gICAgdmFyIHBhY2tldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShwYWNrZXRMZW4pO1xuICAgIHBhY2tldFswXSA9IE1FU1NBR0UuVVNFUkFVVEhfQkFOTkVSO1xuICAgIHdyaXRlVUludDMyQkUocGFja2V0LCBiYW5uZXJMZW4sIDEpO1xuICAgIHBhY2tldC53cml0ZSh0aGlzLmJhbm5lciwgNSwgYmFubmVyTGVuLCAndXRmOCcpO1xuICAgIHBhY2tldC5maWxsKDAsIHBhY2tldExlbiAtIDQpOyAvLyBFbXB0eSBsYW5ndWFnZSB0YWdcbiAgICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgVVNFUkFVVEhfQkFOTkVSJyk7XG4gICAgc2VuZCh0aGlzLCBwYWNrZXQpO1xuICAgIHRoaXMuYmFubmVyID0gdW5kZWZpbmVkOyAvLyBQcmV2ZW50IGJhbm5lciBmcm9tIGJlaW5nIGRpc3BsYXllZCBhZ2FpblxuICB9XG59O1xuLy8gJ3NzaC1jb25uZWN0aW9uJyBzZXJ2aWNlLXNwZWNpZmljXG5TU0gyU3RyZWFtLnByb3RvdHlwZS5mb3J3YXJkZWRUY3BpcCA9IGZ1bmN0aW9uKGNoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ZnKSB7XG4gIGlmICghdGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXItb25seSBtZXRob2QgY2FsbGVkIGluIGNsaWVudCBtb2RlJyk7XG5cbiAgdmFyIGJvdW5kQWRkckxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNmZy5ib3VuZEFkZHIpO1xuICB2YXIgcmVtb3RlQWRkckxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNmZy5yZW1vdGVBZGRyKTtcbiAgdmFyIHAgPSAzNiArIGJvdW5kQWRkckxlbjtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgNCArIDE1ICsgNCArIDQgKyA0ICsgNCArIGJvdW5kQWRkckxlbiArIDQgKyA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyByZW1vdGVBZGRyTGVuICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX09QRU47XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDE1LCAxKTtcbiAgYnVmLndyaXRlKCdmb3J3YXJkZWQtdGNwaXAnLCA1LCAxNSwgJ2FzY2lpJyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNoYW4sIDIwKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaW5pdFdpbmRvdywgMjQpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBtYXhQYWNrZXQsIDI4KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYm91bmRBZGRyTGVuLCAzMik7XG4gIGJ1Zi53cml0ZShjZmcuYm91bmRBZGRyLCAzNiwgYm91bmRBZGRyTGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2ZnLmJvdW5kUG9ydCwgcCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHJlbW90ZUFkZHJMZW4sIHAgKz0gNCk7XG4gIGJ1Zi53cml0ZShjZmcucmVtb3RlQWRkciwgcCArPSA0LCByZW1vdGVBZGRyTGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2ZnLnJlbW90ZVBvcnQsIHAgKz0gcmVtb3RlQWRkckxlbik7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfT1BFTiAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgZm9yd2FyZGVkLXRjcGlwKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLngxMSA9IGZ1bmN0aW9uKGNoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCwgY2ZnKSB7XG4gIGlmICghdGhpcy5zZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXItb25seSBtZXRob2QgY2FsbGVkIGluIGNsaWVudCBtb2RlJyk7XG5cbiAgdmFyIGFkZHJMZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChjZmcub3JpZ2luQWRkcik7XG4gIHZhciBwID0gMjQgKyBhZGRyTGVuO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgMyArIDQgKyA0ICsgNCArIDQgKyBhZGRyTGVuICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX09QRU47XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDMsIDEpO1xuICBidWYud3JpdGUoJ3gxMScsIDUsIDMsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCA4KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaW5pdFdpbmRvdywgMTIpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBtYXhQYWNrZXQsIDE2KTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYWRkckxlbiwgMjApO1xuICBidWYud3JpdGUoY2ZnLm9yaWdpbkFkZHIsIDI0LCBhZGRyTGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgY2ZnLm9yaWdpblBvcnQsIHApO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX09QRU4gKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIHgxMSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5vcGVuc3NoX2F1dGhBZ2VudCA9IGZ1bmN0aW9uKGNoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCkge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyAyMiArIDQgKyA0ICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX09QRU47XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIDIyLCAxKTtcbiAgYnVmLndyaXRlKCdhdXRoLWFnZW50QG9wZW5zc2guY29tJywgNSwgMjIsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAyNyk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGluaXRXaW5kb3csIDMxKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbWF4UGFja2V0LCAzNSk7XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIENIQU5ORUxfT1BFTiAoJ1xuICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICsgJywgYXV0aC1hZ2VudEBvcGVuc3NoLmNvbSknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5vcGVuc3NoX2ZvcndhcmRlZFN0cmVhbUxvY2FsID0gZnVuY3Rpb24oY2hhbiwgaW5pdFdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQYWNrZXQsIGNmZykge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIHZhciBwYXRobGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoY2ZnLnNvY2tldFBhdGgpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgMzMgKyA0ICsgNCArIDQgKyA0ICsgcGF0aGxlbiArIDQpO1xuXG4gIGJ1ZlswXSA9IE1FU1NBR0UuQ0hBTk5FTF9PUEVOO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAzMywgMSk7XG4gIGJ1Zi53cml0ZSgnZm9yd2FyZGVkLXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJywgNSwgMzMsICdhc2NpaScpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBjaGFuLCAzOCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGluaXRXaW5kb3csIDQyKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbWF4UGFja2V0LCA0Nik7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHBhdGhsZW4sIDUwKTtcbiAgYnVmLndyaXRlKGNmZy5zb2NrZXRQYXRoLCA1NCwgcGF0aGxlbiwgJ3V0ZjgnKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMCwgNTQgKyBwYXRobGVuKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9PUEVOICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBmb3J3YXJkZWQtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20pJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuZXhpdFN0YXR1cyA9IGZ1bmN0aW9uKGNoYW4sIHN0YXR1cykge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIC8vIERvZXMgbm90IGNvbnN1bWUgd2luZG93IHNwYWNlXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgMTEgKyAxICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNoYW4sIDEpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAxMSwgNSk7XG4gIGJ1Zi53cml0ZSgnZXhpdC1zdGF0dXMnLCA5LCAxMSwgJ2FzY2lpJyk7XG5cbiAgYnVmWzIwXSA9IDA7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIHN0YXR1cywgMjEpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBDSEFOTkVMX1JFUVVFU1QgKCdcbiAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICArICcsIGV4aXQtc3RhdHVzKScpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmV4aXRTaWduYWwgPSBmdW5jdGlvbihjaGFuLCBuYW1lLCBjb3JlRHVtcGVkLCBtc2cpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICAvLyBEb2VzIG5vdCBjb25zdW1lIHdpbmRvdyBzcGFjZVxuICB2YXIgbmFtZUxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG5hbWUpO1xuICB2YXIgbXNnTGVuID0gKG1zZyA/IEJ1ZmZlci5ieXRlTGVuZ3RoKG1zZykgOiAwKTtcbiAgdmFyIHAgPSAyNSArIG5hbWVMZW47XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyA0ICsgMTEgKyAxICsgNCArIG5hbWVMZW4gKyAxICsgNCArIG1zZ0xlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5DSEFOTkVMX1JFUVVFU1Q7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGNoYW4sIDEpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAxMSwgNSk7XG4gIGJ1Zi53cml0ZSgnZXhpdC1zaWduYWwnLCA5LCAxMSwgJ2FzY2lpJyk7XG5cbiAgYnVmWzIwXSA9IDA7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG5hbWVMZW4sIDIxKTtcbiAgYnVmLndyaXRlKG5hbWUsIDI1LCBuYW1lTGVuLCAndXRmOCcpO1xuXG4gIGJ1ZltwKytdID0gKGNvcmVEdW1wZWQgPyAxIDogMCk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIG1zZ0xlbiwgcCk7XG4gIHAgKz0gNDtcbiAgaWYgKG1zZ0xlbikge1xuICAgIGJ1Zi53cml0ZShtc2csIHAsIG1zZ0xlbiwgJ3V0ZjgnKTtcbiAgICBwICs9IG1zZ0xlbjtcbiAgfVxuXG4gIHdyaXRlVUludDMyQkUoYnVmLCAwLCBwKTtcblxuICB0aGlzLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgQ0hBTk5FTF9SRVFVRVNUICgnXG4gICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgKyAnLCBleGl0LXNpZ25hbCknKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG4vLyAnc3NoLXVzZXJhdXRoJyBzZXJ2aWNlLXNwZWNpZmljXG5TU0gyU3RyZWFtLnByb3RvdHlwZS5hdXRoRmFpbHVyZSA9IGZ1bmN0aW9uKGF1dGhNZXRob2RzLCBpc1BhcnRpYWwpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICB2YXIgYXV0aHNRdWV1ZSA9IHRoaXMuX3N0YXRlLmF1dGhzUXVldWU7XG4gIGlmICghYXV0aHNRdWV1ZS5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBhdXRoIGluIHByb2dyZXNzJyk7XG5cbiAgdmFyIG1ldGhvZHM7XG5cbiAgaWYgKHR5cGVvZiBhdXRoTWV0aG9kcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaXNQYXJ0aWFsID0gYXV0aE1ldGhvZHM7XG4gICAgYXV0aE1ldGhvZHMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoYXV0aE1ldGhvZHMpIHtcbiAgICBtZXRob2RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGF1dGhNZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBpZiAoYXV0aE1ldGhvZHNbaV0udG9Mb3dlckNhc2UoKSA9PT0gJ25vbmUnKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIG1ldGhvZHMucHVzaChhdXRoTWV0aG9kc1tpXSk7XG4gICAgfVxuICAgIG1ldGhvZHMgPSBtZXRob2RzLmpvaW4oJywnKTtcbiAgfSBlbHNlXG4gICAgbWV0aG9kcyA9ICcnO1xuXG4gIHZhciBtZXRob2RzTGVuID0gbWV0aG9kcy5sZW5ndGg7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBtZXRob2RzTGVuICsgMSk7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5VU0VSQVVUSF9GQUlMVVJFO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBtZXRob2RzTGVuLCAxKTtcbiAgYnVmLndyaXRlKG1ldGhvZHMsIDUsIG1ldGhvZHNMZW4sICdhc2NpaScpO1xuXG4gIGJ1Zls1ICsgbWV0aG9kc0xlbl0gPSAoaXNQYXJ0aWFsID09PSB0cnVlID8gMSA6IDApO1xuXG4gIHRoaXMuX3N0YXRlLmF1dGhzUXVldWUuc2hpZnQoKTtcbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIFVTRVJBVVRIX0ZBSUxVUkUnKTtcbiAgcmV0dXJuIHNlbmQodGhpcywgYnVmKTtcbn07XG5TU0gyU3RyZWFtLnByb3RvdHlwZS5hdXRoU3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuc2VydmVyKVxuICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyLW9ubHkgbWV0aG9kIGNhbGxlZCBpbiBjbGllbnQgbW9kZScpO1xuXG4gIHZhciBhdXRoc1F1ZXVlID0gdGhpcy5fc3RhdGUuYXV0aHNRdWV1ZTtcbiAgaWYgKCFhdXRoc1F1ZXVlLmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGF1dGggaW4gcHJvZ3Jlc3MnKTtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgdmFyIG91dHN0YXRlID0gc3RhdGUub3V0Z29pbmc7XG4gIHZhciBpbnN0YXRlID0gc3RhdGUuaW5jb21pbmc7XG5cbiAgc3RhdGUuYXV0aHNRdWV1ZS5zaGlmdCgpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9TVUNDRVNTJyk7XG4gIHZhciByZXQgPSBzZW5kKHRoaXMsIFVTRVJBVVRIX1NVQ0NFU1NfUEFDS0VUKTtcblxuICBpZiAob3V0c3RhdGUuY29tcHJlc3MudHlwZSA9PT0gJ3psaWJAb3BlbnNzaC5jb20nKSB7XG4gICAgb3V0c3RhdGUuY29tcHJlc3MuaW5zdGFuY2UgPSB6bGliLmNyZWF0ZURlZmxhdGUoWkxJQl9PUFRTKTtcbiAgICBvdXRzdGF0ZS5jb21wcmVzcy5xdWV1ZSA9IFtdO1xuICB9XG4gIGlmIChpbnN0YXRlLmRlY29tcHJlc3MudHlwZSA9PT0gJ3psaWJAb3BlbnNzaC5jb20nKVxuICAgIGluc3RhdGUuZGVjb21wcmVzcy5pbnN0YW5jZSA9IHpsaWIuY3JlYXRlSW5mbGF0ZShaTElCX09QVFMpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuYXV0aFBLT0sgPSBmdW5jdGlvbihrZXlBbGdvLCBrZXkpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICB2YXIgYXV0aHNRdWV1ZSA9IHRoaXMuX3N0YXRlLmF1dGhzUXVldWU7XG4gIGlmICghYXV0aHNRdWV1ZS5sZW5ndGggfHwgYXV0aHNRdWV1ZVswXSAhPT0gJ3B1YmxpY2tleScpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdcInB1YmxpY2tleVwiIGF1dGggbm90IGluIHByb2dyZXNzJyk7XG5cbiAgdmFyIGtleUFsZ29MZW4gPSBrZXlBbGdvLmxlbmd0aDtcbiAgdmFyIGtleUxlbiA9IGtleS5sZW5ndGg7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBrZXlBbGdvTGVuICsgNCArIGtleUxlbik7XG5cbiAgYnVmWzBdID0gTUVTU0FHRS5VU0VSQVVUSF9QS19PSztcblxuICB3cml0ZVVJbnQzMkJFKGJ1Ziwga2V5QWxnb0xlbiwgMSk7XG4gIGJ1Zi53cml0ZShrZXlBbGdvLCA1LCBrZXlBbGdvTGVuLCAnYXNjaWknKTtcblxuICB3cml0ZVVJbnQzMkJFKGJ1Ziwga2V5TGVuLCA1ICsga2V5QWxnb0xlbik7XG4gIGtleS5jb3B5KGJ1ZiwgNSArIGtleUFsZ29MZW4gKyA0KTtcblxuICB0aGlzLl9zdGF0ZS5hdXRoc1F1ZXVlLnNoaWZ0KCk7XG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9QS19PSycpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblNTSDJTdHJlYW0ucHJvdG90eXBlLmF1dGhQYXNzd2RDaGcgPSBmdW5jdGlvbihwcm9tcHQsIGxhbmcpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICB2YXIgcHJvbXB0TGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgocHJvbXB0KTtcbiAgdmFyIGxhbmdMZW4gPSBsYW5nID8gbGFuZy5sZW5ndGggOiAwO1xuICB2YXIgcCA9IDA7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBwcm9tcHRMZW4gKyA0ICsgbGFuZ0xlbik7XG5cbiAgYnVmW3BdID0gTUVTU0FHRS5VU0VSQVVUSF9QQVNTV0RfQ0hBTkdFUkVRO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwcm9tcHRMZW4sICsrcCk7XG4gIGJ1Zi53cml0ZShwcm9tcHQsIHAgKz0gNCwgcHJvbXB0TGVuLCAndXRmOCcpO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBsYW5nTGVuLCBwICs9IHByb21wdExlbik7XG4gIGlmIChsYW5nTGVuKVxuICAgIGJ1Zi53cml0ZShsYW5nLCBwICs9IDQsIGxhbmdMZW4sICdhc2NpaScpO1xuXG4gIHRoaXMuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBVU0VSQVVUSF9QQVNTV0RfQ0hBTkdFUkVRJyk7XG4gIHJldHVybiBzZW5kKHRoaXMsIGJ1Zik7XG59O1xuU1NIMlN0cmVhbS5wcm90b3R5cGUuYXV0aEluZm9SZXEgPSBmdW5jdGlvbihuYW1lLCBpbnN0cnVjdGlvbnMsIHByb21wdHMpIHtcbiAgaWYgKCF0aGlzLnNlcnZlcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlci1vbmx5IG1ldGhvZCBjYWxsZWQgaW4gY2xpZW50IG1vZGUnKTtcblxuICB2YXIgcHJvbXB0c0xlbiA9IDA7XG4gIHZhciBuYW1lTGVuID0gbmFtZSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKG5hbWUpIDogMDtcbiAgdmFyIGluc3RyTGVuID0gaW5zdHJ1Y3Rpb25zID8gQnVmZmVyLmJ5dGVMZW5ndGgoaW5zdHJ1Y3Rpb25zKSA6IDA7XG4gIHZhciBwID0gMDtcbiAgdmFyIHByb21wdExlbjtcbiAgdmFyIHByb21wdDtcbiAgdmFyIGxlbjtcbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gMCwgbGVuID0gcHJvbXB0cy5sZW5ndGg7IGkgPCBsZW47ICsraSlcbiAgICBwcm9tcHRzTGVuICs9IDQgKyBCdWZmZXIuYnl0ZUxlbmd0aChwcm9tcHRzW2ldLnByb21wdCkgKyAxO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyA0ICsgbmFtZUxlbiArIDQgKyBpbnN0ckxlbiArIDQgKyA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBwcm9tcHRzTGVuKTtcblxuICBidWZbcCsrXSA9IE1FU1NBR0UuVVNFUkFVVEhfSU5GT19SRVFVRVNUO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBuYW1lTGVuLCBwKTtcbiAgcCArPSA0O1xuICBpZiAobmFtZSkge1xuICAgIGJ1Zi53cml0ZShuYW1lLCBwLCBuYW1lTGVuLCAndXRmOCcpO1xuICAgIHAgKz0gbmFtZUxlbjtcbiAgfVxuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBpbnN0ckxlbiwgcCk7XG4gIHAgKz0gNDtcbiAgaWYgKGluc3RydWN0aW9ucykge1xuICAgIGJ1Zi53cml0ZShpbnN0cnVjdGlvbnMsIHAsIGluc3RyTGVuLCAndXRmOCcpO1xuICAgIHAgKz0gaW5zdHJMZW47XG4gIH1cblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgMCwgcCk7XG4gIHAgKz0gNDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgcHJvbXB0cy5sZW5ndGgsIHApO1xuICBwICs9IDQ7XG4gIGZvciAoaSA9IDAsIGxlbiA9IHByb21wdHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBwcm9tcHQgPSBwcm9tcHRzW2ldO1xuICAgIHByb21wdExlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHByb21wdC5wcm9tcHQpO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCBwcm9tcHRMZW4sIHApO1xuICAgIHAgKz0gNDtcbiAgICBpZiAocHJvbXB0TGVuKSB7XG4gICAgICBidWYud3JpdGUocHJvbXB0LnByb21wdCwgcCwgcHJvbXB0TGVuLCAndXRmOCcpO1xuICAgICAgcCArPSBwcm9tcHRMZW47XG4gICAgfVxuICAgIGJ1ZltwKytdID0gKHByb21wdC5lY2hvID8gMSA6IDApO1xuICB9XG5cbiAgdGhpcy5kZWJ1ZygnREVCVUc6IE91dGdvaW5nOiBXcml0aW5nIFVTRVJBVVRIX0lORk9fUkVRVUVTVCcpO1xuICByZXR1cm4gc2VuZCh0aGlzLCBidWYpO1xufTtcblxuLy8gU2hhcmVkIGluY29taW5nL3BhcnNlciBmdW5jdGlvbnNcbmZ1bmN0aW9uIG9uRElTQ09OTkVDVChzZWxmLCByZWFzb24sIGNvZGUsIGRlc2MsIGxhbmcpIHsgLy8gQ2xpZW50L1NlcnZlclxuICBpZiAoY29kZSAhPT0gRElTQ09OTkVDVF9SRUFTT04uQllfQVBQTElDQVRJT04pIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKGRlc2MgfHwgcmVhc29uKTtcbiAgICBlcnIuY29kZSA9IGNvZGU7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cbiAgc2VsZi5yZXNldCgpO1xufVxuXG5mdW5jdGlvbiBvbktFWElOSVQoc2VsZiwgaW5pdCwgZmlyc3RGb2xsb3dzKSB7IC8vIENsaWVudC9TZXJ2ZXJcbiAgdmFyIHN0YXRlID0gc2VsZi5fc3RhdGU7XG4gIHZhciBvdXRzdGF0ZSA9IHN0YXRlLm91dGdvaW5nO1xuXG4gIGlmIChvdXRzdGF0ZS5zdGF0dXMgPT09IE9VVF9SRUFEWSkge1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBSZWNlaXZlZCByZS1rZXkgcmVxdWVzdCcpO1xuICAgIG91dHN0YXRlLnN0YXR1cyA9IE9VVF9SRUtFWUlORztcbiAgICBvdXRzdGF0ZS5rZXhpbml0ID0gdW5kZWZpbmVkO1xuICAgIEtFWElOSVQoc2VsZiwgY2hlY2spO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICBpZiAoY2hlY2tfS0VYSU5JVChzZWxmLCBpbml0LCBmaXJzdEZvbGxvd3MpID09PSB0cnVlKSB7XG4gICAgICBpZiAoIXNlbGYuc2VydmVyKSB7XG4gICAgICAgIGlmIChzdGF0ZS5rZXgudHlwZSA9PT0gJ2dyb3VwZXgnKVxuICAgICAgICAgIEtFWERIX0dFWF9SRVEoc2VsZik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBLRVhESF9JTklUKHNlbGYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUuaW5jb21pbmcuZXhwZWN0ZWRQYWNrZXQgPSBzdGF0ZS5rZXgucGt0SW5pdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tfS0VYSU5JVChzZWxmLCBpbml0LCBmaXJzdEZvbGxvd3MpIHtcbiAgdmFyIHN0YXRlID0gc2VsZi5fc3RhdGU7XG4gIHZhciBpbnN0YXRlID0gc3RhdGUuaW5jb21pbmc7XG4gIHZhciBvdXRzdGF0ZSA9IHN0YXRlLm91dGdvaW5nO1xuICB2YXIgZGVidWcgPSBzZWxmLmRlYnVnO1xuICB2YXIgc2VydmVyTGlzdDtcbiAgdmFyIGNsaWVudExpc3Q7XG4gIHZhciB2YWw7XG4gIHZhciBsZW47XG4gIHZhciBpO1xuXG4gIGRlYnVnKCdERUJVRzogQ29tcGFyaW5nIEtFWElOSVRzIC4uLicpO1xuXG4gIHZhciBhbGdvcyA9IHNlbGYuY29uZmlnLmFsZ29yaXRobXM7XG5cbiAgdmFyIGtleExpc3QgPSBhbGdvcy5rZXg7XG4gIGlmIChzZWxmLnJlbW90ZUJ1Z3MgJiBCVUdTLkJBRF9ESEdFWCkge1xuICAgIHZhciBjb3BpZWQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBqID0ga2V4TGlzdC5sZW5ndGggLSAxOyBqID49IDA7IC0taikge1xuICAgICAgaWYgKGtleExpc3Rbal0uaW5kZXhPZignZ3JvdXAtZXhjaGFuZ2UnKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKCFjb3BpZWQpIHtcbiAgICAgICAgICBrZXhMaXN0ID0ga2V4TGlzdC5zbGljZSgpO1xuICAgICAgICAgIGNvcGllZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAga2V4TGlzdC5zcGxpY2UoaiwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ0RFQlVHOiAobG9jYWwpIEtFWCBhbGdvcml0aG1zOiAnICsga2V4TGlzdCk7XG4gIGRlYnVnKCdERUJVRzogKHJlbW90ZSkgS0VYIGFsZ29yaXRobXM6ICcgKyBpbml0LmFsZ29yaXRobXMua2V4KTtcbiAgaWYgKHNlbGYuc2VydmVyKSB7XG4gICAgc2VydmVyTGlzdCA9IGtleExpc3Q7XG4gICAgY2xpZW50TGlzdCA9IGluaXQuYWxnb3JpdGhtcy5rZXg7XG4gIH0gZWxzZSB7XG4gICAgc2VydmVyTGlzdCA9IGluaXQuYWxnb3JpdGhtcy5rZXg7XG4gICAgY2xpZW50TGlzdCA9IGtleExpc3Q7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGFncmVlYWJsZSBrZXkgZXhjaGFuZ2UgYWxnb3JpdGhtXG4gIGZvciAoaSA9IDAsIGxlbiA9IGNsaWVudExpc3QubGVuZ3RoO1xuICAgICAgIGkgPCBsZW4gJiYgc2VydmVyTGlzdC5pbmRleE9mKGNsaWVudExpc3RbaV0pID09PSAtMTtcbiAgICAgICArK2kpO1xuICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgLy8gTm8gc3VpdGFibGUgbWF0Y2ggZm91bmQhXG4gICAgZGVidWcoJ0RFQlVHOiBObyBtYXRjaGluZyBrZXkgZXhjaGFuZ2UgYWxnb3JpdGhtJyk7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogbm8gbWF0Y2hpbmcga2V5IGV4Y2hhbmdlIGFsZ29yaXRobScpO1xuICAgIGVyci5sZXZlbCA9ICdoYW5kc2hha2UnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5LRVlfRVhDSEFOR0VfRkFJTEVEKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V4X2FsZ29yaXRobSA9IGNsaWVudExpc3RbaV07XG4gIGRlYnVnKCdERUJVRzogS0VYIGFsZ29yaXRobTogJyArIGtleF9hbGdvcml0aG0pO1xuICBpZiAoZmlyc3RGb2xsb3dzXG4gICAgICAmJiAoIWluaXQuYWxnb3JpdGhtcy5rZXgubGVuZ3RoXG4gICAgICAgICAgfHwga2V4X2FsZ29yaXRobSAhPT0gaW5pdC5hbGdvcml0aG1zLmtleFswXSkpIHtcbiAgICAvLyBJZ25vcmUgbmV4dCBpbmNvbWluZyBwYWNrZXQsIGl0IHdhcyBhIHdyb25nIGZpcnN0IGd1ZXNzIGF0IEtFWCBhbGdvcml0aG1cbiAgICBpbnN0YXRlLmlnbm9yZU5leHQgPSB0cnVlO1xuICB9XG5cbiAgZGVidWcoJ0RFQlVHOiAobG9jYWwpIEhvc3Qga2V5IGZvcm1hdHM6ICcgKyBhbGdvcy5zZXJ2ZXJIb3N0S2V5KTtcbiAgZGVidWcoJ0RFQlVHOiAocmVtb3RlKSBIb3N0IGtleSBmb3JtYXRzOiAnICsgaW5pdC5hbGdvcml0aG1zLnNydkhvc3RLZXkpO1xuICBpZiAoc2VsZi5zZXJ2ZXIpIHtcbiAgICBzZXJ2ZXJMaXN0ID0gYWxnb3Muc2VydmVySG9zdEtleTtcbiAgICBjbGllbnRMaXN0ID0gaW5pdC5hbGdvcml0aG1zLnNydkhvc3RLZXk7XG4gIH0gZWxzZSB7XG4gICAgc2VydmVyTGlzdCA9IGluaXQuYWxnb3JpdGhtcy5zcnZIb3N0S2V5O1xuICAgIGNsaWVudExpc3QgPSBhbGdvcy5zZXJ2ZXJIb3N0S2V5O1xuICB9XG4gIC8vIENoZWNrIGZvciBhZ3JlZWFibGUgc2VydmVyIGhvc3Qga2V5IGZvcm1hdFxuICBmb3IgKGkgPSAwLCBsZW4gPSBjbGllbnRMaXN0Lmxlbmd0aDtcbiAgICAgICBpIDwgbGVuICYmIHNlcnZlckxpc3QuaW5kZXhPZihjbGllbnRMaXN0W2ldKSA9PT0gLTE7XG4gICAgICAgKytpKTtcbiAgaWYgKGkgPT09IGxlbikge1xuICAgIC8vIE5vIHN1aXRhYmxlIG1hdGNoIGZvdW5kIVxuICAgIGRlYnVnKCdERUJVRzogTm8gbWF0Y2hpbmcgaG9zdCBrZXkgZm9ybWF0Jyk7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogbm8gbWF0Y2hpbmcgaG9zdCBrZXkgZm9ybWF0Jyk7XG4gICAgZXJyLmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmhvc3RrZXlGb3JtYXQgPSBjbGllbnRMaXN0W2ldO1xuICBkZWJ1ZygnREVCVUc6IEhvc3Qga2V5IGZvcm1hdDogJyArIHN0YXRlLmhvc3RrZXlGb3JtYXQpO1xuXG4gIGRlYnVnKCdERUJVRzogKGxvY2FsKSBDbGllbnQtPlNlcnZlciBjaXBoZXJzOiAnICsgYWxnb3MuY2lwaGVyKTtcbiAgZGVidWcoJ0RFQlVHOiAocmVtb3RlKSBDbGllbnQtPlNlcnZlciBjaXBoZXJzOiAnXG4gICAgICAgICsgaW5pdC5hbGdvcml0aG1zLmNzLmVuY3J5cHQpO1xuICBpZiAoc2VsZi5zZXJ2ZXIpIHtcbiAgICBzZXJ2ZXJMaXN0ID0gYWxnb3MuY2lwaGVyO1xuICAgIGNsaWVudExpc3QgPSBpbml0LmFsZ29yaXRobXMuY3MuZW5jcnlwdDtcbiAgfSBlbHNlIHtcbiAgICBzZXJ2ZXJMaXN0ID0gaW5pdC5hbGdvcml0aG1zLmNzLmVuY3J5cHQ7XG4gICAgY2xpZW50TGlzdCA9IGFsZ29zLmNpcGhlcjtcbiAgfVxuICAvLyBDaGVjayBmb3IgYWdyZWVhYmxlIGNsaWVudC0+c2VydmVyIGNpcGhlclxuICBmb3IgKGkgPSAwLCBsZW4gPSBjbGllbnRMaXN0Lmxlbmd0aDtcbiAgICAgICBpIDwgbGVuICYmIHNlcnZlckxpc3QuaW5kZXhPZihjbGllbnRMaXN0W2ldKSA9PT0gLTE7XG4gICAgICAgKytpKTtcbiAgaWYgKGkgPT09IGxlbikge1xuICAgIC8vIE5vIHN1aXRhYmxlIG1hdGNoIGZvdW5kIVxuICAgIGRlYnVnKCdERUJVRzogTm8gbWF0Y2hpbmcgQ2xpZW50LT5TZXJ2ZXIgY2lwaGVyJyk7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogbm8gbWF0Y2hpbmcgY2xpZW50LT5zZXJ2ZXIgY2lwaGVyJyk7XG4gICAgZXJyLmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzZWxmLnNlcnZlcilcbiAgICB2YWwgPSBpbnN0YXRlLmRlY3J5cHQudHlwZSA9IGNsaWVudExpc3RbaV07XG4gIGVsc2VcbiAgICB2YWwgPSBvdXRzdGF0ZS5lbmNyeXB0LnR5cGUgPSBjbGllbnRMaXN0W2ldO1xuICBkZWJ1ZygnREVCVUc6IENsaWVudC0+U2VydmVyIENpcGhlcjogJyArIHZhbCk7XG5cbiAgZGVidWcoJ0RFQlVHOiAobG9jYWwpIFNlcnZlci0+Q2xpZW50IGNpcGhlcnM6ICcgKyBhbGdvcy5jaXBoZXIpO1xuICBkZWJ1ZygnREVCVUc6IChyZW1vdGUpIFNlcnZlci0+Q2xpZW50IGNpcGhlcnM6ICdcbiAgICAgICAgKyAoaW5pdC5hbGdvcml0aG1zLnNjLmVuY3J5cHQpKTtcbiAgaWYgKHNlbGYuc2VydmVyKSB7XG4gICAgc2VydmVyTGlzdCA9IGFsZ29zLmNpcGhlcjtcbiAgICBjbGllbnRMaXN0ID0gaW5pdC5hbGdvcml0aG1zLnNjLmVuY3J5cHQ7XG4gIH0gZWxzZSB7XG4gICAgc2VydmVyTGlzdCA9IGluaXQuYWxnb3JpdGhtcy5zYy5lbmNyeXB0O1xuICAgIGNsaWVudExpc3QgPSBhbGdvcy5jaXBoZXI7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGFncmVlYWJsZSBzZXJ2ZXItPmNsaWVudCBjaXBoZXJcbiAgZm9yIChpID0gMCwgbGVuID0gY2xpZW50TGlzdC5sZW5ndGg7XG4gICAgICAgaSA8IGxlbiAmJiBzZXJ2ZXJMaXN0LmluZGV4T2YoY2xpZW50TGlzdFtpXSkgPT09IC0xO1xuICAgICAgICsraSk7XG4gIGlmIChpID09PSBsZW4pIHtcbiAgICAvLyBObyBzdWl0YWJsZSBtYXRjaCBmb3VuZCFcbiAgICBkZWJ1ZygnREVCVUc6IE5vIG1hdGNoaW5nIFNlcnZlci0+Q2xpZW50IGNpcGhlcicpO1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0hhbmRzaGFrZSBmYWlsZWQ6IG5vIG1hdGNoaW5nIHNlcnZlci0+Y2xpZW50IGNpcGhlcicpO1xuICAgIGVyci5sZXZlbCA9ICdoYW5kc2hha2UnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5LRVlfRVhDSEFOR0VfRkFJTEVEKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZi5zZXJ2ZXIpXG4gICAgdmFsID0gb3V0c3RhdGUuZW5jcnlwdC50eXBlID0gY2xpZW50TGlzdFtpXTtcbiAgZWxzZVxuICAgIHZhbCA9IGluc3RhdGUuZGVjcnlwdC50eXBlID0gY2xpZW50TGlzdFtpXTtcbiAgZGVidWcoJ0RFQlVHOiBTZXJ2ZXItPkNsaWVudCBDaXBoZXI6ICcgKyB2YWwpO1xuXG4gIGRlYnVnKCdERUJVRzogKGxvY2FsKSBDbGllbnQtPlNlcnZlciBITUFDIGFsZ29yaXRobXM6ICcgKyBhbGdvcy5obWFjKTtcbiAgZGVidWcoJ0RFQlVHOiAocmVtb3RlKSBDbGllbnQtPlNlcnZlciBITUFDIGFsZ29yaXRobXM6ICdcbiAgICAgICAgKyBpbml0LmFsZ29yaXRobXMuY3MubWFjKTtcbiAgaWYgKHNlbGYuc2VydmVyKSB7XG4gICAgc2VydmVyTGlzdCA9IGFsZ29zLmhtYWM7XG4gICAgY2xpZW50TGlzdCA9IGluaXQuYWxnb3JpdGhtcy5jcy5tYWM7XG4gIH0gZWxzZSB7XG4gICAgc2VydmVyTGlzdCA9IGluaXQuYWxnb3JpdGhtcy5jcy5tYWM7XG4gICAgY2xpZW50TGlzdCA9IGFsZ29zLmhtYWM7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGFncmVlYWJsZSBjbGllbnQtPnNlcnZlciBobWFjIGFsZ29yaXRobVxuICBmb3IgKGkgPSAwLCBsZW4gPSBjbGllbnRMaXN0Lmxlbmd0aDtcbiAgICAgICBpIDwgbGVuICYmIHNlcnZlckxpc3QuaW5kZXhPZihjbGllbnRMaXN0W2ldKSA9PT0gLTE7XG4gICAgICAgKytpKTtcbiAgaWYgKGkgPT09IGxlbikge1xuICAgIC8vIE5vIHN1aXRhYmxlIG1hdGNoIGZvdW5kIVxuICAgIGRlYnVnKCdERUJVRzogTm8gbWF0Y2hpbmcgQ2xpZW50LT5TZXJ2ZXIgSE1BQyBhbGdvcml0aG0nKTtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdIYW5kc2hha2UgZmFpbGVkOiBubyBtYXRjaGluZyBjbGllbnQtPnNlcnZlciBITUFDJyk7XG4gICAgZXJyLmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzZWxmLnNlcnZlcilcbiAgICB2YWwgPSBpbnN0YXRlLmhtYWMudHlwZSA9IGNsaWVudExpc3RbaV07XG4gIGVsc2VcbiAgICB2YWwgPSBvdXRzdGF0ZS5obWFjLnR5cGUgPSBjbGllbnRMaXN0W2ldO1xuICBkZWJ1ZygnREVCVUc6IENsaWVudC0+U2VydmVyIEhNQUMgYWxnb3JpdGhtOiAnICsgdmFsKTtcblxuICBkZWJ1ZygnREVCVUc6IChsb2NhbCkgU2VydmVyLT5DbGllbnQgSE1BQyBhbGdvcml0aG1zOiAnICsgYWxnb3MuaG1hYyk7XG4gIGRlYnVnKCdERUJVRzogKHJlbW90ZSkgU2VydmVyLT5DbGllbnQgSE1BQyBhbGdvcml0aG1zOiAnXG4gICAgICAgICsgaW5pdC5hbGdvcml0aG1zLnNjLm1hYyk7XG4gIGlmIChzZWxmLnNlcnZlcikge1xuICAgIHNlcnZlckxpc3QgPSBhbGdvcy5obWFjO1xuICAgIGNsaWVudExpc3QgPSBpbml0LmFsZ29yaXRobXMuc2MubWFjO1xuICB9IGVsc2Uge1xuICAgIHNlcnZlckxpc3QgPSBpbml0LmFsZ29yaXRobXMuc2MubWFjO1xuICAgIGNsaWVudExpc3QgPSBhbGdvcy5obWFjO1xuICB9XG4gIC8vIENoZWNrIGZvciBhZ3JlZWFibGUgc2VydmVyLT5jbGllbnQgaG1hYyBhbGdvcml0aG1cbiAgZm9yIChpID0gMCwgbGVuID0gY2xpZW50TGlzdC5sZW5ndGg7XG4gICAgICAgaSA8IGxlbiAmJiBzZXJ2ZXJMaXN0LmluZGV4T2YoY2xpZW50TGlzdFtpXSkgPT09IC0xO1xuICAgICAgICsraSk7XG4gIGlmIChpID09PSBsZW4pIHtcbiAgICAvLyBObyBzdWl0YWJsZSBtYXRjaCBmb3VuZCFcbiAgICBkZWJ1ZygnREVCVUc6IE5vIG1hdGNoaW5nIFNlcnZlci0+Q2xpZW50IEhNQUMgYWxnb3JpdGhtJyk7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogbm8gbWF0Y2hpbmcgc2VydmVyLT5jbGllbnQgSE1BQycpO1xuICAgIGVyci5sZXZlbCA9ICdoYW5kc2hha2UnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5LRVlfRVhDSEFOR0VfRkFJTEVEKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZi5zZXJ2ZXIpXG4gICAgdmFsID0gb3V0c3RhdGUuaG1hYy50eXBlID0gY2xpZW50TGlzdFtpXTtcbiAgZWxzZVxuICAgIHZhbCA9IGluc3RhdGUuaG1hYy50eXBlID0gY2xpZW50TGlzdFtpXTtcbiAgZGVidWcoJ0RFQlVHOiBTZXJ2ZXItPkNsaWVudCBITUFDIGFsZ29yaXRobTogJyArIHZhbCk7XG5cbiAgZGVidWcoJ0RFQlVHOiAobG9jYWwpIENsaWVudC0+U2VydmVyIGNvbXByZXNzaW9uIGFsZ29yaXRobXM6ICdcbiAgICAgICAgKyBhbGdvcy5jb21wcmVzcyk7XG4gIGRlYnVnKCdERUJVRzogKHJlbW90ZSkgQ2xpZW50LT5TZXJ2ZXIgY29tcHJlc3Npb24gYWxnb3JpdGhtczogJ1xuICAgICAgICArIGluaXQuYWxnb3JpdGhtcy5jcy5jb21wcmVzcyk7XG4gIGlmIChzZWxmLnNlcnZlcikge1xuICAgIHNlcnZlckxpc3QgPSBhbGdvcy5jb21wcmVzcztcbiAgICBjbGllbnRMaXN0ID0gaW5pdC5hbGdvcml0aG1zLmNzLmNvbXByZXNzO1xuICB9IGVsc2Uge1xuICAgIHNlcnZlckxpc3QgPSBpbml0LmFsZ29yaXRobXMuY3MuY29tcHJlc3M7XG4gICAgY2xpZW50TGlzdCA9IGFsZ29zLmNvbXByZXNzO1xuICB9XG4gIC8vIENoZWNrIGZvciBhZ3JlZWFibGUgY2xpZW50LT5zZXJ2ZXIgY29tcHJlc3Npb24gYWxnb3JpdGhtXG4gIGZvciAoaSA9IDAsIGxlbiA9IGNsaWVudExpc3QubGVuZ3RoO1xuICAgICAgIGkgPCBsZW4gJiYgc2VydmVyTGlzdC5pbmRleE9mKGNsaWVudExpc3RbaV0pID09PSAtMTtcbiAgICAgICArK2kpO1xuICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgLy8gTm8gc3VpdGFibGUgbWF0Y2ggZm91bmQhXG4gICAgZGVidWcoJ0RFQlVHOiBObyBtYXRjaGluZyBDbGllbnQtPlNlcnZlciBjb21wcmVzc2lvbiBhbGdvcml0aG0nKTtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdIYW5kc2hha2UgZmFpbGVkOiBubyBtYXRjaGluZyBjbGllbnQtPnNlcnZlciAnXG4gICAgICAgICAgICAgICAgICAgICAgICArICdjb21wcmVzc2lvbiBhbGdvcml0aG0nKTtcbiAgICBlcnIubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICBzZWxmLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uS0VZX0VYQ0hBTkdFX0ZBSUxFRCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGYuc2VydmVyKVxuICAgIHZhbCA9IGluc3RhdGUuZGVjb21wcmVzcy50eXBlID0gY2xpZW50TGlzdFtpXTtcbiAgZWxzZVxuICAgIHZhbCA9IG91dHN0YXRlLmNvbXByZXNzLnR5cGUgPSBjbGllbnRMaXN0W2ldO1xuICBkZWJ1ZygnREVCVUc6IENsaWVudC0+U2VydmVyIGNvbXByZXNzaW9uIGFsZ29yaXRobTogJyArIHZhbCk7XG5cbiAgZGVidWcoJ0RFQlVHOiAobG9jYWwpIFNlcnZlci0+Q2xpZW50IGNvbXByZXNzaW9uIGFsZ29yaXRobXM6ICdcbiAgICAgICAgKyBhbGdvcy5jb21wcmVzcyk7XG4gIGRlYnVnKCdERUJVRzogKHJlbW90ZSkgU2VydmVyLT5DbGllbnQgY29tcHJlc3Npb24gYWxnb3JpdGhtczogJ1xuICAgICAgICArIGluaXQuYWxnb3JpdGhtcy5zYy5jb21wcmVzcyk7XG4gIGlmIChzZWxmLnNlcnZlcikge1xuICAgIHNlcnZlckxpc3QgPSBhbGdvcy5jb21wcmVzcztcbiAgICBjbGllbnRMaXN0ID0gaW5pdC5hbGdvcml0aG1zLnNjLmNvbXByZXNzO1xuICB9IGVsc2Uge1xuICAgIHNlcnZlckxpc3QgPSBpbml0LmFsZ29yaXRobXMuc2MuY29tcHJlc3M7XG4gICAgY2xpZW50TGlzdCA9IGFsZ29zLmNvbXByZXNzO1xuICB9XG4gIC8vIENoZWNrIGZvciBhZ3JlZWFibGUgc2VydmVyLT5jbGllbnQgY29tcHJlc3Npb24gYWxnb3JpdGhtXG4gIGZvciAoaSA9IDAsIGxlbiA9IGNsaWVudExpc3QubGVuZ3RoO1xuICAgICAgIGkgPCBsZW4gJiYgc2VydmVyTGlzdC5pbmRleE9mKGNsaWVudExpc3RbaV0pID09PSAtMTtcbiAgICAgICArK2kpO1xuICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgLy8gTm8gc3VpdGFibGUgbWF0Y2ggZm91bmQhXG4gICAgZGVidWcoJ0RFQlVHOiBObyBtYXRjaGluZyBTZXJ2ZXItPkNsaWVudCBjb21wcmVzc2lvbiBhbGdvcml0aG0nKTtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdIYW5kc2hha2UgZmFpbGVkOiBubyBtYXRjaGluZyBzZXJ2ZXItPmNsaWVudCAnXG4gICAgICAgICAgICAgICAgICAgICAgICArICdjb21wcmVzc2lvbiBhbGdvcml0aG0nKTtcbiAgICBlcnIubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICBzZWxmLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uS0VZX0VYQ0hBTkdFX0ZBSUxFRCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGYuc2VydmVyKVxuICAgIHZhbCA9IG91dHN0YXRlLmNvbXByZXNzLnR5cGUgPSBjbGllbnRMaXN0W2ldO1xuICBlbHNlXG4gICAgdmFsID0gaW5zdGF0ZS5kZWNvbXByZXNzLnR5cGUgPSBjbGllbnRMaXN0W2ldO1xuICBkZWJ1ZygnREVCVUc6IFNlcnZlci0+Q2xpZW50IGNvbXByZXNzaW9uIGFsZ29yaXRobTogJyArIHZhbCk7XG5cbiAgc3RhdGUua2V4ID0gbmV3IEtleUV4Y2hhbmdlKGtleF9hbGdvcml0aG0pO1xuICBzdGF0ZS5rZXguZ2VuZXJhdGVLZXlzKCk7XG4gIG91dHN0YXRlLnB1YmtleSA9IHN0YXRlLmtleC5nZXRQdWJsaWNLZXkoKTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25LRVhESF9HRVhfR1JPVVAoc2VsZiwgcHJpbWUsIGdlbikge1xuICB2YXIgc3RhdGUgPSBzZWxmLl9zdGF0ZTtcbiAgdmFyIG91dHN0YXRlID0gc3RhdGUub3V0Z29pbmc7XG5cbiAgc3RhdGUua2V4LnNldERIUGFyYW1zKHByaW1lLCBnZW4pO1xuICBzdGF0ZS5rZXguZ2VuZXJhdGVLZXlzKCk7XG4gIG91dHN0YXRlLnB1YmtleSA9IHN0YXRlLmtleC5nZXRQdWJsaWNLZXkoKTtcblxuICBLRVhESF9JTklUKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBvbktFWERIX0lOSVQoc2VsZiwgZSkgeyAvLyBTZXJ2ZXJcbiAgS0VYREhfUkVQTFkoc2VsZiwgZSk7XG59XG5cbmZ1bmN0aW9uIG9uS0VYREhfUkVQTFkoc2VsZiwgaW5mbywgdmVyaWZpZWRIb3N0KSB7IC8vIENsaWVudFxuICB2YXIgc3RhdGUgPSBzZWxmLl9zdGF0ZTtcbiAgdmFyIGluc3RhdGUgPSBzdGF0ZS5pbmNvbWluZztcbiAgdmFyIG91dHN0YXRlID0gc3RhdGUub3V0Z29pbmc7XG4gIHZhciBkZWJ1ZyA9IHNlbGYuZGVidWc7XG4gIHZhciBsZW47XG4gIHZhciBpO1xuXG4gIGlmICh2ZXJpZmllZEhvc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGluc3RhdGUuZXhwZWN0ZWRQYWNrZXQgPSAnTkVXS0VZUyc7XG4gICAgb3V0c3RhdGUuc2VudE5FV0tFWVMgPSBmYWxzZTtcblxuICAgIGRlYnVnKCdERUJVRzogQ2hlY2tpbmcgaG9zdCBrZXkgZm9ybWF0Jyk7XG4gICAgLy8gRW5zdXJlIGFsbCBob3N0IGtleSBmb3JtYXRzIGFncmVlXG4gICAgdmFyIGhvc3RrZXlfZm9ybWF0ID0gcmVhZFN0cmluZyhpbmZvLmhvc3RrZXksIDAsICdhc2NpaScsIHNlbGYpO1xuICAgIGlmIChob3N0a2V5X2Zvcm1hdCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGluZm8uaG9zdGtleV9mb3JtYXQgIT09IHN0YXRlLmhvc3RrZXlGb3JtYXRcbiAgICAgICAgfHwgaW5mby5ob3N0a2V5X2Zvcm1hdCAhPT0gaG9zdGtleV9mb3JtYXQpIHtcbiAgICAgIC8vIEV4cGVjdGVkIGFuZCBhY3R1YWwgc2VydmVyIGhvc3Qga2V5IGZvcm1hdCBkbyBub3QgbWF0Y2ghXG4gICAgICBkZWJ1ZygnREVCVUc6IEhvc3Qga2V5IGZvcm1hdCBtaXNtYXRjaCcpO1xuICAgICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogaG9zdCBrZXkgZm9ybWF0IG1pc21hdGNoJyk7XG4gICAgICBlcnIubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGRlYnVnKCdERUJVRzogQ2hlY2tpbmcgc2lnbmF0dXJlIGZvcm1hdCcpO1xuICAgIC8vIEVuc3VyZSBzaWduYXR1cmUgZm9ybWF0cyBhZ3JlZVxuICAgIHZhciBzaWdfZm9ybWF0ID0gcmVhZFN0cmluZyhpbmZvLnNpZywgMCwgJ2FzY2lpJywgc2VsZik7XG4gICAgaWYgKHNpZ19mb3JtYXQgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChpbmZvLnNpZ19mb3JtYXQgIT09IHNpZ19mb3JtYXQpIHtcbiAgICAgIGRlYnVnKCdERUJVRzogU2lnbmF0dXJlIGZvcm1hdCBtaXNtYXRjaCcpO1xuICAgICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignSGFuZHNoYWtlIGZhaWxlZDogc2lnbmF0dXJlIGZvcm1hdCBtaXNtYXRjaCcpO1xuICAgICAgZXJyLmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBWZXJpZnkgdGhlIGhvc3QgZmluZ2VycHJpbnQgZmlyc3QgaWYgbmVlZGVkXG4gIGlmIChvdXRzdGF0ZS5zdGF0dXMgPT09IE9VVF9JTklUKSB7XG4gICAgaWYgKHZlcmlmaWVkSG9zdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWJ1ZygnREVCVUc6IFZlcmlmeWluZyBob3N0IGZpbmdlcnByaW50Jyk7XG4gICAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgICB2YXIgZW1pdHRlZCA9IHNlbGYuZW1pdCgnZmluZ2VycHJpbnQnLCBpbmZvLmhvc3RrZXksIGZ1bmN0aW9uKHBlcm1pdHRlZCkge1xuICAgICAgICAvLyBQcmV2ZW50IG11bHRpcGxlIGNhbGxzIHRvIHRoaXMgY2FsbGJhY2tcbiAgICAgICAgaWYgKHZlcmlmaWVkSG9zdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmVyaWZpZWRIb3N0ID0gISFwZXJtaXR0ZWQ7XG4gICAgICAgIGlmICghc3luYykge1xuICAgICAgICAgIC8vIENvbnRpbnVlIGV4ZWN1dGlvbiBieSByZS1lbnRyeVxuICAgICAgICAgIG9uS0VYREhfUkVQTFkoc2VsZiwgaW5mbywgdmVyaWZpZWRIb3N0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzeW5jID0gZmFsc2U7XG4gICAgICAvLyBTdXBwb3J0IGFzeW5jIGNhbGxpbmcgb2YgdmVyaWZpY2F0aW9uIGNhbGxiYWNrXG4gICAgICBpZiAoZW1pdHRlZCAmJiB2ZXJpZmllZEhvc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmVyaWZpZWRIb3N0ID09PSB1bmRlZmluZWQpXG4gICAgICBkZWJ1ZygnREVCVUc6IEhvc3QgYWNjZXB0ZWQgYnkgZGVmYXVsdCAobm8gdmVyaWZpY2F0aW9uKScpO1xuICAgIGVsc2UgaWYgKHZlcmlmaWVkSG9zdCA9PT0gdHJ1ZSlcbiAgICAgIGRlYnVnKCdERUJVRzogSG9zdCBhY2NlcHRlZCAodmVyaWZpZWQpJyk7XG4gICAgZWxzZSB7XG4gICAgICBkZWJ1ZygnREVCVUc6IEhvc3QgZGVuaWVkIHZpYSBmaW5nZXJwcmludCB2ZXJpZmljYXRpb24nKTtcbiAgICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5LRVlfRVhDSEFOR0VfRkFJTEVEKTtcbiAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0hhbmRzaGFrZSBmYWlsZWQ6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnaG9zdCBmaW5nZXJwcmludCB2ZXJpZmljYXRpb24gZmFpbGVkJyk7XG4gICAgICBlcnIubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGluZm8ucHVia2V5ID0gc3RhdGUua2V4LmNvbnZlcnRQdWJsaWNLZXkoaW5mby5wdWJrZXkpO1xuXG4gIGluZm8uc2VjcmV0ID0gc3RhdGUua2V4LmNvbXB1dGVTZWNyZXQoaW5mby5wdWJrZXkpO1xuXG4gIGlmIChpbmZvLnNlY3JldCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgaW5mby5zZWNyZXQubWVzc2FnZSA9ICdFcnJvciB3aGlsZSBjb21wdXRpbmcgREggc2VjcmV0ICgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgc3RhdGUua2V4LnR5cGUgKyAnKTogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGluZm8uc2VjcmV0Lm1lc3NhZ2U7XG4gICAgaW5mby5zZWNyZXQubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgaW5mby5zZWNyZXQpO1xuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5LRVlfRVhDSEFOR0VfRkFJTEVEKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKHN0YXRlLmtleC5oYXNoKTtcblxuICB2YXIgbGVuX2lkZW50ID0gQnVmZmVyLmJ5dGVMZW5ndGgoc2VsZi5jb25maWcuaWRlbnQpO1xuICB2YXIgbGVuX3NpZGVudCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGluc3RhdGUuaWRlbnRSYXcpO1xuICB2YXIgbGVuX2luaXQgPSBvdXRzdGF0ZS5rZXhpbml0Lmxlbmd0aDtcbiAgdmFyIGxlbl9zaW5pdCA9IGluc3RhdGUua2V4aW5pdC5sZW5ndGg7XG4gIHZhciBsZW5faG9zdGtleSA9IGluZm8uaG9zdGtleS5sZW5ndGg7XG4gIHZhciBsZW5fcHVia2V5ID0gb3V0c3RhdGUucHVia2V5Lmxlbmd0aDtcbiAgdmFyIGxlbl9zcHVia2V5ID0gaW5mby5wdWJrZXkubGVuZ3RoO1xuICB2YXIgbGVuX3NlY3JldCA9IGluZm8uc2VjcmV0Lmxlbmd0aDtcblxuICB2YXIgZXhjaGFuZ2VCdWZMZW4gPSBsZW5faWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc2lkZW50XG4gICAgICAgICAgICAgICAgICAgICAgICsgbGVuX2luaXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc2luaXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5faG9zdGtleVxuICAgICAgICAgICAgICAgICAgICAgICArIGxlbl9wdWJrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc3B1YmtleVxuICAgICAgICAgICAgICAgICAgICAgICArIGxlbl9zZWNyZXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyAoNCAqIDgpOyAvLyBMZW5ndGggZmllbGRzIGZvciBhYm92ZSB2YWx1ZXNcblxuICAvLyBHcm91cCBleGNoYW5nZS1yZWxhdGVkXG4gIHZhciBsZW5fZ2V4X3ByaW1lO1xuICB2YXIgbGVuX2dleF9nZW47XG4gIHZhciBnZXhfcHJpbWU7XG4gIHZhciBnZXhfZ2VuO1xuICB2YXIgZGhQYXJhbXMgPSBzdGF0ZS5rZXguZ2V0REhQYXJhbXMoKTtcbiAgaWYgKGRoUGFyYW1zKSB7XG4gICAgZ2V4X3ByaW1lID0gZGhQYXJhbXMucHJpbWU7XG4gICAgZ2V4X2dlbiA9IGRoUGFyYW1zLmdlbmVyYXRvcjtcbiAgICBsZW5fZ2V4X3ByaW1lID0gZ2V4X3ByaW1lLmxlbmd0aDtcbiAgICBsZW5fZ2V4X2dlbiA9IGdleF9nZW4ubGVuZ3RoO1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9ICg0ICogMyk7IC8vIG1pbiwgbiwgbWF4IHZhbHVlc1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9ICg0ICogMik7IC8vIHByaW1lLCBnZW5lcmF0b3IgbGVuZ3RoIGZpZWxkc1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9IGxlbl9nZXhfcHJpbWU7XG4gICAgZXhjaGFuZ2VCdWZMZW4gKz0gbGVuX2dleF9nZW47XG4gIH1cblxuICB2YXIgYnAgPSAwO1xuICB2YXIgZXhjaGFuZ2VCdWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoZXhjaGFuZ2VCdWZMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9pZGVudCwgYnApO1xuICBicCArPSA0O1xuICBleGNoYW5nZUJ1Zi53cml0ZShzZWxmLmNvbmZpZy5pZGVudCwgYnAsICd1dGY4Jyk7IC8vIFZfQ1xuICBicCArPSBsZW5faWRlbnQ7XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX3NpZGVudCwgYnApO1xuICBicCArPSA0O1xuICBleGNoYW5nZUJ1Zi53cml0ZShpbnN0YXRlLmlkZW50UmF3LCBicCwgJ3V0ZjgnKTsgLy8gVl9TXG4gIGJwICs9IGxlbl9zaWRlbnQ7XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX2luaXQsIGJwKTtcbiAgYnAgKz0gNDtcbiAgb3V0c3RhdGUua2V4aW5pdC5jb3B5KGV4Y2hhbmdlQnVmLCBicCk7IC8vIElfQ1xuICBicCArPSBsZW5faW5pdDtcbiAgb3V0c3RhdGUua2V4aW5pdCA9IHVuZGVmaW5lZDtcblxuICB3cml0ZVVJbnQzMkJFKGV4Y2hhbmdlQnVmLCBsZW5fc2luaXQsIGJwKTtcbiAgYnAgKz0gNDtcbiAgaW5zdGF0ZS5rZXhpbml0LmNvcHkoZXhjaGFuZ2VCdWYsIGJwKTsgLy8gSV9TXG4gIGJwICs9IGxlbl9zaW5pdDtcbiAgaW5zdGF0ZS5rZXhpbml0ID0gdW5kZWZpbmVkO1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9ob3N0a2V5LCBicCk7XG4gIGJwICs9IDQ7XG4gIGluZm8uaG9zdGtleS5jb3B5KGV4Y2hhbmdlQnVmLCBicCk7IC8vIEtfU1xuICBicCArPSBsZW5faG9zdGtleTtcblxuICBpZiAoZGhQYXJhbXMpIHtcbiAgICBLRVhESF9HRVhfUkVRX1BBQ0tFVC5zbGljZSgxKS5jb3B5KGV4Y2hhbmdlQnVmLCBicCk7IC8vIG1pbiwgbiwgbWF4XG4gICAgYnAgKz0gKDQgKiAzKTsgLy8gU2tpcCBvdmVyIGJ5dGVzIGp1c3QgY29waWVkXG5cbiAgICB3cml0ZVVJbnQzMkJFKGV4Y2hhbmdlQnVmLCBsZW5fZ2V4X3ByaW1lLCBicCk7XG4gICAgYnAgKz0gNDtcbiAgICBnZXhfcHJpbWUuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBwXG4gICAgYnAgKz0gbGVuX2dleF9wcmltZTtcblxuICAgIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9nZXhfZ2VuLCBicCk7XG4gICAgYnAgKz0gNDtcbiAgICBnZXhfZ2VuLmNvcHkoZXhjaGFuZ2VCdWYsIGJwKTsgLy8gZ1xuICAgIGJwICs9IGxlbl9nZXhfZ2VuO1xuICB9XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX3B1YmtleSwgYnApO1xuICBicCArPSA0O1xuICBvdXRzdGF0ZS5wdWJrZXkuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBlXG4gIGJwICs9IGxlbl9wdWJrZXk7XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX3NwdWJrZXksIGJwKTtcbiAgYnAgKz0gNDtcbiAgaW5mby5wdWJrZXkuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBmXG4gIGJwICs9IGxlbl9zcHVia2V5O1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9zZWNyZXQsIGJwKTtcbiAgYnAgKz0gNDtcbiAgaW5mby5zZWNyZXQuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBLXG5cbiAgb3V0c3RhdGUuZXhjaGFuZ2VIYXNoID0gaGFzaC51cGRhdGUoZXhjaGFuZ2VCdWYpLmRpZ2VzdCgpOyAvLyBIXG5cbiAgdmFyIHJhd3NpZyA9IHJlYWRTdHJpbmcoaW5mby5zaWcsIGluZm8uc2lnLl9wb3MsIHNlbGYpOyAvLyBzXG4gIGlmIChyYXdzaWcgPT09IGZhbHNlXG4gICAgICB8fCAhKHJhd3NpZyA9IHNpZ1NTSFRvQVNOMShyYXdzaWcsIGluZm8uc2lnX2Zvcm1hdCwgc2VsZikpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGhvc3RQdWJLZXkgPSBwYXJzZURFUktleShpbmZvLmhvc3RrZXksIGluZm8uc2lnX2Zvcm1hdCk7XG4gIGlmIChob3N0UHViS2V5IGluc3RhbmNlb2YgRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGRlYnVnKCdERUJVRzogVmVyaWZ5aW5nIHNpZ25hdHVyZScpO1xuXG4gIGlmIChob3N0UHViS2V5LnZlcmlmeShvdXRzdGF0ZS5leGNoYW5nZUhhc2gsIHJhd3NpZykgIT09IHRydWUpIHtcbiAgICBkZWJ1ZygnREVCVUc6IFNpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkJyk7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHNlbGYucmVzZXQoKTtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdIYW5kc2hha2UgZmFpbGVkOiBzaWduYXR1cmUgdmVyaWZpY2F0aW9uIGZhaWxlZCcpO1xuICAgIGVyci5sZXZlbCA9ICdoYW5kc2hha2UnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChvdXRzdGF0ZS5zZXNzaW9uSWQgPT09IHVuZGVmaW5lZClcbiAgICBvdXRzdGF0ZS5zZXNzaW9uSWQgPSBvdXRzdGF0ZS5leGNoYW5nZUhhc2g7XG4gIG91dHN0YXRlLmtleHNlY3JldCA9IGluZm8uc2VjcmV0O1xuXG4gIGRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgTkVXS0VZUycpO1xuICBpZiAob3V0c3RhdGUuc3RhdHVzID09PSBPVVRfUkVLRVlJTkcpXG4gICAgc2VuZChzZWxmLCBORVdLRVlTX1BBQ0tFVCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgZWxzZVxuICAgIHNlbmQoc2VsZiwgTkVXS0VZU19QQUNLRVQpO1xuICBvdXRzdGF0ZS5zZW50TkVXS0VZUyA9IHRydWU7XG5cbiAgaWYgKHZlcmlmaWVkSG9zdCAhPT0gdW5kZWZpbmVkICYmIGluc3RhdGUuZXhwZWN0ZWRQYWNrZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdlIHJlY2VpdmVkIE5FV0tFWVMgd2hpbGUgd2Ugd2VyZSB3YWl0aW5nIGZvciB0aGUgZmluZ2VycHJpbnRcbiAgICAvLyB2ZXJpZmljYXRpb24gY2FsbGJhY2sgdG8gYmUgY2FsbGVkLiBJbiB0aGlzIGNhc2Ugd2UgaGF2ZSB0byByZS1leGVjdXRlXG4gICAgLy8gb25ORVdLRVlTIHRvIGZpbmlzaCB0aGUgaGFuZHNoYWtlLlxuICAgIG9uTkVXS0VZUyhzZWxmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbk5FV0tFWVMoc2VsZikgeyAvLyBDbGllbnQvU2VydmVyXG4gIHZhciBzdGF0ZSA9IHNlbGYuX3N0YXRlO1xuICB2YXIgb3V0c3RhdGUgPSBzdGF0ZS5vdXRnb2luZztcbiAgdmFyIGluc3RhdGUgPSBzdGF0ZS5pbmNvbWluZztcblxuICBpbnN0YXRlLmV4cGVjdGVkUGFja2V0ID0gdW5kZWZpbmVkO1xuXG4gIGlmICghb3V0c3RhdGUuc2VudE5FV0tFWVMpXG4gICAgcmV0dXJuO1xuXG4gIHZhciBsZW4gPSBvdXRzdGF0ZS5rZXhzZWNyZXQubGVuZ3RoO1xuXG4gIHZhciBvdXRDaXBoZXJJbmZvID0gb3V0c3RhdGUuZW5jcnlwdC5pbmZvID0gQ0lQSEVSX0lORk9bb3V0c3RhdGUuZW5jcnlwdC50eXBlXTtcbiAgdmFyIHAgPSAwO1xuXG4gIHZhciBkaEhhc2hBbGdvID0gc3RhdGUua2V4Lmhhc2g7XG5cbiAgdmFyIHNlY3JldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0ICsgbGVuKTtcbiAgdmFyIGl2O1xuICB2YXIga2V5O1xuXG4gIC8vIFdoZW5ldmVyIHRoZSBjbGllbnQgc2VuZHMgYSBuZXcgYXV0aGVudGljYXRpb24gcmVxdWVzdCwgaXQgaXMgZW5xdWV1ZWRcbiAgLy8gaGVyZS4gIE9uY2UgdGhlIHJlcXVlc3QgaXMgcmVzb2x2ZWQgKHN1Y2Nlc3MsIGZhaWwsIG9yIFBLX09LKSxcbiAgLy8gZGVxdWV1ZS4gIFdoYXRldmVyIGlzIGF0IHRoZSBmcm9udCBvZiB0aGUgcXVldWUgZGV0ZXJtaW5lcyBob3cgd2VcbiAgLy8gaW50ZXJwcmV0IHBhY2tldCB0eXBlIDYwLlxuICBzdGF0ZS5hdXRoc1F1ZXVlID0gW107XG5cbiAgd3JpdGVVSW50MzJCRShzZWNyZXQsIGxlbiwgcCk7XG4gIHAgKz0gNDtcbiAgb3V0c3RhdGUua2V4c2VjcmV0LmNvcHkoc2VjcmV0LCBwKTtcbiAgb3V0c3RhdGUua2V4c2VjcmV0ID0gdW5kZWZpbmVkO1xuICBpZiAoIW91dENpcGhlckluZm8uc3RyZWFtKSB7XG4gICAgaXYgPSBjcnlwdG8uY3JlYXRlSGFzaChkaEhhc2hBbGdvKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgIC51cGRhdGUoIXNlbGYuc2VydmVyID8gJ0EnIDogJ0InLCAnYXNjaWknKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5zZXNzaW9uSWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gICAgd2hpbGUgKGl2Lmxlbmd0aCA8IG91dENpcGhlckluZm8uaXZMZW4pIHtcbiAgICAgIGl2ID0gQnVmZmVyLmNvbmNhdChbaXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyeXB0by5jcmVhdGVIYXNoKGRoSGFzaEFsZ28pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUoc2VjcmV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShpdilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgpXSk7XG4gICAgfVxuICAgIGlmIChpdi5sZW5ndGggPiBvdXRDaXBoZXJJbmZvLml2TGVuKVxuICAgICAgaXYgPSBpdi5zbGljZSgwLCBvdXRDaXBoZXJJbmZvLml2TGVuKTtcbiAgfSBlbHNlIHtcbiAgICBpdiA9IEVNUFRZX0JVRkZFUjsgLy8gU3RyZWFtaW5nIGNpcGhlcnMgZG9uJ3QgdXNlIGFuIElWIHVwZnJvbnRcbiAgfVxuXG4gIGtleSA9IGNyeXB0by5jcmVhdGVIYXNoKGRoSGFzaEFsZ28pXG4gICAgICAgICAgICAgIC51cGRhdGUoc2VjcmV0KVxuICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgLnVwZGF0ZSghc2VsZi5zZXJ2ZXIgPyAnQycgOiAnRCcsICdhc2NpaScpXG4gICAgICAgICAgICAgIC51cGRhdGUob3V0c3RhdGUuc2Vzc2lvbklkKVxuICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHdoaWxlIChrZXkubGVuZ3RoIDwgb3V0Q2lwaGVySW5mby5rZXlMZW4pIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvLmNyZWF0ZUhhc2goZGhIYXNoQWxnbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHNlY3JldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGlnZXN0KCldKTtcbiAgfVxuICBpZiAoa2V5Lmxlbmd0aCA+IG91dENpcGhlckluZm8ua2V5TGVuKVxuICAgIGtleSA9IGtleS5zbGljZSgwLCBvdXRDaXBoZXJJbmZvLmtleUxlbik7XG5cbiAgaWYgKG91dENpcGhlckluZm8uYXV0aExlbiA+IDApIHtcbiAgICBvdXRzdGF0ZS5lbmNyeXB0Lml2ID0gaXY7XG4gICAgb3V0c3RhdGUuZW5jcnlwdC5rZXkgPSBrZXk7XG4gICAgb3V0c3RhdGUuZW5jcnlwdC5pbnN0YW5jZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNpcGhlckFsZ28gPSBTU0hfVE9fT1BFTlNTTFtvdXRzdGF0ZS5lbmNyeXB0LnR5cGVdO1xuICAgIG91dHN0YXRlLmVuY3J5cHQuaW5zdGFuY2UgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoY2lwaGVyQWxnbywga2V5LCBpdik7XG4gICAgb3V0c3RhdGUuZW5jcnlwdC5pbnN0YW5jZS5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gIH1cblxuICAvLyBBbmQgbm93IGZvciBkZWNyeXB0aW5nIC4uLlxuXG4gIHZhciBpbkNpcGhlckluZm8gPSBpbnN0YXRlLmRlY3J5cHQuaW5mbyA9IENJUEhFUl9JTkZPW2luc3RhdGUuZGVjcnlwdC50eXBlXTtcbiAgaWYgKCFpbkNpcGhlckluZm8uc3RyZWFtKSB7XG4gICAgaXYgPSBjcnlwdG8uY3JlYXRlSGFzaChkaEhhc2hBbGdvKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgIC51cGRhdGUoIXNlbGYuc2VydmVyID8gJ0InIDogJ0EnLCAnYXNjaWknKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5zZXNzaW9uSWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gICAgd2hpbGUgKGl2Lmxlbmd0aCA8IGluQ2lwaGVySW5mby5pdkxlbikge1xuICAgICAgaXYgPSBCdWZmZXIuY29uY2F0KFtpdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvLmNyZWF0ZUhhc2goZGhIYXNoQWxnbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUob3V0c3RhdGUuZXhjaGFuZ2VIYXNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKGl2KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGlnZXN0KCldKTtcbiAgICB9XG4gICAgaWYgKGl2Lmxlbmd0aCA+IGluQ2lwaGVySW5mby5pdkxlbilcbiAgICAgIGl2ID0gaXYuc2xpY2UoMCwgaW5DaXBoZXJJbmZvLml2TGVuKTtcbiAgfSBlbHNlIHtcbiAgICBpdiA9IEVNUFRZX0JVRkZFUjsgLy8gU3RyZWFtaW5nIGNpcGhlcnMgZG9uJ3QgdXNlIGFuIElWIHVwZnJvbnRcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIHJldXNhYmxlIGJ1ZmZlciBmb3IgZGVjcnlwdGlvbiBwdXJwb3Nlc1xuICBpbnN0YXRlLmRlY3J5cHQuYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGluQ2lwaGVySW5mby5ibG9ja0xlbik7XG5cbiAga2V5ID0gY3J5cHRvLmNyZWF0ZUhhc2goZGhIYXNoQWxnbylcbiAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgIC51cGRhdGUob3V0c3RhdGUuZXhjaGFuZ2VIYXNoKVxuICAgICAgICAgICAgICAudXBkYXRlKCFzZWxmLnNlcnZlciA/ICdEJyA6ICdDJywgJ2FzY2lpJylcbiAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5zZXNzaW9uSWQpXG4gICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgd2hpbGUgKGtleS5sZW5ndGggPCBpbkNpcGhlckluZm8ua2V5TGVuKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNyeXB0by5jcmVhdGVIYXNoKGRoSGFzaEFsZ28pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5leGNoYW5nZUhhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShrZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgpXSk7XG4gIH1cbiAgaWYgKGtleS5sZW5ndGggPiBpbkNpcGhlckluZm8ua2V5TGVuKVxuICAgIGtleSA9IGtleS5zbGljZSgwLCBpbkNpcGhlckluZm8ua2V5TGVuKTtcblxuICB2YXIgZGVjaXBoZXJBbGdvID0gU1NIX1RPX09QRU5TU0xbaW5zdGF0ZS5kZWNyeXB0LnR5cGVdO1xuICBpbnN0YXRlLmRlY3J5cHQuaW5zdGFuY2UgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihkZWNpcGhlckFsZ28sIGtleSwgaXYpO1xuICBpbnN0YXRlLmRlY3J5cHQuaW5zdGFuY2Uuc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuICBpbnN0YXRlLmRlY3J5cHQuaXYgPSBpdjtcbiAgaW5zdGF0ZS5kZWNyeXB0LmtleSA9IGtleTtcblxuICB2YXIgZW1wdHlCdWY7XG4gIGlmIChvdXRDaXBoZXJJbmZvLmRpc2NhcmRMZW4gPiAwKSB7XG4gICAgZW1wdHlCdWYgPSBCdWZmZXIuYWxsb2Mob3V0Q2lwaGVySW5mby5kaXNjYXJkTGVuKTtcbiAgICBvdXRzdGF0ZS5lbmNyeXB0Lmluc3RhbmNlLnVwZGF0ZShlbXB0eUJ1Zik7XG4gIH1cbiAgaWYgKGluQ2lwaGVySW5mby5kaXNjYXJkTGVuID4gMCkge1xuICAgIGlmICghZW1wdHlCdWYgfHwgZW1wdHlCdWYubGVuZ3RoICE9PSBpbkNpcGhlckluZm8uZGlzY2FyZExlbilcbiAgICAgIGVtcHR5QnVmID0gQnVmZmVyLmFsbG9jKG91dENpcGhlckluZm8uZGlzY2FyZExlbik7XG4gICAgaW5zdGF0ZS5kZWNyeXB0Lmluc3RhbmNlLnVwZGF0ZShlbXB0eUJ1Zik7XG4gIH1cblxuICB2YXIgb3V0SE1BQ0luZm8gPSBvdXRzdGF0ZS5obWFjLmluZm8gPSBITUFDX0lORk9bb3V0c3RhdGUuaG1hYy50eXBlXTtcbiAgdmFyIGluSE1BQ0luZm8gPSBpbnN0YXRlLmhtYWMuaW5mbyA9IEhNQUNfSU5GT1tpbnN0YXRlLmhtYWMudHlwZV07XG5cbiAgaWYgKG91dENpcGhlckluZm8uYXV0aExlbiA9PT0gMCkge1xuICAgIGtleSA9IGNyeXB0by5jcmVhdGVIYXNoKGRoSGFzaEFsZ28pXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5leGNoYW5nZUhhc2gpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZSghc2VsZi5zZXJ2ZXIgPyAnRScgOiAnRicsICdhc2NpaScpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5zZXNzaW9uSWQpXG4gICAgICAgICAgICAgICAgLmRpZ2VzdCgpO1xuICAgIHdoaWxlIChrZXkubGVuZ3RoIDwgb3V0SE1BQ0luZm8ubGVuKSB7XG4gICAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcnlwdG8uY3JlYXRlSGFzaChkaEhhc2hBbGdvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShzZWNyZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgpXSk7XG4gICAgfVxuICAgIGlmIChrZXkubGVuZ3RoID4gb3V0SE1BQ0luZm8ubGVuKVxuICAgICAga2V5ID0ga2V5LnNsaWNlKDAsIG91dEhNQUNJbmZvLmxlbik7XG4gICAgb3V0c3RhdGUuaG1hYy5rZXkgPSBrZXk7XG4gIH0gZWxzZSB7XG4gICAgb3V0c3RhdGUuaG1hYy5rZXkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGluQ2lwaGVySW5mby5hdXRoTGVuID09PSAwKSB7XG4gICAga2V5ID0gY3J5cHRvLmNyZWF0ZUhhc2goZGhIYXNoQWxnbylcbiAgICAgICAgICAgICAgICAudXBkYXRlKHNlY3JldClcbiAgICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLmV4Y2hhbmdlSGFzaClcbiAgICAgICAgICAgICAgICAudXBkYXRlKCFzZWxmLnNlcnZlciA/ICdGJyA6ICdFJywgJ2FzY2lpJylcbiAgICAgICAgICAgICAgICAudXBkYXRlKG91dHN0YXRlLnNlc3Npb25JZClcbiAgICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gICAgd2hpbGUgKGtleS5sZW5ndGggPCBpbkhNQUNJbmZvLmxlbikge1xuICAgICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvLmNyZWF0ZUhhc2goZGhIYXNoQWxnbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUoc2VjcmV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShvdXRzdGF0ZS5leGNoYW5nZUhhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoKV0pO1xuICAgIH1cbiAgICBpZiAoa2V5Lmxlbmd0aCA+IGluSE1BQ0luZm8ubGVuKVxuICAgICAga2V5ID0ga2V5LnNsaWNlKDAsIGluSE1BQ0luZm8ubGVuKTtcbiAgICBpbnN0YXRlLmhtYWMua2V5ID0ga2V5O1xuICB9IGVsc2Uge1xuICAgIGluc3RhdGUuaG1hYy5rZXkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBDcmVhdGUgYSByZXVzYWJsZSBidWZmZXIgZm9yIG1lc3NhZ2UgdmVyaWZpY2F0aW9uIHB1cnBvc2VzXG4gIHZhciBpbkhNQUNTaXplID0gaW5DaXBoZXJJbmZvLmF1dGhMZW4gfHwgaW5zdGF0ZS5obWFjLmluZm8uYWN0dWFsTGVuO1xuICBpZiAoIWluc3RhdGUuaG1hYy5idWZcbiAgICAgIHx8IGluc3RhdGUuaG1hYy5idWYubGVuZ3RoICE9PSBpbkhNQUNTaXplKSB7XG4gICAgaW5zdGF0ZS5obWFjLmJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShpbkhNQUNTaXplKTtcbiAgfVxuXG4gIG91dHN0YXRlLmV4Y2hhbmdlSGFzaCA9IHVuZGVmaW5lZDtcblxuICBpZiAob3V0c3RhdGUuY29tcHJlc3MudHlwZSA9PT0gJ3psaWInKSB7XG4gICAgb3V0c3RhdGUuY29tcHJlc3MuaW5zdGFuY2UgPSB6bGliLmNyZWF0ZURlZmxhdGUoWkxJQl9PUFRTKTtcbiAgICBvdXRzdGF0ZS5jb21wcmVzcy5xdWV1ZSA9IFtdO1xuICB9IGVsc2UgaWYgKG91dHN0YXRlLmNvbXByZXNzLnR5cGUgPT09ICdub25lJykge1xuICAgIG91dHN0YXRlLmNvbXByZXNzLmluc3RhbmNlID0gZmFsc2U7XG4gICAgb3V0c3RhdGUuY29tcHJlc3MucXVldWUgPSBudWxsO1xuICB9XG4gIGlmIChpbnN0YXRlLmRlY29tcHJlc3MudHlwZSA9PT0gJ3psaWInKVxuICAgIGluc3RhdGUuZGVjb21wcmVzcy5pbnN0YW5jZSA9IHpsaWIuY3JlYXRlSW5mbGF0ZShaTElCX09QVFMpO1xuICBlbHNlIGlmIChpbnN0YXRlLmRlY29tcHJlc3MudHlwZSA9PT0gJ25vbmUnKVxuICAgIGluc3RhdGUuZGVjb21wcmVzcy5pbnN0YW5jZSA9IGZhbHNlO1xuXG4gIHNlbGYuYnl0ZXNTZW50ID0gc2VsZi5ieXRlc1JlY2VpdmVkID0gMDtcblxuICBpZiAob3V0c3RhdGUuc3RhdHVzID09PSBPVVRfUkVLRVlJTkcpIHtcbiAgICBvdXRzdGF0ZS5zdGF0dXMgPSBPVVRfUkVBRFk7XG5cbiAgICAvLyBFbXB0eSBvdXIgb3V0Ym91bmQgYnVmZmVyIG9mIGFueSBkYXRhIHdlIHRyaWVkIHRvIHNlbmQgZHVyaW5nIHRoZVxuICAgIC8vIHJlLWtleWluZyBwcm9jZXNzXG4gICAgdmFyIHF1ZXVlID0gb3V0c3RhdGUucmVrZXlRdWV1ZTtcbiAgICB2YXIgcWxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB2YXIgcSA9IDA7XG5cbiAgICBvdXRzdGF0ZS5yZWtleVF1ZXVlID0gW107XG5cbiAgICBmb3IgKDsgcSA8IHFsZW47ICsrcSkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihxdWV1ZVtxXSkpXG4gICAgICAgIHNlbmQoc2VsZiwgcXVldWVbcV0pO1xuICAgICAgZWxzZVxuICAgICAgICBzZW5kKHNlbGYsIHF1ZXVlW3FdWzBdLCBxdWV1ZVtxXVsxXSk7XG4gICAgfVxuXG4gICAgLy8gTm93IGVtcHR5IG91ciBpbmJvdW5kIGJ1ZmZlciBvZiBhbnkgbm9uLXRyYW5zcG9ydCBsYXllciBwYWNrZXRzIHdlXG4gICAgLy8gcmVjZWl2ZWQgZHVyaW5nIHRoZSByZS1rZXlpbmcgcHJvY2Vzc1xuICAgIHF1ZXVlID0gaW5zdGF0ZS5yZWtleVF1ZXVlO1xuICAgIHFsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgcSA9IDA7XG5cbiAgICBpbnN0YXRlLnJla2V5UXVldWUgPSBbXTtcblxuICAgIHZhciBjdXJTZXFubyA9IGluc3RhdGUuc2Vxbm87XG4gICAgZm9yICg7IHEgPCBxbGVuOyArK3EpIHtcbiAgICAgIGluc3RhdGUuc2Vxbm8gPSBxdWV1ZVtxXVswXTtcbiAgICAgIGluc3RhdGUucGF5bG9hZCA9IHF1ZXVlW3FdWzFdO1xuICAgICAgaWYgKHBhcnNlUGFja2V0KHNlbGYpID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBpZiAoaW5zdGF0ZS5zdGF0dXMgPT09IElOX0lOSVQpIHtcbiAgICAgICAgLy8gV2Ugd2VyZSByZXNldCBkdWUgdG8gc29tZSBlcnJvci9kaXNhZ3JlZW1lbnQgP1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhdGUuc2Vxbm8gPSBjdXJTZXFubztcbiAgfSBlbHNlIHtcbiAgICBvdXRzdGF0ZS5zdGF0dXMgPSBPVVRfUkVBRFk7XG4gICAgaWYgKGluc3RhdGUuc3RhdHVzID09PSBJTl9QQUNLRVQpIHtcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXBkYXRlIGluY29taW5nIHBhY2tldCBwYXJzZXIgc3RhdHVzIGluIG9yZGVyIHRvIGdldCB0aGVcbiAgICAgIC8vIGNvcnJlY3QgZGVjaXBoZXIsIGhtYWMsIGV0Yy4gc3RhdGVzLlxuXG4gICAgICAvLyBXZSBvbmx5IGdldCBoZXJlIGlmIHRoZSBob3N0IGZpbmdlcnByaW50IGNhbGxiYWNrIHdhcyBjYWxsZWRcbiAgICAgIC8vIGFzeW5jaHJvbm91c2x5IGFuZCB0aGUgaW5jb21pbmcgcGFja2V0IHBhcnNlciBpcyBzdGlsbCBleHBlY3RpbmcgYW5cbiAgICAgIC8vIHVuZW5jcnlwdGVkIHBhY2tldCwgZXRjLlxuXG4gICAgICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9QQUNLRVRCRUZPUkUgKHVwZGF0ZSkgKGV4cGVjdGluZyAnXG4gICAgICAgICAgICAgICAgICsgaW5DaXBoZXJJbmZvLmJsb2NrTGVuICsgJyknKTtcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSByaWdodCBudW1iZXIgb2YgYnl0ZXMgc28gd2UgY2FuIGRldGVybWluZSB0aGUgaW5jb21pbmdcbiAgICAgIC8vIHBhY2tldCBsZW5ndGhcbiAgICAgIGV4cGVjdERhdGEoc2VsZixcbiAgICAgICAgICAgICAgICAgRVhQX1RZUEVfQllURVMsXG4gICAgICAgICAgICAgICAgIGluQ2lwaGVySW5mby5ibG9ja0xlbixcbiAgICAgICAgICAgICAgICAgaW5zdGF0ZS5kZWNyeXB0LmJ1Zik7XG4gICAgfVxuICAgIHNlbGYuZW1pdCgncmVhZHknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYWNrZXRUeXBlKHNlbGYsIHBrdFR5cGUpIHtcbiAgdmFyIGtleCA9IHNlbGYuX3N0YXRlLmtleDtcbiAgaWYgKGtleCkge1xuICAgIC8vIERpc2FtYmlndWF0ZVxuICAgIHN3aXRjaCAocGt0VHlwZSkge1xuICAgICAgY2FzZSAzMDpcbiAgICAgICAgcmV0dXJuIGtleC5wa3RJbml0O1xuICAgICAgY2FzZSAzMTpcbiAgICAgICAgc3dpdGNoIChrZXgudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgICAgICAgIHJldHVybiAnS0VYREhfUkVQTFknO1xuICAgICAgICAgIGNhc2UgJ2dyb3VwZXgnOlxuICAgICAgICAgICAgcmV0dXJuICdLRVhESF9HRVhfR1JPVVAnO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ0tFWEVDREhfUkVQTFknO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMzpcbiAgICAgICAgaWYgKGtleC50eXBlID09PSAnZ3JvdXBleCcpXG4gICAgICAgICAgcmV0dXJuICdLRVhESF9HRVhfUkVQTFknO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTUVTU0FHRVtwa3RUeXBlXTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQYWNrZXQoc2VsZiwgY2FsbGJhY2spIHtcbiAgdmFyIGluc3RhdGUgPSBzZWxmLl9zdGF0ZS5pbmNvbWluZztcbiAgdmFyIG91dHN0YXRlID0gc2VsZi5fc3RhdGUub3V0Z29pbmc7XG4gIHZhciBwYXlsb2FkID0gaW5zdGF0ZS5wYXlsb2FkO1xuICB2YXIgc2Vxbm8gPSBpbnN0YXRlLnNlcW5vO1xuICB2YXIgc2VydmljZU5hbWU7XG4gIHZhciBsYW5nO1xuICB2YXIgbWVzc2FnZTtcbiAgdmFyIGluZm87XG4gIHZhciBjaGFuO1xuICB2YXIgZGF0YTtcbiAgdmFyIHNyY0lQO1xuICB2YXIgc3JjUG9ydDtcbiAgdmFyIHNlbmRlcjtcbiAgdmFyIHdpbmRvdztcbiAgdmFyIHBhY2tldFNpemU7XG4gIHZhciByZWNpcGllbnQ7XG4gIHZhciBkZXNjcmlwdGlvbjtcbiAgdmFyIHNvY2tldFBhdGg7XG5cbiAgaWYgKCsraW5zdGF0ZS5zZXFubyA+IE1BWF9TRVFOTylcbiAgICBpbnN0YXRlLnNlcW5vID0gMDtcblxuICBpZiAoaW5zdGF0ZS5pZ25vcmVOZXh0KSB7XG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogUGFja2V0IGlnbm9yZWQnKTtcbiAgICBpbnN0YXRlLmlnbm9yZU5leHQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHlwZSA9IHBheWxvYWRbMF07XG4gIGlmICh0eXBlID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHdlIHJlY2VpdmUgYSBwYWNrZXQgZHVyaW5nIGhhbmRzaGFrZSB0aGF0IGlzIG5vdCB0aGUgZXhwZWN0ZWQgcGFja2V0XG4gIC8vIGFuZCBpdCBpcyBub3Qgb25lIG9mOiBESVNDT05ORUNULCBJR05PUkUsIFVOSU1QTEVNRU5URUQsIG9yIERFQlVHLCB0aGVuIHdlXG4gIC8vIGNsb3NlIHRoZSBzdHJlYW1cbiAgaWYgKG91dHN0YXRlLnN0YXR1cyAhPT0gT1VUX1JFQURZXG4gICAgICAmJiBnZXRQYWNrZXRUeXBlKHNlbGYsIHR5cGUpICE9PSBpbnN0YXRlLmV4cGVjdGVkUGFja2V0XG4gICAgICAmJiB0eXBlIDwgMVxuICAgICAgJiYgdHlwZSA+IDQpIHtcbiAgICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9QQUNLRVREQVRBQUZURVIsIGV4cGVjdGVkOiAnXG4gICAgICAgICAgICAgICArIGluc3RhdGUuZXhwZWN0ZWRQYWNrZXRcbiAgICAgICAgICAgICAgICsgJyBidXQgZ290OiAnXG4gICAgICAgICAgICAgICArIGdldFBhY2tldFR5cGUoc2VsZiwgdHlwZSkpO1xuICAgIC8vIFhYWDogUG90ZW50aWFsIGlzc3VlIHdoZXJlIHRoZSBtb2R1bGUgdXNlciBkZWNpZGVzIHRvIGluaXRpYXRlIGEgcmVrZXlcbiAgICAvLyB2aWEgS0VYSU5JVCgpICh3aGljaCBzZXRzIGBleHBlY3RlZFBhY2tldGApIGFmdGVyIHJlY2VpdmluZyBhIHBhY2tldFxuICAgIC8vIGFuZCB0aGVyZSBpcyBzdGlsbCBhbm90aGVyIHBhY2tldCBhbHJlYWR5IHdhaXRpbmcgdG8gYmUgcGFyc2VkIGF0IHRoZVxuICAgIC8vIHRpbWUgdGhlIEtFWElOSVQgaXMgd3JpdHRlbi4gdGhpcyB3aWxsIGNhdXNlIGFuIHVuZXhwZWN0ZWQgZGlzY29ubmVjdC4uLlxuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5QUk9UT0NPTF9FUlJPUik7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignUmVjZWl2ZWQgdW5leHBlY3RlZCBwYWNrZXQnKTtcbiAgICBlcnIubGV2ZWwgPSAncHJvdG9jb2wnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBNRVNTQUdFLkNIQU5ORUxfREFUQSkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX0RBVEFcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgc3RyaW5nICAgIGRhdGFcbiAgICAqL1xuICAgIGNoYW4gPSByZWFkSW50KHBheWxvYWQsIDEsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoY2hhbiA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gVE9ETzogTUFYX0NIQU5fREFUQV9MRU4gaGVyZSBzaG91bGQgcmVhbGx5IGJlIGRlcGVuZGVudCB1cG9uIHRoZVxuICAgIC8vICAgICAgIGNoYW5uZWwncyBwYWNrZXQgc2l6ZS4gVGhlIHNzaDIgbW9kdWxlIHVzZXMgMzJLQiwgc28gd2UnbGwgaGFyZFxuICAgIC8vICAgICAgIGNvZGUgdGhpcyBmb3Igbm93IC4uLlxuICAgIGRhdGEgPSByZWFkU3RyaW5nKHBheWxvYWQsIDUsIHNlbGYsIGNhbGxiYWNrLCAzMjc2OCk7XG4gICAgaWYgKGRhdGEgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiBDSEFOTkVMX0RBVEEgKCdcbiAgICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICAgKyAnKScpO1xuICAgIHNlbGYuZW1pdCgnQ0hBTk5FTF9EQVRBOicgKyBjaGFuLCBkYXRhKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBNRVNTQUdFLkNIQU5ORUxfRVhURU5ERURfREFUQSkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX0VYVEVOREVEX0RBVEFcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgdWludDMyICAgIGRhdGFfdHlwZV9jb2RlXG4gICAgICBzdHJpbmcgICAgZGF0YVxuICAgICovXG4gICAgY2hhbiA9IHJlYWRJbnQocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjaGFuID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgZGF0YVR5cGUgPSByZWFkSW50KHBheWxvYWQsIDUsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoZGF0YVR5cGUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRhdGEgPSByZWFkU3RyaW5nKHBheWxvYWQsIDksIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoZGF0YSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBwYWNrZXQ6ICdcbiAgICAgICAgICAgICAgICsgJ0NIQU5ORUxfRVhURU5ERURfREFUQSAoJ1xuICAgICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgICArICcpJyk7XG4gICAgc2VsZi5lbWl0KCdDSEFOTkVMX0VYVEVOREVEX0RBVEE6JyArIGNoYW4sIGRhdGFUeXBlLCBkYXRhKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBNRVNTQUdFLkNIQU5ORUxfV0lORE9XX0FESlVTVCkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX1dJTkRPV19BREpVU1RcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgdWludDMyICAgIGJ5dGVzIHRvIGFkZFxuICAgICovXG4gICAgY2hhbiA9IHJlYWRJbnQocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjaGFuID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgYnl0ZXNUb0FkZCA9IHJlYWRJbnQocGF5bG9hZCwgNSwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChieXRlc1RvQWRkID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9QQUNLRVREQVRBQUZURVIsIHBhY2tldDogJ1xuICAgICAgICAgICAgICAgKyAnQ0hBTk5FTF9XSU5ET1dfQURKVVNUICgnXG4gICAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICAgICsgJywgJ1xuICAgICAgICAgICAgICAgKyBieXRlc1RvQWRkXG4gICAgICAgICAgICAgICArICcpJyk7XG4gICAgc2VsZi5lbWl0KCdDSEFOTkVMX1dJTkRPV19BREpVU1Q6JyArIGNoYW4sIGJ5dGVzVG9BZGQpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuQ0hBTk5FTF9TVUNDRVNTKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfU1VDQ0VTU1xuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgKi9cbiAgICBjaGFuID0gcmVhZEludChwYXlsb2FkLCAxLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGNoYW4gPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiBDSEFOTkVMX1NVQ0NFU1MgKCdcbiAgICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICAgKyAnKScpO1xuICAgIHNlbGYuZW1pdCgnQ0hBTk5FTF9TVUNDRVNTOicgKyBjaGFuKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBNRVNTQUdFLkNIQU5ORUxfRkFJTFVSRSkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX0ZBSUxVUkVcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICovXG4gICAgY2hhbiA9IHJlYWRJbnQocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjaGFuID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9QQUNLRVREQVRBQUZURVIsIHBhY2tldDogQ0hBTk5FTF9GQUlMVVJFICgnXG4gICAgICAgICAgICAgICArIGNoYW5cbiAgICAgICAgICAgICAgICsgJyknKTtcbiAgICBzZWxmLmVtaXQoJ0NIQU5ORUxfRkFJTFVSRTonICsgY2hhbik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5DSEFOTkVMX0VPRikge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX0VPRlxuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgKi9cbiAgICBjaGFuID0gcmVhZEludChwYXlsb2FkLCAxLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGNoYW4gPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiBDSEFOTkVMX0VPRiAoJ1xuICAgICAgICAgICAgICAgKyBjaGFuXG4gICAgICAgICAgICAgICArICcpJyk7XG4gICAgc2VsZi5lbWl0KCdDSEFOTkVMX0VPRjonICsgY2hhbik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5DSEFOTkVMX09QRU4pIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9PUEVOXG4gICAgICBzdHJpbmcgICAgY2hhbm5lbCB0eXBlIGluIFVTLUFTQ0lJIG9ubHlcbiAgICAgIHVpbnQzMiAgICBzZW5kZXIgY2hhbm5lbFxuICAgICAgdWludDMyICAgIGluaXRpYWwgd2luZG93IHNpemVcbiAgICAgIHVpbnQzMiAgICBtYXhpbXVtIHBhY2tldCBzaXplXG4gICAgICAuLi4uICAgICAgY2hhbm5lbCB0eXBlIHNwZWNpZmljIGRhdGEgZm9sbG93c1xuICAgICovXG4gICAgdmFyIGNoYW5UeXBlID0gcmVhZFN0cmluZyhwYXlsb2FkLCAxLCAnYXNjaWknLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGNoYW5UeXBlID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzZW5kZXIgPSByZWFkSW50KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChzZW5kZXIgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdpbmRvdyA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAod2luZG93ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBwYWNrZXRTaXplID0gcmVhZEludChwYXlsb2FkLCBwYXlsb2FkLl9wb3MgKz0gNCwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChwYWNrZXRTaXplID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgY2hhbm5lbDtcblxuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiBDSEFOTkVMX09QRU4gKCdcbiAgICAgICAgICAgICAgICsgc2VuZGVyXG4gICAgICAgICAgICAgICArICcsICdcbiAgICAgICAgICAgICAgICsgY2hhblR5cGVcbiAgICAgICAgICAgICAgICsgJyknKTtcblxuICAgIGlmIChjaGFuVHlwZSA9PT0gJ2ZvcndhcmRlZC10Y3BpcCcgLy8gU2VydmVyLT5DbGllbnRcbiAgICAgICAgfHwgY2hhblR5cGUgPT09ICdkaXJlY3QtdGNwaXAnKSB7IC8vIENsaWVudC0+U2VydmVyXG4gICAgICAvKlxuICAgICAgICBzdHJpbmcgICAgYWRkcmVzcyB0aGF0IHdhcyBjb25uZWN0ZWQgLyBob3N0IHRvIGNvbm5lY3RcbiAgICAgICAgdWludDMyICAgIHBvcnQgdGhhdCB3YXMgY29ubmVjdGVkIC8gcG9ydCB0byBjb25uZWN0XG4gICAgICAgIHN0cmluZyAgICBvcmlnaW5hdG9yIElQIGFkZHJlc3NcbiAgICAgICAgdWludDMyICAgIG9yaWdpbmF0b3IgcG9ydFxuICAgICAgKi9cbiAgICAgIHZhciBkZXN0SVAgPSByZWFkU3RyaW5nKHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLl9wb3MgKz0gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhc2NpaScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2spO1xuICAgICAgaWYgKGRlc3RJUCA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBkZXN0UG9ydCA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAoZGVzdFBvcnQgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBzcmNJUCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChzcmNJUCA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHNyY1BvcnQgPSByZWFkSW50KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKHNyY1BvcnQgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjaGFubmVsID0ge1xuICAgICAgICB0eXBlOiBjaGFuVHlwZSxcbiAgICAgICAgc2VuZGVyOiBzZW5kZXIsXG4gICAgICAgIHdpbmRvdzogd2luZG93LFxuICAgICAgICBwYWNrZXRTaXplOiBwYWNrZXRTaXplLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZGVzdElQOiBkZXN0SVAsXG4gICAgICAgICAgZGVzdFBvcnQ6IGRlc3RQb3J0LFxuICAgICAgICAgIHNyY0lQOiBzcmNJUCxcbiAgICAgICAgICBzcmNQb3J0OiBzcmNQb3J0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICgvLyBTZXJ2ZXItPkNsaWVudFxuICAgICAgICAgICAgICAgY2hhblR5cGUgPT09ICdmb3J3YXJkZWQtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20nXG4gICAgICAgICAgICAgICAvLyBDbGllbnQtPlNlcnZlclxuICAgICAgICAgICAgICAgfHwgY2hhblR5cGUgPT09ICdkaXJlY3Qtc3RyZWFtbG9jYWxAb3BlbnNzaC5jb20nKSB7XG4gICAgICAvKlxuICAgICAgICBzdHJpbmcgICAgc29ja2V0IHBhdGhcbiAgICAgICAgc3RyaW5nICAgIHJlc2VydmVkIGZvciBmdXR1cmUgdXNlXG4gICAgICAqL1xuICAgICAgc29ja2V0UGF0aCA9IHJlYWRTdHJpbmcocGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQuX3BvcyArPSA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3V0ZjgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICAgIGlmIChzb2NrZXRQYXRoID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgY2hhbm5lbCA9IHtcbiAgICAgICAgdHlwZTogY2hhblR5cGUsXG4gICAgICAgIHNlbmRlcjogc2VuZGVyLFxuICAgICAgICB3aW5kb3c6IHdpbmRvdyxcbiAgICAgICAgcGFja2V0U2l6ZTogcGFja2V0U2l6ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHNvY2tldFBhdGg6IHNvY2tldFBhdGgsXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjaGFuVHlwZSA9PT0gJ3gxMScpIHsgLy8gU2VydmVyLT5DbGllbnRcbiAgICAgIC8qXG4gICAgICAgIHN0cmluZyAgICBvcmlnaW5hdG9yIGFkZHJlc3MgKGUuZy4sIFwiMTkyLjE2OC43LjM4XCIpXG4gICAgICAgIHVpbnQzMiAgICBvcmlnaW5hdG9yIHBvcnRcbiAgICAgICovXG4gICAgICBzcmNJUCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChzcmNJUCA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHNyY1BvcnQgPSByZWFkSW50KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKHNyY1BvcnQgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjaGFubmVsID0ge1xuICAgICAgICB0eXBlOiBjaGFuVHlwZSxcbiAgICAgICAgc2VuZGVyOiBzZW5kZXIsXG4gICAgICAgIHdpbmRvdzogd2luZG93LFxuICAgICAgICBwYWNrZXRTaXplOiBwYWNrZXRTaXplLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgc3JjSVA6IHNyY0lQLFxuICAgICAgICAgIHNyY1BvcnQ6IHNyY1BvcnRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gJ3Nlc3Npb24nIChDbGllbnQtPlNlcnZlciksICdhdXRoLWFnZW50QG9wZW5zc2guY29tJyAoU2VydmVyLT5DbGllbnQpXG4gICAgICBjaGFubmVsID0ge1xuICAgICAgICB0eXBlOiBjaGFuVHlwZSxcbiAgICAgICAgc2VuZGVyOiBzZW5kZXIsXG4gICAgICAgIHdpbmRvdzogd2luZG93LFxuICAgICAgICBwYWNrZXRTaXplOiBwYWNrZXRTaXplLFxuICAgICAgICBkYXRhOiB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzZWxmLmVtaXQoJ0NIQU5ORUxfT1BFTicsIGNoYW5uZWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuQ0hBTk5FTF9PUEVOX0NPTkZJUk1BVElPTikge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX09QRU5fQ09ORklSTUFUSU9OXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHVpbnQzMiAgICBzZW5kZXIgY2hhbm5lbFxuICAgICAgdWludDMyICAgIGluaXRpYWwgd2luZG93IHNpemVcbiAgICAgIHVpbnQzMiAgICBtYXhpbXVtIHBhY2tldCBzaXplXG4gICAgICAuLi4uICAgICAgY2hhbm5lbCB0eXBlIHNwZWNpZmljIGRhdGEgZm9sbG93c1xuICAgICovXG4gICAgLy8gXCJUaGUgJ3JlY2lwaWVudCBjaGFubmVsJyBpcyB0aGUgY2hhbm5lbCBudW1iZXIgZ2l2ZW4gaW4gdGhlXG4gICAgLy8gb3JpZ2luYWwgb3BlbiByZXF1ZXN0LCBhbmQgJ3NlbmRlciBjaGFubmVsJyBpcyB0aGUgY2hhbm5lbCBudW1iZXJcbiAgICAvLyBhbGxvY2F0ZWQgYnkgdGhlIG90aGVyIHNpZGUuXCJcbiAgICByZWNpcGllbnQgPSByZWFkSW50KHBheWxvYWQsIDEsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAocmVjaXBpZW50ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzZW5kZXIgPSByZWFkSW50KHBheWxvYWQsIDUsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoc2VuZGVyID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB3aW5kb3cgPSByZWFkSW50KHBheWxvYWQsIDksIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAod2luZG93ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBwYWNrZXRTaXplID0gcmVhZEludChwYXlsb2FkLCAxMywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChwYWNrZXRTaXplID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGluZm8gPSB7XG4gICAgICByZWNpcGllbnQ6IHJlY2lwaWVudCxcbiAgICAgIHNlbmRlcjogc2VuZGVyLFxuICAgICAgd2luZG93OiB3aW5kb3csXG4gICAgICBwYWNrZXRTaXplOiBwYWNrZXRTaXplXG4gICAgfTtcblxuICAgIGlmIChwYXlsb2FkLmxlbmd0aCA+IDE3KVxuICAgICAgaW5mby5kYXRhID0gcGF5bG9hZC5zbGljZSgxNyk7XG5cbiAgICBzZWxmLmVtaXQoJ0NIQU5ORUxfT1BFTl9DT05GSVJNQVRJT046JyArIGluZm8ucmVjaXBpZW50LCBpbmZvKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBNRVNTQUdFLkNIQU5ORUxfT1BFTl9GQUlMVVJFKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfT1BFTl9GQUlMVVJFXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHVpbnQzMiAgICByZWFzb24gY29kZVxuICAgICAgc3RyaW5nICAgIGRlc2NyaXB0aW9uIGluIElTTy0xMDY0NiBVVEYtOCBlbmNvZGluZ1xuICAgICAgc3RyaW5nICAgIGxhbmd1YWdlIHRhZ1xuICAgICovXG4gICAgcmVjaXBpZW50ID0gcmVhZEludChwYXlsb2FkLCAxLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKHJlY2lwaWVudCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHJlYXNvbkNvZGUgPSByZWFkSW50KHBheWxvYWQsIDUsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAocmVhc29uQ29kZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVzY3JpcHRpb24gPSByZWFkU3RyaW5nKHBheWxvYWQsIDksICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGFuZyA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAobGFuZyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcGF5bG9hZC5fcG9zID0gOTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZWFzb25Db2RlOiByZWFzb25Db2RlLFxuICAgICAgcmVhc29uOiBDSEFOTkVMX09QRU5fRkFJTFVSRVtyZWFzb25Db2RlXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIGxhbmc6IGxhbmdcbiAgICB9O1xuXG4gICAgc2VsZi5lbWl0KCdDSEFOTkVMX09QRU5fRkFJTFVSRTonICsgaW5mby5yZWNpcGllbnQsIGluZm8pO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuQ0hBTk5FTF9DTE9TRSkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX0NMT1NFXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAqL1xuICAgIGNoYW4gPSByZWFkSW50KHBheWxvYWQsIDEsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoY2hhbiA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBwYWNrZXQ6IENIQU5ORUxfQ0xPU0UgKCdcbiAgICAgICAgICAgICAgICsgY2hhblxuICAgICAgICAgICAgICAgKyAnKScpO1xuICAgIHNlbGYuZW1pdCgnQ0hBTk5FTF9DTE9TRTonICsgY2hhbik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5JR05PUkUpIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfSUdOT1JFXG4gICAgICBzdHJpbmcgICAgZGF0YVxuICAgICovXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5ESVNDT05ORUNUKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0RJU0NPTk5FQ1RcbiAgICAgIHVpbnQzMiAgICByZWFzb24gY29kZVxuICAgICAgc3RyaW5nICAgIGRlc2NyaXB0aW9uIGluIElTTy0xMDY0NiBVVEYtOCBlbmNvZGluZ1xuICAgICAgc3RyaW5nICAgIGxhbmd1YWdlIHRhZ1xuICAgICovXG4gICAgdmFyIHJlYXNvbiA9IHJlYWRJbnQocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChyZWFzb24gPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZWFzb25UZXh0ID0gRElTQ09OTkVDVF9SRUFTT05bcmVhc29uXTtcbiAgICBkZXNjcmlwdGlvbiA9IHJlYWRTdHJpbmcocGF5bG9hZCwgNSwgJ3V0ZjgnLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwYXlsb2FkLl9wb3MgPCBwYXlsb2FkLmxlbmd0aClcbiAgICAgIGxhbmcgPSByZWFkU3RyaW5nKHBheWxvYWQsIHBheWxvYWQuX3BvcywgJ2FzY2lpJywgc2VsZiwgY2FsbGJhY2spO1xuXG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBwYWNrZXQ6IERJU0NPTk5FQ1QgKCdcbiAgICAgICAgICAgICAgICsgcmVhc29uVGV4dFxuICAgICAgICAgICAgICAgKyAnKScpO1xuXG4gICAgc2VsZi5lbWl0KCdESVNDT05ORUNUJywgcmVhc29uVGV4dCwgcmVhc29uLCBkZXNjcmlwdGlvbiwgbGFuZyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5ERUJVRykge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19ERUJVR1xuICAgICAgYm9vbGVhbiAgIGFsd2F5c19kaXNwbGF5XG4gICAgICBzdHJpbmcgICAgbWVzc2FnZSBpbiBJU08tMTA2NDYgVVRGLTggZW5jb2RpbmdcbiAgICAgIHN0cmluZyAgICBsYW5ndWFnZSB0YWdcbiAgICAqL1xuICAgIG1lc3NhZ2UgPSByZWFkU3RyaW5nKHBheWxvYWQsIDIsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChtZXNzYWdlID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsYW5nID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAobGFuZyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBzZWxmLmVtaXQoJ0RFQlVHJywgbWVzc2FnZSwgbGFuZyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5ORVdLRVlTKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX05FV19LRVlTXG4gICAgKi9cbiAgICBzZWxmLmVtaXQoJ05FV0tFWVMnKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBNRVNTQUdFLlNFUlZJQ0VfUkVRVUVTVCkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19TRVJWSUNFX1JFUVVFU1RcbiAgICAgIHN0cmluZyAgICBzZXJ2aWNlIG5hbWVcbiAgICAqL1xuICAgIHNlcnZpY2VOYW1lID0gcmVhZFN0cmluZyhwYXlsb2FkLCAxLCAnYXNjaWknLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKHNlcnZpY2VOYW1lID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHNlbGYuZW1pdCgnU0VSVklDRV9SRVFVRVNUJywgc2VydmljZU5hbWUpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuU0VSVklDRV9BQ0NFUFQpIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfU0VSVklDRV9BQ0NFUFRcbiAgICAgIHN0cmluZyAgICBzZXJ2aWNlIG5hbWVcbiAgICAqL1xuICAgIHNlcnZpY2VOYW1lID0gcmVhZFN0cmluZyhwYXlsb2FkLCAxLCAnYXNjaWknLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKHNlcnZpY2VOYW1lID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHNlbGYuZW1pdCgnU0VSVklDRV9BQ0NFUFQnLCBzZXJ2aWNlTmFtZSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5VU0VSQVVUSF9SRVFVRVNUKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX1JFUVVFU1RcbiAgICAgIHN0cmluZyAgICB1c2VyIG5hbWUgaW4gSVNPLTEwNjQ2IFVURi04IGVuY29kaW5nIFtSRkMzNjI5XVxuICAgICAgc3RyaW5nICAgIHNlcnZpY2UgbmFtZSBpbiBVUy1BU0NJSVxuICAgICAgc3RyaW5nICAgIG1ldGhvZCBuYW1lIGluIFVTLUFTQ0lJXG4gICAgICAuLi4uICAgICAgbWV0aG9kIHNwZWNpZmljIGZpZWxkc1xuICAgICovXG4gICAgdmFyIHVzZXJuYW1lID0gcmVhZFN0cmluZyhwYXlsb2FkLCAxLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAodXNlcm5hbWUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBzdmNOYW1lID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoc3ZjTmFtZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIG1ldGhvZCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAnYXNjaWknLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKG1ldGhvZCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbWV0aG9kRGF0YTtcbiAgICB2YXIgbWV0aG9kRGVzYztcblxuICAgIGlmIChtZXRob2QgPT09ICdwYXNzd29yZCcpIHtcbiAgICAgIG1ldGhvZERhdGEgPSByZWFkU3RyaW5nKHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLl9wb3MgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3V0ZjgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICAgIGlmIChtZXRob2REYXRhID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAncHVibGlja2V5JyB8fCBtZXRob2QgPT09ICdob3N0YmFzZWQnKSB7XG4gICAgICB2YXIgcGtTaWduZWQ7XG4gICAgICB2YXIga2V5QWxnbztcbiAgICAgIHZhciBrZXk7XG4gICAgICB2YXIgc2lnbmF0dXJlO1xuICAgICAgdmFyIGJsb2I7XG4gICAgICB2YXIgaG9zdG5hbWU7XG4gICAgICB2YXIgdXNlcmxvY2FsO1xuICAgICAgaWYgKG1ldGhvZCA9PT0gJ3B1YmxpY2tleScpIHtcbiAgICAgICAgcGtTaWduZWQgPSBwYXlsb2FkW3BheWxvYWQuX3BvcysrXTtcbiAgICAgICAgaWYgKHBrU2lnbmVkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwa1NpZ25lZCA9IChwa1NpZ25lZCAhPT0gMCk7XG4gICAgICB9XG4gICAgICBrZXlBbGdvID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChrZXlBbGdvID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAga2V5ID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChrZXkgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGlmIChwa1NpZ25lZCB8fCBtZXRob2QgPT09ICdob3N0YmFzZWQnKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09ICdob3N0YmFzZWQnKSB7XG4gICAgICAgICAgaG9zdG5hbWUgPSByZWFkU3RyaW5nKHBheWxvYWQsIHBheWxvYWQuX3BvcywgJ2FzY2lpJywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgICAgIGlmIChob3N0bmFtZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgdXNlcmxvY2FsID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgICAgIGlmICh1c2VybG9jYWwgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJsb2JFbmQgPSBwYXlsb2FkLl9wb3M7XG4gICAgICAgIHNpZ25hdHVyZSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgYmxvYkVuZCwgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgICBpZiAoc2lnbmF0dXJlID09PSBmYWxzZSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNpZ25hdHVyZS5sZW5ndGggPiAoNCArIGtleUFsZ28ubGVuZ3RoICsgNClcbiAgICAgICAgICAgICYmIHNpZ25hdHVyZS50b1N0cmluZygnYXNjaWknLCA0LCA0ICsga2V5QWxnby5sZW5ndGgpID09PSBrZXlBbGdvKSB7XG4gICAgICAgICAgLy8gU2tpcCBhbGdvTGVuICsgYWxnbyArIHNpZ0xlblxuICAgICAgICAgIHNpZ25hdHVyZSA9IHNpZ25hdHVyZS5zbGljZSg0ICsga2V5QWxnby5sZW5ndGggKyA0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNpZ25hdHVyZSA9IHNpZ1NTSFRvQVNOMShzaWduYXR1cmUsIGtleUFsZ28sIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKHNpZ25hdHVyZSA9PT0gZmFsc2UpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGJsb2IgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIG91dHN0YXRlLnNlc3Npb25JZC5sZW5ndGggKyBibG9iRW5kKTtcbiAgICAgICAgd3JpdGVVSW50MzJCRShibG9iLCBvdXRzdGF0ZS5zZXNzaW9uSWQubGVuZ3RoLCAwKTtcbiAgICAgICAgb3V0c3RhdGUuc2Vzc2lvbklkLmNvcHkoYmxvYiwgNCk7XG4gICAgICAgIHBheWxvYWQuY29weShibG9iLCA0ICsgb3V0c3RhdGUuc2Vzc2lvbklkLmxlbmd0aCwgMCwgYmxvYkVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXRob2REZXNjID0gJ3B1YmxpY2tleSAtLSBjaGVjayc7XG4gICAgICB9XG5cbiAgICAgIG1ldGhvZERhdGEgPSB7XG4gICAgICAgIGtleUFsZ286IGtleUFsZ28sXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICAgICAgYmxvYjogYmxvYixcbiAgICAgICAgbG9jYWxIb3N0bmFtZTogaG9zdG5hbWUsXG4gICAgICAgIGxvY2FsVXNlcm5hbWU6IHVzZXJsb2NhbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2tleWJvYXJkLWludGVyYWN0aXZlJykge1xuICAgICAgLy8gU2tpcCBsYW5ndWFnZSwgaXQncyBkZXByZWNhdGVkXG4gICAgICB2YXIgc2tpcExlbiA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAoc2tpcExlbiA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIG1ldGhvZERhdGEgPSByZWFkU3RyaW5nKHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLl9wb3MgKyA0ICsgc2tpcExlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1dGY4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayk7XG4gICAgICBpZiAobWV0aG9kRGF0YSA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCAhPT0gJ25vbmUnKVxuICAgICAgbWV0aG9kRGF0YSA9IHBheWxvYWQuc2xpY2UocGF5bG9hZC5fcG9zKTtcblxuICAgIGlmIChtZXRob2REZXNjID09PSB1bmRlZmluZWQpXG4gICAgICBtZXRob2REZXNjID0gbWV0aG9kO1xuXG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBwYWNrZXQ6IFVTRVJBVVRIX1JFUVVFU1QgKCdcbiAgICAgICAgICAgICAgICsgbWV0aG9kRGVzY1xuICAgICAgICAgICAgICAgKyAnKScpO1xuXG4gICAgc2VsZi5fc3RhdGUuYXV0aHNRdWV1ZS5wdXNoKG1ldGhvZCk7XG4gICAgc2VsZi5lbWl0KCdVU0VSQVVUSF9SRVFVRVNUJywgdXNlcm5hbWUsIHN2Y05hbWUsIG1ldGhvZCwgbWV0aG9kRGF0YSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5VU0VSQVVUSF9TVUNDRVNTKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX1NVQ0NFU1NcbiAgICAqL1xuICAgIGlmIChvdXRzdGF0ZS5jb21wcmVzcy50eXBlID09PSAnemxpYkBvcGVuc3NoLmNvbScpIHtcbiAgICAgIG91dHN0YXRlLmNvbXByZXNzLmluc3RhbmNlID0gemxpYi5jcmVhdGVEZWZsYXRlKFpMSUJfT1BUUyk7XG4gICAgICBvdXRzdGF0ZS5jb21wcmVzcy5xdWV1ZSA9IFtdO1xuICAgIH1cbiAgICBpZiAoaW5zdGF0ZS5kZWNvbXByZXNzLnR5cGUgPT09ICd6bGliQG9wZW5zc2guY29tJylcbiAgICAgIGluc3RhdGUuZGVjb21wcmVzcy5pbnN0YW5jZSA9IHpsaWIuY3JlYXRlSW5mbGF0ZShaTElCX09QVFMpO1xuXG4gICAgc2VsZi5fc3RhdGUuYXV0aHNRdWV1ZS5zaGlmdCgpO1xuXG4gICAgc2VsZi5lbWl0KCdVU0VSQVVUSF9TVUNDRVNTJyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5VU0VSQVVUSF9GQUlMVVJFKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX0ZBSUxVUkVcbiAgICAgIG5hbWUtbGlzdCAgICBhdXRoZW50aWNhdGlvbnMgdGhhdCBjYW4gY29udGludWVcbiAgICAgIGJvb2xlYW4gICAgICBwYXJ0aWFsIHN1Y2Nlc3NcbiAgICAqL1xuICAgIHZhciBhdXRocyA9IHJlYWRTdHJpbmcocGF5bG9hZCwgMSwgJ2FzY2lpJywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChhdXRocyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHBhcnRTdWNjZXNzID0gcGF5bG9hZFtwYXlsb2FkLl9wb3NdO1xuICAgIGlmIChwYXJ0U3VjY2VzcyA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcGFydFN1Y2Nlc3MgPSAocGFydFN1Y2Nlc3MgIT09IDApO1xuICAgIGF1dGhzID0gYXV0aHMuc3BsaXQoJywnKTtcblxuICAgIHNlbGYuX3N0YXRlLmF1dGhzUXVldWUuc2hpZnQoKTtcbiAgICBzZWxmLmVtaXQoJ1VTRVJBVVRIX0ZBSUxVUkUnLCBhdXRocywgcGFydFN1Y2Nlc3MpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuVVNFUkFVVEhfQkFOTkVSKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX0JBTk5FUlxuICAgICAgc3RyaW5nICAgIG1lc3NhZ2UgaW4gSVNPLTEwNjQ2IFVURi04IGVuY29kaW5nXG4gICAgICBzdHJpbmcgICAgbGFuZ3VhZ2UgdGFnXG4gICAgKi9cbiAgICBtZXNzYWdlID0gcmVhZFN0cmluZyhwYXlsb2FkLCAxLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAobWVzc2FnZSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGFuZyA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAobGFuZyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBzZWxmLmVtaXQoJ1VTRVJBVVRIX0JBTk5FUicsIG1lc3NhZ2UsIGxhbmcpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuR0xPQkFMX1JFUVVFU1QpIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfR0xPQkFMX1JFUVVFU1RcbiAgICAgIHN0cmluZyAgICByZXF1ZXN0IG5hbWUgaW4gVVMtQVNDSUkgb25seVxuICAgICAgYm9vbGVhbiAgIHdhbnQgcmVwbHlcbiAgICAgIC4uLi4gICAgICByZXF1ZXN0LXNwZWNpZmljIGRhdGEgZm9sbG93c1xuICAgICovXG4gICAgdmFyIHJlcXVlc3QgPSByZWFkU3RyaW5nKHBheWxvYWQsIDEsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAocmVxdWVzdCA9PT0gZmFsc2UpIHtcbiAgICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IElOX1BBQ0tFVERBVEFBRlRFUiwgcGFja2V0OiBHTE9CQUxfUkVRVUVTVCcpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBJTl9QQUNLRVREQVRBQUZURVIsIHBhY2tldDogR0xPQkFMX1JFUVVFU1QgKCdcbiAgICAgICAgICAgICAgICsgcmVxdWVzdFxuICAgICAgICAgICAgICAgKyAnKScpO1xuXG4gICAgdmFyIHdhbnRSZXBseSA9IHBheWxvYWRbcGF5bG9hZC5fcG9zKytdO1xuICAgIGlmICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB3YW50UmVwbHkgPSAod2FudFJlcGx5ICE9PSAwKTtcblxuICAgIHZhciByZXFEYXRhO1xuICAgIGlmIChyZXF1ZXN0ID09PSAndGNwaXAtZm9yd2FyZCcgfHwgcmVxdWVzdCA9PT0gJ2NhbmNlbC10Y3BpcC1mb3J3YXJkJykge1xuICAgICAgdmFyIGJpbmRBZGRyID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChiaW5kQWRkciA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBiaW5kUG9ydCA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAoYmluZFBvcnQgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXFEYXRhID0ge1xuICAgICAgICBiaW5kQWRkcjogYmluZEFkZHIsXG4gICAgICAgIGJpbmRQb3J0OiBiaW5kUG9ydFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICdzdHJlYW1sb2NhbC1mb3J3YXJkQG9wZW5zc2guY29tJ1xuICAgICAgICAgICAgICAgfHwgcmVxdWVzdCA9PT0gJ2NhbmNlbC1zdHJlYW1sb2NhbC1mb3J3YXJkQG9wZW5zc2guY29tJykge1xuICAgICAgc29ja2V0UGF0aCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChzb2NrZXRQYXRoID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgcmVxRGF0YSA9IHtcbiAgICAgICAgc29ja2V0UGF0aDogc29ja2V0UGF0aFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICduby1tb3JlLXNlc3Npb25zQG9wZW5zc2guY29tJykge1xuICAgICAgLy8gTm8gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICByZXFEYXRhID0gcGF5bG9hZC5zbGljZShwYXlsb2FkLl9wb3MpO1xuICAgIH1cblxuICAgIHNlbGYuZW1pdCgnR0xPQkFMX1JFUVVFU1QnLCByZXF1ZXN0LCB3YW50UmVwbHksIHJlcURhdGEpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuUkVRVUVTVF9TVUNDRVNTKSB7XG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1JFUVVFU1RfU1VDQ0VTU1xuICAgICAgLi4uLiAgICAgIHJlc3BvbnNlIHNwZWNpZmljIGRhdGFcbiAgICAqL1xuICAgIGlmIChwYXlsb2FkLmxlbmd0aCA+IDEpXG4gICAgICBzZWxmLmVtaXQoJ1JFUVVFU1RfU1VDQ0VTUycsIHBheWxvYWQuc2xpY2UoMSkpO1xuICAgIGVsc2VcbiAgICAgIHNlbGYuZW1pdCgnUkVRVUVTVF9TVUNDRVNTJyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5SRVFVRVNUX0ZBSUxVUkUpIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfUkVRVUVTVF9GQUlMVVJFXG4gICAgKi9cbiAgICBzZWxmLmVtaXQoJ1JFUVVFU1RfRkFJTFVSRScpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuVU5JTVBMRU1FTlRFRCkge1xuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19VTklNUExFTUVOVEVEXG4gICAgICB1aW50MzIgICAgcGFja2V0IHNlcXVlbmNlIG51bWJlciBvZiByZWplY3RlZCBtZXNzYWdlXG4gICAgKi9cbiAgICAvLyBUT0RPXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5LRVhJTklUKVxuICAgIHJldHVybiBwYXJzZV9LRVhJTklUKHNlbGYsIGNhbGxiYWNrKTtcbiAgZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5DSEFOTkVMX1JFUVVFU1QpXG4gICAgcmV0dXJuIHBhcnNlX0NIQU5ORUxfUkVRVUVTVChzZWxmLCBjYWxsYmFjayk7XG4gIGVsc2UgaWYgKHR5cGUgPj0gMzAgJiYgdHlwZSA8PSA0OSkgLy8gS2V5IGV4Y2hhbmdlIG1ldGhvZC1zcGVjaWZpYyBtZXNzYWdlc1xuICAgIHJldHVybiBwYXJzZV9LRVgoc2VsZiwgdHlwZSwgY2FsbGJhY2spO1xuICBlbHNlIGlmICh0eXBlID49IDYwICYmIHR5cGUgPD0gNzApIC8vIFVzZXIgYXV0aCBjb250ZXh0LXNwZWNpZmljIG1lc3NhZ2VzXG4gICAgcmV0dXJuIHBhcnNlX1VTRVJBVVRIKHNlbGYsIHR5cGUsIGNhbGxiYWNrKTtcbiAgZWxzZSB7XG4gICAgLy8gVW5rbm93biBwYWNrZXQgdHlwZVxuICAgIHZhciB1bmltcGwgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQpO1xuICAgIHVuaW1wbFswXSA9IE1FU1NBR0UuVU5JTVBMRU1FTlRFRDtcbiAgICB3cml0ZVVJbnQzMkJFKHVuaW1wbCwgc2Vxbm8sIDEpO1xuICAgIHNlbmQoc2VsZiwgdW5pbXBsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9LRVhJTklUKHNlbGYsIGNhbGxiYWNrKSB7XG4gIHZhciBpbnN0YXRlID0gc2VsZi5fc3RhdGUuaW5jb21pbmc7XG4gIHZhciBwYXlsb2FkID0gaW5zdGF0ZS5wYXlsb2FkO1xuXG4gIC8qXG4gICAgYnl0ZSAgICAgICAgIFNTSF9NU0dfS0VYSU5JVFxuICAgIGJ5dGVbMTZdICAgICBjb29raWUgKHJhbmRvbSBieXRlcylcbiAgICBuYW1lLWxpc3QgICAga2V4X2FsZ29yaXRobXNcbiAgICBuYW1lLWxpc3QgICAgc2VydmVyX2hvc3Rfa2V5X2FsZ29yaXRobXNcbiAgICBuYW1lLWxpc3QgICAgZW5jcnlwdGlvbl9hbGdvcml0aG1zX2NsaWVudF90b19zZXJ2ZXJcbiAgICBuYW1lLWxpc3QgICAgZW5jcnlwdGlvbl9hbGdvcml0aG1zX3NlcnZlcl90b19jbGllbnRcbiAgICBuYW1lLWxpc3QgICAgbWFjX2FsZ29yaXRobXNfY2xpZW50X3RvX3NlcnZlclxuICAgIG5hbWUtbGlzdCAgICBtYWNfYWxnb3JpdGhtc19zZXJ2ZXJfdG9fY2xpZW50XG4gICAgbmFtZS1saXN0ICAgIGNvbXByZXNzaW9uX2FsZ29yaXRobXNfY2xpZW50X3RvX3NlcnZlclxuICAgIG5hbWUtbGlzdCAgICBjb21wcmVzc2lvbl9hbGdvcml0aG1zX3NlcnZlcl90b19jbGllbnRcbiAgICBuYW1lLWxpc3QgICAgbGFuZ3VhZ2VzX2NsaWVudF90b19zZXJ2ZXJcbiAgICBuYW1lLWxpc3QgICAgbGFuZ3VhZ2VzX3NlcnZlcl90b19jbGllbnRcbiAgICBib29sZWFuICAgICAgZmlyc3Rfa2V4X3BhY2tldF9mb2xsb3dzXG4gICAgdWludDMyICAgICAgIDAgKHJlc2VydmVkIGZvciBmdXR1cmUgZXh0ZW5zaW9uKVxuICAqL1xuICB2YXIgaW5pdCA9IHtcbiAgICBhbGdvcml0aG1zOiB7XG4gICAgICBrZXg6IHVuZGVmaW5lZCxcbiAgICAgIHNydkhvc3RLZXk6IHVuZGVmaW5lZCxcbiAgICAgIGNzOiB7XG4gICAgICAgIGVuY3J5cHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgbWFjOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbXByZXNzOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBzYzoge1xuICAgICAgICBlbmNyeXB0OiB1bmRlZmluZWQsXG4gICAgICAgIG1hYzogdW5kZWZpbmVkLFxuICAgICAgICBjb21wcmVzczogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSxcbiAgICBsYW5ndWFnZXM6IHtcbiAgICAgIGNzOiB1bmRlZmluZWQsXG4gICAgICBzYzogdW5kZWZpbmVkXG4gICAgfVxuICB9O1xuICB2YXIgdmFsO1xuXG4gIHZhbCA9IHJlYWRMaXN0KHBheWxvYWQsIDE3LCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmICh2YWwgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaW5pdC5hbGdvcml0aG1zLmtleCA9IHZhbDtcbiAgdmFsID0gcmVhZExpc3QocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmICh2YWwgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaW5pdC5hbGdvcml0aG1zLnNydkhvc3RLZXkgPSB2YWw7XG4gIHZhbCA9IHJlYWRMaXN0KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICBpZiAodmFsID09PSBmYWxzZSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGluaXQuYWxnb3JpdGhtcy5jcy5lbmNyeXB0ID0gdmFsO1xuICB2YWwgPSByZWFkTGlzdChwYXlsb2FkLCBwYXlsb2FkLl9wb3MsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKHZhbCA9PT0gZmFsc2UpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpbml0LmFsZ29yaXRobXMuc2MuZW5jcnlwdCA9IHZhbDtcbiAgdmFsID0gcmVhZExpc3QocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmICh2YWwgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaW5pdC5hbGdvcml0aG1zLmNzLm1hYyA9IHZhbDtcbiAgdmFsID0gcmVhZExpc3QocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmICh2YWwgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaW5pdC5hbGdvcml0aG1zLnNjLm1hYyA9IHZhbDtcbiAgdmFsID0gcmVhZExpc3QocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmICh2YWwgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaW5pdC5hbGdvcml0aG1zLmNzLmNvbXByZXNzID0gdmFsO1xuICB2YWwgPSByZWFkTGlzdChwYXlsb2FkLCBwYXlsb2FkLl9wb3MsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKHZhbCA9PT0gZmFsc2UpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpbml0LmFsZ29yaXRobXMuc2MuY29tcHJlc3MgPSB2YWw7XG4gIHZhbCA9IHJlYWRMaXN0KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICBpZiAodmFsID09PSBmYWxzZSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGluaXQubGFuZ3VhZ2VzLmNzID0gdmFsO1xuICB2YWwgPSByZWFkTGlzdChwYXlsb2FkLCBwYXlsb2FkLl9wb3MsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKHZhbCA9PT0gZmFsc2UpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpbml0Lmxhbmd1YWdlcy5zYyA9IHZhbDtcblxuICB2YXIgZmlyc3RGb2xsb3dzID0gKHBheWxvYWQuX3BvcyA8IHBheWxvYWQubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgJiYgcGF5bG9hZFtwYXlsb2FkLl9wb3NdID09PSAxKTtcblxuICBpbnN0YXRlLmtleGluaXQgPSBwYXlsb2FkO1xuXG4gIHNlbGYuZW1pdCgnS0VYSU5JVCcsIGluaXQsIGZpcnN0Rm9sbG93cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0tFWChzZWxmLCB0eXBlLCBjYWxsYmFjaykge1xuICB2YXIgc3RhdGUgPSBzZWxmLl9zdGF0ZTtcbiAgdmFyIGluc3RhdGUgPSBzdGF0ZS5pbmNvbWluZztcbiAgdmFyIHBheWxvYWQgPSBpbnN0YXRlLnBheWxvYWQ7XG5cbiAgaWYgKHN0YXRlLm91dGdvaW5nLnN0YXR1cyA9PT0gT1VUX1JFQURZXG4gICAgICB8fCBnZXRQYWNrZXRUeXBlKHNlbGYsIHR5cGUpICE9PSBpbnN0YXRlLmV4cGVjdGVkUGFja2V0KSB7XG4gICAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBleHBlY3RlZDogJ1xuICAgICAgICAgICAgICAgKyBpbnN0YXRlLmV4cGVjdGVkUGFja2V0XG4gICAgICAgICAgICAgICArICcgYnV0IGdvdDogJ1xuICAgICAgICAgICAgICAgKyBnZXRQYWNrZXRUeXBlKHNlbGYsIHR5cGUpKTtcbiAgICBzZWxmLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uUFJPVE9DT0xfRVJST1IpO1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1JlY2VpdmVkIHVuZXhwZWN0ZWQgcGFja2V0Jyk7XG4gICAgZXJyLmxldmVsID0gJ3Byb3RvY29sJztcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc3RhdGUua2V4LnR5cGUgPT09ICdncm91cGV4Jykge1xuICAgIC8vIER5bmFtaWMgZ3JvdXAgZXhjaGFuZ2UtcmVsYXRlZFxuXG4gICAgaWYgKHNlbGYuc2VydmVyKSB7XG4gICAgICAvLyBUT0RPOiBTdXBwb3J0IGdyb3VwIGV4Y2hhbmdlIHNlcnZlci1zaWRlXG4gICAgICBzZWxmLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uUFJPVE9DT0xfRVJST1IpO1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignREggZ3JvdXAgZXhjaGFuZ2Ugbm90IHN1cHBvcnRlZCBieSBzZXJ2ZXInKTtcbiAgICAgIGVyci5sZXZlbCA9ICdoYW5kc2hha2UnO1xuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlID09PSBNRVNTQUdFLktFWERIX0dFWF9HUk9VUCkge1xuICAgICAgICAvKlxuICAgICAgICAgIGJ5dGUgICAgU1NIX01TR19LRVhfREhfR0VYX0dST1VQXG4gICAgICAgICAgbXBpbnQgICBwLCBzYWZlIHByaW1lXG4gICAgICAgICAgbXBpbnQgICBnLCBnZW5lcmF0b3IgZm9yIHN1Ymdyb3VwIGluIEdGKHApXG4gICAgICAgICovXG4gICAgICAgIHZhciBwcmltZSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgICBpZiAocHJpbWUgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGdlbiA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICAgIGlmIChnZW4gPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgc2VsZi5lbWl0KCdLRVhESF9HRVhfR1JPVVAnLCBwcmltZSwgZ2VuKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5LRVhESF9HRVhfUkVQTFkpXG4gICAgICAgIHJldHVybiBwYXJzZV9LRVhESF9SRVBMWShzZWxmLCBjYWxsYmFjayk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFN0YXRpYyBncm91cCBvciBFQ0RILXJlbGF0ZWRcblxuICAgIGlmICh0eXBlID09PSBNRVNTQUdFLktFWERIX0lOSVQpIHtcbiAgICAgIC8qXG4gICAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0tFWERIX0lOSVRcbiAgICAgICAgbXBpbnQgICAgIGVcbiAgICAgICovXG4gICAgICB2YXIgZSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgMSwgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKGUgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHNlbGYuZW1pdCgnS0VYREhfSU5JVCcsIGUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRS5LRVhESF9SRVBMWSlcbiAgICAgIHJldHVybiBwYXJzZV9LRVhESF9SRVBMWShzZWxmLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VfS0VYREhfUkVQTFkoc2VsZiwgY2FsbGJhY2spIHtcbiAgdmFyIHBheWxvYWQgPSBzZWxmLl9zdGF0ZS5pbmNvbWluZy5wYXlsb2FkO1xuICAvKlxuICAgIGJ5dGUgICAgICBTU0hfTVNHX0tFWERIX1JFUExZXG4gICAgICAgICAgICAgICAgLyBTU0hfTVNHX0tFWF9ESF9HRVhfUkVQTFlcbiAgICAgICAgICAgICAgICAvIFNTSF9NU0dfS0VYX0VDREhfUkVQTFlcbiAgICBzdHJpbmcgICAgc2VydmVyIHB1YmxpYyBob3N0IGtleSBhbmQgY2VydGlmaWNhdGVzIChLX1MpXG4gICAgbXBpbnQgICAgIGZcbiAgICBzdHJpbmcgICAgc2lnbmF0dXJlIG9mIEhcbiAgKi9cbiAgdmFyIGhvc3RrZXkgPSByZWFkU3RyaW5nKHBheWxvYWQsIDEsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKGhvc3RrZXkgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIHB1YmtleSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmIChwdWJrZXkgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIHNpZyA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmIChzaWcgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIGluZm8gPSB7XG4gICAgaG9zdGtleTogaG9zdGtleSxcbiAgICBob3N0a2V5X2Zvcm1hdDogdW5kZWZpbmVkLFxuICAgIHB1YmtleTogcHVia2V5LFxuICAgIHNpZzogc2lnLFxuICAgIHNpZ19mb3JtYXQ6IHVuZGVmaW5lZFxuICB9O1xuICB2YXIgaG9zdGtleV9mb3JtYXQgPSByZWFkU3RyaW5nKGhvc3RrZXksIDAsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKGhvc3RrZXlfZm9ybWF0ID09PSBmYWxzZSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGluZm8uaG9zdGtleV9mb3JtYXQgPSBob3N0a2V5X2Zvcm1hdDtcbiAgdmFyIHNpZ19mb3JtYXQgPSByZWFkU3RyaW5nKHNpZywgMCwgJ2FzY2lpJywgc2VsZiwgY2FsbGJhY2spO1xuICBpZiAoc2lnX2Zvcm1hdCA9PT0gZmFsc2UpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpbmZvLnNpZ19mb3JtYXQgPSBzaWdfZm9ybWF0O1xuICBzZWxmLmVtaXQoJ0tFWERIX1JFUExZJywgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX1VTRVJBVVRIKHNlbGYsIHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBzdGF0ZSA9IHNlbGYuX3N0YXRlO1xuICB2YXIgYXV0aE1ldGhvZCA9IHN0YXRlLmF1dGhzUXVldWVbMF07XG4gIHZhciBwYXlsb2FkID0gc3RhdGUuaW5jb21pbmcucGF5bG9hZDtcbiAgdmFyIG1lc3NhZ2U7XG4gIHZhciBsYW5nO1xuICB2YXIgdGV4dDtcblxuICBpZiAoYXV0aE1ldGhvZCA9PT0gJ3Bhc3N3b3JkJykge1xuICAgIGlmICh0eXBlID09PSBNRVNTQUdFLlVTRVJBVVRIX1BBU1NXRF9DSEFOR0VSRVEpIHtcbiAgICAgIC8qXG4gICAgICAgIGJ5dGUgICAgICBTU0hfTVNHX1VTRVJBVVRIX1BBU1NXRF9DSEFOR0VSRVFcbiAgICAgICAgc3RyaW5nICAgIHByb21wdCBpbiBJU08tMTA2NDYgVVRGLTggZW5jb2RpbmdcbiAgICAgICAgc3RyaW5nICAgIGxhbmd1YWdlIHRhZ1xuICAgICAgKi9cbiAgICAgIG1lc3NhZ2UgPSByZWFkU3RyaW5nKHBheWxvYWQsIDEsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKG1lc3NhZ2UgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBsYW5nID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKGxhbmcgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBzZWxmLmVtaXQoJ1VTRVJBVVRIX1BBU1NXRF9DSEFOR0VSRVEnLCBtZXNzYWdlLCBsYW5nKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXV0aE1ldGhvZCA9PT0gJ2tleWJvYXJkLWludGVyYWN0aXZlJykge1xuICAgIGlmICh0eXBlID09PSBNRVNTQUdFLlVTRVJBVVRIX0lORk9fUkVRVUVTVCkge1xuICAgICAgLypcbiAgICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfVVNFUkFVVEhfSU5GT19SRVFVRVNUXG4gICAgICAgIHN0cmluZyAgICBuYW1lIChJU08tMTA2NDYgVVRGLTgpXG4gICAgICAgIHN0cmluZyAgICBpbnN0cnVjdGlvbiAoSVNPLTEwNjQ2IFVURi04KVxuICAgICAgICBzdHJpbmcgICAgbGFuZ3VhZ2UgdGFnIC0tIE1BWSBiZSBlbXB0eVxuICAgICAgICBpbnQgICAgICAgbnVtLXByb21wdHNcbiAgICAgICAgc3RyaW5nICAgIHByb21wdFsxXSAoSVNPLTEwNjQ2IFVURi04KVxuICAgICAgICBib29sZWFuICAgZWNob1sxXVxuICAgICAgICAuLi5cbiAgICAgICAgc3RyaW5nICAgIHByb21wdFtudW0tcHJvbXB0c10gKElTTy0xMDY0NiBVVEYtOClcbiAgICAgICAgYm9vbGVhbiAgIGVjaG9bbnVtLXByb21wdHNdXG4gICAgICAqL1xuICAgICAgdmFyIG5hbWU7XG4gICAgICB2YXIgaW5zdHI7XG4gICAgICB2YXIgbnByb21wdHM7XG5cbiAgICAgIG5hbWUgPSByZWFkU3RyaW5nKHBheWxvYWQsIDEsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKG5hbWUgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpbnN0ciA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChpbnN0ciA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGxhbmcgPSByZWFkU3RyaW5nKHBheWxvYWQsIHBheWxvYWQuX3BvcywgJ3V0ZjgnLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAobGFuZyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIG5wcm9tcHRzID0gcmVhZEludChwYXlsb2FkLCBwYXlsb2FkLl9wb3MsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChucHJvbXB0cyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcGF5bG9hZC5fcG9zICs9IDQ7XG5cbiAgICAgIHZhciBwcm9tcHRzID0gW107XG4gICAgICBmb3IgKHZhciBwcm9tcHQgPSAwOyBwcm9tcHQgPCBucHJvbXB0czsgKytwcm9tcHQpIHtcbiAgICAgICAgdGV4dCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKHRleHQgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGVjaG8gPSBwYXlsb2FkW3BheWxvYWQuX3BvcysrXTtcbiAgICAgICAgaWYgKGVjaG8gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGVjaG8gPSAoZWNobyAhPT0gMCk7XG4gICAgICAgIHByb21wdHMucHVzaCh7XG4gICAgICAgICAgcHJvbXB0OiB0ZXh0LFxuICAgICAgICAgIGVjaG86IGVjaG9cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzZWxmLmVtaXQoJ1VTRVJBVVRIX0lORk9fUkVRVUVTVCcsIG5hbWUsIGluc3RyLCBsYW5nLCBwcm9tcHRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IE1FU1NBR0UuVVNFUkFVVEhfSU5GT19SRVNQT05TRSkge1xuICAgICAgLypcbiAgICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfVVNFUkFVVEhfSU5GT19SRVNQT05TRVxuICAgICAgICBpbnQgICAgICAgbnVtLXJlc3BvbnNlc1xuICAgICAgICBzdHJpbmcgICAgcmVzcG9uc2VbMV0gKElTTy0xMDY0NiBVVEYtOClcbiAgICAgICAgLi4uXG4gICAgICAgIHN0cmluZyAgICByZXNwb25zZVtudW0tcmVzcG9uc2VzXSAoSVNPLTEwNjQ2IFVURi04KVxuICAgICAgKi9cbiAgICAgIHZhciBucmVzcG9uc2VzID0gcmVhZEludChwYXlsb2FkLCAxLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgICBpZiAobnJlc3BvbnNlcyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcGF5bG9hZC5fcG9zID0gNTtcblxuICAgICAgdmFyIHJlc3BvbnNlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcmVzcG9uc2UgPSAwOyByZXNwb25zZSA8IG5yZXNwb25zZXM7ICsrcmVzcG9uc2UpIHtcbiAgICAgICAgdGV4dCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKHRleHQgPT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmVzcG9uc2VzLnB1c2godGV4dCk7XG4gICAgICB9XG4gICAgICBzZWxmLmVtaXQoJ1VTRVJBVVRIX0lORk9fUkVTUE9OU0UnLCByZXNwb25zZXMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhdXRoTWV0aG9kID09PSAncHVibGlja2V5Jykge1xuICAgIGlmICh0eXBlID09PSBNRVNTQUdFLlVTRVJBVVRIX1BLX09LKSB7XG4gICAgICAvKlxuICAgICAgICBieXRlICAgICAgU1NIX01TR19VU0VSQVVUSF9QS19PS1xuICAgICAgICBzdHJpbmcgICAgcHVibGljIGtleSBhbGdvcml0aG0gbmFtZSBmcm9tIHRoZSByZXF1ZXN0XG4gICAgICAgIHN0cmluZyAgICBwdWJsaWMga2V5IGJsb2IgZnJvbSB0aGUgcmVxdWVzdFxuICAgICAgKi9cbiAgICAgIHZhciBhdXRoc1F1ZXVlID0gc2VsZi5fc3RhdGUuYXV0aHNRdWV1ZTtcbiAgICAgIGlmICghYXV0aHNRdWV1ZS5sZW5ndGggfHwgYXV0aHNRdWV1ZVswXSAhPT0gJ3B1YmxpY2tleScpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGF1dGhzUXVldWUuc2hpZnQoKTtcbiAgICAgIHNlbGYuZW1pdCgnVVNFUkFVVEhfUEtfT0snKTtcbiAgICAgIC8vIFhYWDogUGFyc2UgcHVibGljIGtleSBpbmZvPyBjbGllbnQgY3VycmVudGx5IGNhbiBpZ25vcmUgaXQgYmVjYXVzZVxuICAgICAgLy8gdGhlcmUgaXMgb25seSBvbmUgb3V0c3RhbmRpbmcgYXV0aCByZXF1ZXN0IGF0IGFueSBnaXZlbiB0aW1lLCBzbyBpdFxuICAgICAgLy8ga25vd3Mgd2hpY2gga2V5IHdhcyBPSydkXG4gICAgfVxuICB9IGVsc2UgaWYgKGF1dGhNZXRob2QgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEludmFsaWQgcGFja2V0IGZvciB0aGlzIGF1dGggdHlwZVxuICAgIHNlbGYuZGlzY29ubmVjdChESVNDT05ORUNUX1JFQVNPTi5QUk9UT0NPTF9FUlJPUik7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSW52YWxpZCBhdXRoZW50aWNhdGlvbiBtZXRob2Q6ICcgKyBhdXRoTWV0aG9kKTtcbiAgICBlcnIubGV2ZWwgPSAncHJvdG9jb2wnO1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0NIQU5ORUxfUkVRVUVTVChzZWxmLCBjYWxsYmFjaykge1xuICB2YXIgcGF5bG9hZCA9IHNlbGYuX3N0YXRlLmluY29taW5nLnBheWxvYWQ7XG4gIHZhciBpbmZvO1xuICB2YXIgY29scztcbiAgdmFyIHJvd3M7XG4gIHZhciB3aWR0aDtcbiAgdmFyIGhlaWdodDtcbiAgdmFyIHdhbnRSZXBseTtcbiAgdmFyIHNpZ25hbDtcblxuICB2YXIgcmVjaXBpZW50ID0gcmVhZEludChwYXlsb2FkLCAxLCBzZWxmLCBjYWxsYmFjayk7XG4gIGlmIChyZWNpcGllbnQgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIHJlcXVlc3QgPSByZWFkU3RyaW5nKHBheWxvYWQsIDUsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgaWYgKHJlcXVlc3QgPT09IGZhbHNlKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAocmVxdWVzdCA9PT0gJ2V4aXQtc3RhdHVzJykgeyAvLyBTZXJ2ZXItPkNsaWVudFxuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX1JFUVVFU1RcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgc3RyaW5nICAgIFwiZXhpdC1zdGF0dXNcIlxuICAgICAgYm9vbGVhbiAgIEZBTFNFXG4gICAgICB1aW50MzIgICAgZXhpdF9zdGF0dXNcbiAgICAqL1xuICAgIHZhciBjb2RlID0gcmVhZEludChwYXlsb2FkLCArK3BheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjb2RlID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiBmYWxzZSxcbiAgICAgIGNvZGU6IGNvZGVcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICdleGl0LXNpZ25hbCcpIHsgLy8gU2VydmVyLT5DbGllbnRcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9SRVFVRVNUXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHN0cmluZyAgICBcImV4aXQtc2lnbmFsXCJcbiAgICAgIGJvb2xlYW4gICBGQUxTRVxuICAgICAgc3RyaW5nICAgIHNpZ25hbCBuYW1lICh3aXRob3V0IHRoZSBcIlNJR1wiIHByZWZpeClcbiAgICAgIGJvb2xlYW4gICBjb3JlIGR1bXBlZFxuICAgICAgc3RyaW5nICAgIGVycm9yIG1lc3NhZ2UgaW4gSVNPLTEwNjQ2IFVURi04IGVuY29kaW5nXG4gICAgICBzdHJpbmcgICAgbGFuZ3VhZ2UgdGFnXG4gICAgKi9cbiAgICB2YXIgY29yZWR1bXA7XG4gICAgaWYgKCEoc2VsZi5yZW1vdGVCdWdzICYgQlVHUy5PTERfRVhJVCkpIHtcbiAgICAgIHNpZ25hbCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgKytwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChzaWduYWwgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjb3JlZHVtcCA9IHBheWxvYWRbcGF5bG9hZC5fcG9zKytdO1xuICAgICAgaWYgKGNvcmVkdW1wID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGNvcmVkdW1wID0gKGNvcmVkdW1wICE9PSAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLypcbiAgICAgICAgSW5zdGVhZCBvZiBgc2lnbmFsIG5hbWVgIGFuZCBgY29yZSBkdW1wZWRgLCB3ZSBoYXZlIGp1c3Q6XG5cbiAgICAgICAgdWludDMyICBzaWduYWwgbnVtYmVyXG4gICAgICAqL1xuICAgICAgc2lnbmFsID0gcmVhZEludChwYXlsb2FkLCArK3BheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgICAgaWYgKHNpZ25hbCA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHN3aXRjaCAoc2lnbmFsKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBzaWduYWwgPSAnSFVQJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNpZ25hbCA9ICdJTlQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2lnbmFsID0gJ1FVSVQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgc2lnbmFsID0gJ0FCUlQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgc2lnbmFsID0gJ0tJTEwnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIHNpZ25hbCA9ICdBTFJNJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICBzaWduYWwgPSAnVEVSTSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gVW5rbm93biBvciBPUy1zcGVjaWZpY1xuICAgICAgICAgIHNpZ25hbCA9ICdVTktOT1dOICgnICsgc2lnbmFsICsgJyknO1xuICAgICAgfVxuICAgICAgY29yZWR1bXAgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICd1dGY4Jywgc2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBsYW5nID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICd1dGY4Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChsYW5nID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiBmYWxzZSxcbiAgICAgIHNpZ25hbDogc2lnbmFsLFxuICAgICAgY29yZWR1bXA6IGNvcmVkdW1wLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbGFuZzogbGFuZ1xuICAgIH07XG4gIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gJ3B0eS1yZXEnKSB7IC8vIENsaWVudC0+U2VydmVyXG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfUkVRVUVTVFxuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgICBzdHJpbmcgICAgXCJwdHktcmVxXCJcbiAgICAgIGJvb2xlYW4gICB3YW50X3JlcGx5XG4gICAgICBzdHJpbmcgICAgVEVSTSBlbnZpcm9ubWVudCB2YXJpYWJsZSB2YWx1ZSAoZS5nLiwgdnQxMDApXG4gICAgICB1aW50MzIgICAgdGVybWluYWwgd2lkdGgsIGNoYXJhY3RlcnMgKGUuZy4sIDgwKVxuICAgICAgdWludDMyICAgIHRlcm1pbmFsIGhlaWdodCwgcm93cyAoZS5nLiwgMjQpXG4gICAgICB1aW50MzIgICAgdGVybWluYWwgd2lkdGgsIHBpeGVscyAoZS5nLiwgNjQwKVxuICAgICAgdWludDMyICAgIHRlcm1pbmFsIGhlaWdodCwgcGl4ZWxzIChlLmcuLCA0ODApXG4gICAgICBzdHJpbmcgICAgZW5jb2RlZCB0ZXJtaW5hbCBtb2Rlc1xuICAgICovXG4gICAgd2FudFJlcGx5ID0gcGF5bG9hZFtwYXlsb2FkLl9wb3MrK107XG4gICAgaWYgKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdhbnRSZXBseSA9ICh3YW50UmVwbHkgIT09IDApO1xuICAgIHZhciB0ZXJtID0gcmVhZFN0cmluZyhwYXlsb2FkLCBwYXlsb2FkLl9wb3MsICdhc2NpaScsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAodGVybSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29scyA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGNvbHMgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJvd3MgPSByZWFkSW50KHBheWxvYWQsIHBheWxvYWQuX3BvcyArPSA0LCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKHJvd3MgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdpZHRoID0gcmVhZEludChwYXlsb2FkLCBwYXlsb2FkLl9wb3MgKz0gNCwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmICh3aWR0aCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaGVpZ2h0ID0gcmVhZEludChwYXlsb2FkLCBwYXlsb2FkLl9wb3MgKz0gNCwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChoZWlnaHQgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBtb2RlcyA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAobW9kZXMgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIG1vZGVzID0gYnl0ZXNUb01vZGVzKG1vZGVzKTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiB3YW50UmVwbHksXG4gICAgICB0ZXJtOiB0ZXJtLFxuICAgICAgY29sczogY29scyxcbiAgICAgIHJvd3M6IHJvd3MsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIG1vZGVzOiBtb2Rlc1xuICAgIH07XG4gIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gJ3dpbmRvdy1jaGFuZ2UnKSB7IC8vIENsaWVudC0+U2VydmVyXG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfUkVRVUVTVFxuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgICBzdHJpbmcgICAgXCJ3aW5kb3ctY2hhbmdlXCJcbiAgICAgIGJvb2xlYW4gICBGQUxTRVxuICAgICAgdWludDMyICAgIHRlcm1pbmFsIHdpZHRoLCBjb2x1bW5zXG4gICAgICB1aW50MzIgICAgdGVybWluYWwgaGVpZ2h0LCByb3dzXG4gICAgICB1aW50MzIgICAgdGVybWluYWwgd2lkdGgsIHBpeGVsc1xuICAgICAgdWludDMyICAgIHRlcm1pbmFsIGhlaWdodCwgcGl4ZWxzXG4gICAgKi9cbiAgICBjb2xzID0gcmVhZEludChwYXlsb2FkLCArK3BheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjb2xzID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByb3dzID0gcmVhZEludChwYXlsb2FkLCBwYXlsb2FkLl9wb3MgKz0gNCwgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChyb3dzID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB3aWR0aCA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAod2lkdGggPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGhlaWdodCA9IHJlYWRJbnQocGF5bG9hZCwgcGF5bG9hZC5fcG9zICs9IDQsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoaGVpZ2h0ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiBmYWxzZSxcbiAgICAgIGNvbHM6IGNvbHMsXG4gICAgICByb3dzOiByb3dzLFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICd4MTEtcmVxJykgeyAvLyBDbGllbnQtPlNlcnZlclxuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX1JFUVVFU1RcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgc3RyaW5nICAgIFwieDExLXJlcVwiXG4gICAgICBib29sZWFuICAgd2FudCByZXBseVxuICAgICAgYm9vbGVhbiAgIHNpbmdsZSBjb25uZWN0aW9uXG4gICAgICBzdHJpbmcgICAgeDExIGF1dGhlbnRpY2F0aW9uIHByb3RvY29sXG4gICAgICBzdHJpbmcgICAgeDExIGF1dGhlbnRpY2F0aW9uIGNvb2tpZVxuICAgICAgdWludDMyICAgIHgxMSBzY3JlZW4gbnVtYmVyXG4gICAgKi9cbiAgICB3YW50UmVwbHkgPSBwYXlsb2FkW3BheWxvYWQuX3BvcysrXTtcbiAgICBpZiAod2FudFJlcGx5ID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgd2FudFJlcGx5ID0gKHdhbnRSZXBseSAhPT0gMCk7XG4gICAgdmFyIHNpbmdsZSA9IHBheWxvYWRbcGF5bG9hZC5fcG9zKytdO1xuICAgIGlmIChzaW5nbGUgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzaW5nbGUgPSAoc2luZ2xlICE9PSAwKTtcbiAgICB2YXIgcHJvdG9jb2wgPSByZWFkU3RyaW5nKHBheWxvYWQsIHBheWxvYWQuX3BvcywgJ2FzY2lpJywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChwcm90b2NvbCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGNvb2tpZSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAnYmluYXJ5Jywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChjb29raWUgPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBzY3JlZW4gPSByZWFkSW50KHBheWxvYWQsIHBheWxvYWQuX3Bvcywgc2VsZiwgY2FsbGJhY2spO1xuICAgIGlmIChzY3JlZW4gPT09IGZhbHNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGluZm8gPSB7XG4gICAgICByZWNpcGllbnQ6IHJlY2lwaWVudCxcbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICB3YW50UmVwbHk6IHdhbnRSZXBseSxcbiAgICAgIHNpbmdsZTogc2luZ2xlLFxuICAgICAgcHJvdG9jb2w6IHByb3RvY29sLFxuICAgICAgY29va2llOiBjb29raWUsXG4gICAgICBzY3JlZW46IHNjcmVlblxuICAgIH07XG4gIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gJ2VudicpIHsgLy8gQ2xpZW50LT5TZXJ2ZXJcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9SRVFVRVNUXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHN0cmluZyAgICBcImVudlwiXG4gICAgICBib29sZWFuICAgd2FudCByZXBseVxuICAgICAgc3RyaW5nICAgIHZhcmlhYmxlIG5hbWVcbiAgICAgIHN0cmluZyAgICB2YXJpYWJsZSB2YWx1ZVxuICAgICovXG4gICAgd2FudFJlcGx5ID0gcGF5bG9hZFtwYXlsb2FkLl9wb3MrK107XG4gICAgaWYgKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdhbnRSZXBseSA9ICh3YW50UmVwbHkgIT09IDApO1xuICAgIHZhciBrZXkgPSByZWFkU3RyaW5nKHBheWxvYWQsIHBheWxvYWQuX3BvcywgJ3V0ZjgnLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKGtleSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHZhbCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAodmFsID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiB3YW50UmVwbHksXG4gICAgICBrZXk6IGtleSxcbiAgICAgIHZhbDogdmFsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChyZXF1ZXN0ID09PSAnc2hlbGwnKSB7IC8vIENsaWVudC0+U2VydmVyXG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfUkVRVUVTVFxuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgICBzdHJpbmcgICAgXCJzaGVsbFwiXG4gICAgICBib29sZWFuICAgd2FudCByZXBseVxuICAgICovXG4gICAgd2FudFJlcGx5ID0gcGF5bG9hZFtwYXlsb2FkLl9wb3NdO1xuICAgIGlmICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB3YW50UmVwbHkgPSAod2FudFJlcGx5ICE9PSAwKTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiB3YW50UmVwbHlcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICdleGVjJykgeyAvLyBDbGllbnQtPlNlcnZlclxuICAgIC8qXG4gICAgICBieXRlICAgICAgU1NIX01TR19DSEFOTkVMX1JFUVVFU1RcbiAgICAgIHVpbnQzMiAgICByZWNpcGllbnQgY2hhbm5lbFxuICAgICAgc3RyaW5nICAgIFwiZXhlY1wiXG4gICAgICBib29sZWFuICAgd2FudCByZXBseVxuICAgICAgc3RyaW5nICAgIGNvbW1hbmRcbiAgICAqL1xuICAgIHdhbnRSZXBseSA9IHBheWxvYWRbcGF5bG9hZC5fcG9zKytdO1xuICAgIGlmICh3YW50UmVwbHkgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB3YW50UmVwbHkgPSAod2FudFJlcGx5ICE9PSAwKTtcbiAgICB2YXIgY29tbWFuZCA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoY29tbWFuZCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaW5mbyA9IHtcbiAgICAgIHJlY2lwaWVudDogcmVjaXBpZW50LFxuICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgIHdhbnRSZXBseTogd2FudFJlcGx5LFxuICAgICAgY29tbWFuZDogY29tbWFuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gJ3N1YnN5c3RlbScpIHsgLy8gQ2xpZW50LT5TZXJ2ZXJcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9SRVFVRVNUXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHN0cmluZyAgICBcInN1YnN5c3RlbVwiXG4gICAgICBib29sZWFuICAgd2FudCByZXBseVxuICAgICAgc3RyaW5nICAgIHN1YnN5c3RlbSBuYW1lXG4gICAgKi9cbiAgICB3YW50UmVwbHkgPSBwYXlsb2FkW3BheWxvYWQuX3BvcysrXTtcbiAgICBpZiAod2FudFJlcGx5ID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgd2FudFJlcGx5ID0gKHdhbnRSZXBseSAhPT0gMCk7XG4gICAgdmFyIHN1YnN5c3RlbSA9IHJlYWRTdHJpbmcocGF5bG9hZCwgcGF5bG9hZC5fcG9zLCAndXRmOCcsIHNlbGYsIGNhbGxiYWNrKTtcbiAgICBpZiAoc3Vic3lzdGVtID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiB3YW50UmVwbHksXG4gICAgICBzdWJzeXN0ZW06IHN1YnN5c3RlbVxuICAgIH07XG4gIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gJ3NpZ25hbCcpIHsgLy8gQ2xpZW50LT5TZXJ2ZXJcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9SRVFVRVNUXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHN0cmluZyAgICBcInNpZ25hbFwiXG4gICAgICBib29sZWFuICAgRkFMU0VcbiAgICAgIHN0cmluZyAgICBzaWduYWwgbmFtZSAod2l0aG91dCB0aGUgXCJTSUdcIiBwcmVmaXgpXG4gICAgKi9cbiAgICBzaWduYWwgPSByZWFkU3RyaW5nKHBheWxvYWQsICsrcGF5bG9hZC5fcG9zLCAnYXNjaWknLCBzZWxmLCBjYWxsYmFjayk7XG4gICAgaWYgKHNpZ25hbCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaW5mbyA9IHtcbiAgICAgIHJlY2lwaWVudDogcmVjaXBpZW50LFxuICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgIHdhbnRSZXBseTogZmFsc2UsXG4gICAgICBzaWduYWw6ICdTSUcnICsgc2lnbmFsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChyZXF1ZXN0ID09PSAneG9uLXhvZmYnKSB7IC8vIENsaWVudC0+U2VydmVyXG4gICAgLypcbiAgICAgIGJ5dGUgICAgICBTU0hfTVNHX0NIQU5ORUxfUkVRVUVTVFxuICAgICAgdWludDMyICAgIHJlY2lwaWVudCBjaGFubmVsXG4gICAgICBzdHJpbmcgICAgXCJ4b24teG9mZlwiXG4gICAgICBib29sZWFuICAgRkFMU0VcbiAgICAgIGJvb2xlYW4gICBjbGllbnQgY2FuIGRvXG4gICAgKi9cbiAgICB2YXIgY2xpZW50Q29udHJvbCA9IHBheWxvYWRbKytwYXlsb2FkLl9wb3NdO1xuICAgIGlmIChjbGllbnRDb250cm9sID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2xpZW50Q29udHJvbCA9IChjbGllbnRDb250cm9sICE9PSAwKTtcbiAgICBpbmZvID0ge1xuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgd2FudFJlcGx5OiBmYWxzZSxcbiAgICAgIGNsaWVudENvbnRyb2w6IGNsaWVudENvbnRyb2xcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlcXVlc3QgPT09ICdhdXRoLWFnZW50LXJlcUBvcGVuc3NoLmNvbScpIHsgLy8gQ2xpZW50LT5TZXJ2ZXJcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgIFNTSF9NU0dfQ0hBTk5FTF9SRVFVRVNUXG4gICAgICB1aW50MzIgICAgcmVjaXBpZW50IGNoYW5uZWxcbiAgICAgIHN0cmluZyAgICBcImF1dGgtYWdlbnQtcmVxQG9wZW5zc2guY29tXCJcbiAgICAgIGJvb2xlYW4gICB3YW50IHJlcGx5XG4gICAgKi9cbiAgICB3YW50UmVwbHkgPSBwYXlsb2FkW3BheWxvYWQuX3Bvc107XG4gICAgaWYgKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdhbnRSZXBseSA9ICh3YW50UmVwbHkgIT09IDApO1xuICAgIGluZm8gPSB7XG4gICAgICByZWNpcGllbnQ6IHJlY2lwaWVudCxcbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICB3YW50UmVwbHk6IHdhbnRSZXBseVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gVW5rbm93biByZXF1ZXN0IHR5cGVcbiAgICB3YW50UmVwbHkgPSBwYXlsb2FkW3BheWxvYWQuX3Bvc107XG4gICAgaWYgKHdhbnRSZXBseSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdhbnRSZXBseSA9ICh3YW50UmVwbHkgIT09IDApO1xuICAgIGluZm8gPSB7XG4gICAgICByZWNpcGllbnQ6IHJlY2lwaWVudCxcbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICB3YW50UmVwbHk6IHdhbnRSZXBseVxuICAgIH07XG4gIH1cbiAgc2VsZi5kZWJ1ZygnREVCVUc6IFBhcnNlcjogSU5fUEFDS0VUREFUQUFGVEVSLCBwYWNrZXQ6IENIQU5ORUxfUkVRVUVTVCAoJ1xuICAgICAgICAgICAgICsgcmVjaXBpZW50XG4gICAgICAgICAgICAgKyAnLCAnXG4gICAgICAgICAgICAgKyByZXF1ZXN0XG4gICAgICAgICAgICAgKyAnKScpO1xuICBzZWxmLmVtaXQoJ0NIQU5ORUxfUkVRVUVTVDonICsgcmVjaXBpZW50LCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gaG1hY1ZlcmlmeShzZWxmLCBkYXRhKSB7XG4gIHZhciBpbnN0YXRlID0gc2VsZi5fc3RhdGUuaW5jb21pbmc7XG4gIHZhciBobWFjID0gaW5zdGF0ZS5obWFjO1xuXG4gIHNlbGYuZGVidWcoJ0RFQlVHOiBQYXJzZXI6IFZlcmlmeWluZyBNQUMnKTtcblxuICBpZiAoaW5zdGF0ZS5kZWNyeXB0LmluZm8uYXV0aExlbiA+IDApIHtcbiAgICB2YXIgZGVjcnlwdCA9IGluc3RhdGUuZGVjcnlwdDtcbiAgICB2YXIgaW5zdGFuY2UgPSBkZWNyeXB0Lmluc3RhbmNlO1xuXG4gICAgaW5zdGFuY2Uuc2V0QXV0aFRhZyhkYXRhKTtcblxuICAgIHZhciBwYXlsb2FkID0gaW5zdGFuY2UudXBkYXRlKGluc3RhdGUucGFja2V0KTtcbiAgICBpbnN0YXRlLnBheWxvYWQgPSBwYXlsb2FkLnNsaWNlKDEsIGluc3RhdGUucGFja2V0Lmxlbmd0aCAtIHBheWxvYWRbMF0pO1xuICAgIGl2X2luYyhkZWNyeXB0Lml2KTtcblxuICAgIGRlY3J5cHQuaW5zdGFuY2UgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihcbiAgICAgICAgICAgICAgICAgICAgICAgICBTU0hfVE9fT1BFTlNTTFtkZWNyeXB0LnR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHQua2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHQuaXZcbiAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBkZWNyeXB0Lmluc3RhbmNlLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY2FsY0htYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhTU0hfVE9fT1BFTlNTTFtobWFjLnR5cGVdLCBobWFjLmtleSk7XG5cbiAgICB3cml0ZVVJbnQzMkJFKEhNQUNfQ09NUFVURSwgaW5zdGF0ZS5zZXFubywgMCk7XG4gICAgd3JpdGVVSW50MzJCRShITUFDX0NPTVBVVEUsIGluc3RhdGUucGt0TGVuLCA0KTtcbiAgICBITUFDX0NPTVBVVEVbOF0gPSBpbnN0YXRlLnBhZExlbjtcblxuICAgIGNhbGNIbWFjLnVwZGF0ZShITUFDX0NPTVBVVEUpO1xuICAgIGNhbGNIbWFjLnVwZGF0ZShpbnN0YXRlLnBhY2tldCk7XG5cbiAgICB2YXIgbWFjID0gY2FsY0htYWMuZGlnZXN0KCk7XG4gICAgaWYgKG1hYy5sZW5ndGggPiBpbnN0YXRlLmhtYWMuaW5mby5hY3R1YWxMZW4pXG4gICAgICBtYWMgPSBtYWMuc2xpY2UoMCwgaW5zdGF0ZS5obWFjLmluZm8uYWN0dWFsTGVuKTtcbiAgICByZXR1cm4gdGltaW5nU2FmZUVxdWFsKG1hYywgZGF0YSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjcnlwdERhdGEoc2VsZiwgZGF0YSkge1xuICB2YXIgaW5zdGFuY2UgPSBzZWxmLl9zdGF0ZS5pbmNvbWluZy5kZWNyeXB0Lmluc3RhbmNlO1xuICBzZWxmLmRlYnVnKCdERUJVRzogUGFyc2VyOiBEZWNyeXB0aW5nJyk7XG4gIHJldHVybiBpbnN0YW5jZS51cGRhdGUoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGV4cGVjdERhdGEoc2VsZiwgdHlwZSwgYW1vdW50LCBidWZmZXIpIHtcbiAgdmFyIGV4cGVjdCA9IHNlbGYuX3N0YXRlLmluY29taW5nLmV4cGVjdDtcbiAgZXhwZWN0LmFtb3VudCA9IGFtb3VudDtcbiAgZXhwZWN0LnR5cGUgPSB0eXBlO1xuICBleHBlY3QucHRyID0gMDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBleHBlY3QuYnVmID0gYnVmZmVyO1xuICBlbHNlIGlmIChhbW91bnQpXG4gICAgZXhwZWN0LmJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShhbW91bnQpO1xufVxuXG5mdW5jdGlvbiByZWFkTGlzdChidWZmZXIsIHN0YXJ0LCBzdHJlYW0sIGNhbGxiYWNrKSB7XG4gIHZhciBsaXN0ID0gcmVhZFN0cmluZyhidWZmZXIsIHN0YXJ0LCAnYXNjaWknLCBzdHJlYW0sIGNhbGxiYWNrKTtcbiAgcmV0dXJuIChsaXN0ICE9PSBmYWxzZSA/IChsaXN0Lmxlbmd0aCA/IGxpc3Quc3BsaXQoJywnKSA6IFtdKSA6IGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb01vZGVzKGJ1ZmZlcikge1xuICB2YXIgbW9kZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmZmVyLmxlbmd0aCwgb3Bjb2RlOyBpIDwgbGVuOyBpICs9IDUpIHtcbiAgICBvcGNvZGUgPSBidWZmZXJbaV07XG4gICAgaWYgKG9wY29kZSA9PT0gVEVSTUlOQUxfTU9ERS5UVFlfT1BfRU5EXG4gICAgICAgIHx8IFRFUk1JTkFMX01PREVbb3Bjb2RlXSA9PT0gdW5kZWZpbmVkXG4gICAgICAgIHx8IGkgKyA1ID4gbGVuKVxuICAgICAgYnJlYWs7XG4gICAgbW9kZXNbVEVSTUlOQUxfTU9ERVtvcGNvZGVdXSA9IHJlYWRVSW50MzJCRShidWZmZXIsIGkgKyAxKTtcbiAgfVxuXG4gIHJldHVybiBtb2Rlcztcbn1cblxuZnVuY3Rpb24gbW9kZXNUb0J5dGVzKG1vZGVzKSB7XG4gIHZhciBSRV9JU19OVU0gPSAvXlxcZCskLztcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtb2Rlcyk7XG4gIHZhciBiID0gMDtcbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoLCBrZXksIG9wY29kZSwgdmFsOyBpIDwgbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9wY29kZSA9IFRFUk1JTkFMX01PREVba2V5XTtcbiAgICBpZiAob3Bjb2RlXG4gICAgICAgICYmICFSRV9JU19OVU0udGVzdChrZXkpXG4gICAgICAgICYmIHR5cGVvZiBtb2Rlc1trZXldID09PSAnbnVtYmVyJ1xuICAgICAgICAmJiBrZXkgIT09ICdUVFlfT1BfRU5EJykge1xuICAgICAgdmFsID0gbW9kZXNba2V5XTtcbiAgICAgIGJ5dGVzW2IrK10gPSBvcGNvZGU7XG4gICAgICBieXRlc1tiKytdID0gKHZhbCA+Pj4gMjQpICYgMHhGRjtcbiAgICAgIGJ5dGVzW2IrK10gPSAodmFsID4+PiAxNikgJiAweEZGO1xuICAgICAgYnl0ZXNbYisrXSA9ICh2YWwgPj4+IDgpICYgMHhGRjtcbiAgICAgIGJ5dGVzW2IrK10gPSB2YWwgJiAweEZGO1xuICAgIH1cbiAgfVxuXG4gIGJ5dGVzW2JdID0gVEVSTUlOQUxfTU9ERS5UVFlfT1BfRU5EO1xuXG4gIHJldHVybiBieXRlcztcbn1cblxuLy8gU2hhcmVkIG91dGdvaW5nIGZ1bmN0aW9uc1xuZnVuY3Rpb24gS0VYSU5JVChzZWxmLCBjYikgeyAvLyBDbGllbnQvU2VydmVyXG4gIHJhbmRCeXRlcygxNiwgZnVuY3Rpb24obXlDb29raWUpIHtcbiAgICAvKlxuICAgICAgYnl0ZSAgICAgICAgIFNTSF9NU0dfS0VYSU5JVFxuICAgICAgYnl0ZVsxNl0gICAgIGNvb2tpZSAocmFuZG9tIGJ5dGVzKVxuICAgICAgbmFtZS1saXN0ICAgIGtleF9hbGdvcml0aG1zXG4gICAgICBuYW1lLWxpc3QgICAgc2VydmVyX2hvc3Rfa2V5X2FsZ29yaXRobXNcbiAgICAgIG5hbWUtbGlzdCAgICBlbmNyeXB0aW9uX2FsZ29yaXRobXNfY2xpZW50X3RvX3NlcnZlclxuICAgICAgbmFtZS1saXN0ICAgIGVuY3J5cHRpb25fYWxnb3JpdGhtc19zZXJ2ZXJfdG9fY2xpZW50XG4gICAgICBuYW1lLWxpc3QgICAgbWFjX2FsZ29yaXRobXNfY2xpZW50X3RvX3NlcnZlclxuICAgICAgbmFtZS1saXN0ICAgIG1hY19hbGdvcml0aG1zX3NlcnZlcl90b19jbGllbnRcbiAgICAgIG5hbWUtbGlzdCAgICBjb21wcmVzc2lvbl9hbGdvcml0aG1zX2NsaWVudF90b19zZXJ2ZXJcbiAgICAgIG5hbWUtbGlzdCAgICBjb21wcmVzc2lvbl9hbGdvcml0aG1zX3NlcnZlcl90b19jbGllbnRcbiAgICAgIG5hbWUtbGlzdCAgICBsYW5ndWFnZXNfY2xpZW50X3RvX3NlcnZlclxuICAgICAgbmFtZS1saXN0ICAgIGxhbmd1YWdlc19zZXJ2ZXJfdG9fY2xpZW50XG4gICAgICBib29sZWFuICAgICAgZmlyc3Rfa2V4X3BhY2tldF9mb2xsb3dzXG4gICAgICB1aW50MzIgICAgICAgMCAocmVzZXJ2ZWQgZm9yIGZ1dHVyZSBleHRlbnNpb24pXG4gICAgKi9cbiAgICB2YXIgYWxnb3MgPSBzZWxmLmNvbmZpZy5hbGdvcml0aG1zO1xuXG4gICAgdmFyIGtleEJ1ZiA9IGFsZ29zLmtleEJ1ZjtcbiAgICBpZiAoc2VsZi5yZW1vdGVCdWdzICYgQlVHUy5CQURfREhHRVgpIHtcbiAgICAgIHZhciBjb3BpZWQgPSBmYWxzZTtcbiAgICAgIHZhciBrZXhMaXN0ID0gYWxnb3Mua2V4O1xuICAgICAgZm9yICh2YXIgaiA9IGtleExpc3QubGVuZ3RoIC0gMTsgaiA+PSAwOyAtLWopIHtcbiAgICAgICAgaWYgKGtleExpc3Rbal0uaW5kZXhPZignZ3JvdXAtZXhjaGFuZ2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICBpZiAoIWNvcGllZCkge1xuICAgICAgICAgICAga2V4TGlzdCA9IGtleExpc3Quc2xpY2UoKTtcbiAgICAgICAgICAgIGNvcGllZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleExpc3Quc3BsaWNlKGosIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29waWVkKVxuICAgICAgICBrZXhCdWYgPSBCdWZmZXIuZnJvbShrZXhMaXN0LmpvaW4oJywnKSk7XG4gICAgfVxuXG4gICAgdmFyIGhvc3RLZXlCdWYgPSBhbGdvcy5zZXJ2ZXJIb3N0S2V5QnVmO1xuXG4gICAgdmFyIGtleEluaXRTaXplID0gMSArIDE2XG4gICAgICAgICAgICAgICAgICAgICAgKyA0ICsga2V4QnVmLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICsgNCArIGhvc3RLZXlCdWYubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgKyAoMiAqICg0ICsgYWxnb3MuY2lwaGVyQnVmLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgKyAoMiAqICg0ICsgYWxnb3MuaG1hY0J1Zi5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICsgKDIgKiAoNCArIGFsZ29zLmNvbXByZXNzQnVmLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgKyAoMiAqICg0IC8qIGxhbmd1YWdlcyBza2lwcGVkICovKSlcbiAgICAgICAgICAgICAgICAgICAgICArIDEgKyA0O1xuICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V4SW5pdFNpemUpO1xuICAgIHZhciBwID0gMTc7XG5cbiAgICBidWZbMF0gPSBNRVNTQUdFLktFWElOSVQ7XG5cbiAgICBpZiAobXlDb29raWUgIT09IGZhbHNlKVxuICAgICAgbXlDb29raWUuY29weShidWYsIDEpO1xuXG4gICAgd3JpdGVVSW50MzJCRShidWYsIGtleEJ1Zi5sZW5ndGgsIHApO1xuICAgIHAgKz0gNDtcbiAgICBrZXhCdWYuY29weShidWYsIHApO1xuICAgIHAgKz0ga2V4QnVmLmxlbmd0aDtcblxuICAgIHdyaXRlVUludDMyQkUoYnVmLCBob3N0S2V5QnVmLmxlbmd0aCwgcCk7XG4gICAgcCArPSA0O1xuICAgIGhvc3RLZXlCdWYuY29weShidWYsIHApO1xuICAgIHAgKz0gaG9zdEtleUJ1Zi5sZW5ndGg7XG5cbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYWxnb3MuY2lwaGVyQnVmLmxlbmd0aCwgcCk7XG4gICAgcCArPSA0O1xuICAgIGFsZ29zLmNpcGhlckJ1Zi5jb3B5KGJ1ZiwgcCk7XG4gICAgcCArPSBhbGdvcy5jaXBoZXJCdWYubGVuZ3RoO1xuXG4gICAgd3JpdGVVSW50MzJCRShidWYsIGFsZ29zLmNpcGhlckJ1Zi5sZW5ndGgsIHApO1xuICAgIHAgKz0gNDtcbiAgICBhbGdvcy5jaXBoZXJCdWYuY29weShidWYsIHApO1xuICAgIHAgKz0gYWxnb3MuY2lwaGVyQnVmLmxlbmd0aDtcblxuICAgIHdyaXRlVUludDMyQkUoYnVmLCBhbGdvcy5obWFjQnVmLmxlbmd0aCwgcCk7XG4gICAgcCArPSA0O1xuICAgIGFsZ29zLmhtYWNCdWYuY29weShidWYsIHApO1xuICAgIHAgKz0gYWxnb3MuaG1hY0J1Zi5sZW5ndGg7XG5cbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgYWxnb3MuaG1hY0J1Zi5sZW5ndGgsIHApO1xuICAgIHAgKz0gNDtcbiAgICBhbGdvcy5obWFjQnVmLmNvcHkoYnVmLCBwKTtcbiAgICBwICs9IGFsZ29zLmhtYWNCdWYubGVuZ3RoO1xuXG4gICAgd3JpdGVVSW50MzJCRShidWYsIGFsZ29zLmNvbXByZXNzQnVmLmxlbmd0aCwgcCk7XG4gICAgcCArPSA0O1xuICAgIGFsZ29zLmNvbXByZXNzQnVmLmNvcHkoYnVmLCBwKTtcbiAgICBwICs9IGFsZ29zLmNvbXByZXNzQnVmLmxlbmd0aDtcblxuICAgIHdyaXRlVUludDMyQkUoYnVmLCBhbGdvcy5jb21wcmVzc0J1Zi5sZW5ndGgsIHApO1xuICAgIHAgKz0gNDtcbiAgICBhbGdvcy5jb21wcmVzc0J1Zi5jb3B5KGJ1ZiwgcCk7XG4gICAgcCArPSBhbGdvcy5jb21wcmVzc0J1Zi5sZW5ndGg7XG5cbiAgICAvLyBTa2lwIGxhbmd1YWdlIGxpc3RzLCBmaXJzdF9rZXhfcGFja2V0X2ZvbGxvd3MsIGFuZCByZXNlcnZlZCBieXRlc1xuICAgIGJ1Zi5maWxsKDAsIGJ1Zi5sZW5ndGggLSAxMyk7XG5cbiAgICBzZWxmLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgS0VYSU5JVCcpO1xuXG4gICAgc2VsZi5fc3RhdGUuaW5jb21pbmcuZXhwZWN0ZWRQYWNrZXQgPSAnS0VYSU5JVCc7XG5cbiAgICB2YXIgb3V0c3RhdGUgPSBzZWxmLl9zdGF0ZS5vdXRnb2luZztcblxuICAgIG91dHN0YXRlLmtleGluaXQgPSBidWY7XG5cbiAgICBpZiAob3V0c3RhdGUuc3RhdHVzID09PSBPVVRfUkVBRFkpIHtcbiAgICAgIC8vIFdlIGFyZSB0aGUgb25lIHN0YXJ0aW5nIHRoZSByZWtleWluZyBwcm9jZXNzIC4uLlxuICAgICAgb3V0c3RhdGUuc3RhdHVzID0gT1VUX1JFS0VZSU5HO1xuICAgIH1cblxuICAgIHNlbmQoc2VsZiwgYnVmLCBjYiwgdHJ1ZSk7XG4gIH0pO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gS0VYREhfSU5JVChzZWxmKSB7IC8vIENsaWVudFxuICB2YXIgc3RhdGUgPSBzZWxmLl9zdGF0ZTtcbiAgdmFyIG91dHN0YXRlID0gc3RhdGUub3V0Z29pbmc7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIDQgKyBvdXRzdGF0ZS5wdWJrZXkubGVuZ3RoKTtcblxuICBzdGF0ZS5pbmNvbWluZy5leHBlY3RlZFBhY2tldCA9IHN0YXRlLmtleC5wa3RSZXBseTtcbiAgaWYgKHN0YXRlLmtleC50eXBlID09PSAnZ3JvdXBleCcpIHtcbiAgICBidWZbMF0gPSBNRVNTQUdFLktFWERIX0dFWF9JTklUO1xuICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBLRVhESF9HRVhfSU5JVCcpO1xuICB9IGVsc2Uge1xuICAgIGJ1ZlswXSA9IE1FU1NBR0UuS0VYREhfSU5JVDtcbiAgICBpZiAoc3RhdGUua2V4LnR5cGUgPT09ICdncm91cCcpXG4gICAgICBzZWxmLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgS0VYREhfSU5JVCcpO1xuICAgIGVsc2VcbiAgICAgIHNlbGYuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBLRVhFQ0RIX0lOSVQnKTtcbiAgfVxuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBvdXRzdGF0ZS5wdWJrZXkubGVuZ3RoLCAxKTtcbiAgb3V0c3RhdGUucHVia2V5LmNvcHkoYnVmLCA1KTtcblxuICByZXR1cm4gc2VuZChzZWxmLCBidWYsIHVuZGVmaW5lZCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIEtFWERIX1JFUExZKHNlbGYsIGUpIHsgLy8gU2VydmVyXG4gIHZhciBzdGF0ZSA9IHNlbGYuX3N0YXRlO1xuICB2YXIgb3V0c3RhdGUgPSBzdGF0ZS5vdXRnb2luZztcbiAgdmFyIGluc3RhdGUgPSBzdGF0ZS5pbmNvbWluZztcbiAgdmFyIGN1ckhvc3RLZXkgPSBzZWxmLmNvbmZpZy5ob3N0S2V5c1tzdGF0ZS5ob3N0a2V5Rm9ybWF0XTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY3VySG9zdEtleSkpXG4gICAgY3VySG9zdEtleSA9IGN1ckhvc3RLZXlbMF07XG4gIHZhciBob3N0a2V5ID0gY3VySG9zdEtleS5nZXRQdWJsaWNTU0goKTtcbiAgdmFyIGhvc3RrZXlBbGdvID0gY3VySG9zdEtleS50eXBlO1xuXG4gIC8vIGUgPT09IGNsaWVudCBESCBwdWJsaWMga2V5XG5cbiAgZSA9IHN0YXRlLmtleC5jb252ZXJ0UHVibGljS2V5KGUpO1xuXG4gIHZhciBzZWNyZXQgPSBzdGF0ZS5rZXguY29tcHV0ZVNlY3JldChlKTtcblxuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBzZWNyZXQubWVzc2FnZSA9ICdFcnJvciB3aGlsZSBjb21wdXRpbmcgREggc2VjcmV0ICgnXG4gICAgICAgICAgICAgICAgICAgICArIHN0YXRlLmtleC50eXBlICsgJyk6ICdcbiAgICAgICAgICAgICAgICAgICAgICsgc2VjcmV0Lm1lc3NhZ2U7XG4gICAgc2VjcmV0LmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIHNlY3JldCk7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goc3RhdGUua2V4Lmhhc2gpO1xuXG4gIHZhciBsZW5faWRlbnQgPSBCdWZmZXIuYnl0ZUxlbmd0aChpbnN0YXRlLmlkZW50UmF3KTtcbiAgdmFyIGxlbl9zaWRlbnQgPSBCdWZmZXIuYnl0ZUxlbmd0aChzZWxmLmNvbmZpZy5pZGVudCk7XG4gIHZhciBsZW5faW5pdCA9IGluc3RhdGUua2V4aW5pdC5sZW5ndGg7XG4gIHZhciBsZW5fc2luaXQgPSBvdXRzdGF0ZS5rZXhpbml0Lmxlbmd0aDtcbiAgdmFyIGxlbl9ob3N0a2V5ID0gaG9zdGtleS5sZW5ndGg7XG4gIHZhciBsZW5fcHVia2V5ID0gZS5sZW5ndGg7XG4gIHZhciBsZW5fc3B1YmtleSA9IG91dHN0YXRlLnB1YmtleS5sZW5ndGg7XG4gIHZhciBsZW5fc2VjcmV0ID0gc2VjcmV0Lmxlbmd0aDtcblxuICB2YXIgZXhjaGFuZ2VCdWZMZW4gPSBsZW5faWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc2lkZW50XG4gICAgICAgICAgICAgICAgICAgICAgICsgbGVuX2luaXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc2luaXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5faG9zdGtleVxuICAgICAgICAgICAgICAgICAgICAgICArIGxlbl9wdWJrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgKyBsZW5fc3B1YmtleVxuICAgICAgICAgICAgICAgICAgICAgICArIGxlbl9zZWNyZXRcbiAgICAgICAgICAgICAgICAgICAgICAgKyAoNCAqIDgpOyAvLyBMZW5ndGggZmllbGRzIGZvciBhYm92ZSB2YWx1ZXNcblxuICAvLyBHcm91cCBleGNoYW5nZS1yZWxhdGVkXG4gIHZhciBsZW5fZ2V4X3ByaW1lO1xuICB2YXIgbGVuX2dleF9nZW47XG4gIHZhciBnZXhfcHJpbWU7XG4gIHZhciBnZXhfZ2VuO1xuICB2YXIgZGhQYXJhbXMgPSBzdGF0ZS5rZXguZ2V0REhQYXJhbXMoKTtcbiAgaWYgKGRoUGFyYW1zKSB7XG4gICAgZ2V4X3ByaW1lID0gZGhQYXJhbXMucHJpbWU7XG4gICAgZ2V4X2dlbiA9IGRoUGFyYW1zLmdlbmVyYXRvcjtcbiAgICBsZW5fZ2V4X3ByaW1lID0gZ2V4X3ByaW1lLmxlbmd0aDtcbiAgICBsZW5fZ2V4X2dlbiA9IGdleF9nZW4ubGVuZ3RoO1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9ICg0ICogMyk7IC8vIG1pbiwgbiwgbWF4IHZhbHVlc1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9ICg0ICogMik7IC8vIHByaW1lLCBnZW5lcmF0b3IgbGVuZ3RoIGZpZWxkc1xuICAgIGV4Y2hhbmdlQnVmTGVuICs9IGxlbl9nZXhfcHJpbWU7XG4gICAgZXhjaGFuZ2VCdWZMZW4gKz0gbGVuX2dleF9nZW47XG4gIH1cblxuICB2YXIgYnAgPSAwO1xuICB2YXIgZXhjaGFuZ2VCdWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoZXhjaGFuZ2VCdWZMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9pZGVudCwgYnApO1xuICBicCArPSA0O1xuICBleGNoYW5nZUJ1Zi53cml0ZShpbnN0YXRlLmlkZW50UmF3LCBicCwgJ3V0ZjgnKTsgLy8gVl9DXG4gIGJwICs9IGxlbl9pZGVudDtcblxuICB3cml0ZVVJbnQzMkJFKGV4Y2hhbmdlQnVmLCBsZW5fc2lkZW50LCBicCk7XG4gIGJwICs9IDQ7XG4gIGV4Y2hhbmdlQnVmLndyaXRlKHNlbGYuY29uZmlnLmlkZW50LCBicCwgJ3V0ZjgnKTsgLy8gVl9TXG4gIGJwICs9IGxlbl9zaWRlbnQ7XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX2luaXQsIGJwKTtcbiAgYnAgKz0gNDtcbiAgaW5zdGF0ZS5rZXhpbml0LmNvcHkoZXhjaGFuZ2VCdWYsIGJwKTsgLy8gSV9DXG4gIGJwICs9IGxlbl9pbml0O1xuICBpbnN0YXRlLmtleGluaXQgPSB1bmRlZmluZWQ7XG5cbiAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX3Npbml0LCBicCk7XG4gIGJwICs9IDQ7XG4gIG91dHN0YXRlLmtleGluaXQuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBJX1NcbiAgYnAgKz0gbGVuX3Npbml0O1xuICBvdXRzdGF0ZS5rZXhpbml0ID0gdW5kZWZpbmVkO1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9ob3N0a2V5LCBicCk7XG4gIGJwICs9IDQ7XG4gIGhvc3RrZXkuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBLX1NcbiAgYnAgKz0gbGVuX2hvc3RrZXk7XG5cbiAgaWYgKGRoUGFyYW1zKSB7XG4gICAgS0VYREhfR0VYX1JFUV9QQUNLRVQuc2xpY2UoMSkuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBtaW4sIG4sIG1heFxuICAgIGJwICs9ICg0ICogMyk7IC8vIFNraXAgb3ZlciBieXRlcyBqdXN0IGNvcGllZFxuXG4gICAgd3JpdGVVSW50MzJCRShleGNoYW5nZUJ1ZiwgbGVuX2dleF9wcmltZSwgYnApO1xuICAgIGJwICs9IDQ7XG4gICAgZ2V4X3ByaW1lLmNvcHkoZXhjaGFuZ2VCdWYsIGJwKTsgLy8gcFxuICAgIGJwICs9IGxlbl9nZXhfcHJpbWU7XG5cbiAgICB3cml0ZVVJbnQzMkJFKGV4Y2hhbmdlQnVmLCBsZW5fZ2V4X2dlbiwgYnApO1xuICAgIGJwICs9IDQ7XG4gICAgZ2V4X2dlbi5jb3B5KGV4Y2hhbmdlQnVmLCBicCk7IC8vIGdcbiAgICBicCArPSBsZW5fZ2V4X2dlbjtcbiAgfVxuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9wdWJrZXksIGJwKTtcbiAgYnAgKz0gNDtcbiAgZS5jb3B5KGV4Y2hhbmdlQnVmLCBicCk7IC8vIGVcbiAgYnAgKz0gbGVuX3B1YmtleTtcblxuICB3cml0ZVVJbnQzMkJFKGV4Y2hhbmdlQnVmLCBsZW5fc3B1YmtleSwgYnApO1xuICBicCArPSA0O1xuICBvdXRzdGF0ZS5wdWJrZXkuY29weShleGNoYW5nZUJ1ZiwgYnApOyAvLyBmXG4gIGJwICs9IGxlbl9zcHVia2V5O1xuXG4gIHdyaXRlVUludDMyQkUoZXhjaGFuZ2VCdWYsIGxlbl9zZWNyZXQsIGJwKTtcbiAgYnAgKz0gNDtcbiAgc2VjcmV0LmNvcHkoZXhjaGFuZ2VCdWYsIGJwKTsgLy8gS1xuXG4gIG91dHN0YXRlLmV4Y2hhbmdlSGFzaCA9IGhhc2gudXBkYXRlKGV4Y2hhbmdlQnVmKS5kaWdlc3QoKTsgLy8gSFxuXG4gIGlmIChvdXRzdGF0ZS5zZXNzaW9uSWQgPT09IHVuZGVmaW5lZClcbiAgICBvdXRzdGF0ZS5zZXNzaW9uSWQgPSBvdXRzdGF0ZS5leGNoYW5nZUhhc2g7XG4gIG91dHN0YXRlLmtleHNlY3JldCA9IHNlY3JldDtcblxuICB2YXIgc2lnbmF0dXJlID0gY3VySG9zdEtleS5zaWduKG91dHN0YXRlLmV4Y2hhbmdlSGFzaCk7XG4gIGlmIChzaWduYXR1cmUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHNpZ25hdHVyZS5tZXNzYWdlID0gJ0Vycm9yIHdoaWxlIHNpZ25pbmcgZGF0YSB3aXRoIGhvc3Qga2V5ICgnXG4gICAgICAgICAgICAgICAgICAgICAgICArIGhvc3RrZXlBbGdvICsgJyk6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgc2lnbmF0dXJlLm1lc3NhZ2U7XG4gICAgc2lnbmF0dXJlLmxldmVsID0gJ2hhbmRzaGFrZSc7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIHNpZ25hdHVyZSk7XG4gICAgc2VsZi5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLktFWV9FWENIQU5HRV9GQUlMRUQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNpZ25hdHVyZSA9IGNvbnZlcnRTaWduYXR1cmUoc2lnbmF0dXJlLCBob3N0a2V5QWxnbyk7XG4gIGlmIChzaWduYXR1cmUgPT09IGZhbHNlKSB7XG4gICAgc2lnbmF0dXJlLm1lc3NhZ2UgPSAnRXJyb3Igd2hpbGUgY29udmVydGluZyBoYW5kc2hha2Ugc2lnbmF0dXJlJztcbiAgICBzaWduYXR1cmUubGV2ZWwgPSAnaGFuZHNoYWtlJztcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgc2lnbmF0dXJlKTtcbiAgICBzZWxmLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uS0VZX0VYQ0hBTkdFX0ZBSUxFRCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLypcbiAgICBieXRlICAgICAgU1NIX01TR19LRVhESF9SRVBMWVxuICAgIHN0cmluZyAgICBzZXJ2ZXIgcHVibGljIGhvc3Qga2V5IGFuZCBjZXJ0aWZpY2F0ZXMgKEtfUylcbiAgICBtcGludCAgICAgZlxuICAgIHN0cmluZyAgICBzaWduYXR1cmUgb2YgSFxuICAqL1xuXG4gIHZhciBzaWdsZW4gPSA0ICsgaG9zdGtleUFsZ28ubGVuZ3RoICsgNCArIHNpZ25hdHVyZS5sZW5ndGg7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgNCArIGxlbl9ob3N0a2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyA0ICsgbGVuX3NwdWJrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIDQgKyBzaWdsZW4pO1xuXG4gIGJwID0gMDtcbiAgYnVmW2JwXSA9IE1FU1NBR0Vbc3RhdGUua2V4LnBrdFJlcGx5XTtcbiAgKyticDtcblxuICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbGVuX2hvc3RrZXksIGJwKTtcbiAgYnAgKz0gNDtcbiAgaG9zdGtleS5jb3B5KGJ1ZiwgYnApOyAvLyBLX1NcbiAgYnAgKz0gbGVuX2hvc3RrZXk7XG5cbiAgd3JpdGVVSW50MzJCRShidWYsIGxlbl9zcHVia2V5LCBicCk7XG4gIGJwICs9IDQ7XG4gIG91dHN0YXRlLnB1YmtleS5jb3B5KGJ1ZiwgYnApOyAvLyBmXG4gIGJwICs9IGxlbl9zcHVia2V5O1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBzaWdsZW4sIGJwKTtcbiAgYnAgKz0gNDtcbiAgd3JpdGVVSW50MzJCRShidWYsIGhvc3RrZXlBbGdvLmxlbmd0aCwgYnApO1xuICBicCArPSA0O1xuICBidWYud3JpdGUoaG9zdGtleUFsZ28sIGJwLCBob3N0a2V5QWxnby5sZW5ndGgsICdhc2NpaScpO1xuICBicCArPSBob3N0a2V5QWxnby5sZW5ndGg7XG4gIHdyaXRlVUludDMyQkUoYnVmLCBzaWduYXR1cmUubGVuZ3RoLCBicCk7XG4gIGJwICs9IDQ7XG4gIHNpZ25hdHVyZS5jb3B5KGJ1ZiwgYnApO1xuXG4gIHN0YXRlLmluY29taW5nLmV4cGVjdGVkUGFja2V0ID0gJ05FV0tFWVMnO1xuXG4gIHNlbGYuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyAnICsgc3RhdGUua2V4LnBrdFJlcGx5KTtcbiAgc2VuZChzZWxmLCBidWYsIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgb3V0c3RhdGUuc2VudE5FV0tFWVMgPSB0cnVlO1xuICBzZWxmLmRlYnVnKCdERUJVRzogT3V0Z29pbmc6IFdyaXRpbmcgTkVXS0VZUycpO1xuICByZXR1cm4gc2VuZChzZWxmLCBORVdLRVlTX1BBQ0tFVCwgdW5kZWZpbmVkLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gS0VYREhfR0VYX1JFUShzZWxmKSB7IC8vIENsaWVudFxuICBzZWxmLl9zdGF0ZS5pbmNvbWluZy5leHBlY3RlZFBhY2tldCA9ICdLRVhESF9HRVhfR1JPVVAnO1xuXG4gIHNlbGYuZGVidWcoJ0RFQlVHOiBPdXRnb2luZzogV3JpdGluZyBLRVhESF9HRVhfUkVRVUVTVCcpO1xuICByZXR1cm4gc2VuZChzZWxmLCBLRVhESF9HRVhfUkVRX1BBQ0tFVCwgdW5kZWZpbmVkLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY29tcHJlc3NQYXlsb2FkKHNlbGYsIHBheWxvYWQsIGNiKSB7XG4gIHZhciBjb21wcmVzcyA9IHNlbGYuX3N0YXRlLm91dGdvaW5nLmNvbXByZXNzLmluc3RhbmNlO1xuICBjb21wcmVzcy53cml0ZShwYXlsb2FkKTtcbiAgY29tcHJlc3MuZmx1c2goWl9QQVJUSUFMX0ZMVVNILCBjb21wcmVzc0ZsdXNoQ2IuYmluZChzZWxmLCBjYikpO1xufVxuXG5mdW5jdGlvbiBjb21wcmVzc0ZsdXNoQ2IoY2IpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZClcbiAgICByZXR1cm47XG4gIHNlbmRfKHRoaXMsIHRoaXMuX3N0YXRlLm91dGdvaW5nLmNvbXByZXNzLmluc3RhbmNlLnJlYWQoKSwgY2IpO1xuXG4gIHZhciBxdWV1ZSA9IHRoaXMuX3N0YXRlLm91dGdvaW5nLmNvbXByZXNzLnF1ZXVlO1xuICBxdWV1ZS5zaGlmdCgpO1xuICBpZiAocXVldWUubGVuZ3RoID4gMClcbiAgICBjb21wcmVzc1BheWxvYWQodGhpcywgcXVldWVbMF1bMF0sIHF1ZXVlWzBdWzFdKTtcbn1cblxuZnVuY3Rpb24gc2VuZChzZWxmLCBwYXlsb2FkLCBjYiwgYnlwYXNzKSB7XG4gIHZhciBzdGF0ZSA9IHNlbGYuX3N0YXRlO1xuXG4gIGlmICghc3RhdGUpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBvdXRzdGF0ZSA9IHN0YXRlLm91dGdvaW5nO1xuICBpZiAob3V0c3RhdGUuc3RhdHVzID09PSBPVVRfUkVLRVlJTkcgJiYgIWJ5cGFzcykge1xuICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICBvdXRzdGF0ZS5yZWtleVF1ZXVlLnB1c2goW3BheWxvYWQsIGNiXSk7XG4gICAgZWxzZVxuICAgICAgb3V0c3RhdGUucmVrZXlRdWV1ZS5wdXNoKHBheWxvYWQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlLmVuZGVkIHx8IHNlbGYuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAob3V0c3RhdGUuY29tcHJlc3MuaW5zdGFuY2UpIHtcbiAgICAvLyBUaGlzIHF1ZXVlIG5vbnNlbnNlIG9ubHkgZXhpc3RzIGJlY2F1c2Ugb2YgYSBjaGFuZ2UgbWFkZSBpbiBub2RlIHYxMC4xMi4wXG4gICAgLy8gdGhhdCBjaGFuZ2VkIGZsdXNoaW5nIGJlaGF2aW9yLCB3aGljaCBub3cgY29hbGVzY2VzIG11bHRpcGxlIHdyaXRlcyB0byBhXG4gICAgLy8gc2luZ2xlIGZsdXNoLCB3aGljaCBkb2VzIG5vdCB3b3JrIGZvciB1cy5cbiAgICB2YXIgcXVldWUgPSBvdXRzdGF0ZS5jb21wcmVzcy5xdWV1ZTtcbiAgICBxdWV1ZS5wdXNoKFtwYXlsb2FkLCBjYl0pO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEpXG4gICAgICBjb21wcmVzc1BheWxvYWQoc2VsZiwgcXVldWVbMF1bMF0sIHF1ZXVlWzBdWzFdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2VuZF8oc2VsZiwgcGF5bG9hZCwgY2IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlbmRfKHNlbGYsIHBheWxvYWQsIGNiKSB7XG4gIC8vIFRPRE86IEltcGxlbWVudCBsZW5ndGggY2hlY2tzXG5cbiAgdmFyIHN0YXRlID0gc2VsZi5fc3RhdGU7XG4gIHZhciBvdXRzdGF0ZSA9IHN0YXRlLm91dGdvaW5nO1xuICB2YXIgZW5jcnlwdCA9IG91dHN0YXRlLmVuY3J5cHQ7XG4gIHZhciBobWFjID0gb3V0c3RhdGUuaG1hYztcbiAgdmFyIHBrdExlbjtcbiAgdmFyIHBhZExlbjtcbiAgdmFyIGJ1ZjtcbiAgdmFyIG1hYztcbiAgdmFyIHJldDtcblxuICBwa3RMZW4gPSBwYXlsb2FkLmxlbmd0aCArIDk7XG5cbiAgaWYgKGVuY3J5cHQuaW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgaWYgKGVuY3J5cHQuaW5mby5hdXRoTGVuID4gMCkge1xuICAgICAgdmFyIHB0bGVuID0gMSArIHBheWxvYWQubGVuZ3RoICsgNC8qIE11c3QgaGF2ZSBhdCBsZWFzdCA0IGJ5dGVzIHBhZGRpbmcqLztcbiAgICAgIHdoaWxlICgocHRsZW4gJSBlbmNyeXB0LmluZm8uYmxvY2tMZW4pICE9PSAwKVxuICAgICAgICArK3B0bGVuO1xuICAgICAgcGFkTGVuID0gcHRsZW4gLSAxIC0gcGF5bG9hZC5sZW5ndGg7XG4gICAgICBwa3RMZW4gPSA0ICsgcHRsZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBibG9ja0xlbiA9IGVuY3J5cHQuaW5mby5ibG9ja0xlbjtcbiAgICAgIHBrdExlbiArPSAoKGJsb2NrTGVuIC0gMSkgKiBwa3RMZW4pICUgYmxvY2tMZW47XG4gICAgICBwYWRMZW4gPSBwa3RMZW4gLSBwYXlsb2FkLmxlbmd0aCAtIDU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBrdExlbiArPSAoNyAqIHBrdExlbikgJSA4O1xuICAgIHBhZExlbiA9IHBrdExlbiAtIHBheWxvYWQubGVuZ3RoIC0gNTtcbiAgfVxuXG4gIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShwa3RMZW4pO1xuXG4gIHdyaXRlVUludDMyQkUoYnVmLCBwa3RMZW4gLSA0LCAwKTtcbiAgYnVmWzRdID0gcGFkTGVuO1xuICBwYXlsb2FkLmNvcHkoYnVmLCA1KTtcblxuICBjb3B5UmFuZFBhZEJ5dGVzKGJ1ZiwgNSArIHBheWxvYWQubGVuZ3RoLCBwYWRMZW4pO1xuXG4gIGlmIChobWFjLnR5cGUgIT09IGZhbHNlICYmIGhtYWMua2V5KSB7XG4gICAgbWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoU1NIX1RPX09QRU5TU0xbaG1hYy50eXBlXSwgaG1hYy5rZXkpO1xuICAgIHdyaXRlVUludDMyQkUob3V0c3RhdGUuYnVmU2Vxbm8sIG91dHN0YXRlLnNlcW5vLCAwKTtcbiAgICBtYWMudXBkYXRlKG91dHN0YXRlLmJ1ZlNlcW5vKTtcbiAgICBtYWMudXBkYXRlKGJ1Zik7XG4gICAgbWFjID0gbWFjLmRpZ2VzdCgpO1xuICAgIGlmIChtYWMubGVuZ3RoID4gaG1hYy5pbmZvLmFjdHVhbExlbilcbiAgICAgIG1hYyA9IG1hYy5zbGljZSgwLCBobWFjLmluZm8uYWN0dWFsTGVuKTtcbiAgfVxuXG4gIHZhciBuYiA9IDA7XG4gIHZhciBlbmNEYXRhO1xuXG4gIGlmIChlbmNyeXB0Lmluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgIGlmIChlbmNyeXB0LmluZm8uYXV0aExlbiA+IDApIHtcbiAgICAgIHZhciBlbmNyeXB0ZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoU1NIX1RPX09QRU5TU0xbZW5jcnlwdC50eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdC5rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQuaXYpO1xuICAgICAgZW5jcnlwdGVyLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcblxuICAgICAgdmFyIGxlbmJ1ZiA9IGJ1Zi5zbGljZSgwLCA0KTtcblxuICAgICAgZW5jcnlwdGVyLnNldEFBRChsZW5idWYpO1xuICAgICAgc2VsZi5wdXNoKGxlbmJ1Zik7XG4gICAgICBuYiArPSBsZW5idWY7XG5cbiAgICAgIGVuY0RhdGEgPSBlbmNyeXB0ZXIudXBkYXRlKGJ1Zi5zbGljZSg0KSk7XG4gICAgICBzZWxmLnB1c2goZW5jRGF0YSk7XG4gICAgICBuYiArPSBlbmNEYXRhLmxlbmd0aDtcblxuICAgICAgdmFyIGZpbmFsID0gZW5jcnlwdGVyLmZpbmFsKCk7XG4gICAgICBpZiAoZmluYWwubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYucHVzaChmaW5hbCk7XG4gICAgICAgIG5iICs9IGZpbmFsLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgdmFyIGF1dGhUYWcgPSBlbmNyeXB0ZXIuZ2V0QXV0aFRhZygpO1xuICAgICAgcmV0ID0gc2VsZi5wdXNoKGF1dGhUYWcpO1xuICAgICAgbmIgKz0gYXV0aFRhZy5sZW5ndGg7XG5cbiAgICAgIGl2X2luYyhlbmNyeXB0Lml2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jRGF0YSA9IGVuY3J5cHQuaW5zdGFuY2UudXBkYXRlKGJ1Zik7XG4gICAgICBzZWxmLnB1c2goZW5jRGF0YSk7XG4gICAgICBuYiArPSBlbmNEYXRhLmxlbmd0aDtcblxuICAgICAgcmV0ID0gc2VsZi5wdXNoKG1hYyk7XG4gICAgICBuYiArPSBtYWMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXQgPSBzZWxmLnB1c2goYnVmKTtcbiAgICBuYiA9IGJ1Zi5sZW5ndGg7XG4gIH1cblxuICBzZWxmLmJ5dGVzU2VudCArPSBuYjtcblxuICBpZiAoKytvdXRzdGF0ZS5zZXFubyA+IE1BWF9TRVFOTylcbiAgICBvdXRzdGF0ZS5zZXFubyA9IDA7XG5cbiAgY2IgJiYgY2IoKTtcblxuICByZXR1cm4gcmV0O1xufVxuXG52YXIgY29weVJhbmRQYWRCeXRlcyA9IChmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tRmlsbFN5bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUZpbGxTeW5jO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb3B5UmFuZFBhZEJ5dGVzKGJ1Ziwgb2Zmc2V0LCBjb3VudCkge1xuICAgICAgdmFyIHBhZEJ5dGVzID0gY3J5cHRvLnJhbmRvbUJ5dGVzKGNvdW50KTtcbiAgICAgIHBhZEJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIHJhbmRCeXRlcyhuLCBjYikge1xuICBjcnlwdG8ucmFuZG9tQnl0ZXMobiwgZnVuY3Rpb24gcmV0cnkoZXJyLCBidWYpIHtcbiAgICBpZiAoZXJyKVxuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhuLCByZXRyeSk7XG4gICAgY2IgJiYgY2IoYnVmKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTaWduYXR1cmUoc2lnbmF0dXJlLCBrZXlUeXBlKSB7XG4gIHN3aXRjaCAoa2V5VHlwZSkge1xuICAgIGNhc2UgJ3NzaC1kc3MnOlxuICAgICAgcmV0dXJuIERTQVNpZ0JFUlRvQmFyZShzaWduYXR1cmUpO1xuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAyNTYnOlxuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAzODQnOlxuICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHA1MjEnOlxuICAgICAgcmV0dXJuIEVDRFNBU2lnQVNOMVRvU1NIKHNpZ25hdHVyZSk7XG4gIH1cblxuICByZXR1cm4gc2lnbmF0dXJlO1xufVxuXG52YXIgdGltaW5nU2FmZUVxdWFsID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIGNyeXB0by50aW1pbmdTYWZlRXF1YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdGltaW5nU2FmZUVxdWFscyhhLCBiKSB7XG4gICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIGNyeXB0by50aW1pbmdTYWZlRXF1YWwoYSwgYSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKGEsIGIpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRpbWluZ1NhZmVFcXVhbHMoYSwgYikge1xuICAgICAgdmFyIHZhbDtcbiAgICAgIGlmIChhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcbiAgICAgICAgdmFsID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IDE7XG4gICAgICAgIGIgPSBhO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYS5sZW5ndGg7IGkgPCBsZW47ICsraSlcbiAgICAgICAgdmFsIHw9IChhW2ldIF4gYltpXSk7XG5cbiAgICAgIHJldHVybiAodmFsID09PSAwKTtcbiAgICB9XG4gIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIEtleUV4Y2hhbmdlKGFsZ28sIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChhbGdvKSB7XG4gICAgY2FzZSAnY3VydmUyNTUxOS1zaGEyNTYnOlxuICAgIGNhc2UgJ2N1cnZlMjU1MTktc2hhMjU2QGxpYnNzaC5vcmcnOlxuICAgICAgaWYgKCFDVVJWRTI1NTE5X1NVUFBPUlRFRClcbiAgICAgICAgYnJlYWs7XG4gICAgICB0aGlzLnR5cGUgPSAnMjU1MTknO1xuICAgICAgdGhpcy5oYXNoID0gJ3NoYTI1Nic7XG4gICAgICB0aGlzLnBrdEluaXQgPSAnS0VYRUNESF9JTklUJztcbiAgICAgIHRoaXMucGt0UmVwbHkgPSAnS0VYRUNESF9SRVBMWSc7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnZWNkaC1zaGEyLW5pc3RwMjU2JzpcbiAgICAgIHRoaXMudHlwZSA9ICdlY2RoJztcbiAgICAgIHRoaXMubmFtZSA9ICdwcmltZTI1NnYxJztcbiAgICAgIHRoaXMuaGFzaCA9ICdzaGEyNTYnO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWEVDREhfSU5JVCc7XG4gICAgICB0aGlzLnBrdFJlcGx5ID0gJ0tFWEVDREhfUkVQTFknO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2VjZGgtc2hhMi1uaXN0cDM4NCc6XG4gICAgICB0aGlzLnR5cGUgPSAnZWNkaCc7XG4gICAgICB0aGlzLm5hbWUgPSAnc2VjcDM4NHIxJztcbiAgICAgIHRoaXMuaGFzaCA9ICdzaGEzODQnO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWEVDREhfSU5JVCc7XG4gICAgICB0aGlzLnBrdFJlcGx5ID0gJ0tFWEVDREhfUkVQTFknO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2VjZGgtc2hhMi1uaXN0cDUyMSc6XG4gICAgICB0aGlzLnR5cGUgPSAnZWNkaCc7XG4gICAgICB0aGlzLm5hbWUgPSAnc2VjcDUyMXIxJztcbiAgICAgIHRoaXMuaGFzaCA9ICdzaGE1MTInO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWEVDREhfSU5JVCc7XG4gICAgICB0aGlzLnBrdFJlcGx5ID0gJ0tFWEVDREhfUkVQTFknO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2RpZmZpZS1oZWxsbWFuLWdyb3VwMS1zaGExJzpcbiAgICAgIHRoaXMudHlwZSA9ICdncm91cCc7XG4gICAgICB0aGlzLm5hbWUgPSAnbW9kcDInO1xuICAgICAgdGhpcy5oYXNoID0gJ3NoYTEnO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWERIX0lOSVQnO1xuICAgICAgdGhpcy5wa3RSZXBseSA9ICdLRVhESF9SRVBMWSc7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnZGlmZmllLWhlbGxtYW4tZ3JvdXAxNC1zaGExJzpcbiAgICAgIHRoaXMudHlwZSA9ICdncm91cCc7XG4gICAgICB0aGlzLm5hbWUgPSAnbW9kcDE0JztcbiAgICAgIHRoaXMuaGFzaCA9ICdzaGExJztcbiAgICAgIHRoaXMucGt0SW5pdCA9ICdLRVhESF9JTklUJztcbiAgICAgIHRoaXMucGt0UmVwbHkgPSAnS0VYREhfUkVQTFknO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2RpZmZpZS1oZWxsbWFuLWdyb3VwMTQtc2hhMjU2JzpcbiAgICAgIHRoaXMudHlwZSA9ICdncm91cCc7XG4gICAgICB0aGlzLm5hbWUgPSAnbW9kcDE0JztcbiAgICAgIHRoaXMuaGFzaCA9ICdzaGEyNTYnO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWERIX0lOSVQnO1xuICAgICAgdGhpcy5wa3RSZXBseSA9ICdLRVhESF9SRVBMWSc7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnZGlmZmllLWhlbGxtYW4tZ3JvdXAxNi1zaGE1MTInOlxuICAgICAgdGhpcy50eXBlID0gJ2dyb3VwJztcbiAgICAgIHRoaXMubmFtZSA9ICdtb2RwMTYnO1xuICAgICAgdGhpcy5oYXNoID0gJ3NoYTUxMic7XG4gICAgICB0aGlzLnBrdEluaXQgPSAnS0VYREhfSU5JVCc7XG4gICAgICB0aGlzLnBrdFJlcGx5ID0gJ0tFWERIX1JFUExZJztcbiAgICAgIHJldHVybjtcbiAgICBjYXNlICdkaWZmaWUtaGVsbG1hbi1ncm91cDE4LXNoYTUxMic6XG4gICAgICB0aGlzLnR5cGUgPSAnZ3JvdXAnO1xuICAgICAgdGhpcy5uYW1lID0gJ21vZHAxOCc7XG4gICAgICB0aGlzLmhhc2ggPSAnc2hhNTEyJztcbiAgICAgIHRoaXMucGt0SW5pdCA9ICdLRVhESF9JTklUJztcbiAgICAgIHRoaXMucGt0UmVwbHkgPSAnS0VYREhfUkVQTFknO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2RpZmZpZS1oZWxsbWFuLWdyb3VwLWV4Y2hhbmdlLXNoYTEnOlxuICAgICAgdGhpcy50eXBlID0gJ2dyb3VwZXgnO1xuICAgICAgdGhpcy5oYXNoID0gJ3NoYTEnO1xuICAgICAgdGhpcy5wa3RJbml0ID0gJ0tFWERIX0dFWF9SRVEnO1xuICAgICAgdGhpcy5wa3RSZXBseSA9ICdLRVhESF9HRVhfUkVQTFknO1xuICAgICAgdGhpcy5fcHJpbWUgPSBudWxsO1xuICAgICAgdGhpcy5fZ2VuZXJhdG9yID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlICdkaWZmaWUtaGVsbG1hbi1ncm91cC1leGNoYW5nZS1zaGEyNTYnOlxuICAgICAgdGhpcy50eXBlID0gJ2dyb3VwZXgnO1xuICAgICAgdGhpcy5oYXNoID0gJ3NoYTI1Nic7XG4gICAgICB0aGlzLnBrdEluaXQgPSAnS0VYREhfR0VYX1JFUSc7XG4gICAgICB0aGlzLnBrdFJlcGx5ID0gJ0tFWERIX0dFWF9SRVBMWSc7XG4gICAgICB0aGlzLl9wcmltZSA9IG51bGw7XG4gICAgICB0aGlzLl9nZW5lcmF0b3IgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQga2V5IGV4Y2hhbmdlIGFsZ29yaXRobTogJyArIGFsZ28pO1xufVxuS2V5RXhjaGFuZ2UucHJvdG90eXBlLnNldERIUGFyYW1zID0gZnVuY3Rpb24ocHJpbWUsIGdlbmVyYXRvcikge1xuICBpZiAodGhpcy50eXBlID09PSAnZ3JvdXBleCcpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcmltZSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJpbWUgdmFsdWUnKTtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdlbmVyYXRvciB2YWx1ZScpO1xuICAgIHRoaXMuX3ByaW1lID0gcHJpbWU7XG4gICAgdGhpcy5fZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuICB9XG59O1xuS2V5RXhjaGFuZ2UucHJvdG90eXBlLmdldERIUGFyYW1zID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdncm91cGV4JyAmJiB0aGlzLl9rZXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpbWU6IGNvbnZlcnRUb01waW50KHRoaXMuX2tleC5nZXRQcmltZSgpKSxcbiAgICAgIGdlbmVyYXRvcjogY29udmVydFRvTXBpbnQodGhpcy5fa2V4LmdldEdlbmVyYXRvcigpKSxcbiAgICB9O1xuICB9XG59O1xuS2V5RXhjaGFuZ2UucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgIGNhc2UgJzI1NTE5JzpcbiAgICAgIGlmICghdGhpcy5fa2V5cylcbiAgICAgICAgdGhpcy5fa2V5cyA9IGNyeXB0by5nZW5lcmF0ZUtleVBhaXJTeW5jKCd4MjU1MTknKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VjZGgnOlxuICAgICAgaWYgKCF0aGlzLl9rZXgpIHtcbiAgICAgICAgdGhpcy5fa2V4ID0gY3J5cHRvLmNyZWF0ZUVDREgodGhpcy5uYW1lKTtcbiAgICAgICAgdGhpcy5fcHVibGljID0gdGhpcy5fa2V4LmdlbmVyYXRlS2V5cygpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZ3JvdXAnOlxuICAgIGNhc2UgJ2dyb3VwZXgnOlxuICAgICAgaWYgKCF0aGlzLl9rZXgpIHtcbiAgICAgICAgaWYgKHRoaXMubmFtZSlcbiAgICAgICAgICB0aGlzLl9rZXggPSBjcnlwdG8uY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwKHRoaXMubmFtZSk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3ByaW1lICYmIHRoaXMuX2dlbmVyYXRvcilcbiAgICAgICAgICB0aGlzLl9rZXggPSBjcnlwdG8uY3JlYXRlRGlmZmllSGVsbG1hbih0aGlzLl9wcmltZSwgdGhpcy5fZ2VuZXJhdG9yKTtcbiAgICAgICAgaWYgKHRoaXMuX2tleClcbiAgICAgICAgICB0aGlzLl9wdWJsaWMgPSB0aGlzLl9rZXguZ2VuZXJhdGVLZXlzKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufTtcbktleUV4Y2hhbmdlLnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5nZW5lcmF0ZUtleXMoKTtcblxuICB2YXIga2V5O1xuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgIGNhc2UgJzI1NTE5JzpcbiAgICAgIGtleSA9IHRoaXMuX2tleXMucHVibGljS2V5LmV4cG9ydCh7IHR5cGU6ICdzcGtpJywgZm9ybWF0OiAnZGVyJyB9KTtcbiAgICAgIHJldHVybiBrZXkuc2xpY2UoLTMyKTsgLy8gSEFDSzogYXZvaWRzIHBhcnNpbmcgREVSL0JFUiBoZWFkZXJcbiAgICBjYXNlICdlY2RoJzpcbiAgICBjYXNlICdncm91cCc6XG4gICAgY2FzZSAnZ3JvdXBleCc6XG4gICAgICBrZXkgPSB0aGlzLl9wdWJsaWM7XG4gICAgICBicmVhaztcbiAgfVxuICBpZiAoa2V5KVxuICAgIHJldHVybiB0aGlzLmNvbnZlcnRQdWJsaWNLZXkoa2V5KTtcbn07XG5LZXlFeGNoYW5nZS5wcm90b3R5cGUuY29udmVydFB1YmxpY0tleSA9IGZ1bmN0aW9uKGtleSkge1xuICB2YXIgbmV3S2V5O1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGtleS5sZW5ndGg7XG4gIHdoaWxlIChrZXlbaWR4XSA9PT0gMHgwMCkge1xuICAgICsraWR4O1xuICAgIC0tbGVuO1xuICB9XG4gIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgY2FzZSAnMjU1MTknOlxuICAgICAgaWYgKGtleS5sZW5ndGggPT09IDMyKVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChrZXlbaWR4XSAmIDB4ODApIHtcbiAgICAgICAgbmV3S2V5ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBsZW4pO1xuICAgICAgICBuZXdLZXlbMF0gPSAwO1xuICAgICAgICBrZXkuY29weShuZXdLZXksIDEsIGlkeCk7XG4gICAgICAgIHJldHVybiBuZXdLZXk7XG4gICAgICB9XG4gIH1cbiAgaWYgKGxlbiAhPT0ga2V5Lmxlbmd0aCkge1xuICAgIG5ld0tleSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pO1xuICAgIGtleS5jb3B5KG5ld0tleSwgMCwgaWR4KTtcbiAgICBrZXkgPSBuZXdLZXk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn07XG5LZXlFeGNoYW5nZS5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uKG90aGVyUHVibGljS2V5KSB7XG4gIHRoaXMuZ2VuZXJhdGVLZXlzKCk7XG5cbiAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICBjYXNlICcyNTUxOSc6XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgYXNuV3JpdGVyID0gbmV3IEJlci5Xcml0ZXIoKTtcbiAgICAgICAgYXNuV3JpdGVyLnN0YXJ0U2VxdWVuY2UoKTtcbiAgICAgICAgICAvLyBhbGdvcml0aG1cbiAgICAgICAgICBhc25Xcml0ZXIuc3RhcnRTZXF1ZW5jZSgpO1xuICAgICAgICAgICAgYXNuV3JpdGVyLndyaXRlT0lEKCcxLjMuMTAxLjExMCcpOyAvLyBpZC1YMjU1MTlcbiAgICAgICAgICBhc25Xcml0ZXIuZW5kU2VxdWVuY2UoKTtcblxuICAgICAgICAgIC8vIFB1YmxpY0tleVxuICAgICAgICAgIGFzbldyaXRlci5zdGFydFNlcXVlbmNlKEJlci5CaXRTdHJpbmcpO1xuICAgICAgICAgICAgYXNuV3JpdGVyLndyaXRlQnl0ZSgweDAwKTtcbiAgICAgICAgICAgIC8vIFhYWDogaGFjayB0byB3cml0ZSBhIHJhdyBidWZmZXIgd2l0aG91dCBhIHRhZyAtLSB5dWNrXG4gICAgICAgICAgICBhc25Xcml0ZXIuX2Vuc3VyZShvdGhlclB1YmxpY0tleS5sZW5ndGgpO1xuICAgICAgICAgICAgb3RoZXJQdWJsaWNLZXkuY29weShhc25Xcml0ZXIuX2J1ZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNuV3JpdGVyLl9vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyUHVibGljS2V5Lmxlbmd0aCk7XG4gICAgICAgICAgICBhc25Xcml0ZXIuX29mZnNldCArPSBvdGhlclB1YmxpY0tleS5sZW5ndGg7XG4gICAgICAgICAgYXNuV3JpdGVyLmVuZFNlcXVlbmNlKCk7XG4gICAgICAgIGFzbldyaXRlci5lbmRTZXF1ZW5jZSgpO1xuXG4gICAgICAgIHJldHVybiBjb252ZXJ0VG9NcGludChjcnlwdG8uZGlmZmllSGVsbG1hbih7XG4gICAgICAgICAgcHJpdmF0ZUtleTogdGhpcy5fa2V5cy5wcml2YXRlS2V5LFxuICAgICAgICAgIHB1YmxpY0tleTogY3J5cHRvLmNyZWF0ZVB1YmxpY0tleSh7XG4gICAgICAgICAgICBrZXk6IGFzbldyaXRlci5idWZmZXIsXG4gICAgICAgICAgICB0eXBlOiAnc3BraScsXG4gICAgICAgICAgICBmb3JtYXQ6ICdkZXInLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gZXg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlY2RoJzpcbiAgICBjYXNlICdncm91cCc6XG4gICAgY2FzZSAnZ3JvdXBleCc6XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gY29udmVydFRvTXBpbnQodGhpcy5fa2V4LmNvbXB1dGVTZWNyZXQob3RoZXJQdWJsaWNLZXkpKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJldHVybiBleDtcbiAgICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY29udmVydFRvTXBpbnQoYnVmKSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuZ3RoID0gYnVmLmxlbmd0aDtcbiAgd2hpbGUgKGJ1ZltpZHhdID09PSAweDAwKSB7XG4gICAgKytpZHg7XG4gICAgLS1sZW5ndGg7XG4gIH1cbiAgdmFyIG5ld0J1ZjtcbiAgaWYgKGJ1ZltpZHhdICYgMHg4MCkge1xuICAgIG5ld0J1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgbGVuZ3RoKTtcbiAgICBuZXdCdWZbMF0gPSAwO1xuICAgIGJ1Zi5jb3B5KG5ld0J1ZiwgMSwgaWR4KTtcbiAgICBidWYgPSBuZXdCdWY7XG4gIH0gZWxzZSBpZiAobGVuZ3RoICE9PSBidWYubGVuZ3RoKSB7XG4gICAgbmV3QnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCk7XG4gICAgYnVmLmNvcHkobmV3QnVmLCAwLCBpZHgpO1xuICAgIGJ1ZiA9IG5ld0J1ZjtcbiAgfVxuICByZXR1cm4gYnVmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNTSDJTdHJlYW07XG5tb2R1bGUuZXhwb3J0cy5fc2VuZCA9IHNlbmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ6bGliXCIpOyIsIi8qXG4gIEJhc2VkIGhlYXZpbHkgb24gdGhlIFN0cmVhbWluZyBCb3llci1Nb29yZS1Ib3JzcG9vbCBDKysgaW1wbGVtZW50YXRpb25cbiAgYnkgSG9uZ2xpIExhaSBhdDogaHR0cHM6Ly9naXRodWIuY29tL0Zvb0JhcldpZGdldC9ib3llci1tb29yZS1ob3JzcG9vbFxuKi9cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIsXG4gICAgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG5cbmZ1bmN0aW9uIGpzbWVtY21wKGJ1ZjEsIHBvczEsIGJ1ZjIsIHBvczIsIG51bSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgKytpLCArK3BvczEsICsrcG9zMilcbiAgICBpZiAoYnVmMVtwb3MxXSAhPT0gYnVmMltwb3MyXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIFNCTUgobmVlZGxlKSB7XG4gIGlmICh0eXBlb2YgbmVlZGxlID09PSAnc3RyaW5nJylcbiAgICBuZWVkbGUgPSBuZXcgQnVmZmVyKG5lZWRsZSk7XG4gIHZhciBpLCBqLCBuZWVkbGVfbGVuID0gbmVlZGxlLmxlbmd0aDtcblxuICB0aGlzLm1heE1hdGNoZXMgPSBJbmZpbml0eTtcbiAgdGhpcy5tYXRjaGVzID0gMDtcblxuICB0aGlzLl9vY2MgPSBuZXcgQXJyYXkoMjU2KTtcbiAgdGhpcy5fbG9va2JlaGluZF9zaXplID0gMDtcbiAgdGhpcy5fbmVlZGxlID0gbmVlZGxlO1xuICB0aGlzLl9idWZwb3MgPSAwO1xuXG4gIHRoaXMuX2xvb2tiZWhpbmQgPSBuZXcgQnVmZmVyKG5lZWRsZV9sZW4pO1xuXG4gIC8vIEluaXRpYWxpemUgb2NjdXJyZW5jZSB0YWJsZS5cbiAgZm9yIChqID0gMDsgaiA8IDI1NjsgKytqKVxuICAgIHRoaXMuX29jY1tqXSA9IG5lZWRsZV9sZW47XG5cbiAgLy8gUG9wdWxhdGUgb2NjdXJyZW5jZSB0YWJsZSB3aXRoIGFuYWx5c2lzIG9mIHRoZSBuZWVkbGUsXG4gIC8vIGlnbm9yaW5nIGxhc3QgbGV0dGVyLlxuICBpZiAobmVlZGxlX2xlbiA+PSAxKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5lZWRsZV9sZW4gLSAxOyArK2kpXG4gICAgICB0aGlzLl9vY2NbbmVlZGxlW2ldXSA9IG5lZWRsZV9sZW4gLSAxIC0gaTtcbiAgfVxufVxuaW5oZXJpdHMoU0JNSCwgRXZlbnRFbWl0dGVyKTtcblxuU0JNSC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fbG9va2JlaGluZF9zaXplID0gMDtcbiAgdGhpcy5tYXRjaGVzID0gMDtcbiAgdGhpcy5fYnVmcG9zID0gMDtcbn07XG5cblNCTUgucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgcG9zKSB7XG4gIHZhciByLCBjaGxlbjtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKVxuICAgIGNodW5rID0gbmV3IEJ1ZmZlcihjaHVuaywgJ2JpbmFyeScpO1xuICBjaGxlbiA9IGNodW5rLmxlbmd0aDtcbiAgdGhpcy5fYnVmcG9zID0gcG9zIHx8IDA7XG4gIHdoaWxlIChyICE9PSBjaGxlbiAmJiB0aGlzLm1hdGNoZXMgPCB0aGlzLm1heE1hdGNoZXMpXG4gICAgciA9IHRoaXMuX3NibWhfZmVlZChjaHVuayk7XG4gIHJldHVybiByO1xufTtcblxuU0JNSC5wcm90b3R5cGUuX3NibWhfZmVlZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoLCBuZWVkbGUgPSB0aGlzLl9uZWVkbGUsIG5lZWRsZV9sZW4gPSBuZWVkbGUubGVuZ3RoO1xuXG4gIC8vIFBvc2l0aXZlOiBwb2ludHMgdG8gYSBwb3NpdGlvbiBpbiBgZGF0YWBcbiAgLy8gICAgICAgICAgIHBvcyA9PSAzIHBvaW50cyB0byBkYXRhWzNdXG4gIC8vIE5lZ2F0aXZlOiBwb2ludHMgdG8gYSBwb3NpdGlvbiBpbiB0aGUgbG9va2JlaGluZCBidWZmZXJcbiAgLy8gICAgICAgICAgIHBvcyA9PSAtMiBwb2ludHMgdG8gbG9va2JlaGluZFtsb29rYmVoaW5kX3NpemUgLSAyXVxuICB2YXIgcG9zID0gLXRoaXMuX2xvb2tiZWhpbmRfc2l6ZSxcbiAgICAgIGxhc3RfbmVlZGxlX2NoYXIgPSBuZWVkbGVbbmVlZGxlX2xlbiAtIDFdLFxuICAgICAgb2NjID0gdGhpcy5fb2NjLFxuICAgICAgbG9va2JlaGluZCA9IHRoaXMuX2xvb2tiZWhpbmQ7XG5cbiAgaWYgKHBvcyA8IDApIHtcbiAgICAvLyBMb29rYmVoaW5kIGJ1ZmZlciBpcyBub3QgZW1wdHkuIFBlcmZvcm0gQm95ZXItTW9vcmUtSG9yc3Bvb2xcbiAgICAvLyBzZWFyY2ggd2l0aCBjaGFyYWN0ZXIgbG9va3VwIGNvZGUgdGhhdCBjb25zaWRlcnMgYm90aCB0aGVcbiAgICAvLyBsb29rYmVoaW5kIGJ1ZmZlciBhbmQgdGhlIGN1cnJlbnQgcm91bmQncyBoYXlzdGFjayBkYXRhLlxuICAgIC8vXG4gICAgLy8gTG9vcCB1bnRpbFxuICAgIC8vICAgdGhlcmUgaXMgYSBtYXRjaC5cbiAgICAvLyBvciB1bnRpbFxuICAgIC8vICAgd2UndmUgbW92ZWQgcGFzdCB0aGUgcG9zaXRpb24gdGhhdCByZXF1aXJlcyB0aGVcbiAgICAvLyAgIGxvb2tiZWhpbmQgYnVmZmVyLiBJbiB0aGlzIGNhc2Ugd2Ugc3dpdGNoIHRvIHRoZVxuICAgIC8vICAgb3B0aW1pemVkIGxvb3AuXG4gICAgLy8gb3IgdW50aWxcbiAgICAvLyAgIHRoZSBjaGFyYWN0ZXIgdG8gbG9vayBhdCBsaWVzIG91dHNpZGUgdGhlIGhheXN0YWNrLlxuICAgIHdoaWxlIChwb3MgPCAwICYmIHBvcyA8PSBsZW4gLSBuZWVkbGVfbGVuKSB7XG4gICAgICAgdmFyIGNoID0gdGhpcy5fc2JtaF9sb29rdXBfY2hhcihkYXRhLCBwb3MgKyBuZWVkbGVfbGVuIC0gMSk7XG5cbiAgICAgIGlmIChjaCA9PT0gbGFzdF9uZWVkbGVfY2hhclxuICAgICAgICAgICYmIHRoaXMuX3NibWhfbWVtY21wKGRhdGEsIHBvcywgbmVlZGxlX2xlbiAtIDEpKSB7XG4gICAgICAgIHRoaXMuX2xvb2tiZWhpbmRfc2l6ZSA9IDA7XG4gICAgICAgICsrdGhpcy5tYXRjaGVzO1xuICAgICAgICBpZiAocG9zID4gLXRoaXMuX2xvb2tiZWhpbmRfc2l6ZSlcbiAgICAgICAgICB0aGlzLmVtaXQoJ2luZm8nLCB0cnVlLCBsb29rYmVoaW5kLCAwLCB0aGlzLl9sb29rYmVoaW5kX3NpemUgKyBwb3MpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5lbWl0KCdpbmZvJywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5fYnVmcG9zID0gcG9zICsgbmVlZGxlX2xlbjtcbiAgICAgICAgcmV0dXJuIHBvcyArIG5lZWRsZV9sZW47XG4gICAgICB9IGVsc2VcbiAgICAgICAgcG9zICs9IG9jY1tjaF07XG4gICAgfVxuXG4gICAgLy8gTm8gbWF0Y2guXG5cbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgLy8gVGhlcmUncyB0b28gZmV3IGRhdGEgZm9yIEJveWVyLU1vb3JlLUhvcnNwb29sIHRvIHJ1bixcbiAgICAgIC8vIHNvIGxldCdzIHVzZSBhIGRpZmZlcmVudCBhbGdvcml0aG0gdG8gc2tpcCBhcyBtdWNoIGFzXG4gICAgICAvLyB3ZSBjYW4uXG4gICAgICAvLyBGb3J3YXJkIHBvcyB1bnRpbFxuICAgICAgLy8gICB0aGUgdHJhaWxpbmcgcGFydCBvZiBsb29rYmVoaW5kICsgZGF0YVxuICAgICAgLy8gICBsb29rcyBsaWtlIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5lZWRsZVxuICAgICAgLy8gb3IgdW50aWxcbiAgICAgIC8vICAgcG9zID09IDBcbiAgICAgIHdoaWxlIChwb3MgPCAwICYmICF0aGlzLl9zYm1oX21lbWNtcChkYXRhLCBwb3MsIGxlbiAtIHBvcykpXG4gICAgICAgIHBvcysrO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gRGlzY2FyZCBsb29rYmVoaW5kIGJ1ZmZlci5cbiAgICAgIHRoaXMuZW1pdCgnaW5mbycsIGZhbHNlLCBsb29rYmVoaW5kLCAwLCB0aGlzLl9sb29rYmVoaW5kX3NpemUpO1xuICAgICAgdGhpcy5fbG9va2JlaGluZF9zaXplID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3V0IG9mZiBwYXJ0IG9mIHRoZSBsb29rYmVoaW5kIGJ1ZmZlciB0aGF0IGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQgYW5kIGFwcGVuZCB0aGUgZW50aXJlIGhheXN0YWNrXG4gICAgICAvLyBpbnRvIGl0LlxuICAgICAgdmFyIGJ5dGVzVG9DdXRPZmYgPSB0aGlzLl9sb29rYmVoaW5kX3NpemUgKyBwb3M7XG5cbiAgICAgIGlmIChieXRlc1RvQ3V0T2ZmID4gMCkge1xuICAgICAgICAvLyBUaGUgY3V0IG9mZiBkYXRhIGlzIGd1YXJhbnRlZWQgbm90IHRvIGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAgICAgICAgdGhpcy5lbWl0KCdpbmZvJywgZmFsc2UsIGxvb2tiZWhpbmQsIDAsIGJ5dGVzVG9DdXRPZmYpO1xuICAgICAgfVxuXG4gICAgICBsb29rYmVoaW5kLmNvcHkobG9va2JlaGluZCwgMCwgYnl0ZXNUb0N1dE9mZixcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb29rYmVoaW5kX3NpemUgLSBieXRlc1RvQ3V0T2ZmKTtcbiAgICAgIHRoaXMuX2xvb2tiZWhpbmRfc2l6ZSAtPSBieXRlc1RvQ3V0T2ZmO1xuXG4gICAgICBkYXRhLmNvcHkobG9va2JlaGluZCwgdGhpcy5fbG9va2JlaGluZF9zaXplKTtcbiAgICAgIHRoaXMuX2xvb2tiZWhpbmRfc2l6ZSArPSBsZW47XG5cbiAgICAgIHRoaXMuX2J1ZnBvcyA9IGxlbjtcbiAgICAgIHJldHVybiBsZW47XG4gICAgfVxuICB9XG5cbiAgaWYgKHBvcyA+PSAwKVxuICAgIHBvcyArPSB0aGlzLl9idWZwb3M7XG5cbiAgLy8gTG9va2JlaGluZCBidWZmZXIgaXMgbm93IGVtcHR5LiBQZXJmb3JtIEJveWVyLU1vb3JlLUhvcnNwb29sXG4gIC8vIHNlYXJjaCB3aXRoIG9wdGltaXplZCBjaGFyYWN0ZXIgbG9va3VwIGNvZGUgdGhhdCBvbmx5IGNvbnNpZGVyc1xuICAvLyB0aGUgY3VycmVudCByb3VuZCdzIGhheXN0YWNrIGRhdGEuXG4gIHdoaWxlIChwb3MgPD0gbGVuIC0gbmVlZGxlX2xlbikge1xuICAgIHZhciBjaCA9IGRhdGFbcG9zICsgbmVlZGxlX2xlbiAtIDFdO1xuXG4gICAgaWYgKGNoID09PSBsYXN0X25lZWRsZV9jaGFyXG4gICAgICAgICYmIGRhdGFbcG9zXSA9PT0gbmVlZGxlWzBdXG4gICAgICAgICYmIGpzbWVtY21wKG5lZWRsZSwgMCwgZGF0YSwgcG9zLCBuZWVkbGVfbGVuIC0gMSkpIHtcbiAgICAgICsrdGhpcy5tYXRjaGVzO1xuICAgICAgaWYgKHBvcyA+IDApXG4gICAgICAgIHRoaXMuZW1pdCgnaW5mbycsIHRydWUsIGRhdGEsIHRoaXMuX2J1ZnBvcywgcG9zKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5lbWl0KCdpbmZvJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2J1ZnBvcyA9IHBvcyArIG5lZWRsZV9sZW47XG4gICAgICByZXR1cm4gcG9zICsgbmVlZGxlX2xlbjtcbiAgICB9IGVsc2VcbiAgICAgIHBvcyArPSBvY2NbY2hdO1xuICB9XG5cbiAgLy8gVGhlcmUgd2FzIG5vIG1hdGNoLiBJZiB0aGVyZSdzIHRyYWlsaW5nIGhheXN0YWNrIGRhdGEgdGhhdCB3ZSBjYW5ub3RcbiAgLy8gbWF0Y2ggeWV0IHVzaW5nIHRoZSBCb3llci1Nb29yZS1Ib3JzcG9vbCBhbGdvcml0aG0gKGJlY2F1c2UgdGhlIHRyYWlsaW5nXG4gIC8vIGRhdGEgaXMgbGVzcyB0aGFuIHRoZSBuZWVkbGUgc2l6ZSkgdGhlbiBtYXRjaCB1c2luZyBhIG1vZGlmaWVkXG4gIC8vIGFsZ29yaXRobSB0aGF0IHN0YXJ0cyBtYXRjaGluZyBmcm9tIHRoZSBiZWdpbm5pbmcgaW5zdGVhZCBvZiB0aGUgZW5kLlxuICAvLyBXaGF0ZXZlciB0cmFpbGluZyBkYXRhIGlzIGxlZnQgYWZ0ZXIgcnVubmluZyB0aGlzIGFsZ29yaXRobSBpcyBhZGRlZCB0b1xuICAvLyB0aGUgbG9va2JlaGluZCBidWZmZXIuXG4gIGlmIChwb3MgPCBsZW4pIHtcbiAgICB3aGlsZSAocG9zIDwgbGVuICYmIChkYXRhW3Bvc10gIT09IG5lZWRsZVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgIHx8ICFqc21lbWNtcChkYXRhLCBwb3MsIG5lZWRsZSwgMCwgbGVuIC0gcG9zKSkpIHtcbiAgICAgICsrcG9zO1xuICAgIH1cbiAgICBpZiAocG9zIDwgbGVuKSB7XG4gICAgICBkYXRhLmNvcHkobG9va2JlaGluZCwgMCwgcG9zLCBwb3MgKyAobGVuIC0gcG9zKSk7XG4gICAgICB0aGlzLl9sb29rYmVoaW5kX3NpemUgPSBsZW4gLSBwb3M7XG4gICAgfVxuICB9XG5cbiAgLy8gRXZlcnl0aGluZyB1bnRpbCBwb3MgaXMgZ3VhcmFudGVlZCBub3QgdG8gY29udGFpbiBuZWVkbGUgZGF0YS5cbiAgaWYgKHBvcyA+IDApXG4gICAgdGhpcy5lbWl0KCdpbmZvJywgZmFsc2UsIGRhdGEsIHRoaXMuX2J1ZnBvcywgcG9zIDwgbGVuID8gcG9zIDogbGVuKTtcblxuICB0aGlzLl9idWZwb3MgPSBsZW47XG4gIHJldHVybiBsZW47XG59O1xuXG5TQk1ILnByb3RvdHlwZS5fc2JtaF9sb29rdXBfY2hhciA9IGZ1bmN0aW9uKGRhdGEsIHBvcykge1xuICBpZiAocG9zIDwgMClcbiAgICByZXR1cm4gdGhpcy5fbG9va2JlaGluZFt0aGlzLl9sb29rYmVoaW5kX3NpemUgKyBwb3NdO1xuICBlbHNlXG4gICAgcmV0dXJuIGRhdGFbcG9zXTtcbn1cblxuU0JNSC5wcm90b3R5cGUuX3NibWhfbWVtY21wID0gZnVuY3Rpb24oZGF0YSwgcG9zLCBsZW4pIHtcbiAgdmFyIGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKHRoaXMuX3NibWhfbG9va3VwX2NoYXIoZGF0YSwgcG9zICsgaSkgPT09IHRoaXMuX25lZWRsZVtpXSlcbiAgICAgICsraTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU0JNSDtcbiIsInZhciBIdHRwQWdlbnQgPSByZXF1aXJlKCdodHRwJykuQWdlbnQ7XG52YXIgSHR0cHNBZ2VudCA9IHJlcXVpcmUoJ2h0dHBzJykuQWdlbnQ7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG5cbnZhciBDbGllbnQ7XG5cbltIdHRwQWdlbnQsIEh0dHBzQWdlbnRdLmZvckVhY2goKGN0b3IpID0+IHtcbiAgZnVuY3Rpb24gU1NIQWdlbnQoY29ubmVjdENmZywgYWdlbnRPcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNTSEFnZW50KSlcbiAgICAgIHJldHVybiBuZXcgU1NIQWdlbnQoY29ubmVjdENmZywgYWdlbnRPcHRpb25zKTtcblxuICAgIGN0b3IuY2FsbCh0aGlzLCBhZ2VudE9wdGlvbnMpO1xuXG4gICAgdGhpcy5fY29ubmVjdENmZyA9IGNvbm5lY3RDZmc7XG4gICAgdGhpcy5fZGVmYXVsdFNyY0lQID0gKGFnZW50T3B0aW9ucyAmJiBhZ2VudE9wdGlvbnMuc3JjSVApIHx8ICdsb2NhbGhvc3QnO1xuICB9XG4gIGluaGVyaXRzKFNTSEFnZW50LCBjdG9yKTtcblxuICBTU0hBZ2VudC5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdGlvbiA9IGNyZWF0ZUNvbm5lY3Rpb247XG5cbiAgZXhwb3J0c1tjdG9yID09PSBIdHRwQWdlbnQgPyAnU1NIVFRQQWdlbnQnIDogJ1NTSFRUUFNBZ2VudCddID0gU1NIQWdlbnQ7XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGlvbihvcHRpb25zLCBjYikge1xuICB2YXIgc3JjSVAgPSAob3B0aW9ucyAmJiBvcHRpb25zLmxvY2FsQWRkcmVzcykgfHwgdGhpcy5fZGVmYXVsdFNyY0lQO1xuICB2YXIgc3JjUG9ydCA9IChvcHRpb25zICYmIG9wdGlvbnMubG9jYWxQb3J0KSB8fCAwO1xuICB2YXIgZHN0SVAgPSBvcHRpb25zLmhvc3Q7XG4gIHZhciBkc3RQb3J0ID0gb3B0aW9ucy5wb3J0O1xuXG4gIGlmIChDbGllbnQgPT09IHVuZGVmaW5lZClcbiAgICBDbGllbnQgPSByZXF1aXJlKCcuL2NsaWVudCcpLkNsaWVudDtcblxuICB2YXIgY2xpZW50ID0gbmV3IENsaWVudCgpO1xuICB2YXIgdHJpZWRGb3J3YXJkID0gZmFsc2U7XG4gIGNsaWVudC5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgY2xpZW50LmZvcndhcmRPdXQoc3JjSVAsIHNyY1BvcnQsIGRzdElQLCBkc3RQb3J0LCAoZXJyLCBzdHJlYW0pID0+IHtcbiAgICAgIHRyaWVkRm9yd2FyZCA9IHRydWU7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNsaWVudC5lbmQoKTtcbiAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICB9XG4gICAgICBzdHJlYW0ub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIGNsaWVudC5lbmQoKTtcbiAgICAgIH0pO1xuICAgICAgY2IobnVsbCwgZGVjb3JhdGVTdHJlYW0oc3RyZWFtKSk7XG4gICAgfSk7XG4gIH0pLm9uKCdlcnJvcicsIGNiKS5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgaWYgKCF0cmllZEZvcndhcmQpXG4gICAgICBjYihuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29ubmVjdGlvbiBsb3NzJykpO1xuICB9KS5jb25uZWN0KHRoaXMuX2Nvbm5lY3RDZmcpO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZGVjb3JhdGVTdHJlYW0oc3RyZWFtKSB7XG4gIHN0cmVhbS5zZXRLZWVwQWxpdmUgPSBub29wO1xuICBzdHJlYW0uc2V0Tm9EZWxheSA9IG5vb3A7XG4gIHN0cmVhbS5zZXRUaW1lb3V0ID0gbm9vcDtcbiAgc3RyZWFtLnJlZiA9IG5vb3A7XG4gIHN0cmVhbS51bnJlZiA9IG5vb3A7XG4gIHN0cmVhbS5kZXN0cm95U29vbiA9IHN0cmVhbS5kZXN0cm95O1xuICByZXR1cm4gc3RyZWFtO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJ2YXIgU29ja2V0ID0gcmVxdWlyZSgnbmV0JykuU29ja2V0O1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cztcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcblxudmFyIHJlYWRVSW50MzJCRSA9IHJlcXVpcmUoJy4vYnVmZmVyLWhlbHBlcnMnKS5yZWFkVUludDMyQkU7XG52YXIgd3JpdGVVSW50MzJCRSA9IHJlcXVpcmUoJy4vYnVmZmVyLWhlbHBlcnMnKS53cml0ZVVJbnQzMkJFO1xudmFyIHdyaXRlVUludDMyTEUgPSByZXF1aXJlKCcuL2J1ZmZlci1oZWxwZXJzJykud3JpdGVVSW50MzJMRTtcblxudmFyIFJFUVVFU1RfSURFTlRJVElFUyA9IDExO1xudmFyIElERU5USVRJRVNfQU5TV0VSID0gMTI7XG52YXIgU0lHTl9SRVFVRVNUID0gMTM7XG52YXIgU0lHTl9SRVNQT05TRSA9IDE0O1xudmFyIEZBSUxVUkUgPSA1O1xuXG52YXIgUkVfQ1lHV0lOX1NPQ0sgPSAvXlxcITxzb2NrZXQgPihcXGQrKSBzIChbQS1aMC05XXs4fVxcLVtBLVowLTldezh9XFwtW0EtWjAtOV17OH1cXC1bQS1aMC05XXs4fSkvO1xuXG4vLyBGb3JtYXQgb2YgYC8vLi9waXBlL0FOWVRISU5HYCwgd2l0aCBmb3J3YXJkIHNsYXNoZXMgYW5kIGJhY2t3YXJkIHNsYXNoZXMgYmVpbmcgaW50ZXJjaGFuZ2VhYmxlXG52YXIgV0lORE9XU19QSVBFX1JFR0VYID0gL15bL1xcXFxdWy9cXFxcXVxcLlsvXFxcXF1waXBlWy9cXFxcXS4rLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzb2NrUGF0aCwga2V5LCBrZXlUeXBlLCBkYXRhLCBjYikge1xuICB2YXIgc29jaztcbiAgdmFyIGVycm9yO1xuICB2YXIgc2lnO1xuICB2YXIgZGF0YWxlbjtcbiAgdmFyIGtleWxlbiA9IDA7XG4gIHZhciBpc1NpZ25pbmcgPSBCdWZmZXIuaXNCdWZmZXIoa2V5KTtcbiAgdmFyIHR5cGU7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBzaWdsZW4gPSAwO1xuICB2YXIgbmtleXMgPSAwO1xuICB2YXIga2V5cztcbiAgdmFyIGNvbWxlbiA9IDA7XG4gIHZhciBjb21tZW50ID0gZmFsc2U7XG4gIHZhciBhY2NlcHQ7XG4gIHZhciByZWplY3Q7XG5cbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGtleVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBhZ2VudCBmb3J3YXJkaW5nXG4gICAgYWNjZXB0ID0ga2V5O1xuICAgIHJlamVjdCA9IGtleVR5cGU7XG4gIH0gZWxzZSBpZiAoaXNTaWduaW5nKSB7XG4gICAga2V5bGVuID0ga2V5Lmxlbmd0aDtcbiAgICBkYXRhbGVuID0gZGF0YS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgY2IgPSBrZXk7XG4gICAga2V5ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gb25jb25uZWN0KCkge1xuICAgIHZhciBidWY7XG4gICAgaWYgKGlzU2lnbmluZykge1xuICAgICAgLypcbiAgICAgICAgYnl0ZSAgICAgICAgU1NIMl9BR0VOVENfU0lHTl9SRVFVRVNUXG4gICAgICAgIHN0cmluZyAgICAgIGtleV9ibG9iXG4gICAgICAgIHN0cmluZyAgICAgIGRhdGFcbiAgICAgICAgdWludDMyICAgICAgZmxhZ3NcbiAgICAgICovXG4gICAgICB2YXIgcCA9IDk7XG4gICAgICBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNCArIDEgKyA0ICsga2V5bGVuICsgNCArIGRhdGFsZW4gKyA0KTtcbiAgICAgIHdyaXRlVUludDMyQkUoYnVmLCBidWYubGVuZ3RoIC0gNCwgMCk7XG4gICAgICBidWZbNF0gPSBTSUdOX1JFUVVFU1Q7XG4gICAgICB3cml0ZVVJbnQzMkJFKGJ1Ziwga2V5bGVuLCA1KTtcbiAgICAgIGtleS5jb3B5KGJ1ZiwgcCk7XG4gICAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgZGF0YWxlbiwgcCArPSBrZXlsZW4pO1xuICAgICAgZGF0YS5jb3B5KGJ1ZiwgcCArPSA0KTtcbiAgICAgIHdyaXRlVUludDMyQkUoYnVmLCAwLCBwICs9IGRhdGFsZW4pO1xuICAgICAgc29jay53cml0ZShidWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKlxuICAgICAgICBieXRlICAgICAgICBTU0gyX0FHRU5UQ19SRVFVRVNUX0lERU5USVRJRVNcbiAgICAgICovXG4gICAgICBzb2NrLndyaXRlKEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxLCBSRVFVRVNUX0lERU5USVRJRVNdKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBza2lwIG92ZXIgcGFja2V0IGxlbmd0aFxuICAgICAgICBpZiAoKytjb3VudCA9PT0gNSkge1xuICAgICAgICAgIHR5cGUgPSBjaHVua1tpXTtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU0lHTl9SRVNQT05TRSkge1xuICAgICAgICAvKlxuICAgICAgICAgIGJ5dGUgICAgICAgIFNTSDJfQUdFTlRfU0lHTl9SRVNQT05TRVxuICAgICAgICAgIHN0cmluZyAgICAgIHNpZ25hdHVyZV9ibG9iXG4gICAgICAgICovXG4gICAgICAgIGlmICghc2lnKSB7XG4gICAgICAgICAgc2lnbGVuIDw8PSA4O1xuICAgICAgICAgIHNpZ2xlbiArPSBjaHVua1tpXTtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gNCkge1xuICAgICAgICAgICAgc2lnID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpZ2xlbik7XG4gICAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpZ1tjb3VudF0gPSBjaHVua1tpXTtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gc2lnbGVuKSB7XG4gICAgICAgICAgICBzb2NrLnJlbW92ZUFsbExpc3RlbmVycygnZGF0YScpO1xuICAgICAgICAgICAgcmV0dXJuIHNvY2suZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJREVOVElUSUVTX0FOU1dFUikge1xuICAgICAgICAvKlxuICAgICAgICAgIGJ5dGUgICAgICAgIFNTSDJfQUdFTlRfSURFTlRJVElFU19BTlNXRVJcbiAgICAgICAgICB1aW50MzIgICAgICBudW1fa2V5c1xuXG4gICAgICAgIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBjb25zZWN1dGl2ZSBrZXlzLCBlbmNvZGVkIGFzOlxuXG4gICAgICAgICAgc3RyaW5nICAgICAgcHVibGljIGtleSBibG9iXG4gICAgICAgICAgc3RyaW5nICAgICAgcHVibGljIGtleSBjb21tZW50XG4gICAgICAgICovXG4gICAgICAgIGlmIChrZXlzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBua2V5cyA8PD0gODtcbiAgICAgICAgICBua2V5cyArPSBjaHVua1tpXTtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gNCkge1xuICAgICAgICAgICAga2V5cyA9IG5ldyBBcnJheShua2V5cyk7XG4gICAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgICAgICBpZiAobmtleXMgPT09IDApIHtcbiAgICAgICAgICAgICAgc29jay5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2RhdGEnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNvY2suZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAga2V5bGVuIDw8PSA4O1xuICAgICAgICAgICAga2V5bGVuICs9IGNodW5rW2ldO1xuICAgICAgICAgICAgaWYgKCsrY291bnQgPT09IDQpIHtcbiAgICAgICAgICAgICAga2V5ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGtleWxlbik7XG4gICAgICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBrZXlbY291bnRdID0gY2h1bmtbaV07XG4gICAgICAgICAgICBpZiAoKytjb3VudCA9PT0ga2V5bGVuKSB7XG4gICAgICAgICAgICAgIGtleXNbbmtleXMgLSAxXSA9IGtleTtcbiAgICAgICAgICAgICAga2V5bGVuID0gMDtcbiAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgICBjb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKC0tbmtleXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc29jay5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2RhdGEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc29jay5kZXN0cm95KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1lbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbWxlbiA8PD0gODtcbiAgICAgICAgICAgIGNvbWxlbiArPSBjaHVua1tpXTtcbiAgICAgICAgICAgIGlmICgrK2NvdW50ID09PSA0KSB7XG4gICAgICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgaWYgKGNvbWxlbiA+IDApXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGNvbWxlbjtcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb21sZW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBza2lwIGNvbW1lbnRzXG4gICAgICAgICAgICBpZiAoKytjb3VudCA9PT0gY29tbWVudCkge1xuICAgICAgICAgICAgICBjb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgICAgICAga2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBGQUlMVVJFKSB7XG4gICAgICAgIGlmIChpc1NpZ25pbmcpXG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0FnZW50IHVuYWJsZSB0byBzaWduIGRhdGEnKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdVbmFibGUgdG8gcmV0cmlldmUgbGlzdCBvZiBrZXlzIGZyb20gYWdlbnQnKTtcbiAgICAgICAgc29jay5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2RhdGEnKTtcbiAgICAgICAgcmV0dXJuIHNvY2suZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGVycm9yID0gZXJyO1xuICB9XG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGVycm9yKVxuICAgICAgY2IoZXJyb3IpO1xuICAgIGVsc2UgaWYgKChpc1NpZ25pbmcgJiYgIXNpZykgfHwgKCFpc1NpZ25pbmcgJiYgIWtleXMpKVxuICAgICAgY2IobmV3IEVycm9yKCdVbmV4cGVjdGVkIGRpc2Nvbm5lY3Rpb24gZnJvbSBhZ2VudCcpKTtcbiAgICBlbHNlIGlmIChpc1NpZ25pbmcgJiYgc2lnKVxuICAgICAgY2IodW5kZWZpbmVkLCBzaWcpO1xuICAgIGVsc2UgaWYgKCFpc1NpZ25pbmcgJiYga2V5cylcbiAgICAgIGNiKHVuZGVmaW5lZCwga2V5cyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyAmJiAhV0lORE9XU19QSVBFX1JFR0VYLnRlc3Qoc29ja1BhdGgpKSB7XG4gICAgaWYgKHNvY2tQYXRoID09PSAncGFnZWFudCcpIHtcbiAgICAgIC8vIFBhZ2VhbnQgKFB1VFRZIGF1dGhlbnRpY2F0aW9uIGFnZW50KVxuICAgICAgc29jayA9IG5ldyBQYWdlYW50U29jaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjeWd3aW4gc3NoLWFnZW50IGluc3RhbmNlXG4gICAgICB2YXIgdHJpZWRDeWdwYXRoID0gZmFsc2U7XG4gICAgICBmcy5yZWFkRmlsZShzb2NrUGF0aCwgZnVuY3Rpb24gcmVhZEN5Z3NvY2tldChlcnIsIGRhdGEpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGlmICh0cmllZEN5Z3BhdGgpXG4gICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCdJbnZhbGlkIGN5Z3dpbiB1bml4IHNvY2tldCBwYXRoJykpO1xuICAgICAgICAgIC8vIHRyeSB1c2luZyBgY3lncGF0aGAgdG8gY29udmVydCBhIHBvc3NpYmxlICpuaXgtc3R5bGUgcGF0aCB0byB0aGVcbiAgICAgICAgICAvLyByZWFsIFdpbmRvd3MgcGF0aCBiZWZvcmUgZ2l2aW5nIHVwIC4uLlxuICAgICAgICAgIGNwLmV4ZWMoJ2N5Z3BhdGggLXcgXCInICsgc29ja1BhdGggKyAnXCInLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyLCBzdGRvdXQsIHN0ZGVycikge1xuICAgICAgICAgICAgaWYgKGVyciB8fCBzdGRvdXQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCdJbnZhbGlkIGN5Z3dpbiB1bml4IHNvY2tldCBwYXRoJykpO1xuICAgICAgICAgICAgdHJpZWRDeWdwYXRoID0gdHJ1ZTtcbiAgICAgICAgICAgIHNvY2tQYXRoID0gc3Rkb3V0LnRvU3RyaW5nKCkucmVwbGFjZSgvW1xcclxcbl0vZywgJycpO1xuICAgICAgICAgICAgZnMucmVhZEZpbGUoc29ja1BhdGgsIHJlYWRDeWdzb2NrZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtO1xuICAgICAgICBpZiAobSA9IFJFX0NZR1dJTl9TT0NLLmV4ZWMoZGF0YS50b1N0cmluZygnYXNjaWknKSkpIHtcbiAgICAgICAgICB2YXIgcG9ydDtcbiAgICAgICAgICB2YXIgc2VjcmV0O1xuICAgICAgICAgIHZhciBzZWNyZXRidWY7XG4gICAgICAgICAgdmFyIHN0YXRlO1xuICAgICAgICAgIHZhciBiYyA9IDA7XG4gICAgICAgICAgdmFyIGlzUmV0cnlpbmcgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgaW5idWYgPSBbXTtcbiAgICAgICAgICB2YXIgY3JlZHNidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTIpO1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIHZhciBqO1xuXG4gICAgICAgICAgLy8gdXNlIDAgZm9yIHBpZCwgdWlkLCBhbmQgZ2lkIHRvIGVuc3VyZSB3ZSBnZXQgYW4gZXJyb3IgYW5kIGFsc29cbiAgICAgICAgICAvLyBhIHZhbGlkIHVpZCBhbmQgZ2lkIGZyb20gY3lnd2luIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBmaWd1cmUgaXRcbiAgICAgICAgICAvLyBvdXQgb3Vyc2VsdmVzXG4gICAgICAgICAgY3JlZHNidWYuZmlsbCgwKTtcblxuICAgICAgICAgIC8vIHBhcnNlIGN5Z3dpbiB1bml4IHNvY2tldCBmaWxlIGNvbnRlbnRzXG4gICAgICAgICAgcG9ydCA9IHBhcnNlSW50KG1bMV0sIDEwKTtcbiAgICAgICAgICBzZWNyZXQgPSBtWzJdLnJlcGxhY2UoL1xcLS9nLCAnJyk7XG4gICAgICAgICAgc2VjcmV0YnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaiA8IDMyOyArK2ksais9MilcbiAgICAgICAgICAgIHNlY3JldGJ1ZltpXSA9IHBhcnNlSW50KHNlY3JldC5zdWJzdHJpbmcoaiwgaiArIDIpLCAxNik7XG5cbiAgICAgICAgICAvLyBjb252ZXJ0IHRvIGhvc3Qgb3JkZXIgKGFsd2F5cyBMRSBmb3IgV2luZG93cylcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gNClcbiAgICAgICAgICAgIHdyaXRlVUludDMyTEUoc2VjcmV0YnVmLCByZWFkVUludDMyQkUoc2VjcmV0YnVmLCBpKSwgaSk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBfb25jb25uZWN0KCkge1xuICAgICAgICAgICAgYmMgPSAwO1xuICAgICAgICAgICAgc3RhdGUgPSAnc2VjcmV0JztcbiAgICAgICAgICAgIHNvY2sud3JpdGUoc2VjcmV0YnVmKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gX29uZGF0YShkYXRhKSB7XG4gICAgICAgICAgICBiYyArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgICAgICAgLy8gdGhlIHNlY3JldCB3ZSBzZW50IGlzIGVjaG9lZCBiYWNrIHRvIHVzIGJ5IGN5Z3dpbiwgbm90IHN1cmUgb2ZcbiAgICAgICAgICAgICAgLy8gdGhlIHJlYXNvbiBmb3IgdGhhdCwgYnV0IHdlIGlnbm9yZSBpdCBub25ldGhlbGVzcyAuLi5cbiAgICAgICAgICAgICAgaWYgKGJjID09PSAxNikge1xuICAgICAgICAgICAgICAgIGJjID0gMDtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdjcmVkcyc7XG4gICAgICAgICAgICAgICAgc29jay53cml0ZShjcmVkc2J1Zik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdjcmVkcycpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgZmlyc3QgYXR0ZW1wdCwgbWFrZSBzdXJlIHRvIGdhdGhlciB0aGUgdmFsaWRcbiAgICAgICAgICAgICAgLy8gdWlkIGFuZCBnaWQgZm9yIG91ciBuZXh0IGF0dGVtcHRcbiAgICAgICAgICAgICAgaWYgKCFpc1JldHJ5aW5nKVxuICAgICAgICAgICAgICAgIGluYnVmLnB1c2goZGF0YSk7XG5cbiAgICAgICAgICAgICAgaWYgKGJjID09PSAxMikge1xuICAgICAgICAgICAgICAgIHNvY2sucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBfb25jb25uZWN0KTtcbiAgICAgICAgICAgICAgICBzb2NrLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgX29uZGF0YSk7XG4gICAgICAgICAgICAgICAgc29jay5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBfb25jbG9zZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmV0cnlpbmcpIHtcbiAgICAgICAgICAgICAgICAgIGFkZFNvY2tMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgIHNvY2suZW1pdCgnY29ubmVjdCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpc1JldHJ5aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNyZWRzYnVmID0gQnVmZmVyLmNvbmNhdChpbmJ1Zik7XG4gICAgICAgICAgICAgICAgICB3cml0ZVVJbnQzMkxFKGNyZWRzYnVmLCBwcm9jZXNzLnBpZCwgMCk7XG4gICAgICAgICAgICAgICAgICBzb2NrLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgIHRyeUNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gX29uY2xvc2UoKSB7XG4gICAgICAgICAgICBjYihuZXcgRXJyb3IoJ1Byb2JsZW0gbmVnb3RpYXRpbmcgY3lnd2luIHVuaXggc29ja2V0IHNlY3VyaXR5JykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB0cnlDb25uZWN0KCkge1xuICAgICAgICAgICAgc29jayA9IG5ldyBTb2NrZXQoKTtcbiAgICAgICAgICAgIHNvY2sub25jZSgnY29ubmVjdCcsIF9vbmNvbm5lY3QpO1xuICAgICAgICAgICAgc29jay5vbignZGF0YScsIF9vbmRhdGEpO1xuICAgICAgICAgICAgc29jay5vbmNlKCdjbG9zZScsIF9vbmNsb3NlKTtcbiAgICAgICAgICAgIHNvY2suY29ubmVjdChwb3J0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5Q29ubmVjdCgpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICBjYihuZXcgRXJyb3IoJ01hbGZvcm1lZCBjeWd3aW4gdW5peCBzb2NrZXQgZmlsZScpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgc29jayA9IG5ldyBTb2NrZXQoKTtcblxuICBmdW5jdGlvbiBhZGRTb2NrTGlzdGVuZXJzKCkge1xuICAgIGlmICghYWNjZXB0ICYmICFyZWplY3QpIHtcbiAgICAgIHNvY2sub25jZSgnY29ubmVjdCcsIG9uY29ubmVjdCk7XG4gICAgICBzb2NrLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgICAgIHNvY2sub25jZSgnZXJyb3InLCBvbmVycm9yKTtcbiAgICAgIHNvY2sub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoYW47XG4gICAgICBzb2NrLm9uY2UoJ2Nvbm5lY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2hhbiA9IGFjY2VwdCgpO1xuICAgICAgICB2YXIgaXNEb25lID0gZmFsc2U7XG4gICAgICAgIGZ1bmN0aW9uIG9uRG9uZSgpIHtcbiAgICAgICAgICBpZiAoaXNEb25lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIHNvY2suZGVzdHJveSgpO1xuICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hhbi5vbmNlKCdlbmQnLCBvbkRvbmUpXG4gICAgICAgICAgICAub25jZSgnY2xvc2UnLCBvbkRvbmUpXG4gICAgICAgICAgICAub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgc29jay53cml0ZShkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvY2sub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgY2hhbi53cml0ZShkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNvY2sub25jZSgnY2xvc2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFjaGFuKVxuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFkZFNvY2tMaXN0ZW5lcnMoKTtcbiAgc29jay5jb25uZWN0KHNvY2tQYXRoKTtcbn07XG5cblxuLy8gd2luMzIgb25seSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gIHZhciBSRVRfRVJSX0JBREFSR1MgPSAxMDtcbiAgdmFyIFJFVF9FUlJfVU5BVkFJTEFCTEUgPSAxMTtcbiAgdmFyIFJFVF9FUlJfTk9NQVAgPSAxMjtcbiAgdmFyIFJFVF9FUlJfQklOU1RESU4gPSAxMztcbiAgdmFyIFJFVF9FUlJfQklOU1RET1VUID0gMTQ7XG4gIHZhciBSRVRfRVJSX0JBRExFTiA9IDE1O1xuXG4gIHZhciBFUlJPUiA9IHt9O1xuICB2YXIgRVhFUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICd1dGlsL3BhZ2VudC5leGUnKTtcbiAgRVJST1JbUkVUX0VSUl9CQURBUkdTXSA9IG5ldyBFcnJvcignSW52YWxpZCBwYWdlbnQuZXhlIGFyZ3VtZW50cycpO1xuICBFUlJPUltSRVRfRVJSX1VOQVZBSUxBQkxFXSA9IG5ldyBFcnJvcignUGFnZWFudCBpcyBub3QgcnVubmluZycpO1xuICBFUlJPUltSRVRfRVJSX05PTUFQXSA9IG5ldyBFcnJvcigncGFnZW50LmV4ZSBjb3VsZCBub3QgY3JlYXRlIGFuIG1tYXAnKTtcbiAgRVJST1JbUkVUX0VSUl9CSU5TVERJTl0gPSBuZXcgRXJyb3IoJ3BhZ2VudC5leGUgY291bGQgbm90IHNldCBtb2RlIGZvciBzdGRpbicpO1xuICBFUlJPUltSRVRfRVJSX0JJTlNURE9VVF0gPSBuZXcgRXJyb3IoJ3BhZ2VudC5leGUgY291bGQgbm90IHNldCBtb2RlIGZvciBzdGRvdXQnKTtcbiAgRVJST1JbUkVUX0VSUl9CQURMRU5dID0gbmV3IEVycm9yKCdwYWdlbnQuZXhlIGRpZCBub3QgZ2V0IGV4cGVjdGVkIGlucHV0IHBheWxvYWQnKTtcblxuICBmdW5jdGlvbiBQYWdlYW50U29jaygpIHtcbiAgICB0aGlzLnByb2MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICB9XG4gIGluaGVyaXRzKFBhZ2VhbnRTb2NrLCBFdmVudEVtaXR0ZXIpO1xuXG4gIFBhZ2VhbnRTb2NrLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIGlmICh0aGlzLmJ1ZmZlciA9PT0gbnVsbClcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmO1xuICAgIGVsc2Uge1xuICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmJ1ZmZlciwgYnVmXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5sZW5ndGggKyBidWYubGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gV2FpdCBmb3IgYXQgbGVhc3QgYWxsIGxlbmd0aCBieXRlc1xuICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPCA0KVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIGxlbiA9IHJlYWRVSW50MzJCRSh0aGlzLmJ1ZmZlciwgMCk7XG4gICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBmdWxsIG1lc3NhZ2UgYmVmb3JlIHF1ZXJ5aW5nIHBhZ2VhbnRcbiAgICBpZiAoKHRoaXMuYnVmZmVyLmxlbmd0aCAtIDQpIDwgbGVuKVxuICAgICAgcmV0dXJuO1xuXG4gICAgYnVmID0gdGhpcy5idWZmZXIuc2xpY2UoMCwgNCArIGxlbik7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+ICg0ICsgbGVuKSlcbiAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc2xpY2UoNCArIGxlbik7XG4gICAgZWxzZVxuICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9jO1xuICAgIHZhciBoYWRFcnJvciA9IGZhbHNlO1xuICAgIHByb2MgPSB0aGlzLnByb2MgPSBjcC5zcGF3bihFWEVQQVRILCBbIGJ1Zi5sZW5ndGggXSk7XG4gICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBzZWxmLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgICB9KTtcbiAgICBwcm9jLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoIWhhZEVycm9yKSB7XG4gICAgICAgIGhhZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJvYy5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUpIHtcbiAgICAgIHNlbGYucHJvYyA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChFUlJPUltjb2RlXSAmJiAhaGFkRXJyb3IpIHtcbiAgICAgICAgaGFkRXJyb3IgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgRVJST1JbY29kZV0pO1xuICAgICAgfVxuICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGhhZEVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9jLnN0ZGluLmVuZChidWYpO1xuICB9O1xuICBQYWdlYW50U29jay5wcm90b3R5cGUuZW5kID0gUGFnZWFudFNvY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgaWYgKHRoaXMucHJvYykge1xuICAgICAgdGhpcy5wcm9jLmtpbGwoKTtcbiAgICAgIHRoaXMucHJvYyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG4gIFBhZ2VhbnRTb2NrLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbWl0KCdjb25uZWN0Jyk7XG4gIH07XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpOyIsIi8vIFRoaXMgd3JhcHBlciBjbGFzcyBpcyB1c2VkIHRvIHJldGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoXG4vLyBwcmUtdjAuNCBzc2gyLiBJZiBpdCB3ZXJlbid0IGZvciBgcmVhZCgpYCBhbmQgYHdyaXRlKClgIGJlaW5nIHVzZWQgYnkgdGhlXG4vLyBzdHJlYW1zMi8zIEFQSSwgd2UgY291bGQganVzdCBwYXNzIHRoZSBTRlRQU3RyZWFtIGRpcmVjdGx5IHRvIHRoZSBlbmQgdXNlci4uLlxuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5mdW5jdGlvbiBTRlRQV3JhcHBlcihzdHJlYW0pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcblxuICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gIH0pLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2VuZCcpO1xuICB9KS5vbignY2xvc2UnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pLm9uKCdjb250aW51ZScsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnY29udGludWUnKTtcbiAgfSk7XG59XG5pbmhlcml0cyhTRlRQV3JhcHBlciwgRXZlbnRFbWl0dGVyKTtcblxuLy8gc3RyZWFtLXJlbGF0ZWQgbWV0aG9kcyB0byBwYXNzIG9uXG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uZW5kKCk7XG59O1xuLy8gU0ZUUFN0cmVhbSBjbGllbnQgbWV0aG9kc1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLmNyZWF0ZVJlYWRTdHJlYW0gPSBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uY3JlYXRlUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuY3JlYXRlV3JpdGVTdHJlYW0gPSBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uY3JlYXRlV3JpdGVTdHJlYW0ocGF0aCwgb3B0aW9ucyk7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihwYXRoLCBmbGFncywgYXR0cnMsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0ub3BlbihwYXRoLCBmbGFncywgYXR0cnMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbihoYW5kbGUsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uY2xvc2UoaGFuZGxlLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihoYW5kbGUsIGJ1Ziwgb2ZmLCBsZW4sIHBvc2l0aW9uLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnJlYWREYXRhKGhhbmRsZSwgYnVmLCBvZmYsIGxlbiwgcG9zaXRpb24sIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihoYW5kbGUsIGJ1Ziwgb2ZmLCBsZW4sIHBvc2l0aW9uLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLndyaXRlRGF0YShoYW5kbGUsIGJ1Ziwgb2ZmLCBsZW4sIHBvc2l0aW9uLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLmZhc3RHZXQgPSBmdW5jdGlvbihyZW1vdGVQYXRoLCBsb2NhbFBhdGgsIG9wdHMsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uZmFzdEdldChyZW1vdGVQYXRoLCBsb2NhbFBhdGgsIG9wdHMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZmFzdFB1dCA9IGZ1bmN0aW9uKGxvY2FsUGF0aCwgcmVtb3RlUGF0aCwgb3B0cywgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5mYXN0UHV0KGxvY2FsUGF0aCwgcmVtb3RlUGF0aCwgb3B0cywgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5yZWFkRmlsZSA9IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrXykge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnJlYWRGaWxlKHBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrXyk7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLndyaXRlRmlsZSA9IGZ1bmN0aW9uKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrXykge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLndyaXRlRmlsZShwYXRoLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFja18pO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5hcHBlbmRGaWxlID0gZnVuY3Rpb24ocGF0aCwgZGF0YSwgb3B0aW9ucywgY2FsbGJhY2tfKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uYXBwZW5kRmlsZShwYXRoLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFja18pO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5leGlzdHMgPSBmdW5jdGlvbihwYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmV4aXN0cyhwYXRoLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uKGZpbGVuYW1lLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnVubGluayhmaWxlbmFtZSwgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5yZW5hbWUgPSBmdW5jdGlvbihvbGRQYXRoLCBuZXdQYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnJlbmFtZShvbGRQYXRoLCBuZXdQYXRoLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLm1rZGlyID0gZnVuY3Rpb24ocGF0aCwgYXR0cnMsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0ubWtkaXIocGF0aCwgYXR0cnMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUucm1kaXIgPSBmdW5jdGlvbihwYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnJtZGlyKHBhdGgsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUucmVhZGRpciA9IGZ1bmN0aW9uKHdoZXJlLCBvcHRzLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnJlYWRkaXIod2hlcmUsIG9wdHMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZnN0YXQgPSBmdW5jdGlvbihoYW5kbGUsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uZnN0YXQoaGFuZGxlLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnN0YXQgPSBmdW5jdGlvbihwYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnN0YXQocGF0aCwgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5sc3RhdCA9IGZ1bmN0aW9uKHBhdGgsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0ubHN0YXQocGF0aCwgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5vcGVuZGlyID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5vcGVuZGlyKHBhdGgsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuc2V0c3RhdCA9IGZ1bmN0aW9uKHBhdGgsIGF0dHJzLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnNldHN0YXQocGF0aCwgYXR0cnMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZnNldHN0YXQgPSBmdW5jdGlvbihoYW5kbGUsIGF0dHJzLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmZzZXRzdGF0KGhhbmRsZSwgYXR0cnMsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZnV0aW1lcyA9IGZ1bmN0aW9uKGhhbmRsZSwgYXRpbWUsIG10aW1lLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmZ1dGltZXMoaGFuZGxlLCBhdGltZSwgbXRpbWUsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUudXRpbWVzID0gZnVuY3Rpb24ocGF0aCwgYXRpbWUsIG10aW1lLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLnV0aW1lcyhwYXRoLCBhdGltZSwgbXRpbWUsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZmNob3duID0gZnVuY3Rpb24oaGFuZGxlLCB1aWQsIGdpZCwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5mY2hvd24oaGFuZGxlLCB1aWQsIGdpZCwgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5jaG93biA9IGZ1bmN0aW9uKHBhdGgsIHVpZCwgZ2lkLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLmZjaG1vZCA9IGZ1bmN0aW9uKGhhbmRsZSwgbW9kZSwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5mY2htb2QoaGFuZGxlLCBtb2RlLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLmNobW9kID0gZnVuY3Rpb24ocGF0aCwgbW9kZSwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5jaG1vZChwYXRoLCBtb2RlLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnJlYWRsaW5rID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5yZWFkbGluayhwYXRoLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnN5bWxpbmsgPSBmdW5jdGlvbih0YXJnZXRQYXRoLCBsaW5rUGF0aCwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5zeW1saW5rKHRhcmdldFBhdGgsIGxpbmtQYXRoLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLnJlYWxwYXRoID0gZnVuY3Rpb24ocGF0aCwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5yZWFscGF0aChwYXRoLCBjYik7XG59O1xuLy8gZXh0ZW5kZWQgcmVxdWVzdHNcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5leHRfb3BlbnNzaF9yZW5hbWUgPSBmdW5jdGlvbihvbGRQYXRoLCBuZXdQYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmV4dF9vcGVuc3NoX3JlbmFtZShvbGRQYXRoLCBuZXdQYXRoLCBjYik7XG59O1xuU0ZUUFdyYXBwZXIucHJvdG90eXBlLmV4dF9vcGVuc3NoX3N0YXR2ZnMgPSBmdW5jdGlvbihwYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmV4dF9vcGVuc3NoX3N0YXR2ZnMocGF0aCwgY2IpO1xufTtcblNGVFBXcmFwcGVyLnByb3RvdHlwZS5leHRfb3BlbnNzaF9mc3RhdHZmcyA9IGZ1bmN0aW9uKGhhbmRsZSwgY2IpIHtcbiAgcmV0dXJuIHRoaXMuX3N0cmVhbS5leHRfb3BlbnNzaF9mc3RhdHZmcyhoYW5kbGUsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZXh0X29wZW5zc2hfaGFyZGxpbmsgPSBmdW5jdGlvbihvbGRQYXRoLCBuZXdQYXRoLCBjYikge1xuICByZXR1cm4gdGhpcy5fc3RyZWFtLmV4dF9vcGVuc3NoX2hhcmRsaW5rKG9sZFBhdGgsIG5ld1BhdGgsIGNiKTtcbn07XG5TRlRQV3JhcHBlci5wcm90b3R5cGUuZXh0X29wZW5zc2hfZnN5bmMgPSBmdW5jdGlvbihoYW5kbGUsIGNiKSB7XG4gIHJldHVybiB0aGlzLl9zdHJlYW0uZXh0X29wZW5zc2hfZnN5bmMoaGFuZGxlLCBjYik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNGVFBXcmFwcGVyO1xuIiwidmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBsaXN0ZW5lckNvdW50ID0gRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQ7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG5cbnZhciBzc2gyX3N0cmVhbXMgPSByZXF1aXJlKCdzc2gyLXN0cmVhbXMnKTtcbnZhciBwYXJzZUtleSA9IHNzaDJfc3RyZWFtcy51dGlscy5wYXJzZUtleTtcbnZhciBTU0gyU3RyZWFtID0gc3NoMl9zdHJlYW1zLlNTSDJTdHJlYW07XG52YXIgU0ZUUFN0cmVhbSA9IHNzaDJfc3RyZWFtcy5TRlRQU3RyZWFtO1xudmFyIGNvbnN0cyA9IHNzaDJfc3RyZWFtcy5jb25zdGFudHM7XG52YXIgRElTQ09OTkVDVF9SRUFTT04gPSBjb25zdHMuRElTQ09OTkVDVF9SRUFTT047XG52YXIgQ0hBTk5FTF9PUEVOX0ZBSUxVUkUgPSBjb25zdHMuQ0hBTk5FTF9PUEVOX0ZBSUxVUkU7XG52YXIgQUxHT1JJVEhNUyA9IGNvbnN0cy5BTEdPUklUSE1TO1xuXG52YXIgQ2hhbm5lbCA9IHJlcXVpcmUoJy4vQ2hhbm5lbCcpO1xudmFyIEtlZXBhbGl2ZU1hbmFnZXIgPSByZXF1aXJlKCcuL2tlZXBhbGl2ZW1ncicpO1xudmFyIHdyaXRlVUludDMyQkUgPSByZXF1aXJlKCcuL2J1ZmZlci1oZWxwZXJzJykud3JpdGVVSW50MzJCRTtcblxudmFyIE1BWF9DSEFOTkVMID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbnZhciBNQVhfUEVORElOR19BVVRIUyA9IDEwO1xuXG52YXIga2FNZ3I7XG5cbmZ1bmN0aW9uIFNlcnZlcihjZmcsIGxpc3RlbmVyKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXJ2ZXIpKVxuICAgIHJldHVybiBuZXcgU2VydmVyKGNmZywgbGlzdGVuZXIpO1xuXG4gIHZhciBob3N0S2V5cyA9IHtcbiAgICAnc3NoLXJzYSc6IG51bGwsXG4gICAgJ3NzaC1kc3MnOiBudWxsLFxuICAgICdzc2gtZWQyNTUxOSc6IG51bGwsXG4gICAgJ2VjZHNhLXNoYTItbmlzdHAyNTYnOiBudWxsLFxuICAgICdlY2RzYS1zaGEyLW5pc3RwMzg0JzogbnVsbCxcbiAgICAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6IG51bGxcbiAgfTtcblxuICB2YXIgaG9zdEtleXNfID0gY2ZnLmhvc3RLZXlzO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoaG9zdEtleXNfKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2hvc3RLZXlzIG11c3QgYmUgYW4gYXJyYXknKTtcblxuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IGhvc3RLZXlzXy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBwcml2YXRlS2V5O1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaG9zdEtleXNfW2ldKSB8fCB0eXBlb2YgaG9zdEtleXNfW2ldID09PSAnc3RyaW5nJylcbiAgICAgIHByaXZhdGVLZXkgPSBwYXJzZUtleShob3N0S2V5c19baV0pO1xuICAgIGVsc2VcbiAgICAgIHByaXZhdGVLZXkgPSBwYXJzZUtleShob3N0S2V5c19baV0ua2V5LCBob3N0S2V5c19baV0ucGFzc3BocmFzZSk7XG4gICAgaWYgKHByaXZhdGVLZXkgaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHBhcnNlIHByaXZhdGVLZXk6ICcgKyBwcml2YXRlS2V5Lm1lc3NhZ2UpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByaXZhdGVLZXkpKVxuICAgICAgcHJpdmF0ZUtleSA9IHByaXZhdGVLZXlbMF07IC8vIE9wZW5TU0gncyBuZXdlciBmb3JtYXQgb25seSBzdG9yZXMgMSBrZXkgZm9yIG5vd1xuICAgIGlmIChwcml2YXRlS2V5LmdldFByaXZhdGVQRU0oKSA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJpdmF0ZUtleSB2YWx1ZSBjb250YWlucyBhbiBpbnZhbGlkIHByaXZhdGUga2V5Jyk7XG4gICAgaWYgKGhvc3RLZXlzW3ByaXZhdGVLZXkudHlwZV0pXG4gICAgICBjb250aW51ZTtcbiAgICBob3N0S2V5c1twcml2YXRlS2V5LnR5cGVdID0gcHJpdmF0ZUtleTtcbiAgfVxuXG4gIHZhciBhbGdvcml0aG1zID0ge1xuICAgIGtleDogdW5kZWZpbmVkLFxuICAgIGtleEJ1ZjogdW5kZWZpbmVkLFxuICAgIGNpcGhlcjogdW5kZWZpbmVkLFxuICAgIGNpcGhlckJ1ZjogdW5kZWZpbmVkLFxuICAgIHNlcnZlckhvc3RLZXk6IHVuZGVmaW5lZCxcbiAgICBzZXJ2ZXJIb3N0S2V5QnVmOiB1bmRlZmluZWQsXG4gICAgaG1hYzogdW5kZWZpbmVkLFxuICAgIGhtYWNCdWY6IHVuZGVmaW5lZCxcbiAgICBjb21wcmVzczogdW5kZWZpbmVkLFxuICAgIGNvbXByZXNzQnVmOiB1bmRlZmluZWRcbiAgfTtcbiAgaWYgKHR5cGVvZiBjZmcuYWxnb3JpdGhtcyA9PT0gJ29iamVjdCcgJiYgY2ZnLmFsZ29yaXRobXMgIT09IG51bGwpIHtcbiAgICB2YXIgYWxnb3NTdXBwb3J0ZWQ7XG4gICAgdmFyIGFsZ29MaXN0O1xuXG4gICAgYWxnb0xpc3QgPSBjZmcuYWxnb3JpdGhtcy5rZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb0xpc3QpICYmIGFsZ29MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGFsZ29zU3VwcG9ydGVkID0gQUxHT1JJVEhNUy5TVVBQT1JURURfS0VYO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFsZ29MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhbGdvc1N1cHBvcnRlZC5pbmRleE9mKGFsZ29MaXN0W2ldKSA9PT0gLTEpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBrZXkgZXhjaGFuZ2UgYWxnb3JpdGhtOiAnICsgYWxnb0xpc3RbaV0pO1xuICAgICAgfVxuICAgICAgYWxnb3JpdGhtcy5rZXggPSBhbGdvTGlzdDtcbiAgICB9XG5cbiAgICBhbGdvTGlzdCA9IGNmZy5hbGdvcml0aG1zLmNpcGhlcjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhbGdvTGlzdCkgJiYgYWxnb0xpc3QubGVuZ3RoID4gMCkge1xuICAgICAgYWxnb3NTdXBwb3J0ZWQgPSBBTEdPUklUSE1TLlNVUFBPUlRFRF9DSVBIRVI7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYWxnb0xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFsZ29zU3VwcG9ydGVkLmluZGV4T2YoYWxnb0xpc3RbaV0pID09PSAtMSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGNpcGhlciBhbGdvcml0aG06ICcgKyBhbGdvTGlzdFtpXSk7XG4gICAgICB9XG4gICAgICBhbGdvcml0aG1zLmNpcGhlciA9IGFsZ29MaXN0O1xuICAgIH1cblxuICAgIGFsZ29MaXN0ID0gY2ZnLmFsZ29yaXRobXMuc2VydmVySG9zdEtleTtcbiAgICB2YXIgY29waWVkID0gZmFsc2U7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxnb0xpc3QpICYmIGFsZ29MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGFsZ29zU3VwcG9ydGVkID0gQUxHT1JJVEhNUy5TVVBQT1JURURfU0VSVkVSX0hPU1RfS0VZO1xuICAgICAgZm9yIChpID0gYWxnb0xpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKGFsZ29zU3VwcG9ydGVkLmluZGV4T2YoYWxnb0xpc3RbaV0pID09PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc2VydmVyIGhvc3Qga2V5IGFsZ29yaXRobTogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhbGdvTGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFob3N0S2V5c1thbGdvTGlzdFtpXV0pIHtcbiAgICAgICAgICAvLyBTaWxlbnRseSBkaXNjYXJkIGZvciBub3dcbiAgICAgICAgICBpZiAoIWNvcGllZCkge1xuICAgICAgICAgICAgYWxnb0xpc3QgPSBhbGdvTGlzdC5zbGljZSgpO1xuICAgICAgICAgICAgY29waWVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWxnb0xpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxnb0xpc3QubGVuZ3RoID4gMClcbiAgICAgICAgYWxnb3JpdGhtcy5zZXJ2ZXJIb3N0S2V5ID0gYWxnb0xpc3Q7XG4gICAgfVxuXG4gICAgYWxnb0xpc3QgPSBjZmcuYWxnb3JpdGhtcy5obWFjO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFsZ29MaXN0KSAmJiBhbGdvTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBhbGdvc1N1cHBvcnRlZCA9IEFMR09SSVRITVMuU1VQUE9SVEVEX0hNQUM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYWxnb0xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFsZ29zU3VwcG9ydGVkLmluZGV4T2YoYWxnb0xpc3RbaV0pID09PSAtMSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIEhNQUMgYWxnb3JpdGhtOiAnICsgYWxnb0xpc3RbaV0pO1xuICAgICAgfVxuICAgICAgYWxnb3JpdGhtcy5obWFjID0gYWxnb0xpc3Q7XG4gICAgfVxuXG4gICAgYWxnb0xpc3QgPSBjZmcuYWxnb3JpdGhtcy5jb21wcmVzcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhbGdvTGlzdCkgJiYgYWxnb0xpc3QubGVuZ3RoID4gMCkge1xuICAgICAgYWxnb3NTdXBwb3J0ZWQgPSBBTEdPUklUSE1TLlNVUFBPUlRFRF9DT01QUkVTUztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhbGdvTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYWxnb3NTdXBwb3J0ZWQuaW5kZXhPZihhbGdvTGlzdFtpXSkgPT09IC0xKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgY29tcHJlc3Npb24gYWxnb3JpdGhtOiAnICsgYWxnb0xpc3RbaV0pO1xuICAgICAgfVxuICAgICAgYWxnb3JpdGhtcy5jb21wcmVzcyA9IGFsZ29MaXN0O1xuICAgIH1cbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBhdCBsZWFzdCBoYXZlIHNvbWUga2luZCBvZiB2YWxpZCBsaXN0IG9mIHN1cHBvcnQga2V5XG4gIC8vIGZvcm1hdHNcbiAgaWYgKGFsZ29yaXRobXMuc2VydmVySG9zdEtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGhvc3RLZXlBbGdvcyA9IE9iamVjdC5rZXlzKGhvc3RLZXlzKTtcbiAgICBmb3IgKGkgPSBob3N0S2V5QWxnb3MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGlmICghaG9zdEtleXNbaG9zdEtleUFsZ29zW2ldXSlcbiAgICAgICAgaG9zdEtleUFsZ29zLnNwbGljZShpLCAxKTtcbiAgICB9XG4gICAgYWxnb3JpdGhtcy5zZXJ2ZXJIb3N0S2V5ID0gaG9zdEtleUFsZ29zO1xuICB9XG5cbiAgaWYgKCFrYU1nclxuICAgICAgJiYgU2VydmVyLktFRVBBTElWRV9JTlRFUlZBTCA+IDBcbiAgICAgICYmIFNlcnZlci5LRUVQQUxJVkVfQ0xJRU5UX0lOVEVSVkFMID4gMFxuICAgICAgJiYgU2VydmVyLktFRVBBTElWRV9DTElFTlRfQ09VTlRfTUFYID49IDApIHtcbiAgICBrYU1nciA9IG5ldyBLZWVwYWxpdmVNYW5hZ2VyKFNlcnZlci5LRUVQQUxJVkVfSU5URVJWQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXJ2ZXIuS0VFUEFMSVZFX0NMSUVOVF9JTlRFUlZBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZlci5LRUVQQUxJVkVfQ0xJRU5UX0NPVU5UX01BWCk7XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICBzZWxmLm9uKCdjb25uZWN0aW9uJywgbGlzdGVuZXIpO1xuXG4gIHZhciBzdHJlYW1jZmcgPSB7XG4gICAgYWxnb3JpdGhtczogYWxnb3JpdGhtcyxcbiAgICBob3N0S2V5czogaG9zdEtleXMsXG4gICAgc2VydmVyOiB0cnVlXG4gIH07XG4gIHZhciBrZXlzO1xuICB2YXIgbGVuO1xuICBmb3IgKGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMoY2ZnKSwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09ICdwcml2YXRlS2V5J1xuICAgICAgICB8fCBrZXkgPT09ICdwdWJsaWNLZXknXG4gICAgICAgIHx8IGtleSA9PT0gJ3Bhc3NwaHJhc2UnXG4gICAgICAgIHx8IGtleSA9PT0gJ2FsZ29yaXRobXMnXG4gICAgICAgIHx8IGtleSA9PT0gJ2hvc3RLZXlzJ1xuICAgICAgICB8fCBrZXkgPT09ICdzZXJ2ZXInKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc3RyZWFtY2ZnW2tleV0gPSBjZmdba2V5XTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtY2ZnLmRlYnVnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG9sZERlYnVnID0gc3RyZWFtY2ZnLmRlYnVnO1xuICAgIHZhciBjZmdLZXlzID0gT2JqZWN0LmtleXMoc3RyZWFtY2ZnKTtcbiAgfVxuXG4gIHRoaXMuX3NydiA9IG5ldyBuZXQuU2VydmVyKGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIGlmIChzZWxmLl9jb25uZWN0aW9ucyA+PSBzZWxmLm1heENvbm5lY3Rpb25zKSB7XG4gICAgICBzb2NrZXQuZGVzdHJveSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICArK3NlbGYuX2Nvbm5lY3Rpb25zO1xuICAgIHNvY2tldC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGhhZF9lcnIpIHtcbiAgICAgIC0tc2VsZi5fY29ubmVjdGlvbnM7XG5cbiAgICAgIC8vIHNpbmNlIGpveWVudC9ub2RlIzk5M2JiOTNlMGEsIHdlIGhhdmUgdG8gXCJyZWFkIHBhc3QgRU9GXCIgaW4gb3JkZXIgdG9cbiAgICAgIC8vIGdldCBhbiBgZW5kYCBldmVudCBvbiBzdHJlYW1zLiB0aGFua2Z1bGx5IGFkZGluZyB0aGlzIGRvZXMgbm90XG4gICAgICAvLyBuZWdhdGl2ZWx5IGFmZmVjdCBub2RlIHZlcnNpb25zIHByZS1qb3llbnQvbm9kZSM5OTNiYjkzZTBhLlxuICAgICAgc3Noc3RyZWFtLnJlYWQoKTtcbiAgICB9KS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIHNzaHN0cmVhbS5yZXNldCgpO1xuICAgICAgc3Noc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHZhciBjb25uY2ZnID0gc3RyZWFtY2ZnO1xuXG4gICAgLy8gcHJlcGVuZCBkZWJ1ZyBvdXRwdXQgd2l0aCBhIHVuaXF1ZSBpZGVudGlmaWVyIGluIGNhc2UgdGhlcmUgYXJlIG11bHRpcGxlXG4gICAgLy8gY2xpZW50cyBjb25uZWN0ZWQgYXQgdGhlIHNhbWUgdGltZVxuICAgIGlmIChvbGREZWJ1Zykge1xuICAgICAgY29ubmNmZyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleTsgaSA8IGNmZ0tleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAga2V5ID0gY2ZnS2V5c1tpXTtcbiAgICAgICAgY29ubmNmZ1trZXldID0gc3RyZWFtY2ZnW2tleV07XG4gICAgICB9XG4gICAgICB2YXIgZGVidWdQcmVmaXggPSAnWycgKyBwcm9jZXNzLmhydGltZSgpLmpvaW4oJy4nKSArICddICc7XG4gICAgICBjb25uY2ZnLmRlYnVnID0gZnVuY3Rpb24obXNnKSB7XG4gICAgICAgIG9sZERlYnVnKGRlYnVnUHJlZml4ICsgbXNnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHNzaHN0cmVhbSA9IG5ldyBTU0gyU3RyZWFtKGNvbm5jZmcpO1xuICAgIHZhciBjbGllbnQgPSBuZXcgQ2xpZW50KHNzaHN0cmVhbSwgc29ja2V0KTtcblxuICAgIHNvY2tldC5waXBlKHNzaHN0cmVhbSkucGlwZShzb2NrZXQpO1xuXG4gICAgLy8gc2lsZW5jZSBwcmUtaGVhZGVyIGVycm9yc1xuICAgIGZ1bmN0aW9uIG9uQ2xpZW50UHJlSGVhZGVyRXJyb3IoZXJyKSB7fVxuICAgIGNsaWVudC5vbignZXJyb3InLCBvbkNsaWVudFByZUhlYWRlckVycm9yKTtcblxuICAgIHNzaHN0cmVhbS5vbmNlKCdoZWFkZXInLCBmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIGlmIChzc2hzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kZWQpIHtcbiAgICAgICAgLy8gYWxyZWFkeSBkaXNjb25uZWN0ZWQgaW50ZXJuYWxseSBpbiBTU0gyU3RyZWFtIGR1ZSB0byBpbmNvbXBhdGlibGVcbiAgICAgICAgLy8gcHJvdG9jb2wgdmVyc2lvblxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lckNvdW50KHNlbGYsICdjb25uZWN0aW9uJykpIHtcbiAgICAgICAgLy8gYXV0byByZWplY3RcbiAgICAgICAgcmV0dXJuIHNzaHN0cmVhbS5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLkJZX0FQUExJQ0FUSU9OKTtcbiAgICAgIH1cblxuICAgICAgY2xpZW50LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uQ2xpZW50UHJlSGVhZGVyRXJyb3IpO1xuXG4gICAgICBzZWxmLmVtaXQoJ2Nvbm5lY3Rpb24nLFxuICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICB7IGlwOiBzb2NrZXQucmVtb3RlQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIGZhbWlseTogc29ja2V0LnJlbW90ZUZhbWlseSxcbiAgICAgICAgICAgICAgICAgIHBvcnQ6IHNvY2tldC5yZW1vdGVQb3J0LFxuICAgICAgICAgICAgICAgICAgaGVhZGVyOiBoZWFkZXIgfSk7XG4gICAgfSk7XG4gIH0pLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9KS5vbignbGlzdGVuaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbWl0KCdsaXN0ZW5pbmcnKTtcbiAgfSkub24oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbiAgdGhpcy5fY29ubmVjdGlvbnMgPSAwO1xuICB0aGlzLm1heENvbm5lY3Rpb25zID0gSW5maW5pdHk7XG59XG5pbmhlcml0cyhTZXJ2ZXIsIEV2ZW50RW1pdHRlcik7XG5cblNlcnZlci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Nydi5saXN0ZW4uYXBwbHkodGhpcy5fc3J2LCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblNlcnZlci5wcm90b3R5cGUuYWRkcmVzcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fc3J2LmFkZHJlc3MoKTtcbn07XG5cblNlcnZlci5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvbnMgPSBmdW5jdGlvbihjYikge1xuICB0aGlzLl9zcnYuZ2V0Q29ubmVjdGlvbnMoY2IpO1xufTtcblxuU2VydmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGNiKSB7XG4gIHRoaXMuX3Nydi5jbG9zZShjYik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuU2VydmVyLnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc3J2LnJlZigpO1xufTtcblxuU2VydmVyLnByb3RvdHlwZS51bnJlZiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9zcnYudW5yZWYoKTtcbn07XG5cblxuZnVuY3Rpb24gQ2xpZW50KHN0cmVhbSwgc29ja2V0KSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLl9zc2hzdHJlYW0gPSBzdHJlYW07XG4gIHZhciBjaGFubmVscyA9IHRoaXMuX2NoYW5uZWxzID0ge307XG4gIHRoaXMuX2N1ckNoYW4gPSAtMTtcbiAgdGhpcy5fc29jayA9IHNvY2tldDtcbiAgdGhpcy5ub01vcmVTZXNzaW9ucyA9IGZhbHNlO1xuICB0aGlzLmF1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHNvY2tldC5yZXN1bWUoKTtcbiAgICBzZWxmLmVtaXQoJ2VuZCcpO1xuICB9KS5vbignY2xvc2UnLCBmdW5jdGlvbihoYXNFcnIpIHtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgaGFzRXJyKTtcbiAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gIH0pLm9uKCdkcmFpbicsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfSkub24oJ2NvbnRpbnVlJywgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbWl0KCdjb250aW51ZScpO1xuICB9KTtcblxuICB2YXIgZXhjaGFuZ2VzID0gMDtcbiAgdmFyIGFjY2VwdGVkQXV0aFN2YyA9IGZhbHNlO1xuICB2YXIgcGVuZGluZ0F1dGhzID0gW107XG4gIHZhciBhdXRoQ3R4O1xuXG4gIC8vIGJlZ2luIHNlcnZpY2UvYXV0aC1yZWxhdGVkID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBzdHJlYW0ub24oJ1NFUlZJQ0VfUkVRVUVTVCcsIGZ1bmN0aW9uKHNlcnZpY2UpIHtcbiAgICBpZiAoZXhjaGFuZ2VzID09PSAwXG4gICAgICAgIHx8IGFjY2VwdGVkQXV0aFN2Y1xuICAgICAgICB8fCBzZWxmLmF1dGhlbnRpY2F0ZWRcbiAgICAgICAgfHwgc2VydmljZSAhPT0gJ3NzaC11c2VyYXV0aCcpXG4gICAgICByZXR1cm4gc3RyZWFtLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uU0VSVklDRV9OT1RfQVZBSUxBQkxFKTtcblxuICAgIGFjY2VwdGVkQXV0aFN2YyA9IHRydWU7XG4gICAgc3RyZWFtLnNlcnZpY2VBY2NlcHQoc2VydmljZSk7XG4gIH0pLm9uKCdVU0VSQVVUSF9SRVFVRVNUJywgb25VU0VSQVVUSF9SRVFVRVNUKTtcbiAgZnVuY3Rpb24gb25VU0VSQVVUSF9SRVFVRVNUKHVzZXJuYW1lLCBzZXJ2aWNlLCBtZXRob2QsIG1ldGhvZERhdGEpIHtcbiAgICBpZiAoZXhjaGFuZ2VzID09PSAwXG4gICAgICAgIHx8IChhdXRoQ3R4XG4gICAgICAgICAgICAmJiAoYXV0aEN0eC51c2VybmFtZSAhPT0gdXNlcm5hbWUgfHwgYXV0aEN0eC5zZXJ2aWNlICE9PSBzZXJ2aWNlKSlcbiAgICAgICAgICAvLyBUT0RPOiBzdXBwb3J0IGhvc3RiYXNlZCBhdXRoXG4gICAgICAgIHx8IChtZXRob2QgIT09ICdwYXNzd29yZCdcbiAgICAgICAgICAgICYmIG1ldGhvZCAhPT0gJ3B1YmxpY2tleSdcbiAgICAgICAgICAgICYmIG1ldGhvZCAhPT0gJ2hvc3RiYXNlZCdcbiAgICAgICAgICAgICYmIG1ldGhvZCAhPT0gJ2tleWJvYXJkLWludGVyYWN0aXZlJ1xuICAgICAgICAgICAgJiYgbWV0aG9kICE9PSAnbm9uZScpXG4gICAgICAgIHx8IHBlbmRpbmdBdXRocy5sZW5ndGggPT09IE1BWF9QRU5ESU5HX0FVVEhTKVxuICAgICAgcmV0dXJuIHN0cmVhbS5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLlBST1RPQ09MX0VSUk9SKTtcbiAgICBlbHNlIGlmIChzZXJ2aWNlICE9PSAnc3NoLWNvbm5lY3Rpb24nKVxuICAgICAgcmV0dXJuIHN0cmVhbS5kaXNjb25uZWN0KERJU0NPTk5FQ1RfUkVBU09OLlNFUlZJQ0VfTk9UX0FWQUlMQUJMRSk7XG5cbiAgICAvLyBYWFg6IHRoaXMgcmVhbGx5IHNob3VsZG4ndCBiZSByZWFjaGluZyBpbnRvIHByaXZhdGUgc3RhdGUgLi4uXG4gICAgc3RyZWFtLl9zdGF0ZS5hdXRoTWV0aG9kID0gbWV0aG9kO1xuXG4gICAgdmFyIGN0eDtcbiAgICBpZiAobWV0aG9kID09PSAna2V5Ym9hcmQtaW50ZXJhY3RpdmUnKSB7XG4gICAgICBjdHggPSBuZXcgS2V5Ym9hcmRBdXRoQ29udGV4dChzdHJlYW0sIHVzZXJuYW1lLCBzZXJ2aWNlLCBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2REYXRhLCBvbkF1dGhEZWNpZGUpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAncHVibGlja2V5Jykge1xuICAgICAgY3R4ID0gbmV3IFBLQXV0aENvbnRleHQoc3RyZWFtLCB1c2VybmFtZSwgc2VydmljZSwgbWV0aG9kLCBtZXRob2REYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25BdXRoRGVjaWRlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2hvc3RiYXNlZCcpIHtcbiAgICAgIGN0eCA9IG5ldyBIb3N0YmFzZWRBdXRoQ29udGV4dChzdHJlYW0sIHVzZXJuYW1lLCBzZXJ2aWNlLCBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kRGF0YSwgb25BdXRoRGVjaWRlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ3Bhc3N3b3JkJykge1xuICAgICAgY3R4ID0gbmV3IFB3ZEF1dGhDb250ZXh0KHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgbWV0aG9kRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkF1dGhEZWNpZGUpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAnbm9uZScpXG4gICAgICBjdHggPSBuZXcgQXV0aENvbnRleHQoc3RyZWFtLCB1c2VybmFtZSwgc2VydmljZSwgbWV0aG9kLCBvbkF1dGhEZWNpZGUpO1xuXG4gICAgaWYgKGF1dGhDdHgpIHtcbiAgICAgIGlmICghYXV0aEN0eC5faW5pdGlhbFJlc3BvbnNlKVxuICAgICAgICByZXR1cm4gcGVuZGluZ0F1dGhzLnB1c2goY3R4KTtcbiAgICAgIGVsc2UgaWYgKGF1dGhDdHguX211bHRpc3RlcCAmJiAhdGhpcy5fZmluYWxSZXNwb25zZSkge1xuICAgICAgICAvLyBSRkMgNDI1MiBzYXlzIHRvIHNpbGVudGx5IGFib3J0IHRoZSBjdXJyZW50IGF1dGggcmVxdWVzdCBpZiBhIG5ld1xuICAgICAgICAvLyBhdXRoIHJlcXVlc3QgY29tZXMgaW4gYmVmb3JlIHRoZSBmaW5hbCByZXNwb25zZSBmcm9tIGFuIGF1dGggbWV0aG9kXG4gICAgICAgIC8vIHRoYXQgcmVxdWlyZXMgYWRkaXRpb25hbCByZXF1ZXN0L3Jlc3BvbnNlIGV4Y2hhbmdlcyAtLSB0aGlzIG1lYW5zXG4gICAgICAgIC8vIGtleWJvYXJkLWludGVyYWN0aXZlIGZvciBub3cgLi4uXG4gICAgICAgIGF1dGhDdHguX2NsZWFudXAgJiYgYXV0aEN0eC5fY2xlYW51cCgpO1xuICAgICAgICBhdXRoQ3R4LmVtaXQoJ2Fib3J0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXV0aEN0eCA9IGN0eDtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50KHNlbGYsICdhdXRoZW50aWNhdGlvbicpKVxuICAgICAgc2VsZi5lbWl0KCdhdXRoZW50aWNhdGlvbicsIGF1dGhDdHgpO1xuICAgIGVsc2VcbiAgICAgIGF1dGhDdHgucmVqZWN0KCk7XG4gIH1cbiAgZnVuY3Rpb24gb25BdXRoRGVjaWRlKGN0eCwgYWxsb3dlZCwgbWV0aG9kc0xlZnQsIGlzUGFydGlhbCkge1xuICAgIGlmIChhdXRoQ3R4ID09PSBjdHggJiYgIXNlbGYuYXV0aGVudGljYXRlZCkge1xuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdVU0VSQVVUSF9SRVFVRVNUJywgb25VU0VSQVVUSF9SRVFVRVNUKTtcbiAgICAgICAgYXV0aEN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgc2VsZi5hdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgc3RyZWFtLmF1dGhTdWNjZXNzKCk7XG4gICAgICAgIHBlbmRpbmdBdXRocyA9IFtdO1xuICAgICAgICBzZWxmLmVtaXQoJ3JlYWR5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJlYW0uYXV0aEZhaWx1cmUobWV0aG9kc0xlZnQsIGlzUGFydGlhbCk7XG4gICAgICAgIGlmIChwZW5kaW5nQXV0aHMubGVuZ3RoKSB7XG4gICAgICAgICAgYXV0aEN0eCA9IHBlbmRpbmdBdXRocy5wb3AoKTtcbiAgICAgICAgICBpZiAobGlzdGVuZXJDb3VudChzZWxmLCAnYXV0aGVudGljYXRpb24nKSlcbiAgICAgICAgICAgIHNlbGYuZW1pdCgnYXV0aGVudGljYXRpb24nLCBhdXRoQ3R4KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBhdXRoQ3R4LnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGVuZCBzZXJ2aWNlL2F1dGgtcmVsYXRlZCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciB1bnNlbnRHbG9iYWxSZXF1ZXN0c1JlcGxpZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzZW5kUmVwbGllcygpIHtcbiAgICB2YXIgcmVwbHk7XG4gICAgd2hpbGUgKHVuc2VudEdsb2JhbFJlcXVlc3RzUmVwbGllcy5sZW5ndGggPiAwXG4gICAgICAgICAgICYmIHVuc2VudEdsb2JhbFJlcXVlc3RzUmVwbGllc1swXS50eXBlKSB7XG4gICAgICByZXBseSA9IHVuc2VudEdsb2JhbFJlcXVlc3RzUmVwbGllcy5zaGlmdCgpO1xuICAgICAgaWYgKHJlcGx5LnR5cGUgPT09ICdTVUNDRVNTJylcbiAgICAgICAgc3RyZWFtLnJlcXVlc3RTdWNjZXNzKHJlcGx5LmJ1Zik7XG4gICAgICBpZiAocmVwbHkudHlwZSA9PT0gJ0ZBSUxVUkUnKVxuICAgICAgICBzdHJlYW0ucmVxdWVzdEZhaWx1cmUoKTtcbiAgICB9XG4gIH1cblxuICBzdHJlYW0ub24oJ0dMT0JBTF9SRVFVRVNUJywgZnVuY3Rpb24obmFtZSwgd2FudFJlcGx5LCBkYXRhKSB7XG4gICAgdmFyIHJlcGx5ID0ge1xuICAgICAgdHlwZTogbnVsbCxcbiAgICAgIGJ1ZjogbnVsbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzZXRSZXBseSh0eXBlLCBidWYpIHtcbiAgICAgIHJlcGx5LnR5cGUgPSB0eXBlO1xuICAgICAgcmVwbHkuYnVmID0gYnVmO1xuICAgICAgc2VuZFJlcGxpZXMoKTtcbiAgICB9XG5cbiAgICBpZiAod2FudFJlcGx5KVxuICAgICAgdW5zZW50R2xvYmFsUmVxdWVzdHNSZXBsaWVzLnB1c2gocmVwbHkpO1xuXG4gICAgaWYgKChuYW1lID09PSAndGNwaXAtZm9yd2FyZCdcbiAgICAgICAgIHx8IG5hbWUgPT09ICdjYW5jZWwtdGNwaXAtZm9yd2FyZCdcbiAgICAgICAgIHx8IG5hbWUgPT09ICduby1tb3JlLXNlc3Npb25zQG9wZW5zc2guY29tJ1xuICAgICAgICAgfHwgbmFtZSA9PT0gJ3N0cmVhbWxvY2FsLWZvcndhcmRAb3BlbnNzaC5jb20nXG4gICAgICAgICB8fCBuYW1lID09PSAnY2FuY2VsLXN0cmVhbWxvY2FsLWZvcndhcmRAb3BlbnNzaC5jb20nKVxuICAgICAgICAmJiBsaXN0ZW5lckNvdW50KHNlbGYsICdyZXF1ZXN0JylcbiAgICAgICAgJiYgc2VsZi5hdXRoZW50aWNhdGVkKSB7XG4gICAgICB2YXIgYWNjZXB0O1xuICAgICAgdmFyIHJlamVjdDtcblxuICAgICAgaWYgKHdhbnRSZXBseSkge1xuICAgICAgICB2YXIgcmVwbGllZCA9IGZhbHNlO1xuICAgICAgICBhY2NlcHQgPSBmdW5jdGlvbihjaG9zZW5Qb3J0KSB7XG4gICAgICAgICAgaWYgKHJlcGxpZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgcmVwbGllZCA9IHRydWU7XG4gICAgICAgICAgdmFyIGJ1ZlBvcnQ7XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd0Y3BpcC1mb3J3YXJkJ1xuICAgICAgICAgICAgICAmJiBkYXRhLmJpbmRQb3J0ID09PSAwXG4gICAgICAgICAgICAgICYmIHR5cGVvZiBjaG9zZW5Qb3J0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgYnVmUG9ydCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KTtcbiAgICAgICAgICAgIHdyaXRlVUludDMyQkUoYnVmUG9ydCwgY2hvc2VuUG9ydCwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFJlcGx5KCdTVUNDRVNTJywgYnVmUG9ydCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChyZXBsaWVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIHJlcGxpZWQgPSB0cnVlO1xuICAgICAgICAgIHNldFJlcGx5KCdGQUlMVVJFJyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnbm8tbW9yZS1zZXNzaW9uc0BvcGVuc3NoLmNvbScpIHtcbiAgICAgICAgc2VsZi5ub01vcmVTZXNzaW9ucyA9IHRydWU7XG4gICAgICAgIGFjY2VwdCAmJiBhY2NlcHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmVtaXQoJ3JlcXVlc3QnLCBhY2NlcHQsIHJlamVjdCwgbmFtZSwgZGF0YSk7XG4gICAgfSBlbHNlIGlmICh3YW50UmVwbHkpXG4gICAgICBzZXRSZXBseSgnRkFJTFVSRScpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ0NIQU5ORUxfT1BFTicsIGZ1bmN0aW9uKGluZm8pIHtcbiAgICAvLyBkbyBlYXJseSByZWplY3QgaW4gc29tZSBjYXNlcyB0byBwcmV2ZW50IHdhc3RlZnVsIGNoYW5uZWwgYWxsb2NhdGlvblxuICAgIGlmICgoaW5mby50eXBlID09PSAnc2Vzc2lvbicgJiYgc2VsZi5ub01vcmVTZXNzaW9ucylcbiAgICAgICAgfHwgIXNlbGYuYXV0aGVudGljYXRlZCkge1xuICAgICAgdmFyIHJlYXNvbkNvZGUgPSBDSEFOTkVMX09QRU5fRkFJTFVSRS5BRE1JTklTVFJBVElWRUxZX1BST0hJQklURUQ7XG4gICAgICByZXR1cm4gc3RyZWFtLmNoYW5uZWxPcGVuRmFpbChpbmZvLnNlbmRlciwgcmVhc29uQ29kZSk7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsQ2hhbiA9IG5leHRDaGFubmVsKHNlbGYpO1xuICAgIHZhciBhY2NlcHQ7XG4gICAgdmFyIHJlamVjdDtcbiAgICB2YXIgcmVwbGllZCA9IGZhbHNlO1xuICAgIGlmIChsb2NhbENoYW4gPT09IGZhbHNlKSB7XG4gICAgICAvLyBhdXRvLXJlamVjdCBkdWUgdG8gbm8gY2hhbm5lbHMgYXZhaWxhYmxlXG4gICAgICByZXR1cm4gc3RyZWFtLmNoYW5uZWxPcGVuRmFpbChpbmZvLnNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENIQU5ORUxfT1BFTl9GQUlMVVJFLlJFU09VUkNFX1NIT1JUQUdFKTtcbiAgICB9XG5cbiAgICAvLyBiZSBvcHRpbWlzdGljLCByZXNlcnZlIGNoYW5uZWwgdG8gcHJldmVudCBhbm90aGVyIHJlcXVlc3QgZnJvbSB0cnlpbmcgdG9cbiAgICAvLyB0YWtlIHRoZSBzYW1lIGNoYW5uZWxcbiAgICBjaGFubmVsc1tsb2NhbENoYW5dID0gdHJ1ZTtcblxuICAgIHJlamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHJlcGxpZWQpXG4gICAgICAgIHJldHVybjtcblxuICAgICAgcmVwbGllZCA9IHRydWU7XG5cbiAgICAgIGRlbGV0ZSBjaGFubmVsc1tsb2NhbENoYW5dO1xuXG4gICAgICB2YXIgcmVhc29uQ29kZSA9IENIQU5ORUxfT1BFTl9GQUlMVVJFLkFETUlOSVNUUkFUSVZFTFlfUFJPSElCSVRFRDtcbiAgICAgIHJldHVybiBzdHJlYW0uY2hhbm5lbE9wZW5GYWlsKGluZm8uc2VuZGVyLCByZWFzb25Db2RlKTtcbiAgICB9O1xuXG4gICAgc3dpdGNoIChpbmZvLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3Nlc3Npb24nOlxuICAgICAgICBpZiAobGlzdGVuZXJDb3VudChzZWxmLCAnc2Vzc2lvbicpKSB7XG4gICAgICAgICAgYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVwbGllZClcbiAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICByZXBsaWVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgc3RyZWFtLmNoYW5uZWxPcGVuQ29uZmlybShpbmZvLnNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxDaGFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFubmVsLk1BWF9XSU5ET1csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWwuUEFDS0VUX1NJWkUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlc3Npb24oc2VsZiwgaW5mbywgbG9jYWxDaGFuKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2VsZi5lbWl0KCdzZXNzaW9uJywgYWNjZXB0LCByZWplY3QpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGlyZWN0LXRjcGlwJzpcbiAgICAgICAgaWYgKGxpc3RlbmVyQ291bnQoc2VsZiwgJ3RjcGlwJykpIHtcbiAgICAgICAgICBhY2NlcHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXBsaWVkKVxuICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHJlcGxpZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBzdHJlYW0uY2hhbm5lbE9wZW5Db25maXJtKGluZm8uc2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbENoYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5uZWwuTUFYX1dJTkRPVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbC5QQUNLRVRfU0laRSk7XG5cbiAgICAgICAgICAgIHZhciBjaGFuaW5mbyA9IHtcbiAgICAgICAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBpbmNvbWluZzoge1xuICAgICAgICAgICAgICAgIGlkOiBsb2NhbENoYW4sXG4gICAgICAgICAgICAgICAgd2luZG93OiBDaGFubmVsLk1BWF9XSU5ET1csXG4gICAgICAgICAgICAgICAgcGFja2V0U2l6ZTogQ2hhbm5lbC5QQUNLRVRfU0laRSxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ29wZW4nXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG91dGdvaW5nOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGluZm8uc2VuZGVyLFxuICAgICAgICAgICAgICAgIHdpbmRvdzogaW5mby53aW5kb3csXG4gICAgICAgICAgICAgICAgcGFja2V0U2l6ZTogaW5mby5wYWNrZXRTaXplLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnb3BlbidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGFubmVsKGNoYW5pbmZvLCBzZWxmKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2VsZi5lbWl0KCd0Y3BpcCcsIGFjY2VwdCwgcmVqZWN0LCBpbmZvLmRhdGEpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGlyZWN0LXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJzpcbiAgICAgICAgaWYgKGxpc3RlbmVyQ291bnQoc2VsZiwgJ29wZW5zc2guc3RyZWFtbG9jYWwnKSkge1xuICAgICAgICAgIGFjY2VwdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHJlcGxpZWQpXG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgcmVwbGllZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHN0cmVhbS5jaGFubmVsT3BlbkNvbmZpcm0oaW5mby5zZW5kZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsQ2hhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbm5lbC5NQVhfV0lORE9XLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFubmVsLlBBQ0tFVF9TSVpFKTtcblxuICAgICAgICAgICAgdmFyIGNoYW5pbmZvID0ge1xuICAgICAgICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGluY29taW5nOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGxvY2FsQ2hhbixcbiAgICAgICAgICAgICAgICB3aW5kb3c6IENoYW5uZWwuTUFYX1dJTkRPVyxcbiAgICAgICAgICAgICAgICBwYWNrZXRTaXplOiBDaGFubmVsLlBBQ0tFVF9TSVpFLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnb3BlbidcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3V0Z29pbmc6IHtcbiAgICAgICAgICAgICAgICBpZDogaW5mby5zZW5kZXIsXG4gICAgICAgICAgICAgICAgd2luZG93OiBpbmZvLndpbmRvdyxcbiAgICAgICAgICAgICAgICBwYWNrZXRTaXplOiBpbmZvLnBhY2tldFNpemUsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdvcGVuJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYW5uZWwoY2hhbmluZm8sIHNlbGYpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzZWxmLmVtaXQoJ29wZW5zc2guc3RyZWFtbG9jYWwnLCBhY2NlcHQsIHJlamVjdCwgaW5mby5kYXRhKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIGF1dG8tcmVqZWN0IHVuc3VwcG9ydGVkIGNoYW5uZWwgdHlwZXNcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgfVxuICB9KTtcblxuICBzdHJlYW0ub24oJ05FV0tFWVMnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoKytleGNoYW5nZXMgPiAxKVxuICAgICAgc2VsZi5lbWl0KCdyZWtleScpO1xuICB9KTtcblxuICBpZiAoa2FNZ3IpIHtcbiAgICB0aGlzLm9uY2UoJ3JlYWR5JywgZnVuY3Rpb24oKSB7XG4gICAgICBrYU1nci5hZGQoc3RyZWFtKTtcbiAgICB9KTtcbiAgfVxufVxuaW5oZXJpdHMoQ2xpZW50LCBFdmVudEVtaXR0ZXIpO1xuXG5DbGllbnQucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fc3Noc3RyZWFtLmRpc2Nvbm5lY3QoRElTQ09OTkVDVF9SRUFTT04uQllfQVBQTElDQVRJT04pO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS54MTEgPSBmdW5jdGlvbihvcmlnaW5BZGRyLCBvcmlnaW5Qb3J0LCBjYikge1xuICB2YXIgb3B0cyA9IHtcbiAgICBvcmlnaW5BZGRyOiBvcmlnaW5BZGRyLFxuICAgIG9yaWdpblBvcnQ6IG9yaWdpblBvcnRcbiAgfTtcbiAgcmV0dXJuIG9wZW5DaGFubmVsKHRoaXMsICd4MTEnLCBvcHRzLCBjYik7XG59O1xuXG5DbGllbnQucHJvdG90eXBlLmZvcndhcmRPdXQgPSBmdW5jdGlvbihib3VuZEFkZHIsIGJvdW5kUG9ydCwgcmVtb3RlQWRkcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVBvcnQsIGNiKSB7XG4gIHZhciBvcHRzID0ge1xuICAgIGJvdW5kQWRkcjogYm91bmRBZGRyLFxuICAgIGJvdW5kUG9ydDogYm91bmRQb3J0LFxuICAgIHJlbW90ZUFkZHI6IHJlbW90ZUFkZHIsXG4gICAgcmVtb3RlUG9ydDogcmVtb3RlUG9ydFxuICB9O1xuICByZXR1cm4gb3BlbkNoYW5uZWwodGhpcywgJ2ZvcndhcmRlZC10Y3BpcCcsIG9wdHMsIGNiKTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUub3BlbnNzaF9mb3J3YXJkT3V0U3RyZWFtTG9jYWwgPSBmdW5jdGlvbihzb2NrZXRQYXRoLCBjYikge1xuICB2YXIgb3B0cyA9IHtcbiAgICBzb2NrZXRQYXRoOiBzb2NrZXRQYXRoXG4gIH07XG4gIHJldHVybiBvcGVuQ2hhbm5lbCh0aGlzLCAnZm9yd2FyZGVkLXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJywgb3B0cywgY2IpO1xufTtcblxuQ2xpZW50LnByb3RvdHlwZS5yZWtleSA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBzdHJlYW0gPSB0aGlzLl9zc2hzdHJlYW07XG4gIHZhciByZXQgPSB0cnVlO1xuICB2YXIgZXJyb3I7XG5cbiAgdHJ5IHtcbiAgICByZXQgPSBzdHJlYW0ucmVrZXkoKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBlcnJvciA9IGV4O1xuICB9XG5cbiAgLy8gVE9ETzogcmUtdGhyb3cgZXJyb3IgaWYgbm8gY2FsbGJhY2s/XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLm9uY2UoJ3Jla2V5JywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIFNlc3Npb24oY2xpZW50LCBpbmZvLCBsb2NhbENoYW4pIHtcbiAgdGhpcy5zdWJ0eXBlID0gdW5kZWZpbmVkO1xuXG4gIHZhciBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb3V0Z29pbmdJZCA9IGluZm8uc2VuZGVyO1xuICB2YXIgY2hhbm5lbDtcblxuICB2YXIgY2hhbmluZm8gPSB7XG4gICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgIGluY29taW5nOiB7XG4gICAgICBpZDogbG9jYWxDaGFuLFxuICAgICAgd2luZG93OiBDaGFubmVsLk1BWF9XSU5ET1csXG4gICAgICBwYWNrZXRTaXplOiBDaGFubmVsLlBBQ0tFVF9TSVpFLFxuICAgICAgc3RhdGU6ICdvcGVuJ1xuICAgIH0sXG4gICAgb3V0Z29pbmc6IHtcbiAgICAgIGlkOiBpbmZvLnNlbmRlcixcbiAgICAgIHdpbmRvdzogaW5mby53aW5kb3csXG4gICAgICBwYWNrZXRTaXplOiBpbmZvLnBhY2tldFNpemUsXG4gICAgICBzdGF0ZTogJ29wZW4nXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9uUkVRVUVTVChpbmZvKSB7XG4gICAgdmFyIHJlcGxpZWQgPSBmYWxzZTtcbiAgICB2YXIgYWNjZXB0O1xuICAgIHZhciByZWplY3Q7XG5cbiAgICBpZiAoaW5mby53YW50UmVwbHkpIHtcbiAgICAgIC8vIFwicmVhbCBzZXNzaW9uXCIgcmVxdWVzdHMgd2lsbCBoYXZlIGN1c3RvbSBhY2NlcHQgYmVoYXZpb3JzXG4gICAgICBpZiAoaW5mby5yZXF1ZXN0ICE9PSAnc2hlbGwnXG4gICAgICAgICAgJiYgaW5mby5yZXF1ZXN0ICE9PSAnZXhlYydcbiAgICAgICAgICAmJiBpbmZvLnJlcXVlc3QgIT09ICdzdWJzeXN0ZW0nKSB7XG4gICAgICAgIGFjY2VwdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChyZXBsaWVkIHx8IGVuZGluZyB8fCBjaGFubmVsKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgcmVwbGllZCA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gY2xpZW50Ll9zc2hzdHJlYW0uY2hhbm5lbFN1Y2Nlc3Mob3V0Z29pbmdJZCk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJlamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVwbGllZCB8fCBlbmRpbmcgfHwgY2hhbm5lbClcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgcmVwbGllZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGNsaWVudC5fc3Noc3RyZWFtLmNoYW5uZWxGYWlsdXJlKG91dGdvaW5nSWQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZW5kaW5nKSB7XG4gICAgICByZWplY3QgJiYgcmVqZWN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChpbmZvLnJlcXVlc3QpIHtcbiAgICAgIC8vIFwicHJlLXJlYWwgc2Vzc2lvbiBzdGFydFwiIHJlcXVlc3RzXG4gICAgICBjYXNlICdlbnYnOlxuICAgICAgICBpZiAobGlzdGVuZXJDb3VudChzZWxmLCAnZW52JykpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoJ2VudicsIGFjY2VwdCwgcmVqZWN0LCB7XG4gICAgICAgICAgICBrZXk6IGluZm8ua2V5LFxuICAgICAgICAgICAgdmFsOiBpbmZvLnZhbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICByZWplY3QgJiYgcmVqZWN0KCk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3B0eS1yZXEnOlxuICAgICAgICBpZiAobGlzdGVuZXJDb3VudChzZWxmLCAncHR5JykpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3B0eScsIGFjY2VwdCwgcmVqZWN0LCB7XG4gICAgICAgICAgICBjb2xzOiBpbmZvLmNvbHMsXG4gICAgICAgICAgICByb3dzOiBpbmZvLnJvd3MsXG4gICAgICAgICAgICB3aWR0aDogaW5mby53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaW5mby5oZWlnaHQsXG4gICAgICAgICAgICB0ZXJtOiBpbmZvLnRlcm0sXG4gICAgICAgICAgICBtb2RlczogaW5mby5tb2RlcyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmVqZWN0ICYmIHJlamVjdCgpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3aW5kb3ctY2hhbmdlJzpcbiAgICAgICAgaWYgKGxpc3RlbmVyQ291bnQoc2VsZiwgJ3dpbmRvdy1jaGFuZ2UnKSkge1xuICAgICAgICAgIHNlbGYuZW1pdCgnd2luZG93LWNoYW5nZScsIGFjY2VwdCwgcmVqZWN0LCB7XG4gICAgICAgICAgICBjb2xzOiBpbmZvLmNvbHMsXG4gICAgICAgICAgICByb3dzOiBpbmZvLnJvd3MsXG4gICAgICAgICAgICB3aWR0aDogaW5mby53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaW5mby5oZWlnaHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmVqZWN0ICYmIHJlamVjdCgpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd4MTEtcmVxJzpcbiAgICAgICAgaWYgKGxpc3RlbmVyQ291bnQoc2VsZiwgJ3gxMScpKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KCd4MTEnLCBhY2NlcHQsIHJlamVjdCwge1xuICAgICAgICAgICAgc2luZ2xlOiBpbmZvLnNpbmdsZSxcbiAgICAgICAgICAgIHByb3RvY29sOiBpbmZvLnByb3RvY29sLFxuICAgICAgICAgICAgY29va2llOiBpbmZvLmNvb2tpZSxcbiAgICAgICAgICAgIHNjcmVlbjogaW5mby5zY3JlZW5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmVqZWN0ICYmIHJlamVjdCgpO1xuICAgICAgYnJlYWs7XG4gICAgICAvLyBcInBvc3QtcmVhbCBzZXNzaW9uIHN0YXJ0XCIgcmVxdWVzdHNcbiAgICAgIGNhc2UgJ3NpZ25hbCc6XG4gICAgICAgIGlmIChsaXN0ZW5lckNvdW50KHNlbGYsICdzaWduYWwnKSkge1xuICAgICAgICAgIHNlbGYuZW1pdCgnc2lnbmFsJywgYWNjZXB0LCByZWplY3QsIHtcbiAgICAgICAgICAgIG5hbWU6IGluZm8uc2lnbmFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHJlamVjdCAmJiByZWplY3QoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgLy8gWFhYOiBpcyBgYXV0aC1hZ2VudC1yZXFAb3BlbnNzaC5jb21gIHJlYWxseSBcInBvc3QtcmVhbCBzZXNzaW9uIHN0YXJ0XCI/XG4gICAgICBjYXNlICdhdXRoLWFnZW50LXJlcUBvcGVuc3NoLmNvbSc6XG4gICAgICAgIGlmIChsaXN0ZW5lckNvdW50KHNlbGYsICdhdXRoLWFnZW50JykpXG4gICAgICAgICAgc2VsZi5lbWl0KCdhdXRoLWFnZW50JywgYWNjZXB0LCByZWplY3QpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVqZWN0ICYmIHJlamVjdCgpO1xuICAgICAgYnJlYWs7XG4gICAgICAvLyBcInJlYWwgc2Vzc2lvbiBzdGFydFwiIHJlcXVlc3RzXG4gICAgICBjYXNlICdzaGVsbCc6XG4gICAgICAgIGlmIChsaXN0ZW5lckNvdW50KHNlbGYsICdzaGVsbCcpKSB7XG4gICAgICAgICAgYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVwbGllZCB8fCBlbmRpbmcgfHwgY2hhbm5lbClcbiAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICByZXBsaWVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGluZm8ud2FudFJlcGx5KVxuICAgICAgICAgICAgICBjbGllbnQuX3NzaHN0cmVhbS5jaGFubmVsU3VjY2VzcyhvdXRnb2luZ0lkKTtcblxuICAgICAgICAgICAgY2hhbm5lbCA9IG5ldyBDaGFubmVsKGNoYW5pbmZvLCBjbGllbnQsIHsgc2VydmVyOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBjaGFubmVsLnN1YnR5cGUgPSBzZWxmLnN1YnR5cGUgPSBpbmZvLnJlcXVlc3Q7XG5cbiAgICAgICAgICAgIHJldHVybiBjaGFubmVsO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzZWxmLmVtaXQoJ3NoZWxsJywgYWNjZXB0LCByZWplY3QpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICByZWplY3QgJiYgcmVqZWN0KCk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4ZWMnOlxuICAgICAgICBpZiAobGlzdGVuZXJDb3VudChzZWxmLCAnZXhlYycpKSB7XG4gICAgICAgICAgYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVwbGllZCB8fCBlbmRpbmcgfHwgY2hhbm5lbClcbiAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICByZXBsaWVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGluZm8ud2FudFJlcGx5KVxuICAgICAgICAgICAgICBjbGllbnQuX3NzaHN0cmVhbS5jaGFubmVsU3VjY2VzcyhvdXRnb2luZ0lkKTtcblxuICAgICAgICAgICAgY2hhbm5lbCA9IG5ldyBDaGFubmVsKGNoYW5pbmZvLCBjbGllbnQsIHsgc2VydmVyOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBjaGFubmVsLnN1YnR5cGUgPSBzZWxmLnN1YnR5cGUgPSBpbmZvLnJlcXVlc3Q7XG5cbiAgICAgICAgICAgIHJldHVybiBjaGFubmVsO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzZWxmLmVtaXQoJ2V4ZWMnLCBhY2NlcHQsIHJlamVjdCwge1xuICAgICAgICAgICAgY29tbWFuZDogaW5mby5jb21tYW5kXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHJlamVjdCAmJiByZWplY3QoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3Vic3lzdGVtJzpcbiAgICAgICAgYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHJlcGxpZWQgfHwgZW5kaW5nIHx8IGNoYW5uZWwpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICByZXBsaWVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChpbmZvLndhbnRSZXBseSlcbiAgICAgICAgICAgIGNsaWVudC5fc3Noc3RyZWFtLmNoYW5uZWxTdWNjZXNzKG91dGdvaW5nSWQpO1xuXG4gICAgICAgICAgY2hhbm5lbCA9IG5ldyBDaGFubmVsKGNoYW5pbmZvLCBjbGllbnQsIHsgc2VydmVyOiB0cnVlIH0pO1xuXG4gICAgICAgICAgY2hhbm5lbC5zdWJ0eXBlID0gc2VsZi5zdWJ0eXBlID0gKGluZm8ucmVxdWVzdCArICc6JyArIGluZm8uc3Vic3lzdGVtKTtcblxuICAgICAgICAgIGlmIChpbmZvLnN1YnN5c3RlbSA9PT0gJ3NmdHAnKSB7XG4gICAgICAgICAgICB2YXIgc2Z0cCA9IG5ldyBTRlRQU3RyZWFtKHtcbiAgICAgICAgICAgICAgc2VydmVyOiB0cnVlLFxuICAgICAgICAgICAgICBkZWJ1ZzogY2xpZW50Ll9zc2hzdHJlYW0uZGVidWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2hhbm5lbC5waXBlKHNmdHApLnBpcGUoY2hhbm5lbCk7XG5cbiAgICAgICAgICAgIHJldHVybiBzZnRwO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGluZm8uc3Vic3lzdGVtID09PSAnc2Z0cCcgJiYgbGlzdGVuZXJDb3VudChzZWxmLCAnc2Z0cCcpKVxuICAgICAgICAgIHNlbGYuZW1pdCgnc2Z0cCcsIGFjY2VwdCwgcmVqZWN0KTtcbiAgICAgICAgZWxzZSBpZiAoaW5mby5zdWJzeXN0ZW0gIT09ICdzZnRwJyAmJiBsaXN0ZW5lckNvdW50KHNlbGYsICdzdWJzeXN0ZW0nKSkge1xuICAgICAgICAgIHNlbGYuZW1pdCgnc3Vic3lzdGVtJywgYWNjZXB0LCByZWplY3QsIHtcbiAgICAgICAgICAgIG5hbWU6IGluZm8uc3Vic3lzdGVtXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHJlamVjdCAmJiByZWplY3QoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVqZWN0ICYmIHJlamVjdCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbkVPRigpIHtcbiAgICBlbmRpbmcgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZW9mJyk7XG4gICAgc2VsZi5lbWl0KCdlbmQnKTtcbiAgfVxuICBmdW5jdGlvbiBvbkNMT1NFKCkge1xuICAgIGVuZGluZyA9IHRydWU7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScpO1xuICB9XG4gIGNsaWVudC5fc3Noc3RyZWFtXG4gICAgICAgIC5vbignQ0hBTk5FTF9SRVFVRVNUOicgKyBsb2NhbENoYW4sIG9uUkVRVUVTVClcbiAgICAgICAgLm9uY2UoJ0NIQU5ORUxfRU9GOicgKyBsb2NhbENoYW4sIG9uRU9GKVxuICAgICAgICAub25jZSgnQ0hBTk5FTF9DTE9TRTonICsgbG9jYWxDaGFuLCBvbkNMT1NFKTtcbn1cbmluaGVyaXRzKFNlc3Npb24sIEV2ZW50RW1pdHRlcik7XG5cblxuZnVuY3Rpb24gQXV0aENvbnRleHQoc3RyZWFtLCB1c2VybmFtZSwgc2VydmljZSwgbWV0aG9kLCBjYikge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy51c2VybmFtZSA9IHRoaXMudXNlciA9IHVzZXJuYW1lO1xuICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgdGhpcy5faW5pdGlhbFJlc3BvbnNlID0gZmFsc2U7XG4gIHRoaXMuX2ZpbmFsUmVzcG9uc2UgPSBmYWxzZTtcbiAgdGhpcy5fbXVsdGlzdGVwID0gZmFsc2U7XG4gIHRoaXMuX2NiZmluYWwgPSBmdW5jdGlvbihhbGxvd2VkLCBtZXRob2RzTGVmdCwgaXNQYXJ0aWFsKSB7XG4gICAgaWYgKCFzZWxmLl9maW5hbFJlc3BvbnNlKSB7XG4gICAgICBzZWxmLl9maW5hbFJlc3BvbnNlID0gdHJ1ZTtcbiAgICAgIGNiKHNlbGYsIGFsbG93ZWQsIG1ldGhvZHNMZWZ0LCBpc1BhcnRpYWwpO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xufVxuaW5oZXJpdHMoQXV0aENvbnRleHQsIEV2ZW50RW1pdHRlcik7XG5BdXRoQ29udGV4dC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFudXAgJiYgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLl9pbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xuICB0aGlzLl9jYmZpbmFsKHRydWUpO1xufTtcbkF1dGhDb250ZXh0LnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihtZXRob2RzTGVmdCwgaXNQYXJ0aWFsKSB7XG4gIHRoaXMuX2NsZWFudXAgJiYgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLl9pbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xuICB0aGlzLl9jYmZpbmFsKGZhbHNlLCBtZXRob2RzTGVmdCwgaXNQYXJ0aWFsKTtcbn07XG5cbnZhciBSRV9LQklOVF9TVUJNRVRIT0RTID0gL1sgXFx0XFxyXFxuXSosWyBcXHRcXHJcXG5dKi9nO1xuZnVuY3Rpb24gS2V5Ym9hcmRBdXRoQ29udGV4dChzdHJlYW0sIHVzZXJuYW1lLCBzZXJ2aWNlLCBtZXRob2QsIHN1Ym1ldGhvZHMsIGNiKSB7XG4gIEF1dGhDb250ZXh0LmNhbGwodGhpcywgc3RyZWFtLCB1c2VybmFtZSwgc2VydmljZSwgbWV0aG9kLCBjYik7XG4gIHRoaXMuX211bHRpc3RlcCA9IHRydWU7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuX2NiID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vbkluZm9SZXNwb25zZSA9IGZ1bmN0aW9uKHJlc3BvbnNlcykge1xuICAgIGlmIChzZWxmLl9jYikge1xuICAgICAgdmFyIGNhbGxiYWNrID0gc2VsZi5fY2I7XG4gICAgICBzZWxmLl9jYiA9IHVuZGVmaW5lZDtcbiAgICAgIGNhbGxiYWNrKHJlc3BvbnNlcyk7XG4gICAgfVxuICB9O1xuICB0aGlzLnN1Ym1ldGhvZHMgPSBzdWJtZXRob2RzLnNwbGl0KFJFX0tCSU5UX1NVQk1FVEhPRFMpO1xuICB0aGlzLm9uKCdhYm9ydCcsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2NiICYmIHNlbGYuX2NiKG5ldyBFcnJvcignQXV0aGVudGljYXRpb24gcmVxdWVzdCBhYm9ydGVkJykpO1xuICB9KTtcbn1cbmluaGVyaXRzKEtleWJvYXJkQXV0aENvbnRleHQsIEF1dGhDb250ZXh0KTtcbktleWJvYXJkQXV0aENvbnRleHQucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3N0cmVhbS5yZW1vdmVMaXN0ZW5lcignVVNFUkFVVEhfSU5GT19SRVNQT05TRScsIHRoaXMuX29uSW5mb1Jlc3BvbnNlKTtcbn07XG5LZXlib2FyZEF1dGhDb250ZXh0LnByb3RvdHlwZS5wcm9tcHQgPSBmdW5jdGlvbihwcm9tcHRzLCB0aXRsZSwgaW5zdHJ1Y3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHByb21wdHMpKVxuICAgIHByb21wdHMgPSBbIHByb21wdHMgXTtcblxuICBpZiAodHlwZW9mIHRpdGxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSB0aXRsZTtcbiAgICB0aXRsZSA9IGluc3RydWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBpbnN0cnVjdGlvbnM7XG4gICAgaW5zdHJ1Y3Rpb25zID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9tcHRzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9tcHRzW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvbXB0c1tpXSA9IHtcbiAgICAgICAgcHJvbXB0OiBwcm9tcHRzW2ldLFxuICAgICAgICBlY2hvOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NiID0gY2I7XG4gIHRoaXMuX2luaXRpYWxSZXNwb25zZSA9IHRydWU7XG4gIHRoaXMuX3N0cmVhbS5vbmNlKCdVU0VSQVVUSF9JTkZPX1JFU1BPTlNFJywgdGhpcy5fb25JbmZvUmVzcG9uc2UpO1xuXG4gIHJldHVybiB0aGlzLl9zdHJlYW0uYXV0aEluZm9SZXEodGl0bGUsIGluc3RydWN0aW9ucywgcHJvbXB0cyk7XG59O1xuXG5mdW5jdGlvbiBQS0F1dGhDb250ZXh0KHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgcGtJbmZvLCBjYikge1xuICBBdXRoQ29udGV4dC5jYWxsKHRoaXMsIHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgY2IpO1xuXG4gIHRoaXMua2V5ID0geyBhbGdvOiBwa0luZm8ua2V5QWxnbywgZGF0YTogcGtJbmZvLmtleSB9O1xuICB0aGlzLnNpZ25hdHVyZSA9IHBrSW5mby5zaWduYXR1cmU7XG4gIHZhciBzaWdBbGdvO1xuICBpZiAodGhpcy5zaWduYXR1cmUpIHtcbiAgICAvLyBUT0RPOiBtb3ZlIGtleSB0eXBlIGNoZWNraW5nIGxvZ2ljIHRvIHNzaDItc3RyZWFtc1xuICAgIHN3aXRjaCAocGtJbmZvLmtleUFsZ28pIHtcbiAgICAgIGNhc2UgJ3NzaC1yc2EnOlxuICAgICAgY2FzZSAnc3NoLWRzcyc6XG4gICAgICAgIHNpZ0FsZ28gPSAnc2hhMSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3NoLWVkMjU1MTknOlxuICAgICAgICBzaWdBbGdvID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlY2RzYS1zaGEyLW5pc3RwMjU2JzpcbiAgICAgICAgc2lnQWxnbyA9ICdzaGEyNTYnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAzODQnOlxuICAgICAgICBzaWdBbGdvID0gJ3NoYTM4NCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6XG4gICAgICAgIHNpZ0FsZ28gPSAnc2hhNTEyJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoaXMuc2lnQWxnbyA9IHNpZ0FsZ287XG4gIHRoaXMuYmxvYiA9IHBrSW5mby5ibG9iO1xufVxuaW5oZXJpdHMoUEtBdXRoQ29udGV4dCwgQXV0aENvbnRleHQpO1xuUEtBdXRoQ29udGV4dC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5zaWduYXR1cmUpIHtcbiAgICB0aGlzLl9pbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xuICAgIHRoaXMuX3N0cmVhbS5hdXRoUEtPSyh0aGlzLmtleS5hbGdvLCB0aGlzLmtleS5kYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBBdXRoQ29udGV4dC5wcm90b3R5cGUuYWNjZXB0LmNhbGwodGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIEhvc3RiYXNlZEF1dGhDb250ZXh0KHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgcGtJbmZvLCBjYikge1xuICBBdXRoQ29udGV4dC5jYWxsKHRoaXMsIHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgY2IpO1xuXG4gIHRoaXMua2V5ID0geyBhbGdvOiBwa0luZm8ua2V5QWxnbywgZGF0YTogcGtJbmZvLmtleSB9O1xuICB0aGlzLnNpZ25hdHVyZSA9IHBrSW5mby5zaWduYXR1cmU7XG4gIHZhciBzaWdBbGdvO1xuICBpZiAodGhpcy5zaWduYXR1cmUpIHtcbiAgICAvLyBUT0RPOiBtb3ZlIGtleSB0eXBlIGNoZWNraW5nIGxvZ2ljIHRvIHNzaDItc3RyZWFtc1xuICAgIHN3aXRjaCAocGtJbmZvLmtleUFsZ28pIHtcbiAgICAgIGNhc2UgJ3NzaC1yc2EnOlxuICAgICAgY2FzZSAnc3NoLWRzcyc6XG4gICAgICAgIHNpZ0FsZ28gPSAnc2hhMSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3NoLWVkMjU1MTknOlxuICAgICAgICBzaWdBbGdvID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlY2RzYS1zaGEyLW5pc3RwMjU2JzpcbiAgICAgICAgc2lnQWxnbyA9ICdzaGEyNTYnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VjZHNhLXNoYTItbmlzdHAzODQnOlxuICAgICAgICBzaWdBbGdvID0gJ3NoYTM4NCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZWNkc2Etc2hhMi1uaXN0cDUyMSc6XG4gICAgICAgIHNpZ0FsZ28gPSAnc2hhNTEyJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoaXMuc2lnQWxnbyA9IHNpZ0FsZ287XG4gIHRoaXMuYmxvYiA9IHBrSW5mby5ibG9iO1xuICB0aGlzLmxvY2FsSG9zdG5hbWUgPSBwa0luZm8ubG9jYWxIb3N0bmFtZTtcbiAgdGhpcy5sb2NhbFVzZXJuYW1lID0gcGtJbmZvLmxvY2FsVXNlcm5hbWU7XG59XG5pbmhlcml0cyhIb3N0YmFzZWRBdXRoQ29udGV4dCwgQXV0aENvbnRleHQpO1xuXG5mdW5jdGlvbiBQd2RBdXRoQ29udGV4dChzdHJlYW0sIHVzZXJuYW1lLCBzZXJ2aWNlLCBtZXRob2QsIHBhc3N3b3JkLCBjYikge1xuICBBdXRoQ29udGV4dC5jYWxsKHRoaXMsIHN0cmVhbSwgdXNlcm5hbWUsIHNlcnZpY2UsIG1ldGhvZCwgY2IpO1xuXG4gIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcbn1cbmluaGVyaXRzKFB3ZEF1dGhDb250ZXh0LCBBdXRoQ29udGV4dCk7XG5cblxuZnVuY3Rpb24gb3BlbkNoYW5uZWwoc2VsZiwgdHlwZSwgb3B0cywgY2IpIHtcbiAgLy8gYXNrIHRoZSBjbGllbnQgdG8gb3BlbiBhIGNoYW5uZWwgZm9yIHNvbWUgcHVycG9zZVxuICAvLyAoZS5nLiBhIGZvcndhcmRlZCBUQ1AgY29ubmVjdGlvbilcbiAgdmFyIGxvY2FsQ2hhbiA9IG5leHRDaGFubmVsKHNlbGYpO1xuICB2YXIgaW5pdFdpbmRvdyA9IENoYW5uZWwuTUFYX1dJTkRPVztcbiAgdmFyIG1heFBhY2tldCA9IENoYW5uZWwuUEFDS0VUX1NJWkU7XG4gIHZhciByZXQgPSB0cnVlO1xuXG4gIGlmIChsb2NhbENoYW4gPT09IGZhbHNlKVxuICAgIHJldHVybiBjYihuZXcgRXJyb3IoJ05vIGZyZWUgY2hhbm5lbHMgYXZhaWxhYmxlJykpO1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBzZWxmLl9jaGFubmVsc1tsb2NhbENoYW5dID0gdHJ1ZTtcblxuICB2YXIgc3Noc3RyZWFtID0gc2VsZi5fc3Noc3RyZWFtO1xuICBzc2hzdHJlYW0ub25jZSgnQ0hBTk5FTF9PUEVOX0NPTkZJUk1BVElPTjonICsgbG9jYWxDaGFuLCBmdW5jdGlvbihpbmZvKSB7XG4gICAgc3Noc3RyZWFtLnJlbW92ZUFsbExpc3RlbmVycygnQ0hBTk5FTF9PUEVOX0ZBSUxVUkU6JyArIGxvY2FsQ2hhbik7XG5cbiAgICB2YXIgY2hhbmluZm8gPSB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaW5jb21pbmc6IHtcbiAgICAgICAgaWQ6IGxvY2FsQ2hhbixcbiAgICAgICAgd2luZG93OiBpbml0V2luZG93LFxuICAgICAgICBwYWNrZXRTaXplOiBtYXhQYWNrZXQsXG4gICAgICAgIHN0YXRlOiAnb3BlbidcbiAgICAgIH0sXG4gICAgICBvdXRnb2luZzoge1xuICAgICAgICBpZDogaW5mby5zZW5kZXIsXG4gICAgICAgIHdpbmRvdzogaW5mby53aW5kb3csXG4gICAgICAgIHBhY2tldFNpemU6IGluZm8ucGFja2V0U2l6ZSxcbiAgICAgICAgc3RhdGU6ICdvcGVuJ1xuICAgICAgfVxuICAgIH07XG4gICAgY2IodW5kZWZpbmVkLCBuZXcgQ2hhbm5lbChjaGFuaW5mbywgc2VsZiwgeyBzZXJ2ZXI6IHRydWUgfSkpO1xuICB9KS5vbmNlKCdDSEFOTkVMX09QRU5fRkFJTFVSRTonICsgbG9jYWxDaGFuLCBmdW5jdGlvbihpbmZvKSB7XG4gICAgc3Noc3RyZWFtLnJlbW92ZUFsbExpc3RlbmVycygnQ0hBTk5FTF9PUEVOX0NPTkZJUk1BVElPTjonICsgbG9jYWxDaGFuKTtcblxuICAgIGRlbGV0ZSBzZWxmLl9jaGFubmVsc1tsb2NhbENoYW5dO1xuXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignKFNTSCkgQ2hhbm5lbCBvcGVuIGZhaWx1cmU6ICcgKyBpbmZvLmRlc2NyaXB0aW9uKTtcbiAgICBlcnIucmVhc29uID0gaW5mby5yZWFzb247XG4gICAgZXJyLmxhbmcgPSBpbmZvLmxhbmc7XG4gICAgY2IoZXJyKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGUgPT09ICdmb3J3YXJkZWQtdGNwaXAnKVxuICAgIHJldCA9IHNzaHN0cmVhbS5mb3J3YXJkZWRUY3BpcChsb2NhbENoYW4sIGluaXRXaW5kb3csIG1heFBhY2tldCwgb3B0cyk7XG4gIGVsc2UgaWYgKHR5cGUgPT09ICd4MTEnKVxuICAgIHJldCA9IHNzaHN0cmVhbS54MTEobG9jYWxDaGFuLCBpbml0V2luZG93LCBtYXhQYWNrZXQsIG9wdHMpO1xuICBlbHNlIGlmICh0eXBlID09PSAnZm9yd2FyZGVkLXN0cmVhbWxvY2FsQG9wZW5zc2guY29tJykge1xuICAgIHJldCA9IHNzaHN0cmVhbS5vcGVuc3NoX2ZvcndhcmRlZFN0cmVhbUxvY2FsKGxvY2FsQ2hhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0V2luZG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFBhY2tldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG5leHRDaGFubmVsKHNlbGYpIHtcbiAgLy8gZ2V0IHRoZSBuZXh0IGF2YWlsYWJsZSBjaGFubmVsIG51bWJlclxuXG4gIC8vIGZhc3QgcGF0aFxuICBpZiAoc2VsZi5fY3VyQ2hhbiA8IE1BWF9DSEFOTkVMKVxuICAgIHJldHVybiArK3NlbGYuX2N1ckNoYW47XG5cbiAgLy8gc2xvd2VyIGxvb2t1cCBwYXRoXG4gIGZvciAodmFyIGkgPSAwLCBjaGFubmVscyA9IHNlbGYuX2NoYW5uZWxzOyBpIDwgTUFYX0NIQU5ORUw7ICsraSlcbiAgICBpZiAoIWNoYW5uZWxzW2ldKVxuICAgICAgcmV0dXJuIGk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5cblNlcnZlci5jcmVhdGVTZXJ2ZXIgPSBmdW5jdGlvbihjZmcsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBuZXcgU2VydmVyKGNmZywgbGlzdGVuZXIpO1xufTtcblNlcnZlci5LRUVQQUxJVkVfSU5URVJWQUwgPSAxMDAwO1xuU2VydmVyLktFRVBBTElWRV9DTElFTlRfSU5URVJWQUwgPSAxNTAwMDtcblNlcnZlci5LRUVQQUxJVkVfQ0xJRU5UX0NPVU5UX01BWCA9IDM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyO1xubW9kdWxlLmV4cG9ydHMuSW5jb21pbmdDbGllbnQgPSBDbGllbnQ7XG4iLCJmdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKVxuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiBNYW5hZ2VyKGludGVydmFsLCBzdHJlYW1JbnRlcnZhbCwga2FDb3VudE1heCkge1xuICB2YXIgc3RyZWFtcyA9IHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fdGltZXIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3RpbWVySW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgdGhpcy5fdGltZXJmbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdHJlYW1zLmxlbmd0aCwgcywgbGFzdDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBzID0gc3RyZWFtc1tpXTtcbiAgICAgIGxhc3QgPSBzLl9rYWxhc3Q7XG4gICAgICBpZiAobGFzdCAmJiAobm93IC0gbGFzdCkgPj0gc3RyZWFtSW50ZXJ2YWwpIHtcbiAgICAgICAgaWYgKCsrcy5fa2FjbnQgPiBrYUNvdW50TWF4KSB7XG4gICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignS2VlcGFsaXZlIHRpbWVvdXQnKTtcbiAgICAgICAgICBlcnIubGV2ZWwgPSAnY2xpZW50LXRpbWVvdXQnO1xuICAgICAgICAgIHMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgIHMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgIHNwbGljZU9uZShzdHJlYW1zLCBpKTtcbiAgICAgICAgICAtLWk7XG4gICAgICAgICAgbGVuID0gc3RyZWFtcy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcy5fa2FsYXN0ID0gbm93O1xuICAgICAgICAgIC8vIFhYWDogaWYgdGhlIHNlcnZlciBldmVyIHN0YXJ0cyBzZW5kaW5nIHJlYWwgZ2xvYmFsIHJlcXVlc3RzIHRvIHRoZVxuICAgICAgICAgIC8vICAgICAgY2xpZW50LCB3ZSB3aWxsIG5lZWQgdG8gYWRkIGEgZHVtbXkgY2FsbGJhY2sgaGVyZSB0byBrZWVwIHRoZVxuICAgICAgICAgIC8vICAgICAgY29ycmVjdCByZXBseSBvcmRlclxuICAgICAgICAgIHMucGluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5NYW5hZ2VyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fdGltZXIpXG4gICAgdGhpcy5zdG9wKCk7XG4gIHRoaXMuX3RpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5fdGltZXJmbiwgdGhpcy5fdGltZXJJbnRlcnZhbCk7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl90aW1lcikge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpO1xuICAgIHRoaXMuX3RpbWVyID0gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdmFyIHN0cmVhbXMgPSB0aGlzLl9zdHJlYW1zLFxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgc3RyZWFtLm9uY2UoJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYucmVtb3ZlKHN0cmVhbSk7XG4gIH0pLm9uKCdwYWNrZXQnLCByZXNldEtBKTtcblxuICBzdHJlYW1zW3N0cmVhbXMubGVuZ3RoXSA9IHN0cmVhbTtcblxuICByZXNldEtBKCk7XG5cbiAgaWYgKCF0aGlzLl90aW1lcilcbiAgICB0aGlzLnN0YXJ0KCk7XG5cbiAgZnVuY3Rpb24gcmVzZXRLQSgpIHtcbiAgICBzdHJlYW0uX2thbGFzdCA9IERhdGUubm93KCk7XG4gICAgc3RyZWFtLl9rYWNudCA9IDA7XG4gIH1cbn07XG5cbk1hbmFnZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgc3RyZWFtcyA9IHRoaXMuX3N0cmVhbXMsXG4gICAgICBpbmRleCA9IHN0cmVhbXMuaW5kZXhPZihzdHJlYW0pO1xuICBpZiAoaW5kZXggPiAtMSlcbiAgICBzcGxpY2VPbmUoc3RyZWFtcywgaW5kZXgpO1xuICBpZiAoIXN0cmVhbXMubGVuZ3RoKVxuICAgIHRoaXMuc3RvcCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 399:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__nccwpck_require__(2186));
const ftp_deploy_1 = __nccwpck_require__(157);
const parse_1 = __nccwpck_require__(6089);
async function runDeployment() {
    try {
        const args = {
            server: core.getInput("server", { required: true }),
            username: core.getInput("username", { required: true }),
            password: core.getInput("password", { required: true }),
            port: (0, parse_1.optionalInt)("port", core.getInput("port")),
            protocol: (0, parse_1.optionalProtocol)("protocol", core.getInput("protocol")),
            "local-dir": (0, parse_1.optionalString)(core.getInput("local-dir")),
            "server-dir": (0, parse_1.optionalString)(core.getInput("server-dir")),
            "state-name": (0, parse_1.optionalString)(core.getInput("state-name")),
            "dry-run": (0, parse_1.optionalBoolean)("dry-run", core.getInput("dry-run")),
            "dangerous-clean-slate": (0, parse_1.optionalBoolean)("dangerous-clean-slate", core.getInput("dangerous-clean-slate")),
            "exclude": (0, parse_1.optionalStringArray)("exclude", core.getMultilineInput("exclude")),
            "log-level": (0, parse_1.optionalLogLevel)("log-level", core.getInput("log-level")),
            "security": (0, parse_1.optionalSecurity)("security", core.getInput("security")),
            "timeout": (0, parse_1.optionalInt)("timeout", core.getInput("timeout"))
        };
        await (0, ftp_deploy_1.deploy)(args);
    }
    catch (error) {
        core.setFailed(error);
    }
}
runDeployment();


/***/ }),

/***/ 6089:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.optionalStringArray = exports.optionalInt = exports.optionalSecurity = exports.optionalLogLevel = exports.optionalProtocol = exports.optionalBoolean = exports.optionalString = void 0;
function optionalString(rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    return rawValue;
}
exports.optionalString = optionalString;
function optionalBoolean(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "true") {
        return true;
    }
    if (cleanValue === "false") {
        return false;
    }
    throw new Error(`${argumentName}: invalid parameter - please use a boolean, you provided "${rawValue}". Try true or false instead.`);
}
exports.optionalBoolean = optionalBoolean;
function optionalProtocol(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "ftp") {
        return "ftp";
    }
    if (cleanValue === "ftps") {
        return "ftps";
    }
    if (cleanValue === "sftp") {
        return "sftp";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "ftp", "ftps", or "ftps-legacy" instead.`);
}
exports.optionalProtocol = optionalProtocol;
function optionalLogLevel(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "minimal") {
        return "minimal";
    }
    if (cleanValue === "standard") {
        return "standard";
    }
    if (cleanValue === "verbose") {
        return "verbose";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "minimal", "standard", or "verbose" instead.`);
}
exports.optionalLogLevel = optionalLogLevel;
function optionalSecurity(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "loose") {
        return "loose";
    }
    if (cleanValue === "strict") {
        return "strict";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "loose" or "strict" instead.`);
}
exports.optionalSecurity = optionalSecurity;
function optionalInt(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const valueAsNumber = parseFloat(rawValue);
    if (Number.isInteger(valueAsNumber)) {
        return valueAsNumber;
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try a whole number (no decimals) instead like 1234`);
}
exports.optionalInt = optionalInt;
function optionalStringArray(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    if (typeof rawValue === "string") {
        throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". This option expects an list in the EXACT format described in the readme`);
    }
    return rawValue;
}
exports.optionalStringArray = optionalStringArray;


/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 4300:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 2081:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 9523:
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 9796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __nccwpck_require__(399);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;