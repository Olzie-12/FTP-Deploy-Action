/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        return new URL(proxyVar);
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 5176:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFilter = void 0;
const normalize_1 = __nccwpck_require__(7561);
const util_1 = __nccwpck_require__(9735);
function createFilter(options, ...args) {
    let criteria = args.length <= 1 ? args[0] : args;
    let filters = normalize_1.normalize(criteria, options);
    pathFilter[util_1._filters] = filters;
    return pathFilter;
    function pathFilter(...args) {
        // Does the file path match any of the exclude filters?
        let exclude = filters.exclude.some((filter) => filter(...args));
        if (exclude) {
            return false;
        }
        if (filters.include.length === 0) {
            // Include everything that's not excluded
            return true;
        }
        // Does the file path match any of the include filters?
        let include = filters.include.some((filter) => filter(...args));
        return include;
    }
}
exports.createFilter = createFilter;
//# sourceMappingURL=create-filter.js.map

/***/ }),

/***/ 2405:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filePathFilter = void 0;
const create_filter_1 = __nccwpck_require__(5176);
function filePathFilter(...args) {
    return create_filter_1.createFilter({}, ...args);
}
exports.filePathFilter = filePathFilter;
//# sourceMappingURL=file-path-filter.js.map

/***/ }),

/***/ 3410:
/***/ (function(module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filePathFilter = void 0;
const file_path_filter_1 = __nccwpck_require__(2405);
Object.defineProperty(exports, "filePathFilter", ({ enumerable: true, get: function () { return file_path_filter_1.filePathFilter; } }));
__exportStar(__nccwpck_require__(3225), exports);
var create_filter_1 = __nccwpck_require__(5176);
Object.defineProperty(exports, "createFilter", ({ enumerable: true, get: function () { return create_filter_1.createFilter; } }));
// Export `filePathFilter` as a named export and the default export
exports["default"] = file_path_filter_1.filePathFilter;
// CommonJS default export hack
/* eslint-env commonjs */
if ( true && typeof module.exports === "object") {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7561:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalize = void 0;
const globToRegExp = __nccwpck_require__(7117);
const path = __nccwpck_require__(1017);
const util_1 = __nccwpck_require__(9735);
/**
 * Normalizes the user-provided filter criteria. The normalized form is a `Filters` object
 * whose `include` and `exclude` properties are both `FilterFunction` arrays.
 */
function normalize(criteria, opts) {
    let filters = {
        include: [],
        exclude: [],
    };
    let options = normalizeOptions(opts);
    // Convert each criterion to a FilterFunction
    let tuples = normalizeCriteria(criteria, options);
    // Populate the `include` and `exclude` arrays
    for (let [filter, filterFunction] of tuples) {
        filters[filter].push(filterFunction);
    }
    return filters;
}
exports.normalize = normalize;
/**
 * Fills-in defaults for any options that weren't specified by the caller.
 */
function normalizeOptions(options) {
    return {
        // TODO: Remove the "getPath" fallback in the next minor release
        map: options.map || options.getPath || String,
        sep: options.sep || path.sep,
    };
}
/**
 * Creates a `FilterFunction` for each given criterion.
 */
function normalizeCriteria(criteria, options, filter) {
    let tuples = [];
    if (Array.isArray(criteria)) {
        for (let criterion of criteria) {
            tuples.push(...normalizeCriteria(criterion, options, filter));
        }
    }
    else if (util_1.isPathFilter(criteria)) {
        for (let filterFunction of criteria[util_1._filters].include) {
            tuples.push(["include", filterFunction]);
        }
        for (let filterFunction of criteria[util_1._filters].exclude) {
            tuples.push(["exclude", filterFunction]);
        }
    }
    else if (util_1.isFilterCriterion(criteria)) {
        tuples.push(normalizeCriterion(criteria, options, filter));
    }
    else if (criteria && typeof criteria === "object" && !filter) {
        if (criteria.include !== undefined) {
            tuples.push(...normalizeCriteria(criteria.include, options, "include"));
        }
        if (criteria.exclude !== undefined) {
            tuples.push(...normalizeCriteria(criteria.exclude, options, "exclude"));
        }
    }
    else {
        throw new Error(`Invalid filter criteria: ${criteria}`);
    }
    return tuples;
}
/**
 * Creates a `FilterFunction` for the given criterion.
 *
 * @param criteria - One or more filter critiera
 * @param options - Options for how the `FilterFunction` should behave
 * @param filter - The type of filter. Defaults to `include`, except for glob patterns that start with "!"
 */
function normalizeCriterion(criterion, options, filter) {
    const globOptions = { extended: true, globstar: true };
    let type = typeof criterion;
    let filterFunction;
    if (type === "function") {
        filterFunction = criterion;
    }
    else if (type === "boolean") {
        let bool = criterion;
        filterFunction = function booleanFilter() {
            return bool;
        };
    }
    else if (type === "string") {
        let glob = criterion;
        let invert = false;
        if (glob.startsWith("!")) {
            glob = glob.substr(1);
            invert = Boolean(filter);
            filter = filter || "exclude";
        }
        let pattern = globToRegExp(glob, globOptions);
        filterFunction = createGlobFilter(pattern, options, invert);
    }
    else if (criterion instanceof RegExp) {
        let pattern = criterion;
        let { map } = options;
        filterFunction = function regExpFilter(...args) {
            let filePath = map(...args);
            return pattern.test(filePath);
        };
    }
    else {
        throw new Error(`Invalid filter criteria: ${criterion}`);
    }
    return [filter || "include", filterFunction];
}
/**
 * Creates a `FilterFunction` for filtering based on glob patterns
 */
function createGlobFilter(pattern, options, invert) {
    let { map, sep } = options;
    return function globFilter(...args) {
        let filePath = map(...args);
        if (sep !== "/") {
            // Glob patterns always expect forward slashes, even on Windows
            filePath = filePath.replace(new RegExp("\\" + sep, "g"), "/");
        }
        let match = pattern.test(filePath);
        return invert ? !match : match;
    };
}
//# sourceMappingURL=normalize.js.map

/***/ }),

/***/ 3225:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 9735:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isPathFilter = exports.isFilterCriterion = exports._filters = void 0;
/**
 * Symbol used to store the underlying filters of a `pathFilter()` function.
 */
exports._filters = Symbol("_filters");
/**
 * Determines whether the given value is a `FilterCriterion`.
 */
function isFilterCriterion(value) {
    let type = typeof value;
    return type === "string" ||
        type === "boolean" ||
        type === "function" ||
        value instanceof RegExp;
}
exports.isFilterCriterion = isFilterCriterion;
/**
 * Determines whether the given value is one of our internal `pathFilter()` functions.
 */
function isPathFilter(value) {
    let fn = value;
    return fn &&
        typeof fn === "function" &&
        typeof fn[exports._filters] === "object";
}
exports.isPathFilter = isPathFilter;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 504:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asyncForEach = void 0;
/**
 * Simultaneously processes all items in the given array.
 *
 * @param array - The array to iterate over
 * @param iterator - The function to call for each item in the array
 * @param done - The function to call when all iterators have completed
 *
 * @internal
 */
function asyncForEach(array, iterator, done) {
    if (!Array.isArray(array)) {
        throw new TypeError(`${array} is not an array`);
    }
    if (array.length === 0) {
        // NOTE: Normally a bad idea to mix sync and async, but it's safe here because
        // of the way that this method is currently used by DirectoryReader.
        done();
        return;
    }
    // Simultaneously process all items in the array.
    let pending = array.length;
    for (let item of array) {
        iterator(item, callback);
    }
    function callback() {
        if (--pending === 0) {
            done();
        }
    }
}
exports.asyncForEach = asyncForEach;
//# sourceMappingURL=for-each.js.map

/***/ }),

/***/ 5833:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirAsync = void 0;
const fs = __nccwpck_require__(7147);
const directory_reader_1 = __nccwpck_require__(4918);
const for_each_1 = __nccwpck_require__(504);
const asyncFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirAsync(dir, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    let promise = new Promise((resolve, reject) => {
        let results = [];
        let reader = new directory_reader_1.DirectoryReader(dir, options, asyncFacade);
        let stream = reader.stream;
        stream.on("error", (err) => {
            reject(err);
            stream.pause();
        });
        stream.on("data", (result) => {
            results.push(result);
        });
        stream.on("end", () => {
            resolve(results);
        });
    });
    if (callback) {
        promise.then((results) => callback(null, results), (err) => callback(err, undefined));
    }
    else {
        return promise;
    }
}
exports.readdirAsync = readdirAsync;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8188:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.callOnce = exports.safeCall = void 0;
/**
 * Calls a function with the given arguments, and ensures that the error-first callback is _always_
 * invoked exactly once, even if the function throws an error.
 *
 * @param fn - The function to invoke
 * @param args - The arguments to pass to the function. The final argument must be a callback function.
 *
 * @internal
 */
function safeCall(fn, input, callback) {
    // Replace the callback function with a wrapper that ensures it will only be called once
    callback = callOnce(callback);
    try {
        fn(input, callback);
    }
    catch (err) {
        callback(err, undefined);
    }
}
exports.safeCall = safeCall;
/**
 * Returns a wrapper function that ensures the given callback function is only called once.
 * Subsequent calls are ignored, unless the first argument is an Error, in which case the
 * error is thrown.
 *
 * @param callback - The function that should only be called once
 *
 * @internal
 */
function callOnce(callback) {
    let fulfilled = false;
    return function onceWrapper(err, result) {
        if (!fulfilled) {
            fulfilled = true;
            callback.call(this, err, result);
        }
        else if (err) {
            // The callback has already been called, but now an error has occurred
            // (most likely inside the callback function). So re-throw the error,
            // so it gets handled further up the call stack
            throw err;
        }
    };
}
exports.callOnce = callOnce;
//# sourceMappingURL=call.js.map

/***/ }),

/***/ 4918:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DirectoryReader = void 0;
const path = __nccwpck_require__(1017);
const stream_1 = __nccwpck_require__(2781);
const call_1 = __nccwpck_require__(8188);
const normalize_options_1 = __nccwpck_require__(2977);
const stat_1 = __nccwpck_require__(9445);
/**
 * Asynchronously reads the contents of a directory and streams the results
 * via a `ReadableStream`.
 *
 * @internal
 */
class DirectoryReader {
    /**
     * @param dir - The absolute or relative directory path to read
     * @param [options] - User-specified options, if any (see `normalizeOptions()`)
     * @param facade - sync or async function implementations
     * @param emit - Indicates whether the reader should emit "file", "directory", and "symlink" events.
     */
    constructor(dir, options, facade, emit = false) {
        this.options = normalize_options_1.normalizeOptions(options, facade, emit);
        // Indicates whether we should keep reading
        // This is set false if stream.Readable.push() returns false.
        this.shouldRead = true;
        // The directories to read
        // (initialized with the top-level directory)
        this.queue = [{
                path: dir,
                basePath: this.options.basePath,
                depth: 0
            }];
        // The number of directories that are currently being processed
        this.pending = 0;
        // The data that has been read, but not yet emitted
        this.buffer = [];
        this.stream = new stream_1.Readable({ objectMode: true });
        this.stream._read = () => {
            // Start (or resume) reading
            this.shouldRead = true;
            // If we have data in the buffer, then send the next chunk
            if (this.buffer.length > 0) {
                this.pushFromBuffer();
            }
            // If we have directories queued, then start processing the next one
            if (this.queue.length > 0) {
                this.readNextDirectory();
            }
            this.checkForEOF();
        };
    }
    /**
     * Reads the next directory in the queue
     */
    readNextDirectory() {
        let { facade } = this.options;
        let dir = this.queue.shift();
        this.pending++;
        // Read the directory listing
        call_1.safeCall(facade.fs.readdir, dir.path, (err, items) => {
            if (err) {
                // fs.readdir threw an error
                this.emit("error", err);
                return this.finishedReadingDirectory();
            }
            try {
                // Process each item in the directory (simultaneously, if async)
                facade.forEach(items, this.processItem.bind(this, dir), this.finishedReadingDirectory.bind(this, dir));
            }
            catch (err2) {
                // facade.forEach threw an error
                // (probably because fs.readdir returned an invalid result)
                this.emit("error", err2);
                this.finishedReadingDirectory();
            }
        });
    }
    /**
     * This method is called after all items in a directory have been processed.
     *
     * NOTE: This does not necessarily mean that the reader is finished, since there may still
     * be other directories queued or pending.
     */
    finishedReadingDirectory() {
        this.pending--;
        if (this.shouldRead) {
            // If we have directories queued, then start processing the next one
            if (this.queue.length > 0) {
                this.readNextDirectory();
            }
            this.checkForEOF();
        }
    }
    /**
     * Determines whether the reader has finished processing all items in all directories.
     * If so, then the "end" event is fired (via {@Readable#push})
     */
    checkForEOF() {
        if (this.buffer.length === 0 && // The stuff we've already read
            this.pending === 0 && // The stuff we're currently reading
            this.queue.length === 0) { // The stuff we haven't read yet
            // There's no more stuff!
            this.stream.push(null);
        }
    }
    /**
     * Processes a single item in a directory.
     *
     * If the item is a directory, and `option.deep` is enabled, then the item will be added
     * to the directory queue.
     *
     * If the item meets the filter criteria, then it will be emitted to the reader's stream.
     *
     * @param dir - A directory object from the queue
     * @param item - The name of the item (name only, no path)
     * @param done - A callback function that is called after the item has been processed
     */
    processItem(dir, item, done) {
        let stream = this.stream;
        let options = this.options;
        let itemPath = dir.basePath + item;
        let fullPath = path.join(dir.path, item);
        // If `options.deep` is a number, and we've already recursed to the max depth,
        // then there's no need to check fs.Stats to know if it's a directory.
        // If `options.deep` is a function, then we'll need fs.Stats
        let maxDepthReached = dir.depth >= options.recurseDepth;
        // Do we need to call `fs.stat`?
        let needStats = !maxDepthReached || // we need the fs.Stats to know if it's a directory
            options.stats || // the user wants fs.Stats objects returned
            options.recurseFnNeedsStats || // we need fs.Stats for the recurse function
            options.filterFnNeedsStats || // we need fs.Stats for the filter function
            stream.listenerCount("file") || // we need the fs.Stats to know if it's a file
            stream.listenerCount("directory") || // we need the fs.Stats to know if it's a directory
            stream.listenerCount("symlink"); // we need the fs.Stats to know if it's a symlink
        // If we don't need stats, then exit early
        if (!needStats) {
            if (this.filter({ path: itemPath })) {
                this.pushOrBuffer({ data: itemPath });
            }
            return done();
        }
        // Get the fs.Stats object for this path
        stat_1.stat(options.facade.fs, fullPath, (err, stats) => {
            if (err) {
                // fs.stat threw an error
                this.emit("error", err);
                return done();
            }
            try {
                // Add the item's path to the fs.Stats object
                // The base of this path, and its separators are determined by the options
                // (i.e. options.basePath and options.sep)
                stats.path = itemPath;
                // Add depth of the path to the fs.Stats object for use this in the filter function
                stats.depth = dir.depth;
                if (this.shouldRecurse(stats, maxDepthReached)) {
                    // Add this subdirectory to the queue
                    this.queue.push({
                        path: fullPath,
                        basePath: itemPath + options.sep,
                        depth: dir.depth + 1,
                    });
                }
                // Determine whether this item matches the filter criteria
                if (this.filter(stats)) {
                    this.pushOrBuffer({
                        data: options.stats ? stats : itemPath,
                        file: stats.isFile(),
                        directory: stats.isDirectory(),
                        symlink: stats.isSymbolicLink(),
                    });
                }
                done();
            }
            catch (err2) {
                // An error occurred while processing the item
                // (probably during a user-specified function, such as options.deep, options.filter, etc.)
                this.emit("error", err2);
                done();
            }
        });
    }
    /**
     * Pushes the given chunk of data to the stream, or adds it to the buffer,
     * depending on the state of the stream.
     */
    pushOrBuffer(chunk) {
        // Add the chunk to the buffer
        this.buffer.push(chunk);
        // If we're still reading, then immediately emit the next chunk in the buffer
        // (which may or may not be the chunk that we just added)
        if (this.shouldRead) {
            this.pushFromBuffer();
        }
    }
    /**
     * Immediately pushes the next chunk in the buffer to the reader's stream.
     * The "data" event will always be fired (via `Readable.push()`).
     * In addition, the "file", "directory", and/or "symlink" events may be fired,
     * depending on the type of properties of the chunk.
     */
    pushFromBuffer() {
        let stream = this.stream;
        let chunk = this.buffer.shift();
        // Stream the data
        try {
            this.shouldRead = stream.push(chunk.data);
        }
        catch (err) {
            this.emit("error", err);
        }
        if (this.options.emit) {
            // Also emit specific events, based on the type of chunk
            chunk.file && this.emit("file", chunk.data);
            chunk.symlink && this.emit("symlink", chunk.data);
            chunk.directory && this.emit("directory", chunk.data);
        }
    }
    /**
     * Determines whether the given directory meets the user-specified recursion criteria.
     * If the user didn't specify recursion criteria, then this function will default to true.
     *
     * @param stats - The directory's `Stats` object
     * @param maxDepthReached - Whether we've already crawled the user-specified depth
     */
    shouldRecurse(stats, maxDepthReached) {
        let { recurseFn } = this.options;
        if (maxDepthReached) {
            // We've already crawled to the maximum depth. So no more recursion.
            return false;
        }
        else if (!stats.isDirectory()) {
            // It's not a directory. So don't try to crawl it.
            return false;
        }
        else if (recurseFn) {
            try {
                // Run the user-specified recursion criteria
                return !!recurseFn(stats);
            }
            catch (err) {
                // An error occurred in the user's code.
                // In Sync and Async modes, this will return an error.
                // In Streaming mode, we emit an "error" event, but continue processing
                this.emit("error", err);
            }
        }
        else {
            // No recursion function was specified, and we're within the maximum depth.
            // So crawl this directory.
            return true;
        }
    }
    /**
     * Determines whether the given item meets the user-specified filter criteria.
     * If the user didn't specify a filter, then this function will always return true.
     *
     * @param stats - The item's `Stats` object, or an object with just a `path` property
     */
    filter(stats) {
        let { filterFn } = this.options;
        if (filterFn) {
            try {
                // Run the user-specified filter function
                return !!filterFn(stats);
            }
            catch (err) {
                // An error occurred in the user's code.
                // In Sync and Async modes, this will return an error.
                // In Streaming mode, we emit an "error" event, but continue processing
                this.emit("error", err);
            }
        }
        else {
            // No filter was specified, so match everything
            return true;
        }
    }
    /**
     * Emits an event.  If one of the event listeners throws an error,
     * then an "error" event is emitted.
     */
    emit(eventName, data) {
        let stream = this.stream;
        try {
            stream.emit(eventName, data);
        }
        catch (err) {
            if (eventName === "error") {
                // Don't recursively emit "error" events.
                // If the first one fails, then just throw
                throw err;
            }
            else {
                stream.emit("error", err);
            }
        }
    }
}
exports.DirectoryReader = DirectoryReader;
//# sourceMappingURL=directory-reader.js.map

/***/ }),

/***/ 8811:
/***/ (function(module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = void 0;
const async_1 = __nccwpck_require__(5833);
const iterator_1 = __nccwpck_require__(5944);
const stream_1 = __nccwpck_require__(5521);
const sync_1 = __nccwpck_require__(704);
const readdir = async_1.readdirAsync;
exports.readdir = readdir;
readdir.sync = sync_1.readdirSync;
readdir.async = async_1.readdirAsync;
readdir.stream = stream_1.readdirStream;
readdir.iterator = iterator_1.readdirIterator;
var async_2 = __nccwpck_require__(5833);
Object.defineProperty(exports, "readdirAsync", ({ enumerable: true, get: function () { return async_2.readdirAsync; } }));
var iterator_2 = __nccwpck_require__(5944);
Object.defineProperty(exports, "readdirIterator", ({ enumerable: true, get: function () { return iterator_2.readdirIterator; } }));
var stream_2 = __nccwpck_require__(5521);
Object.defineProperty(exports, "readdirStream", ({ enumerable: true, get: function () { return stream_2.readdirStream; } }));
var sync_2 = __nccwpck_require__(704);
Object.defineProperty(exports, "readdirSync", ({ enumerable: true, get: function () { return sync_2.readdirSync; } }));
__exportStar(__nccwpck_require__(6299), exports);
exports["default"] = readdir;
// CommonJS default export hack
/* eslint-env commonjs */
if ( true && typeof module.exports === "object") {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5944:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirIterator = void 0;
const fs = __nccwpck_require__(7147);
const for_each_1 = __nccwpck_require__(504);
const directory_reader_1 = __nccwpck_require__(4918);
const pending_1 = __nccwpck_require__(8553);
const iteratorFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirIterator(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, iteratorFacade);
    let stream = reader.stream;
    let pendingValues = [];
    let pendingReads = [];
    let error;
    let readable = false;
    let done = false;
    stream.on("error", function streamError(err) {
        error = err;
        stream.pause();
        fulfillPendingReads();
    });
    stream.on("end", function streamEnd() {
        done = true;
        fulfillPendingReads();
    });
    stream.on("readable", function streamReadable() {
        readable = true;
        fulfillPendingReads();
    });
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        next() {
            let pendingRead = pending_1.pending();
            pendingReads.push(pendingRead);
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(fulfillPendingReads);
            return pendingRead.promise;
        }
    };
    function fulfillPendingReads() {
        if (error) {
            while (pendingReads.length > 0) {
                let pendingRead = pendingReads.shift();
                pendingRead.reject(error);
            }
        }
        else if (pendingReads.length > 0) {
            while (pendingReads.length > 0) {
                let pendingRead = pendingReads.shift();
                let value = getNextValue();
                if (value) {
                    pendingRead.resolve({ value });
                }
                else if (done) {
                    pendingRead.resolve({ done, value });
                }
                else {
                    pendingReads.unshift(pendingRead);
                    break;
                }
            }
        }
    }
    function getNextValue() {
        let value = pendingValues.shift();
        if (value) {
            return value;
        }
        else if (readable) {
            readable = false;
            while (true) {
                value = stream.read();
                if (value) {
                    pendingValues.push(value);
                }
                else {
                    break;
                }
            }
            return pendingValues.shift();
        }
    }
}
exports.readdirIterator = readdirIterator;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8553:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pending = void 0;
/**
 * Returns a `Promise` and the functions to resolve or reject it.
 * @internal
 */
function pending() {
    let resolve, reject;
    let promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        resolve(result) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve(result).then(resolve);
        },
        reject(reason) {
            Promise.reject(reason).catch(reject);
        }
    };
}
exports.pending = pending;
//# sourceMappingURL=pending.js.map

/***/ }),

/***/ 2977:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeOptions = void 0;
const file_path_filter_1 = __nccwpck_require__(3410);
const path = __nccwpck_require__(1017);
/**
 * Validates and normalizes the options argument
 *
 * @param [options] - User-specified options, if any
 * @param facade - sync or async function implementations
 * @param emit - Indicates whether the reader should emit "file", "directory", and "symlink" events.
 *
 * @internal
 */
function normalizeOptions(options, facade, emit) {
    if (options === null || options === undefined) {
        options = {};
    }
    else if (typeof options !== "object") {
        throw new TypeError("options must be an object");
    }
    let sep = options.sep;
    if (sep === null || sep === undefined) {
        sep = path.sep;
    }
    else if (typeof sep !== "string") {
        throw new TypeError("options.sep must be a string");
    }
    let stats = Boolean(options.stats || options.withFileTypes);
    let recurseDepth, recurseFn, recurseFnNeedsStats = false, deep = options.deep;
    if (deep === null || deep === undefined) {
        recurseDepth = 0;
    }
    else if (typeof deep === "boolean") {
        recurseDepth = deep ? Infinity : 0;
    }
    else if (typeof deep === "number") {
        if (deep < 0 || isNaN(deep)) {
            throw new Error("options.deep must be a positive number");
        }
        else if (Math.floor(deep) !== deep) {
            throw new Error("options.deep must be an integer");
        }
        else {
            recurseDepth = deep;
        }
    }
    else if (typeof deep === "function") {
        // Recursion functions require a Stats object
        recurseFnNeedsStats = true;
        recurseDepth = Infinity;
        recurseFn = deep;
    }
    else if (deep instanceof RegExp || (typeof deep === "string" && deep.length > 0)) {
        recurseDepth = Infinity;
        recurseFn = file_path_filter_1.createFilter({ map, sep }, deep);
    }
    else {
        throw new TypeError("options.deep must be a boolean, number, function, regular expression, or glob pattern");
    }
    let filterFn, filterFnNeedsStats = false, filter = options.filter;
    if (filter !== null && filter !== undefined) {
        if (typeof filter === "function") {
            // Filter functions requres a Stats object
            filterFnNeedsStats = true;
            filterFn = filter;
        }
        else if (filter instanceof RegExp ||
            typeof filter === "boolean" ||
            (typeof filter === "string" && filter.length > 0)) {
            filterFn = file_path_filter_1.createFilter({ map, sep }, filter);
        }
        else {
            throw new TypeError("options.filter must be a boolean, function, regular expression, or glob pattern");
        }
    }
    let basePath = options.basePath;
    if (basePath === null || basePath === undefined) {
        basePath = "";
    }
    else if (typeof basePath === "string") {
        // Append a path separator to the basePath, if necessary
        if (basePath && basePath.substr(-1) !== sep) {
            basePath += sep;
        }
    }
    else {
        throw new TypeError("options.basePath must be a string");
    }
    // Determine which facade methods to use
    if (options.fs === null || options.fs === undefined) {
        // The user didn't provide their own facades, so use our internal ones
    }
    else if (typeof options.fs === "object") {
        // Merge the internal facade methods with the user-provided `fs` facades
        facade = Object.assign({}, facade);
        facade.fs = Object.assign({}, facade.fs, options.fs);
    }
    else {
        throw new TypeError("options.fs must be an object");
    }
    return {
        recurseDepth,
        recurseFn,
        recurseFnNeedsStats,
        filterFn,
        filterFnNeedsStats,
        stats,
        sep,
        basePath,
        facade,
        emit,
    };
}
exports.normalizeOptions = normalizeOptions;
/**
 * Maps our modified fs.Stats objects to file paths
 */
function map(stats) {
    return stats.path;
}
//# sourceMappingURL=normalize-options.js.map

/***/ }),

/***/ 9445:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stat = void 0;
const call_1 = __nccwpck_require__(8188);
/**
 * Retrieves the `Stats` for the given path. If the path is a symbolic link,
 * then the Stats of the symlink's target are returned instead.  If the symlink is broken,
 * then the Stats of the symlink itself are returned.
 *
 * @param fs - Synchronous or Asynchronouse facade for the "fs" module
 * @param path - The path to return stats for
 *
 * @internal
 */
function stat(fs, path, callback) {
    let isSymLink = false;
    call_1.safeCall(fs.lstat, path, (err, lstats) => {
        if (err) {
            // fs.lstat threw an eror
            return callback(err, undefined);
        }
        try {
            isSymLink = lstats.isSymbolicLink();
        }
        catch (err2) {
            // lstats.isSymbolicLink() threw an error
            // (probably because fs.lstat returned an invalid result)
            return callback(err2, undefined);
        }
        if (isSymLink) {
            // Try to resolve the symlink
            symlinkStat(fs, path, lstats, callback);
        }
        else {
            // It's not a symlink, so return the stats as-is
            callback(null, lstats);
        }
    });
}
exports.stat = stat;
/**
 * Retrieves the `Stats` for the target of the given symlink.
 * If the symlink is broken, then the Stats of the symlink itself are returned.
 *
 * @param fs - Synchronous or Asynchronouse facade for the "fs" module
 * @param path - The path of the symlink to return stats for
 * @param lstats - The stats of the symlink
 */
function symlinkStat(fs, path, lstats, callback) {
    call_1.safeCall(fs.stat, path, (err, stats) => {
        if (err) {
            // The symlink is broken, so return the stats for the link itself
            return callback(null, lstats);
        }
        try {
            // Return the stats for the resolved symlink target,
            // and override the `isSymbolicLink` method to indicate that it's a symlink
            stats.isSymbolicLink = () => true;
        }
        catch (err2) {
            // Setting stats.isSymbolicLink threw an error
            // (probably because fs.stat returned an invalid result)
            return callback(err2, undefined);
        }
        callback(null, stats);
    });
}
//# sourceMappingURL=stat.js.map

/***/ }),

/***/ 5521:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirStream = void 0;
const fs = __nccwpck_require__(7147);
const for_each_1 = __nccwpck_require__(504);
const directory_reader_1 = __nccwpck_require__(4918);
const streamFacade = { fs, forEach: for_each_1.asyncForEach };
function readdirStream(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, streamFacade, true);
    return reader.stream;
}
exports.readdirStream = readdirStream;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7448:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.syncForEach = void 0;
/**
 * A facade that allows `Array.forEach()` to be called as though it were asynchronous.
 *
 * @param array - The array to iterate over
 * @param iterator - The function to call for each item in the array
 * @param done - The function to call when all iterators have completed
 *
 * @internal
 */
function syncForEach(array, iterator, done) {
    if (!Array.isArray(array)) {
        throw new TypeError(`${array} is not an array`);
    }
    for (let item of array) {
        iterator(item, () => {
            // Note: No error-handling here because this is currently only ever called
            // by DirectoryReader, which never passes an `error` parameter to the callback.
            // Instead, DirectoryReader emits an "error" event if an error occurs.
        });
    }
    done();
}
exports.syncForEach = syncForEach;
//# sourceMappingURL=for-each.js.map

/***/ }),

/***/ 3073:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.syncFS = void 0;
const fs = __nccwpck_require__(7147);
const call_1 = __nccwpck_require__(8188);
/**
 * Synchronous versions of `fs` methods.
 *
 * @internal
 */
exports.syncFS = {
    /**
     * A facade around `fs.readdirSync()` that allows it to be called
     * the same way as `fs.readdir()`.
     */
    readdir(dir, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let items = fs.readdirSync(dir);
            callback(null, items);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
    /**
     * A facade around `fs.statSync()` that allows it to be called
     * the same way as `fs.stat()`.
     */
    stat(path, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let stats = fs.statSync(path);
            callback(null, stats);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
    /**
     * A facade around `fs.lstatSync()` that allows it to be called
     * the same way as `fs.lstat()`.
     */
    lstat(path, callback) {
        // Make sure the callback is only called once
        callback = call_1.callOnce(callback);
        try {
            let stats = fs.lstatSync(path);
            callback(null, stats);
        }
        catch (err) {
            callback(err, undefined);
        }
    },
};
//# sourceMappingURL=fs.js.map

/***/ }),

/***/ 704:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdirSync = void 0;
const directory_reader_1 = __nccwpck_require__(4918);
const for_each_1 = __nccwpck_require__(7448);
const fs_1 = __nccwpck_require__(3073);
const syncFacade = { fs: fs_1.syncFS, forEach: for_each_1.syncForEach };
function readdirSync(dir, options) {
    let reader = new directory_reader_1.DirectoryReader(dir, options, syncFacade);
    let stream = reader.stream;
    let results = [];
    let data = stream.read();
    while (data !== null) {
        results.push(data);
        data = stream.read();
    }
    return results;
}
exports.readdirSync = readdirSync;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6299:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types-public.js.map

/***/ }),

/***/ 6448:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HashDiff = exports.fileHash = void 0;
const fs_1 = __importDefault(__nccwpck_require__(7147));
const crypto_1 = __importDefault(__nccwpck_require__(6113));
function fileHash(filename, algorithm) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            // Algorithm depends on availability of OpenSSL on platform
            // Another algorithms: "sha1", "md5", "sha256", "sha512" ...
            let shasum = crypto_1.default.createHash(algorithm);
            try {
                let s = fs_1.default.createReadStream(filename);
                s.on("data", function (data) {
                    shasum.update(data);
                });
                s.on("error", function (error) {
                    reject(error);
                });
                // making digest
                s.on("end", function () {
                    const hash = shasum.digest("hex");
                    return resolve(hash);
                });
            }
            catch (error) {
                return reject("calc fail");
            }
        });
    });
}
exports.fileHash = fileHash;
class HashDiff {
    getDiffs(localFiles, serverFiles) {
        var _a, _b, _c;
        const uploadList = [];
        const deleteList = [];
        const replaceList = [];
        const sameList = [];
        let sizeUpload = 0;
        let sizeDelete = 0;
        let sizeReplace = 0;
        // alphabetize each list based off path
        const localFilesSorted = localFiles.data.sort((first, second) => first.name.localeCompare(second.name));
        const serverFilesSorted = serverFiles.data.sort((first, second) => first.name.localeCompare(second.name));
        let localPosition = 0;
        let serverPosition = 0;
        while (localPosition + serverPosition < localFilesSorted.length + serverFilesSorted.length) {
            let localFile = localFilesSorted[localPosition];
            let serverFile = serverFilesSorted[serverPosition];
            let fileNameCompare = 0;
            if (localFile === undefined) {
                fileNameCompare = 1;
            }
            if (serverFile === undefined) {
                fileNameCompare = -1;
            }
            if (localFile !== undefined && serverFile !== undefined) {
                fileNameCompare = localFile.name.localeCompare(serverFile.name);
            }
            if (fileNameCompare < 0) {
                uploadList.push(localFile);
                sizeUpload += (_a = localFile.size) !== null && _a !== void 0 ? _a : 0;
                localPosition += 1;
            }
            else if (fileNameCompare > 0) {
                deleteList.push(serverFile);
                sizeDelete += (_b = serverFile.size) !== null && _b !== void 0 ? _b : 0;
                serverPosition += 1;
            }
            else if (fileNameCompare === 0) {
                // paths are a match
                if (localFile.type === "file" && serverFile.type === "file") {
                    if (localFile.hash === serverFile.hash) {
                        sameList.push(localFile);
                    }
                    else {
                        sizeReplace += (_c = localFile.size) !== null && _c !== void 0 ? _c : 0;
                        replaceList.push(localFile);
                    }
                }
                localPosition += 1;
                serverPosition += 1;
            }
        }
        // optimize modifications
        let foldersToDelete = deleteList.filter((item) => item.type === "folder");
        // remove files/folders that have a nested parent folder we plan on deleting
        const optimizedDeleteList = deleteList.filter((itemToDelete) => {
            const parentFolderIsBeingDeleted = foldersToDelete.find((folder) => {
                const isSameFile = itemToDelete.name === folder.name;
                const parentFolderExists = itemToDelete.name.startsWith(folder.name);
                return parentFolderExists && !isSameFile;
            }) !== undefined;
            if (parentFolderIsBeingDeleted) {
                // a parent folder is being deleted, no need to delete this one
                return false;
            }
            return true;
        });
        return {
            upload: uploadList,
            delete: optimizedDeleteList,
            replace: replaceList,
            same: sameList,
            sizeDelete,
            sizeReplace,
            sizeUpload
        };
    }
}
exports.HashDiff = HashDiff;


/***/ }),

/***/ 7154:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deploy = exports.getServerFiles = exports.clearWorkingDir = void 0;
const ftp = __importStar(__nccwpck_require__(7951));
const fs_1 = __importDefault(__nccwpck_require__(7147));
const types_1 = __nccwpck_require__(9235);
const HashDiff_1 = __nccwpck_require__(6448);
const utilities_1 = __nccwpck_require__(6969);
const pretty_bytes_1 = __importDefault(__nccwpck_require__(5168));
const errorHandling_1 = __nccwpck_require__(1565);
const syncProvider_1 = __nccwpck_require__(9267);
const localFiles_1 = __nccwpck_require__(6757);
// async function downloadFileList(client: ftp.Client, logger: ILogger, path: string): Promise<IFileList> {
//     // note: originally this was using a writable stream instead of a buffer file
//     // basic-ftp doesn't seam to close the connection when using steams over some ftps connections. This appears to be dependent on the ftp server
//     const tempFileNameHack = ".ftp-deploy-sync-server-state-buffer-file---delete.json";
//     await retryRequest(logger, async () => await client.download(tempFileNameHack, path).catch(reason => {
//         console.log(reason)
//         fs.unlinkSync(tempFileNameHack);
//     }));
//
//     const fileAsString = fs.readFileSync(tempFileNameHack, {encoding: "utf-8"});
//     const fileAsObject = JSON.parse(fileAsString) as IFileList;
//
//     fs.unlinkSync(tempFileNameHack);
//
//     return fileAsObject;
// }
function createLocalState(localFiles, logger, args) {
    logger.verbose(`Creating local state at ${args["local-dir"]}${args["state-name"]}`);
    fs_1.default.writeFileSync(`${args["local-dir"]}${args["state-name"]}`, JSON.stringify(localFiles, undefined, 4), { encoding: "utf8" });
    logger.verbose("Local state created");
}
function connect(client, args, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (args.protocol == "sftp") {
                yield client.connect({
                    host: args.server,
                    user: args.username,
                    password: args.password,
                    port: args.port,
                    protocol: "sftp",
                }, {
                    timeout: args.timeout,
                });
            }
            else {
                yield client.connect({
                    host: args.server,
                    user: args.username,
                    password: args.password,
                    port: args.port,
                    protocol: args.protocol,
                }, {
                    secureOptions: {
                        rejectUnauthorized: args.security == "strict",
                        timeout: args.timeout,
                    }
                });
            }
        }
        catch (error) {
            logger.all(args.protocol);
            logger.all(args.server);
            logger.all(args.username);
            logger.all(args.password);
            logger.all("Failed to connect, are you sure your server works via FTP or FTPS? Users sometimes get this error when the server only supports SFTP.");
            throw error;
        }
    });
}
function clearWorkingDir(client, dir) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield client.removeFolder(dir);
        }
        catch (error) {
            console.log(error);
        }
        // for (const file of await (dir == null ? client.list() : client.list(dir))) {
        //     console.log(file.name)
        //     if (file.name == null) continue;
        //
        //     if (file.type == 'folder') {
        //         await clearWorkingDir(client, dir + file.name).finally(async () => {
        //             await client.removeEmptyFolder(dir + file.name);
        //         });
        //     } else {
        //         await client.remo(dir + file.name)
        //     }
        // }
    });
}
exports.clearWorkingDir = clearWorkingDir;
function getServerFiles(client, logger, timings, args) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (args["dangerous-clean-slate"]) {
                logger.all(`----------------------------------------------------------------`);
                logger.all("🗑️ Removing all files on the server because 'dangerous-clean-slate' was set, this will make the deployment very slow...");
                if (args["dry-run"] === false) {
                    yield clearWorkingDir(client, args["server-dir"]);
                }
                yield (0, syncProvider_1.ensureDir)(client, logger, timings, args["server-dir"]);
                logger.all("Clear complete");
                throw new Error("dangerous-clean-slate was run");
            }
            yield (0, syncProvider_1.ensureDir)(client, logger, timings, args["server-dir"]);
            // const serverFiles = await downloadFileList(client, logger, args["server-dir"] + args["state-name"]);
            // logger.all(`----------------------------------------------------------------`);
            // logger.all(`Last published on 📅 ${new Date(serverFiles.generatedTime).toLocaleDateString(undefined, {
            //     weekday: "long",
            //     year: "numeric",
            //     month: "long",
            //     day: "numeric",
            //     hour: "numeric",
            //     minute: "numeric"
            // })}`);
            // apply exclude options to server
            // if (args.exclude.length > 0) {
            //     const filteredData = serverFiles.data.filter((item) => applyExcludeFilter({
            //         path: item.name,
            //         isDirectory: () => item.type === "folder"
            //     }, args.exclude));
            //     serverFiles.data = filteredData;
            // }
            //
            // return serverFiles;
            throw new Error("dangerous-clean-slate was run");
        }
        catch (error) {
            logger.all(`----------------------------------------------------------------`);
            logger.all(`No file exists on the server "${args["server-dir"] + args["state-name"]}" - this must be your first publish! 🎉`);
            logger.all(`The first publish will take a while... but once the initial sync is done only differences are published!`);
            logger.all(`If you get this message and its NOT your first publish, something is wrong.`);
            // set the server state to nothing, because we don't know what the server state is
            return {
                description: types_1.syncFileDescription,
                version: types_1.currentSyncFileVersion,
                generatedTime: new Date().getTime(),
                data: [],
            };
        }
    });
}
exports.getServerFiles = getServerFiles;
function deploy(args, logger, timings) {
    return __awaiter(this, void 0, void 0, function* () {
        timings.start("total");
        // header
        logger.all(`----------------------------------------------------------------`);
        logger.all(`🚀 Thanks for using ftp-deploy. Let's deploy some stuff!   `);
        logger.all(`----------------------------------------------------------------`);
        logger.all(`If you found this project helpful, please support it`);
        logger.all(`by giving it a ⭐ on Github --> https://github.com/SamKirkland/FTP-Deploy-Action`);
        logger.all(`or add a badge 🏷️ to your projects readme --> https://github.com/SamKirkland/FTP-Deploy-Action#badge`);
        logger.verbose(`Using the following excludes filters: ${JSON.stringify(args.exclude)}`);
        timings.start("hash");
        const localFiles = yield (0, localFiles_1.getLocalFiles)(args);
        timings.stop("hash");
        const client = new ftp.Client({
            pool: 5,
        });
        createLocalState(localFiles, logger, args);
        global.reconnect = function () {
            return __awaiter(this, void 0, void 0, function* () {
                timings.start("connecting");
                yield connect(client, args, logger);
                timings.stop("connecting");
            });
        };
        if (args["log-level"] === "verbose") {
            client.addListener("transfer-progress", (transfer, progress) => {
                logger.verbose(`Transfer progress for "${transfer.localPath}" to "${transfer.remotePath}". Progress: ${progress.bytes} bytes of ${progress.totalBytes} bytes`);
            });
        }
        let totalBytesUploaded = 0;
        try {
            yield global.reconnect();
            const serverFiles = yield getServerFiles(client, logger, timings, args);
            timings.start("logging");
            const diffTool = new HashDiff_1.HashDiff();
            logger.standard(`----------------------------------------------------------------`);
            logger.standard(`Local Files:\t${(0, utilities_1.formatNumber)(localFiles.data.length)}`);
            logger.standard(`Server Files:\t${(0, utilities_1.formatNumber)(serverFiles.data.length)}`);
            logger.standard(`----------------------------------------------------------------`);
            logger.standard(`Calculating differences between client & server`);
            logger.standard(`----------------------------------------------------------------`);
            const diffs = diffTool.getDiffs(localFiles, serverFiles);
            diffs.upload.filter((itemUpload) => itemUpload.type === "folder").map((itemUpload) => {
                logger.standard(`📁 Create: ${itemUpload.name}`);
            });
            diffs.upload.filter((itemUpload) => itemUpload.type === "file").map((itemUpload) => {
                logger.standard(`📄 Upload: ${itemUpload.name}`);
            });
            diffs.replace.map((itemReplace) => {
                logger.standard(`🔁 File replace: ${itemReplace.name}`);
            });
            diffs.delete.filter((itemUpload) => itemUpload.type === "file").map((itemDelete) => {
                logger.standard(`📄 Delete: ${itemDelete.name}    `);
            });
            diffs.delete.filter((itemUpload) => itemUpload.type === "folder").map((itemDelete) => {
                logger.standard(`📁 Delete: ${itemDelete.name}    `);
            });
            diffs.same.map((itemSame) => {
                if (itemSame.type === "file") {
                    logger.standard(`⚖️  File content is the same, doing nothing: ${itemSame.name}`);
                }
            });
            timings.stop("logging");
            totalBytesUploaded = diffs.sizeUpload + diffs.sizeReplace;
            timings.start("upload");
            try {
                const syncProvider = new syncProvider_1.FTPSyncProvider(client, logger, timings, args["local-dir"], args["server-dir"], args["state-name"], args["dry-run"]);
                yield syncProvider.syncLocalToServer(diffs);
            }
            finally {
                timings.stop("upload");
            }
        }
        catch (error) {
            (0, errorHandling_1.prettyError)(logger, args, error);
            throw error;
        }
        finally {
            setTimeout(() => __awaiter(this, void 0, void 0, function* () { return client.disconnect(); }), 1000);
            timings.stop("total");
        }
        const uploadSpeed = (0, pretty_bytes_1.default)(totalBytesUploaded / (timings.getTime("upload") / 1000));
        // footer
        logger.all(`----------------------------------------------------------------`);
        logger.all(`Time spent hashing: ${timings.getTimeFormatted("hash")}`);
        logger.all(`Time spent connecting to server: ${timings.getTimeFormatted("connecting")}`);
        logger.all(`Time spent deploying: ${timings.getTimeFormatted("upload")} (${uploadSpeed}/second)`);
        logger.all(`  - changing dirs: ${timings.getTimeFormatted("changingDir")}`);
        logger.all(`  - logging: ${timings.getTimeFormatted("logging")}`);
        logger.all(`----------------------------------------------------------------`);
        logger.all(`Total time: ${timings.getTimeFormatted("total")}`);
        logger.all(`----------------------------------------------------------------`);
    });
}
exports.deploy = deploy;


/***/ }),

/***/ 1565:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prettyError = void 0;
function logOriginalError(logger, error) {
    logger.all();
    logger.all(`----------------------------------------------------------------`);
    logger.all(`----------------------  full error below  ----------------------`);
    logger.all(`----------------------------------------------------------------`);
    logger.all();
    logger.all(error);
}
/**
 * Converts a exception to helpful debug info
 * @param error exception
 */
function prettyError(logger, args, error) {
    logger.all();
    logger.all(`----------------------------------------------------------------`);
    logger.all(`--------------  🔥🔥🔥 an error occurred  🔥🔥🔥  --------------`);
    logger.all(`----------------------------------------------------------------`);
    if (typeof error.code === "string") {
        const errorCode = error.code;
        if (errorCode === "ENOTFOUND") {
            logger.all(`The server "${args.server}" doesn't seem to exist. Do you have a typo?`);
        }
    }
    else if (typeof error.name === "string") {
        const errorName = error.name;
        if (errorName.includes("ERR_TLS_CERT_ALTNAME_INVALID")) {
            logger.all(`The certificate for "${args.server}" is likely shared. The host did not place your server on the list of valid domains for this cert.`);
            logger.all(`This is a common issue with shared hosts. You have a few options:`);
            logger.all(` - Ignore this error by setting security back to loose`);
            logger.all(` - Contact your hosting provider and ask them for your servers hostname`);
        }
    }
    // else if (typeof ftpError.code === "number") {
    //     if (ftpError.code === ErrorCode.NotLoggedIn) {
    //         const serverRequiresFTPS = ftpError.message.toLowerCase().includes("must use encryption");
    //
    //         if (serverRequiresFTPS) {
    //             logger.all(`The server you are connecting to requires encryption (ftps)`);
    //             logger.all(`Enable FTPS by using the protocol option.`);
    //         }
    //         else {
    //             logger.all(`Could not login with the username "${args.username}" and password "${args.password}".`);
    //             logger.all(`Make sure you can login with those credentials. If you have a space or a quote in your username or password be sure to escape them!`);
    //         }
    //     }
    // }
    logOriginalError(logger, error);
}
exports.prettyError = prettyError;


/***/ }),

/***/ 6757:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLocalFiles = void 0;
const readdir_enhanced_1 = __importDefault(__nccwpck_require__(8811));
const types_1 = __nccwpck_require__(9235);
const HashDiff_1 = __nccwpck_require__(6448);
const utilities_1 = __nccwpck_require__(6969);
function getLocalFiles(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = yield readdir_enhanced_1.default.async(args["local-dir"], { deep: true, stats: true, sep: "/", filter: (stat) => (0, utilities_1.applyExcludeFilter)(stat, args.exclude) });
        const records = [];
        for (let stat of files) {
            if (stat.isDirectory()) {
                records.push({
                    type: "folder",
                    name: stat.path,
                    size: undefined
                });
                continue;
            }
            if (stat.isFile()) {
                records.push({
                    type: "file",
                    name: stat.path,
                    size: stat.size,
                    hash: yield (0, HashDiff_1.fileHash)(args["local-dir"] + stat.path, "sha256")
                });
                continue;
            }
            if (stat.isSymbolicLink()) {
                console.warn("This script is currently unable to handle symbolic links - please add a feature request if you need this");
            }
        }
        return {
            description: types_1.syncFileDescription,
            version: types_1.currentSyncFileVersion,
            generatedTime: new Date().getTime(),
            data: records
        };
    });
}
exports.getLocalFiles = getLocalFiles;


/***/ }),

/***/ 157:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deploy = exports.excludeDefaults = void 0;
const deploy_1 = __nccwpck_require__(7154);
const utilities_1 = __nccwpck_require__(6969);
/**
 * Default excludes, ignores all git files and the node_modules folder
 * **\/.git* ignores all FILES that start with .git(in any folder or sub-folder)
 * **\/.git*\/** ignores all FOLDERS that start with .git (in any folder or sub-folder)
 * **\/node_modules\/** ignores all FOLDERS named node_modules (in any folder or sub-folder)
 */
exports.excludeDefaults = ["**/.git*", "**/.git*/**", "**/node_modules/**"];
/**
 * Syncs a local folder with a remote folder over FTP.
 * After the initial sync only differences are synced, making deployments super fast!
 */
function deploy(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const argsWithDefaults = (0, utilities_1.getDefaultSettings)(args);
        const logger = new utilities_1.Logger(argsWithDefaults["log-level"]);
        const timings = new utilities_1.Timings();
        yield (0, deploy_1.deploy)(argsWithDefaults, logger, timings);
    });
}
exports.deploy = deploy;


/***/ }),

/***/ 9267:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FTPSyncProvider = exports.ensureDir = void 0;
const pretty_bytes_1 = __importDefault(__nccwpck_require__(5168));
const types_1 = __nccwpck_require__(9235);
const utilities_1 = __nccwpck_require__(6969);
function ensureDir(client, logger, timings, folder) {
    return __awaiter(this, void 0, void 0, function* () {
        timings.start("changingDir");
        logger.verbose(`  changing dir to ${folder}`);
        yield (0, utilities_1.retryRequest)(logger, () => __awaiter(this, void 0, void 0, function* () {
            return yield client.createFolder(folder).catch(reason => {
                console.log(reason);
            });
        }));
        logger.verbose(`  dir changed`);
        timings.stop("changingDir");
    });
}
exports.ensureDir = ensureDir;
class FTPSyncProvider {
    constructor(client, logger, timings, localPath, serverPath, stateName, dryRun) {
        this.client = client;
        this.logger = logger;
        this.timings = timings;
        this.localPath = localPath;
        this.serverPath = serverPath;
        this.stateName = stateName;
        this.dryRun = dryRun;
    }
    /**
     * Converts a file path (ex: "folder/otherfolder/file.txt") to an array of folder and a file path
     * @param fullPath
     */
    getFileBreadcrumbs(fullPath) {
        var _a;
        // todo see if this regex will work for nonstandard folder names
        // todo what happens if the path is relative to the root dir? (starts with /)
        const pathSplit = fullPath.split("/");
        const file = (_a = pathSplit === null || pathSplit === void 0 ? void 0 : pathSplit.pop()) !== null && _a !== void 0 ? _a : ""; // get last item
        const folders = pathSplit.filter(folderName => folderName != "");
        return {
            folders: folders.length === 0 ? null : folders,
            file: file === "" ? null : file
        };
    }
    createFolder(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.logger.all(`creating folder "${folderPath}"`);
                if (this.dryRun === true) {
                    return;
                }
                const path = this.getFileBreadcrumbs(folderPath + "/");
                if (path.folders === null) {
                    this.logger.verbose(`  no need to change dir`);
                }
                else {
                    yield ensureDir(this.client, this.logger, this.timings, path.folders.join("/"));
                }
                this.logger.verbose(`  completed`);
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    removeFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.logger.all(`removing "${filePath}"`);
                if (this.dryRun === false) {
                    try {
                        yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.removeFile(filePath); }));
                    }
                    catch (e) {
                        // this error is common when a file was deleted on the server directly
                        if (e.code === types_1.ErrorCode.FileNotFoundOrNoAccess) {
                            this.logger.standard("File not found or you don't have access to the file - skipping...");
                        }
                        else {
                            throw e;
                        }
                    }
                }
                this.logger.verbose(`  file removed`);
                this.logger.verbose(`  completed`);
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    removeFolder(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const absoluteFolderPath = "/" + (this.serverPath.startsWith("./") ? this.serverPath.replace("./", "") : this.serverPath) + folderPath;
                this.logger.all(`removing folder "${absoluteFolderPath}"`);
                if (this.dryRun === false) {
                    yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.removeFolder(absoluteFolderPath); }));
                }
                this.logger.verbose(`  completed`);
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    uploadFile(filePath, type = "upload") {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const typePresent = type === "upload" ? "uploading" : "replacing";
                const typePast = type === "upload" ? "uploaded" : "replaced";
                this.logger.all(`${typePresent} "${filePath}"`);
                if (this.dryRun === false) {
                    yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.upload(this.localPath + filePath.substring(this.serverPath.length), filePath); }));
                }
                this.logger.verbose(`  file ${typePast}`);
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    syncLocalToServer(diffs) {
        return __awaiter(this, void 0, void 0, function* () {
            const totalCount = diffs.delete.length + diffs.upload.length + diffs.replace.length;
            this.logger.all(`----------------------------------------------------------------`);
            this.logger.all(`Making changes to ${totalCount} ${(0, utilities_1.pluralize)(totalCount, "file/folder", "files/folders")} to sync server state`);
            this.logger.all(`Uploading: ${(0, pretty_bytes_1.default)(diffs.sizeUpload)} -- Deleting: ${(0, pretty_bytes_1.default)(diffs.sizeDelete)} -- Replacing: ${(0, pretty_bytes_1.default)(diffs.sizeReplace)}`);
            this.logger.all(`----------------------------------------------------------------`);
            // create new folders
            for (const file of diffs.upload.filter(item => item.type === "folder")) {
                yield this.createFolder(this.serverPath + file.name).catch(reason => {
                    console.log(reason);
                });
            }
            // upload new files
            for (const file of diffs.upload.filter(item => item.type === "file").filter(item => item.name !== this.stateName)) {
                yield this.uploadFile(this.serverPath + file.name, "upload").catch(reason => {
                    console.log(reason);
                });
            }
            // replace new files
            for (const file of diffs.replace.filter(item => item.type === "file").filter(item => item.name !== this.stateName)) {
                // note: FTP will replace old files with new files. We run replacements after uploads to limit downtime
                yield this.uploadFile(this.serverPath + file.name, "replace").catch(reason => {
                    console.log(reason);
                });
            }
            // delete old files
            for (const file of diffs.delete.filter(item => item.type === "file")) {
                yield this.removeFile(this.serverPath + file.name).catch(reason => {
                    console.log(reason);
                });
            }
            // delete old folders
            for (const file of diffs.delete.filter(item => item.type === "folder")) {
                yield this.removeFolder(this.serverPath + file.name).catch(reason => {
                    console.log(reason);
                });
            }
            this.logger.all(`----------------------------------------------------------------`);
            this.logger.all(`🎉 Sync complete. Saving current server state to "${this.serverPath + this.stateName}"`);
            if (this.dryRun === false) {
                yield (0, utilities_1.retryRequest)(this.logger, () => __awaiter(this, void 0, void 0, function* () { return yield this.client.upload(this.localPath + this.stateName, this.serverPath + this.stateName); }));
            }
        });
    }
}
exports.FTPSyncProvider = FTPSyncProvider;


/***/ }),

/***/ 9235:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorCode = exports.syncFileDescription = exports.currentSyncFileVersion = void 0;
exports.currentSyncFileVersion = "1.0.0";
exports.syncFileDescription = "DO NOT DELETE THIS FILE. This file is used to keep track of which files have been synced in the most recent deployment. If you delete this file a resync will need to be done (which can take a while) - read more: https://github.com/SamKirkland/FTP-Deploy-Action";
var ErrorCode;
(function (ErrorCode) {
    // The requested action is being initiated, expect another reply before proceeding with a new command.
    ErrorCode[ErrorCode["RestartMarkerReplay"] = 110] = "RestartMarkerReplay";
    ErrorCode[ErrorCode["ServiceReadyInNNNMinutes"] = 120] = "ServiceReadyInNNNMinutes";
    ErrorCode[ErrorCode["DataConnectionAlreadyOpenStartingTransfer"] = 125] = "DataConnectionAlreadyOpenStartingTransfer";
    ErrorCode[ErrorCode["FileStatusOkayOpeningDataConnection"] = 150] = "FileStatusOkayOpeningDataConnection";
    // The requested action has been successfully completed.
    ErrorCode[ErrorCode["CommandNotImplemented"] = 202] = "CommandNotImplemented";
    ErrorCode[ErrorCode["SystemStatus"] = 211] = "SystemStatus";
    ErrorCode[ErrorCode["DirectoryStatus"] = 212] = "DirectoryStatus";
    ErrorCode[ErrorCode["FileStatus"] = 213] = "FileStatus";
    ErrorCode[ErrorCode["HelpMessage"] = 214] = "HelpMessage";
    ErrorCode[ErrorCode["IANAOfficialName"] = 215] = "IANAOfficialName";
    ErrorCode[ErrorCode["ReadyForNewUser"] = 220] = "ReadyForNewUser";
    ErrorCode[ErrorCode["ClosingControlConnection"] = 221] = "ClosingControlConnection";
    ErrorCode[ErrorCode["DataConnectionOpen"] = 225] = "DataConnectionOpen";
    ErrorCode[ErrorCode["SuccessNowClosingDataConnection"] = 226] = "SuccessNowClosingDataConnection";
    ErrorCode[ErrorCode["EnteringPassiveMode"] = 227] = "EnteringPassiveMode";
    ErrorCode[ErrorCode["EnteringLongPassiveMode"] = 228] = "EnteringLongPassiveMode";
    ErrorCode[ErrorCode["EnteringExtendedPassiveMode"] = 229] = "EnteringExtendedPassiveMode";
    ErrorCode[ErrorCode["UserLoggedIn"] = 230] = "UserLoggedIn";
    ErrorCode[ErrorCode["UserLoggedOut"] = 231] = "UserLoggedOut";
    ErrorCode[ErrorCode["LogoutWillCompleteWhenTransferDone"] = 232] = "LogoutWillCompleteWhenTransferDone";
    ErrorCode[ErrorCode["ServerAcceptsAuthenticationMethod"] = 234] = "ServerAcceptsAuthenticationMethod";
    ErrorCode[ErrorCode["ActionComplete"] = 250] = "ActionComplete";
    ErrorCode[ErrorCode["PathNameCreated"] = 257] = "PathNameCreated";
    // The command has been accepted, but the requested action is on hold, pending receipt of further information.
    ErrorCode[ErrorCode["UsernameOkayPasswordNeeded"] = 331] = "UsernameOkayPasswordNeeded";
    ErrorCode[ErrorCode["NeedAccountForLogin"] = 332] = "NeedAccountForLogin";
    ErrorCode[ErrorCode["RequestedFileActionPendingFurtherInformation"] = 350] = "RequestedFileActionPendingFurtherInformation";
    // The command was not accepted and the requested action did not take place, but the error condition is temporary and the action may be requested again.
    ErrorCode[ErrorCode["ServiceNotAvailable"] = 421] = "ServiceNotAvailable";
    ErrorCode[ErrorCode["CantOpenDataConnection"] = 425] = "CantOpenDataConnection";
    ErrorCode[ErrorCode["ConnectionClosed"] = 426] = "ConnectionClosed";
    ErrorCode[ErrorCode["InvalidUsernameOrPassword"] = 430] = "InvalidUsernameOrPassword";
    ErrorCode[ErrorCode["HostUnavailable"] = 434] = "HostUnavailable";
    ErrorCode[ErrorCode["FileActionNotTaken"] = 450] = "FileActionNotTaken";
    ErrorCode[ErrorCode["LocalErrorProcessing"] = 451] = "LocalErrorProcessing";
    ErrorCode[ErrorCode["InsufficientStorageSpaceOrFileInUse"] = 452] = "InsufficientStorageSpaceOrFileInUse";
    // Syntax error, command unrecognized and the requested action did not take place. This may include errors such as command line too long.
    ErrorCode[ErrorCode["SyntaxErrorInParameters"] = 501] = "SyntaxErrorInParameters";
    ErrorCode[ErrorCode["CommandNotImpemented"] = 502] = "CommandNotImpemented";
    ErrorCode[ErrorCode["BadSequenceOfCommands"] = 503] = "BadSequenceOfCommands";
    ErrorCode[ErrorCode["CommandNotImplementedForThatParameter"] = 504] = "CommandNotImplementedForThatParameter";
    ErrorCode[ErrorCode["NotLoggedIn"] = 530] = "NotLoggedIn";
    ErrorCode[ErrorCode["NeedAccountForStoringFiles"] = 532] = "NeedAccountForStoringFiles";
    ErrorCode[ErrorCode["CouldNotConnectToServerRequiresSSL"] = 534] = "CouldNotConnectToServerRequiresSSL";
    ErrorCode[ErrorCode["FileNotFoundOrNoAccess"] = 550] = "FileNotFoundOrNoAccess";
    ErrorCode[ErrorCode["UnknownPageType"] = 551] = "UnknownPageType";
    ErrorCode[ErrorCode["ExceededStorageAllocation"] = 552] = "ExceededStorageAllocation";
    ErrorCode[ErrorCode["FileNameNotAllowed"] = 553] = "FileNameNotAllowed";
    // Replies regarding confidentiality and integrity
    ErrorCode[ErrorCode["IntegrityProtectedReply"] = 631] = "IntegrityProtectedReply";
    ErrorCode[ErrorCode["ConfidentialityAndIntegrityProtectedReply"] = 632] = "ConfidentialityAndIntegrityProtectedReply";
    ErrorCode[ErrorCode["ConfidentialityProtectedReply"] = 633] = "ConfidentialityProtectedReply";
    // Common Winsock Error Codes[2] (These are not FTP return codes)
    ErrorCode[ErrorCode["ConnectionClosedByServer"] = 10054] = "ConnectionClosedByServer";
    ErrorCode[ErrorCode["CannotConnect"] = 10060] = "CannotConnect";
    ErrorCode[ErrorCode["CannotConnectRefusedByServer"] = 10061] = "CannotConnectRefusedByServer";
    ErrorCode[ErrorCode["DirectoryNotEmpty"] = 10066] = "DirectoryNotEmpty";
    ErrorCode[ErrorCode["TooManyUsers"] = 10068] = "TooManyUsers";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
;


/***/ }),

/***/ 6969:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyExcludeFilter = exports.getDefaultSettings = exports.Timer = exports.Timings = exports.retryRequest = exports.formatNumber = exports.pluralize = exports.Logger = void 0;
const pretty_ms_1 = __importDefault(__nccwpck_require__(1127));
const module_1 = __nccwpck_require__(157);
const types_1 = __nccwpck_require__(9235);
const multimatch_1 = __importDefault(__nccwpck_require__(8222));
class Logger {
    constructor(level) {
        this.level = level;
    }
    all(...data) {
        console.log(...data);
    }
    standard(...data) {
        if (this.level === "minimal") {
            return;
        }
        console.log(...data);
    }
    verbose(...data) {
        if (this.level !== "verbose") {
            return;
        }
        console.log(...data);
    }
}
exports.Logger = Logger;
function pluralize(count, singular, plural) {
    if (count === 1) {
        return singular;
    }
    return plural;
}
exports.pluralize = pluralize;
function formatNumber(number) {
    return number.toLocaleString();
}
exports.formatNumber = formatNumber;
/**
 * retry a request
 *
 * @example retryRequest(logger, async () => await item());
 */
function retryRequest(logger, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield callback();
        }
        catch (e) {
            if (e.code >= 400 && e.code <= 499) {
                logger.standard("400 level error from server when performing action - retrying...");
                logger.standard(e);
                if (e.code === types_1.ErrorCode.ConnectionClosed) {
                    logger.all("Connection closed. This library does not currently handle reconnects");
                    // await global.reconnect();
                    // todo reset current working dir
                    throw e;
                }
                return yield callback();
            }
            else {
                throw e;
            }
        }
    });
}
exports.retryRequest = retryRequest;
class Timings {
    constructor() {
        this.timers = {};
    }
    start(type) {
        if (this.timers[type] === undefined) {
            this.timers[type] = new Timer();
        }
        this.timers[type].start();
    }
    stop(type) {
        this.timers[type].stop();
    }
    getTime(type) {
        const timer = this.timers[type];
        if (timer === undefined || timer.time === null) {
            return 0;
        }
        return timer.time;
    }
    getTimeFormatted(type) {
        const timer = this.timers[type];
        if (timer === undefined || timer.time === null) {
            return "💣 Failed";
        }
        return (0, pretty_ms_1.default)(timer.time, { verbose: true });
    }
}
exports.Timings = Timings;
class Timer {
    constructor() {
        this.totalTime = null;
        this.startTime = null;
        this.endTime = null;
    }
    start() {
        this.startTime = process.hrtime();
    }
    stop() {
        if (this.startTime === null) {
            throw new Error("Called .stop() before calling .start()");
        }
        this.endTime = process.hrtime(this.startTime);
        const currentSeconds = this.totalTime === null ? 0 : this.totalTime[0];
        const currentNS = this.totalTime === null ? 0 : this.totalTime[1];
        this.totalTime = [
            currentSeconds + this.endTime[0],
            currentNS + this.endTime[1]
        ];
    }
    get time() {
        if (this.totalTime === null) {
            return null;
        }
        return (this.totalTime[0] * 1000) + (this.totalTime[1] / 1000000);
    }
}
exports.Timer = Timer;
function getDefaultSettings(withoutDefaults) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    if (withoutDefaults["local-dir"] !== undefined) {
        if (!withoutDefaults["local-dir"].endsWith("/")) {
            throw new Error("local-dir should be a folder (must end with /)");
        }
    }
    if (withoutDefaults["server-dir"] !== undefined) {
        if (!withoutDefaults["server-dir"].endsWith("/")) {
            throw new Error("server-dir should be a folder (must end with /)");
        }
    }
    return {
        "server": withoutDefaults.server,
        "username": withoutDefaults.username,
        "password": withoutDefaults.password,
        "port": (_a = withoutDefaults.port) !== null && _a !== void 0 ? _a : 22,
        "protocol": (_b = withoutDefaults.protocol) !== null && _b !== void 0 ? _b : "sftp",
        "local-dir": (_c = withoutDefaults["local-dir"]) !== null && _c !== void 0 ? _c : "./",
        "server-dir": (_d = withoutDefaults["server-dir"]) !== null && _d !== void 0 ? _d : "./",
        "state-name": (_e = withoutDefaults["state-name"]) !== null && _e !== void 0 ? _e : ".ftp-deploy-sync-state.json",
        "dry-run": (_f = withoutDefaults["dry-run"]) !== null && _f !== void 0 ? _f : false,
        "dangerous-clean-slate": (_g = withoutDefaults["dangerous-clean-slate"]) !== null && _g !== void 0 ? _g : false,
        "exclude": (_h = withoutDefaults.exclude) !== null && _h !== void 0 ? _h : module_1.excludeDefaults,
        "log-level": (_j = withoutDefaults["log-level"]) !== null && _j !== void 0 ? _j : "standard",
        "security": (_k = withoutDefaults.security) !== null && _k !== void 0 ? _k : "loose",
        "timeout": (_l = withoutDefaults.timeout) !== null && _l !== void 0 ? _l : 30000,
    };
}
exports.getDefaultSettings = getDefaultSettings;
function applyExcludeFilter(stat, excludeFilters) {
    // match exclude, return immediatley
    if (excludeFilters.length > 0) {
        // todo this could be a performance problem...
        const pathWithFolderSlash = stat.path + (stat.isDirectory() ? "/" : "");
        const excludeMatch = (0, multimatch_1.default)(pathWithFolderSlash, excludeFilters, { matchBase: true, dot: true });
        if (excludeMatch.length > 0) {
            return false;
        }
    }
    return true;
}
exports.applyExcludeFilter = applyExcludeFilter;


/***/ }),

/***/ 7951:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

!function(e,t){ true?module.exports=t():0}(global,(()=>(()=>{var e={6728:(e,t,r)=>{e.exports={SFTPStream:r(6348),SSH2Stream:r(9104),utils:r(4264),constants:r(4e3)}},8128:e=>{e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,r){return e[r++]=t>>>24,e[r++]=t>>>16,e[r++]=t>>>8,e[r++]=t,r},writeUInt32LE:function(e,t,r){return e[r++]=t,e[r++]=t>>>8,e[r++]=t>>>16,e[r++]=t>>>24,r}}},4e3:(e,t,r)=>{var i,n,s,o=r(7968),a=function(){if("function"==typeof o.sign&&"function"==typeof o.verify){var e,t,r="-----BEGIN PRIVATE KEY-----\r\nMC4CAQAwBQYDK2VwBCIEIHKj+sVa9WcD/q2DJUJaf43Kptc8xYuUQA4bOFj9vC8T\r\n-----END PRIVATE KEY-----",i=Buffer.from("a");try{e=o.sign(null,i,r),t=o.verify(null,i,r,e)}catch(e){}return Buffer.isBuffer(e)&&64===e.length&&!0===t}return!1}(),c="function"==typeof o.diffieHellman&&"function"==typeof o.generateKeyPairSync&&"function"==typeof o.createPublicKey,h=t.MESSAGE={DISCONNECT:1,IGNORE:2,UNIMPLEMENTED:3,DEBUG:4,SERVICE_REQUEST:5,SERVICE_ACCEPT:6,KEXINIT:20,NEWKEYS:21,USERAUTH_REQUEST:50,USERAUTH_FAILURE:51,USERAUTH_SUCCESS:52,USERAUTH_BANNER:53,GLOBAL_REQUEST:80,REQUEST_SUCCESS:81,REQUEST_FAILURE:82,CHANNEL_OPEN:90,CHANNEL_OPEN_CONFIRMATION:91,CHANNEL_OPEN_FAILURE:92,CHANNEL_WINDOW_ADJUST:93,CHANNEL_DATA:94,CHANNEL_EXTENDED_DATA:95,CHANNEL_EOF:96,CHANNEL_CLOSE:97,CHANNEL_REQUEST:98,CHANNEL_SUCCESS:99,CHANNEL_FAILURE:100};for(i=0,s=(n=Object.keys(h)).length;i<s;++i)h[h[n[i]]]=n[i];h.KEXDH_INIT=30,h.KEXDH_REPLY=31,h.KEXDH_GEX_REQUEST=34,h.KEXDH_GEX_GROUP=31,h.KEXDH_GEX_INIT=32,h.KEXDH_GEX_REPLY=33,h.KEXECDH_INIT=30,h.KEXECDH_REPLY=31,h.USERAUTH_PASSWD_CHANGEREQ=60,h.USERAUTH_PK_OK=60,h.USERAUTH_INFO_REQUEST=60,h.USERAUTH_INFO_RESPONSE=61;var f=t.DYNAMIC_KEXDH_MESSAGE={};f[h.KEXDH_GEX_GROUP]="KEXDH_GEX_GROUP",f[h.KEXDH_GEX_REPLY]="KEXDH_GEX_REPLY";var u=t.KEXDH_MESSAGE={};u[h.KEXDH_INIT]="KEXDH_INIT",u[h.KEXDH_REPLY]="KEXDH_REPLY";var l=t.DISCONNECT_REASON={HOST_NOT_ALLOWED_TO_CONNECT:1,PROTOCOL_ERROR:2,KEY_EXCHANGE_FAILED:3,RESERVED:4,MAC_ERROR:5,COMPRESSION_ERROR:6,SERVICE_NOT_AVAILABLE:7,PROTOCOL_VERSION_NOT_SUPPORTED:8,HOST_KEY_NOT_VERIFIABLE:9,CONNECTION_LOST:10,BY_APPLICATION:11,TOO_MANY_CONNECTIONS:12,AUTH_CANCELED_BY_USER:13,NO_MORE_AUTH_METHODS_AVAILABLE:14,ILLEGAL_USER_NAME:15};for(i=0,s=(n=Object.keys(l)).length;i<s;++i)l[l[n[i]]]=n[i];var p=t.CHANNEL_OPEN_FAILURE={ADMINISTRATIVELY_PROHIBITED:1,CONNECT_FAILED:2,UNKNOWN_CHANNEL_TYPE:3,RESOURCE_SHORTAGE:4};for(i=0,s=(n=Object.keys(p)).length;i<s;++i)p[p[n[i]]]=n[i];var d=t.TERMINAL_MODE={TTY_OP_END:0,VINTR:1,VQUIT:2,VERASE:3,VKILL:4,VEOF:5,VEOL:6,VEOL2:7,VSTART:8,VSTOP:9,VSUSP:10,VDSUSP:11,VREPRINT:12,VWERASE:13,VLNEXT:14,VFLUSH:15,VSWTCH:16,VSTATUS:17,VDISCARD:18,IGNPAR:30,PARMRK:31,INPCK:32,ISTRIP:33,INLCR:34,IGNCR:35,ICRNL:36,IUCLC:37,IXON:38,IXANY:39,IXOFF:40,IMAXBEL:41,ISIG:50,ICANON:51,XCASE:52,ECHO:53,ECHOE:54,ECHOK:55,ECHONL:56,NOFLSH:57,TOSTOP:58,IEXTEN:59,ECHOCTL:60,ECHOKE:61,PENDIN:62,OPOST:70,OLCUC:71,ONLCR:72,OCRNL:73,ONOCR:74,ONLRET:75,CS7:90,CS8:91,PARENB:92,PARODD:93,TTY_OP_ISPEED:128,TTY_OP_OSPEED:129};for(i=0,s=(n=Object.keys(d)).length;i<s;++i)d[d[n[i]]]=n[i];var g=t.CHANNEL_EXTENDED_DATATYPE={STDERR:1};for(i=0,s=(n=Object.keys(g)).length;i<s;++i)g[g[n[i]]]=n[i];t.SIGNALS=["ABRT","ALRM","FPE","HUP","ILL","INT","QUIT","SEGV","TERM","USR1","USR2","KILL","PIPE"];var E=["ecdh-sha2-nistp256","ecdh-sha2-nistp384","ecdh-sha2-nistp521","diffie-hellman-group-exchange-sha256","diffie-hellman-group14-sha256","diffie-hellman-group16-sha512","diffie-hellman-group18-sha512","diffie-hellman-group14-sha1"];c&&(E.unshift("curve25519-sha256"),E.unshift("curve25519-sha256@libssh.org"));var m=["diffie-hellman-group-exchange-sha1","diffie-hellman-group1-sha1"],v=Buffer.from(E.join(","),"ascii");m=E.concat(m);var y=["ecdsa-sha2-nistp256","ecdsa-sha2-nistp384","ecdsa-sha2-nistp521","ssh-rsa"];a&&y.unshift("ssh-ed25519");var _=["ssh-dss"],w=Buffer.from(y.join(","),"ascii");_=y.concat(_);var b=["aes128-ctr","aes192-ctr","aes256-ctr","aes128-gcm","aes128-gcm@openssh.com","aes256-gcm","aes256-gcm@openssh.com"],S=["aes256-cbc","aes192-cbc","aes128-cbc","blowfish-cbc","3des-cbc","arcfour256","arcfour128","cast128-cbc","arcfour"],k=Buffer.from(b.join(","),"ascii");S=b.concat(S);var T=["hmac-sha2-256","hmac-sha2-512","hmac-sha1"],A=["hmac-md5","hmac-sha2-256-96","hmac-sha2-512-96","hmac-ripemd160","hmac-sha1-96","hmac-md5-96"],U=Buffer.from(T.join(","),"ascii");A=T.concat(A);var B=["none","zlib@openssh.com","zlib"],R=[],N=Buffer.from(B.join(","),"ascii");function P(e,t,r,i,n,s){return{blockLen:e,keyLen:t,ivLen:0===r?e:r,authLen:i,discardLen:n,stream:s}}function D(e,t){return{len:e,actualLen:t}}R=B.concat(R),t.CIPHER_INFO={"aes128-gcm":P(16,16,12,16,0,!1),"aes256-gcm":P(16,32,12,16,0,!1),"aes128-gcm@openssh.com":P(16,16,12,16,0,!1),"aes256-gcm@openssh.com":P(16,32,12,16,0,!1),"aes128-cbc":P(16,16,0,0,0,!1),"aes192-cbc":P(16,24,0,0,0,!1),"aes256-cbc":P(16,32,0,0,0,!1),"rijndael-cbc@lysator.liu.se":P(16,32,0,0,0,!1),"3des-cbc":P(8,24,0,0,0,!1),"blowfish-cbc":P(8,16,0,0,0,!1),"idea-cbc":P(8,16,0,0,0,!1),"cast128-cbc":P(8,16,0,0,0,!1),"camellia128-cbc":P(16,16,0,0,0,!1),"camellia192-cbc":P(16,24,0,0,0,!1),"camellia256-cbc":P(16,32,0,0,0,!1),"camellia128-cbc@openssh.com":P(16,16,0,0,0,!1),"camellia192-cbc@openssh.com":P(16,24,0,0,0,!1),"camellia256-cbc@openssh.com":P(16,32,0,0,0,!1),"aes128-ctr":P(16,16,0,0,0,!1),"aes192-ctr":P(16,24,0,0,0,!1),"aes256-ctr":P(16,32,0,0,0,!1),"3des-ctr":P(8,24,0,0,0,!1),"blowfish-ctr":P(8,16,0,0,0,!1),"cast128-ctr":P(8,16,0,0,0,!1),"camellia128-ctr":P(16,16,0,0,0,!1),"camellia192-ctr":P(16,24,0,0,0,!1),"camellia256-ctr":P(16,32,0,0,0,!1),"camellia128-ctr@openssh.com":P(16,16,0,0,0,!1),"camellia192-ctr@openssh.com":P(16,24,0,0,0,!1),"camellia256-ctr@openssh.com":P(16,32,0,0,0,!1),arcfour:P(8,16,0,0,1536,!0),arcfour128:P(8,16,0,0,1536,!0),arcfour256:P(8,32,0,0,1536,!0),arcfour512:P(8,64,0,0,1536,!0)},t.HMAC_INFO={"hmac-md5":D(16,16),"hmac-md5-96":D(16,12),"hmac-ripemd160":D(20,20),"hmac-sha1":D(20,20),"hmac-sha1-96":D(20,12),"hmac-sha2-256":D(32,32),"hmac-sha2-256-96":D(32,12),"hmac-sha2-512":D(64,64),"hmac-sha2-512-96":D(64,12)},t.ALGORITHMS={KEX:E,KEX_BUF:v,SUPPORTED_KEX:m,SERVER_HOST_KEY:y,SERVER_HOST_KEY_BUF:w,SUPPORTED_SERVER_HOST_KEY:_,CIPHER:b,CIPHER_BUF:k,SUPPORTED_CIPHER:S,HMAC:T,HMAC_BUF:U,SUPPORTED_HMAC:A,COMPRESS:B,COMPRESS_BUF:N,SUPPORTED_COMPRESS:R},t.SSH_TO_OPENSSL={"ecdh-sha2-nistp256":"prime256v1","ecdh-sha2-nistp384":"secp384r1","ecdh-sha2-nistp521":"secp521r1","aes128-gcm":"aes-128-gcm","aes256-gcm":"aes-256-gcm","aes128-gcm@openssh.com":"aes-128-gcm","aes256-gcm@openssh.com":"aes-256-gcm","3des-cbc":"des-ede3-cbc","blowfish-cbc":"bf-cbc","aes256-cbc":"aes-256-cbc","aes192-cbc":"aes-192-cbc","aes128-cbc":"aes-128-cbc","idea-cbc":"idea-cbc","cast128-cbc":"cast-cbc","rijndael-cbc@lysator.liu.se":"aes-256-cbc",arcfour128:"rc4",arcfour256:"rc4",arcfour512:"rc4",arcfour:"rc4","camellia128-cbc":"camellia-128-cbc","camellia192-cbc":"camellia-192-cbc","camellia256-cbc":"camellia-256-cbc","camellia128-cbc@openssh.com":"camellia-128-cbc","camellia192-cbc@openssh.com":"camellia-192-cbc","camellia256-cbc@openssh.com":"camellia-256-cbc","3des-ctr":"des-ede3","blowfish-ctr":"bf-ecb","aes256-ctr":"aes-256-ctr","aes192-ctr":"aes-192-ctr","aes128-ctr":"aes-128-ctr","cast128-ctr":"cast5-ecb","camellia128-ctr":"camellia-128-ecb","camellia192-ctr":"camellia-192-ecb","camellia256-ctr":"camellia-256-ecb","camellia128-ctr@openssh.com":"camellia-128-ecb","camellia192-ctr@openssh.com":"camellia-192-ecb","camellia256-ctr@openssh.com":"camellia-256-ecb","hmac-sha1-96":"sha1","hmac-sha1":"sha1","hmac-sha2-256":"sha256","hmac-sha2-256-96":"sha256","hmac-sha2-512":"sha512","hmac-sha2-512-96":"sha512","hmac-md5-96":"md5","hmac-md5":"md5","hmac-ripemd160":"ripemd160"};var O=t.BUGS={BAD_DHGEX:1,OLD_EXIT:2,DYN_RPORT_BUG:4};t.BUGGY_IMPLS=[["Cisco-1.25",O.BAD_DHGEX],[/^[0-9.]+$/,O.OLD_EXIT],[/^OpenSSH_5\.\d+/,O.DYN_RPORT_BUG]],t.EDDSA_SUPPORTED=a,t.CURVE25519_SUPPORTED=c},1896:e=>{function t(e,t,r){null!=e&&("number"==typeof e?this.fromNumber(e,t,r):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function r(){return new t(null)}t.prototype.am=function(e,t,r,i,n,s){for(var o=16383&t,a=t>>14;--s>=0;){var c=16383&this[e],h=this[e++]>>14,f=a*c+h*o;n=((c=o*c+((16383&f)<<14)+r[i]+n)>>28)+(f>>14)+a*h,r[i++]=268435455&c}return n},t.prototype.DB=28,t.prototype.DM=268435455,t.prototype.DV=1<<28,t.prototype.FV=Math.pow(2,52),t.prototype.F1=24,t.prototype.F2=4;var i,n,s=new Array;for(i="0".charCodeAt(0),n=0;n<=9;++n)s[i++]=n;for(i="a".charCodeAt(0),n=10;n<36;++n)s[i++]=n;for(i="A".charCodeAt(0),n=10;n<36;++n)s[i++]=n;function o(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function a(e,t){var r=s[e.charCodeAt(t)];return null==r?-1:r}function c(e){var t=r();return t.fromInt(e),t}function h(e){var t,r=1;return 0!=(t=e>>>16)&&(e=t,r+=16),0!=(t=e>>8)&&(e=t,r+=8),0!=(t=e>>4)&&(e=t,r+=4),0!=(t=e>>2)&&(e=t,r+=2),0!=(t=e>>1)&&(e=t,r+=1),r}function f(e){this.m=e}function u(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function l(e,t){return e&t}function p(e,t){return e|t}function d(e,t){return e^t}function g(e,t){return e&~t}function E(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function m(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function v(){}function y(e){return e}function _(e){this.r2=r(),this.q3=r(),t.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}f.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},f.prototype.revert=function(e){return e},f.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},f.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},f.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},u.prototype.convert=function(e){var i=r();return e.abs().dlShiftTo(this.m.t,i),i.divRemTo(this.m,null,i),e.s<0&&i.compareTo(t.ZERO)>0&&this.m.subTo(i,i),i},u.prototype.revert=function(e){var t=r();return e.copyTo(t),this.reduce(t),t},u.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var r=32767&e[t],i=r*this.mpl+((r*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[r=t+this.m.t]+=this.m.am(0,i,e,t,0,this.m.t);e[r]>=e.DV;)e[r]-=e.DV,e[++r]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},u.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},u.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},t.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},t.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},t.prototype.fromString=function(e,r){var i;if(16==r)i=4;else if(8==r)i=3;else if(256==r)i=8;else if(2==r)i=1;else if(32==r)i=5;else{if(4!=r)return void this.fromRadix(e,r);i=2}this.t=0,this.s=0;for(var n=e.length,s=!1,o=0;--n>=0;){var c=8==i?255&e[n]:a(e,n);c<0?"-"==e.charAt(n)&&(s=!0):(s=!1,0==o?this[this.t++]=c:o+i>this.DB?(this[this.t-1]|=(c&(1<<this.DB-o)-1)<<o,this[this.t++]=c>>this.DB-o):this[this.t-1]|=c<<o,(o+=i)>=this.DB&&(o-=this.DB))}8==i&&0!=(128&e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),s&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},t.prototype.dlShiftTo=function(e,t){var r;for(r=this.t-1;r>=0;--r)t[r+e]=this[r];for(r=e-1;r>=0;--r)t[r]=0;t.t=this.t+e,t.s=this.s},t.prototype.drShiftTo=function(e,t){for(var r=e;r<this.t;++r)t[r-e]=this[r];t.t=Math.max(this.t-e,0),t.s=this.s},t.prototype.lShiftTo=function(e,t){var r,i=e%this.DB,n=this.DB-i,s=(1<<n)-1,o=Math.floor(e/this.DB),a=this.s<<i&this.DM;for(r=this.t-1;r>=0;--r)t[r+o+1]=this[r]>>n|a,a=(this[r]&s)<<i;for(r=o-1;r>=0;--r)t[r]=0;t[o]=a,t.t=this.t+o+1,t.s=this.s,t.clamp()},t.prototype.rShiftTo=function(e,t){t.s=this.s;var r=Math.floor(e/this.DB);if(r>=this.t)t.t=0;else{var i=e%this.DB,n=this.DB-i,s=(1<<i)-1;t[0]=this[r]>>i;for(var o=r+1;o<this.t;++o)t[o-r-1]|=(this[o]&s)<<n,t[o-r]=this[o]>>i;i>0&&(t[this.t-r-1]|=(this.s&s)<<n),t.t=this.t-r,t.clamp()}},t.prototype.subTo=function(e,t){for(var r=0,i=0,n=Math.min(e.t,this.t);r<n;)i+=this[r]-e[r],t[r++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i-=e.s;r<this.t;)i+=this[r],t[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<e.t;)i-=e[r],t[r++]=i&this.DM,i>>=this.DB;i-=e.s}t.s=i<0?-1:0,i<-1?t[r++]=this.DV+i:i>0&&(t[r++]=i),t.t=r,t.clamp()},t.prototype.multiplyTo=function(e,r){var i=this.abs(),n=e.abs(),s=i.t;for(r.t=s+n.t;--s>=0;)r[s]=0;for(s=0;s<n.t;++s)r[s+i.t]=i.am(0,n[s],r,s,0,i.t);r.s=0,r.clamp(),this.s!=e.s&&t.ZERO.subTo(r,r)},t.prototype.squareTo=function(e){for(var t=this.abs(),r=e.t=2*t.t;--r>=0;)e[r]=0;for(r=0;r<t.t-1;++r){var i=t.am(r,t[r],e,2*r,0,1);(e[r+t.t]+=t.am(r+1,2*t[r],e,2*r+1,i,t.t-r-1))>=t.DV&&(e[r+t.t]-=t.DV,e[r+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(r,t[r],e,2*r,0,1)),e.s=0,e.clamp()},t.prototype.divRemTo=function(e,i,n){var s=e.abs();if(!(s.t<=0)){var o=this.abs();if(o.t<s.t)return null!=i&&i.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=r());var a=r(),c=this.s,f=e.s,u=this.DB-h(s[s.t-1]);u>0?(s.lShiftTo(u,a),o.lShiftTo(u,n)):(s.copyTo(a),o.copyTo(n));var l=a.t,p=a[l-1];if(0!=p){var d=p*(1<<this.F1)+(l>1?a[l-2]>>this.F2:0),g=this.FV/d,E=(1<<this.F1)/d,m=1<<this.F2,v=n.t,y=v-l,_=null==i?r():i;for(a.dlShiftTo(y,_),n.compareTo(_)>=0&&(n[n.t++]=1,n.subTo(_,n)),t.ONE.dlShiftTo(l,_),_.subTo(a,a);a.t<l;)a[a.t++]=0;for(;--y>=0;){var w=n[--v]==p?this.DM:Math.floor(n[v]*g+(n[v-1]+m)*E);if((n[v]+=a.am(0,w,n,y,0,l))<w)for(a.dlShiftTo(y,_),n.subTo(_,n);n[v]<--w;)n.subTo(_,n)}null!=i&&(n.drShiftTo(l,i),c!=f&&t.ZERO.subTo(i,i)),n.t=l,n.clamp(),u>0&&n.rShiftTo(u,n),c<0&&t.ZERO.subTo(n,n)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var n=r(),s=r(),o=i.convert(this),a=h(e)-1;for(o.copyTo(n);--a>=0;)if(i.sqrTo(n,s),(e&1<<a)>0)i.mulTo(s,o,n);else{var c=n;n=s,s=c}return i.revert(n)},t.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var r,i=(1<<t)-1,n=!1,s="",a=this.t,c=this.DB-a*this.DB%t;if(a-- >0)for(c<this.DB&&(r=this[a]>>c)>0&&(n=!0,s=o(r));a>=0;)c<t?(r=(this[a]&(1<<c)-1)<<t-c,r|=this[--a]>>(c+=this.DB-t)):(r=this[a]>>(c-=t)&i,c<=0&&(c+=this.DB,--a)),r>0&&(n=!0),n&&(s+=o(r));return n?s:"0"},t.prototype.negate=function(){var e=r();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var r=this.t;if(0!=(t=r-e.t))return this.s<0?-t:t;for(;--r>=0;)if(0!=(t=this[r]-e[r]))return t;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+h(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=r();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(e,t){var r;return r=e<256||t.isEven()?new f(t):new u(t),this.exp(e,r)},t.ZERO=c(0),t.ONE=c(1),v.prototype.convert=y,v.prototype.revert=y,v.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r)},v.prototype.sqrTo=function(e,t){e.squareTo(t)},_.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=r();return e.copyTo(t),this.reduce(t),t},_.prototype.revert=function(e){return e},_.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},_.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},_.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var w=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],b=(1<<26)/w[w.length-1];t.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},t.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),i=Math.pow(e,t),n=c(i),s=r(),o=r(),a="";for(this.divRemTo(n,s,o);s.signum()>0;)a=(i+o.intValue()).toString(e).substr(1)+a,s.divRemTo(n,s,o);return o.intValue().toString(e)+a},t.prototype.fromRadix=function(e,r){this.fromInt(0),null==r&&(r=10);for(var i=this.chunkSize(r),n=Math.pow(r,i),s=!1,o=0,c=0,h=0;h<e.length;++h){var f=a(e,h);f<0?"-"==e.charAt(h)&&0==this.signum()&&(s=!0):(c=r*c+f,++o>=i&&(this.dMultiply(n),this.dAddOffset(c,0),o=0,c=0))}o>0&&(this.dMultiply(Math.pow(r,o)),this.dAddOffset(c,0)),s&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,r,i){if("number"==typeof r)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),p,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(r);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var n=new Array,s=7&e;n.length=1+(e>>3),r.nextBytes(n),s>0?n[0]&=(1<<s)-1:n[0]=0,this.fromString(n,256)}},t.prototype.bitwiseTo=function(e,t,r){var i,n,s=Math.min(e.t,this.t);for(i=0;i<s;++i)r[i]=t(this[i],e[i]);if(e.t<this.t){for(n=e.s&this.DM,i=s;i<this.t;++i)r[i]=t(this[i],n);r.t=this.t}else{for(n=this.s&this.DM,i=s;i<e.t;++i)r[i]=t(n,e[i]);r.t=e.t}r.s=t(this.s,e.s),r.clamp()},t.prototype.changeBit=function(e,r){var i=t.ONE.shiftLeft(e);return this.bitwiseTo(i,r,i),i},t.prototype.addTo=function(e,t){for(var r=0,i=0,n=Math.min(e.t,this.t);r<n;)i+=this[r]+e[r],t[r++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i+=e.s;r<this.t;)i+=this[r],t[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<e.t;)i+=e[r],t[r++]=i&this.DM,i>>=this.DB;i+=e.s}t.s=i<0?-1:0,i>0?t[r++]=i:i<-1&&(t[r++]=this.DV+i),t.t=r,t.clamp()},t.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},t.prototype.multiplyLowerTo=function(e,t,r){var i,n=Math.min(this.t+e.t,t);for(r.s=0,r.t=n;n>0;)r[--n]=0;for(i=r.t-this.t;n<i;++n)r[n+this.t]=this.am(0,e[n],r,n,0,this.t);for(i=Math.min(e.t,t);n<i;++n)this.am(0,e[n],r,n,0,t-n);r.clamp()},t.prototype.multiplyUpperTo=function(e,t,r){--t;var i=r.t=this.t+e.t-t;for(r.s=0;--i>=0;)r[i]=0;for(i=Math.max(t-this.t,0);i<e.t;++i)r[this.t+i-t]=this.am(t-i,e[i],r,0,0,this.t+i-t);r.clamp(),r.drShiftTo(1,r)},t.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,r=this.s<0?e-1:0;if(this.t>0)if(0==t)r=this[0]%e;else for(var i=this.t-1;i>=0;--i)r=(t*r+this[i])%e;return r},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),n=i.getLowestSetBit();if(n<=0)return!1;var s=i.shiftRight(n);(e=e+1>>1)>w.length&&(e=w.length);for(var o=r(),a=0;a<e;++a){o.fromInt(w[Math.floor(Math.random()*w.length)]);var c=o.modPow(s,this);if(0!=c.compareTo(t.ONE)&&0!=c.compareTo(i)){for(var h=1;h++<n&&0!=c.compareTo(i);)if(0==(c=c.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=c.compareTo(i))return!1}}return!0},t.prototype.clone=function(){var e=r();return this.copyTo(e),e},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var r,i=this.DB-e*this.DB%8,n=0;if(e-- >0)for(i<this.DB&&(r=this[e]>>i)!=(this.s&this.DM)>>i&&(t[n++]=r|this.s<<this.DB-i);e>=0;)i<8?(r=(this[e]&(1<<i)-1)<<8-i,r|=this[--e]>>(i+=this.DB-8)):(r=this[e]>>(i-=8)&255,i<=0&&(i+=this.DB,--e)),0!=(128&r)&&(r|=-256),0==n&&(128&this.s)!=(128&r)&&++n,(n>0||r!=this.s)&&(t[n++]=r);return t},t.prototype.equals=function(e){return 0==this.compareTo(e)},t.prototype.min=function(e){return this.compareTo(e)<0?this:e},t.prototype.max=function(e){return this.compareTo(e)>0?this:e},t.prototype.and=function(e){var t=r();return this.bitwiseTo(e,l,t),t},t.prototype.or=function(e){var t=r();return this.bitwiseTo(e,p,t),t},t.prototype.xor=function(e){var t=r();return this.bitwiseTo(e,d,t),t},t.prototype.andNot=function(e){var t=r();return this.bitwiseTo(e,g,t),t},t.prototype.not=function(){for(var e=r(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},t.prototype.shiftLeft=function(e){var t=r();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},t.prototype.shiftRight=function(e){var t=r();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},t.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+E(this[e]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,r=0;r<this.t;++r)e+=m(this[r]^t);return e},t.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},t.prototype.setBit=function(e){return this.changeBit(e,p)},t.prototype.clearBit=function(e){return this.changeBit(e,g)},t.prototype.flipBit=function(e){return this.changeBit(e,d)},t.prototype.add=function(e){var t=r();return this.addTo(e,t),t},t.prototype.subtract=function(e){var t=r();return this.subTo(e,t),t},t.prototype.multiply=function(e){var t=r();return this.multiplyTo(e,t),t},t.prototype.divide=function(e){var t=r();return this.divRemTo(e,t,null),t},t.prototype.remainder=function(e){var t=r();return this.divRemTo(e,null,t),t},t.prototype.divideAndRemainder=function(e){var t=r(),i=r();return this.divRemTo(e,t,i),new Array(t,i)},t.prototype.modPow=function(e,t){var i,n,s=e.bitLength(),o=c(1);if(s<=0)return o;i=s<18?1:s<48?3:s<144?4:s<768?5:6,n=s<8?new f(t):t.isEven()?new _(t):new u(t);var a=new Array,l=3,p=i-1,d=(1<<i)-1;if(a[1]=n.convert(this),i>1){var g=r();for(n.sqrTo(a[1],g);l<=d;)a[l]=r(),n.mulTo(g,a[l-2],a[l]),l+=2}var E,m,v=e.t-1,y=!0,w=r();for(s=h(e[v])-1;v>=0;){for(s>=p?E=e[v]>>s-p&d:(E=(e[v]&(1<<s+1)-1)<<p-s,v>0&&(E|=e[v-1]>>this.DB+s-p)),l=i;0==(1&E);)E>>=1,--l;if((s-=l)<0&&(s+=this.DB,--v),y)a[E].copyTo(o),y=!1;else{for(;l>1;)n.sqrTo(o,w),n.sqrTo(w,o),l-=2;l>0?n.sqrTo(o,w):(m=o,o=w,w=m),n.mulTo(w,a[E],o)}for(;v>=0&&0==(e[v]&1<<s);)n.sqrTo(o,w),m=o,o=w,w=m,--s<0&&(s=this.DB-1,--v)}return n.revert(o)},t.prototype.modInverse=function(e){var r=e.isEven();if(this.isEven()&&r||0==e.signum())return t.ZERO;for(var i=e.clone(),n=this.clone(),s=c(1),o=c(0),a=c(0),h=c(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),r?(s.isEven()&&o.isEven()||(s.addTo(this,s),o.subTo(e,o)),s.rShiftTo(1,s)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),r?(a.isEven()&&h.isEven()||(a.addTo(this,a),h.subTo(e,h)),a.rShiftTo(1,a)):h.isEven()||h.subTo(e,h),h.rShiftTo(1,h);i.compareTo(n)>=0?(i.subTo(n,i),r&&s.subTo(a,s),o.subTo(h,o)):(n.subTo(i,n),r&&a.subTo(s,a),h.subTo(o,h))}return 0!=n.compareTo(t.ONE)?t.ZERO:h.compareTo(e)>=0?h.subtract(e):h.signum()<0?(h.addTo(e,h),h.signum()<0?h.add(e):h):h},t.prototype.pow=function(e){return this.exp(e,new v)},t.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),r=e.s<0?e.negate():e.clone();if(t.compareTo(r)<0){var i=t;t=r,r=i}var n=t.getLowestSetBit(),s=r.getLowestSetBit();if(s<0)return t;for(n<s&&(s=n),s>0&&(t.rShiftTo(s,t),r.rShiftTo(s,r));t.signum()>0;)(n=t.getLowestSetBit())>0&&t.rShiftTo(n,t),(n=r.getLowestSetBit())>0&&r.rShiftTo(n,r),t.compareTo(r)>=0?(t.subTo(r,t),t.rShiftTo(1,t)):(r.subTo(t,r),r.rShiftTo(1,r));return s>0&&r.lShiftTo(s,r),r},t.prototype.isProbablePrime=function(e){var t,r=this.abs();if(1==r.t&&r[0]<=w[w.length-1]){for(t=0;t<w.length;++t)if(r[0]==w[t])return!0;return!1}if(r.isEven())return!1;for(t=1;t<w.length;){for(var i=w[t],n=t+1;n<w.length&&i<b;)i*=w[n++];for(i=r.modInt(i);t<n;)if(i%w[t++]==0)return!1}return r.millerRabin(e)},t.prototype.square=function(){var e=r();return this.squareTo(e),e},t.prototype.Barrett=_,e.exports=t},4368:(e,t,r)=>{var i,n=r(7968),s=n.sign,o=n.verify,a=n.createSign,c=n.createVerify,h=n.createDecipheriv,f=n.createHash,u=n.createHmac,l=n.getCiphers(),p=r(8304).Ber,d=r(4688).pbkdf,g=r(8128),E=g.readUInt32BE,m=g.writeUInt32BE,v=r(4e3),y=v.ALGORITHMS.SUPPORTED_CIPHER,_=v.CIPHER_INFO,w=v.SSH_TO_OPENSSL,b=v.EDDSA_SUPPORTED,S=Symbol("Hash Algorithm"),k=Symbol("Private key PEM"),T=Symbol("Public key PEM"),A=Symbol("Public key SSH"),U=Symbol("Decrypted Key"),B=Object.create(null);!function(){for(var e=Object.keys(_),t=0;t<e.length;++t){var r=w[e[t]];r&&!B[r]&&(B[r]=_[e[t]])}}();var R="function"==typeof String.prototype.trimStart?function(e){return e.trimStart()}:function(e){for(var t=0,r=0;r<e.length;++r){switch(e.charCodeAt(r)){case 32:case 9:case 13:case 10:case 12:++t;continue}break}return 0===t?e:e.slice(t)};function N(e,t){return"-----BEGIN "+e+" KEY-----\n"+(t=t.toString("base64")).replace(/.{64}/g,"$&\n")+(t.length%64?"\n":"")+"-----END "+e+" KEY-----"}function P(e,t){var r=Buffer.allocUnsafe(e.length+t.length);return e.copy(r,0),t.copy(r,e.length),r}function D(e,t){for(var r=e.length,i=e._pos||0,n=0;n<t;++n){var s=r-i;if(i>=r||s<4)return!1;var o=E(e,i);if(s<4+o)return!1;i+=4+o}return e._pos=i,!0}function O(e,t){var r=new p.Writer;return r.startSequence(),r.startSequence(),r.writeOID("1.2.840.113549.1.1.1"),r.writeNull(),r.endSequence(),r.startSequence(p.BitString),r.writeByte(0),r.startSequence(),r.writeBuffer(e,p.Integer),r.writeBuffer(t,p.Integer),r.endSequence(),r.endSequence(),r.endSequence(),N("PUBLIC",r.buffer)}function I(e,t){var r=Buffer.allocUnsafe(15+e.length+4+t.length);m(r,7,0),r.write("ssh-rsa",4,7,"ascii");var i=11;return m(r,t.length,i),t.copy(r,i+=4),m(r,e.length,i+=t.length),e.copy(r,i+4),r}var C=function(){function e(e,t,r,i,n,s,o,a){var c=new p.Writer;return c.startSequence(),c.writeInt(0,p.Integer),c.writeBuffer(e,p.Integer),c.writeBuffer(t,p.Integer),c.writeBuffer(r,p.Integer),c.writeBuffer(i,p.Integer),c.writeBuffer(n,p.Integer),c.writeBuffer(s,p.Integer),c.writeBuffer(o,p.Integer),c.writeBuffer(a,p.Integer),c.endSequence(),c.buffer}try{var t=["return function genOpenSSLRSAPriv(n, e, d, iqmp, p, q) {","  var bn_d = bigIntFromBuffer(d);","  var dmp1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(p) - 1n));","  var dmq1 = bigIntToBuffer(bn_d % (bigIntFromBuffer(q) - 1n));","  return makePEM('RSA PRIVATE', genRSAASN1Buf(n, e, d, p, q, dmp1, dmq1, iqmp));","};"].join("\n");return new Function("bigIntFromBuffer, bigIntToBuffer, makePEM, genRSAASN1Buf",t)((function(e){return BigInt("0x"+e.toString("hex"))}),(function(e){var t=e.toString(16);if(0!=(1&t.length))t="0"+t;else{var r=t.charCodeAt(0);(56===r||r>=97&&r<=102)&&(t="00"+t)}return Buffer.from(t,"hex")}),N,e)}catch(t){return i=r(1896),function(t,r,n,s,o,a){var c=new i(o,256),h=new i(a,256),f=new i(n,256),u=f.mod(c.subtract(i.ONE)),l=f.mod(h.subtract(i.ONE));return N("RSA PRIVATE",e(t,r,n,o,a,Buffer.from(u.toByteArray()),Buffer.from(l.toByteArray()),s))}}var i}();function L(e,t,r,i){var n=new p.Writer;return n.startSequence(),n.startSequence(),n.writeOID("1.2.840.10040.4.1"),n.startSequence(),n.writeBuffer(e,p.Integer),n.writeBuffer(t,p.Integer),n.writeBuffer(r,p.Integer),n.endSequence(),n.endSequence(),n.startSequence(p.BitString),n.writeByte(0),n.writeBuffer(i,p.Integer),n.endSequence(),n.endSequence(),N("PUBLIC",n.buffer)}function H(e,t,r,i){var n=Buffer.allocUnsafe(15+e.length+4+t.length+4+r.length+4+i.length);m(n,7,0),n.write("ssh-dss",4,7,"ascii");var s=11;return m(n,e.length,s),e.copy(n,s+=4),m(n,t.length,s+=e.length),t.copy(n,s+=4),m(n,r.length,s+=t.length),r.copy(n,s+=4),m(n,i.length,s+=r.length),i.copy(n,s+4),n}function x(e,t,r,i,n){var s=new p.Writer;return s.startSequence(),s.writeInt(0,p.Integer),s.writeBuffer(e,p.Integer),s.writeBuffer(t,p.Integer),s.writeBuffer(r,p.Integer),s.writeBuffer(i,p.Integer),s.writeBuffer(n,p.Integer),s.endSequence(),N("DSA PRIVATE",s.buffer)}function F(e){var t=new p.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.112"),t.endSequence(),t.startSequence(p.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),N("PUBLIC",t.buffer)}function M(e){var t=Buffer.allocUnsafe(19+e.length);return m(t,11,0),t.write("ssh-ed25519",4,11,"ascii"),m(t,e.length,15),e.copy(t,19),t}function K(e,t){var r=new p.Writer;return r.startSequence(),r.startSequence(),r.writeOID("1.2.840.10045.2.1"),r.writeOID(e),r.endSequence(),r.startSequence(p.BitString),r.writeByte(0),r._ensure(t.length),t.copy(r._buf,r._offset,0,t.length),r._offset+=t.length,r.endSequence(),r.endSequence(),N("PUBLIC",r.buffer)}function G(e,t){var r;switch(e){case"1.2.840.10045.3.1.7":r="nistp256";break;case"1.3.132.0.34":r="nistp384";break;case"1.3.132.0.35":r="nistp521";break;default:return}var i=Buffer.allocUnsafe(39+t.length);return m(i,19,0),i.write("ecdsa-sha2-"+r,4,19,"ascii"),m(i,8,23),i.write(r,27,8,"ascii"),m(i,t.length,35),t.copy(i,39),i}function W(e,t,r){var i=new p.Writer;return i.startSequence(),i.writeInt(1,p.Integer),i.writeBuffer(r,p.OctetString),i.startSequence(160),i.writeOID(e),i.endSequence(),i.startSequence(161),i.startSequence(p.BitString),i.writeByte(0),i._ensure(t.length),t.copy(i._buf,i._offset,0,t.length),i._offset+=t.length,i.endSequence(),i.endSequence(),i.endSequence(),N("EC PRIVATE",i.buffer)}var q,X={sign:"function"==typeof s?function(e){var t=this[k];if(null===t)return new Error("No private key available");try{return s(this[S],e,t)}catch(e){return e}}:function(e){var t=this[k];if(null===t)return new Error("No private key available");var r=a(this[S]);return r.update(e),function(e,t){try{return e.sign(t)}catch(e){return e}}(r,t)},verify:"function"==typeof o?function(e,t){var r=this[T];if(null===r)return new Error("No public key available");try{return o(this[S],e,r,t)}catch(e){return e}}:function(e,t){var r=this[T];if(null===r)return new Error("No public key available");var i=c(this[S]);return i.update(e),function(e,t,r){try{return e.verify(t,r)}catch(e){return e}}(i,r,t)},getPrivatePEM:function(){return this[k]},getPublicPEM:function(){return this[T]},getPublicSSH:function(){return this[A]}};function j(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function V(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function Y(e,t,r,i,n,s,o){this.type=e,this.comment=t,this[k]=r,this[T]=i,this[A]=n,this[S]=s,this[U]=o}function Q(e,t,n,s){var o;i||(i=r(4264));var a=null,c=null;switch(t){case"ssh-rsa":var h=i.readString(e,e._pos);if(!1===h)return new Error("Malformed OpenSSH public key");var f=i.readString(e,e._pos);if(!1===f)return new Error("Malformed OpenSSH public key");a=O(f,h),c=I(f,h),o="sha1";break;case"ssh-dss":var u=i.readString(e,e._pos);if(!1===u)return new Error("Malformed OpenSSH public key");var l=i.readString(e,e._pos);if(!1===l)return new Error("Malformed OpenSSH public key");var p=i.readString(e,e._pos);if(!1===p)return new Error("Malformed OpenSSH public key");var d=i.readString(e,e._pos);if(!1===d)return new Error("Malformed OpenSSH public key");a=L(u,l,p,d),c=H(u,l,p,d),o="sha1";break;case"ssh-ed25519":var g=i.readString(e,e._pos);if(!1===g||32!==g.length)return new Error("Malformed OpenSSH public key");a=F(g),c=M(g),o=null;break;case"ecdsa-sha2-nistp256":o="sha256",oid="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===o&&(o="sha384",oid="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===o&&(o="sha512",oid="1.3.132.0.35"),!D(e,1))return new Error("Malformed OpenSSH public key");var E=i.readString(e,e._pos);if(!1===E)return new Error("Malformed OpenSSH public key");a=K(oid,E),c=G(oid,E);break;default:return new Error("Unsupported OpenSSH public key type: "+t)}return new z(s,n,a,c,o)}function z(e,t,r,i,n){this.type=e,this.comment=t,this[k]=null,this[T]=r,this[A]=i,this[S]=n,this[U]=!1}function $(e,t,r,i,n){this.type=e,this.comment=t,this[k]=null,this[T]=r,this[A]=i,this[S]=n,this[U]=!1}j.prototype=X,q=/^-----BEGIN OPENSSH PRIVATE KEY-----(?:\r\n|\n)([\s\S]+)(?:\r\n|\n)-----END OPENSSH PRIVATE KEY-----$/,j.parse=function(e,t){var n,s=q.exec(e);if(null===s)return null;var o=Buffer.from(s[1],"base64");if(o.length<31)return new Error("Malformed OpenSSH private key");var a=o.toString("ascii",0,15);if("openssh-key-v1\0"!==a)return new Error("Unsupported OpenSSH key magic: "+a);i||(i=r(4264));var c=i.readString(o,15,"ascii");if(!1===c)return new Error("Malformed OpenSSH private key");if("none"!==c&&-1===y.indexOf(c))return new Error("Unsupported cipher for OpenSSH key: "+c);var f,u,l,g=i.readString(o,o._pos,"ascii");if(!1===g)return new Error("Malformed OpenSSH private key");if("none"!==g){if("none"===c)return new Error("Malformed OpenSSH private key");if("bcrypt"!==g)return new Error("Unsupported kdf name for OpenSSH key: "+g);if(!t)return new Error("Encrypted private OpenSSH key detected, but no passphrase given")}else if("none"!==c)return new Error("Malformed OpenSSH private key");"none"!==c&&(f=_[c]);var m=i.readString(o,o._pos);if(!1===m)return new Error("Malformed OpenSSH private key");if(m.length)switch(g){case"none":return new Error("Malformed OpenSSH private key");case"bcrypt":var v=i.readString(m,0);if(!1===v||m._pos+4>m.length)return new Error("Malformed OpenSSH private key");var S=E(m,m._pos),k=Buffer.allocUnsafe(f.keyLen+f.ivLen);if(0!==d(t,t.length,v,v.length,k,k.length,S))return new Error("Failed to generate information to decrypt key");u=k.slice(0,f.keyLen),l=k.slice(f.keyLen)}else if("none"!==g)return new Error("Malformed OpenSSH private key");var T=i.readInt(o,o._pos);if(!1===T)return new Error("Malformed OpenSSH private key");if(o._pos+=4,T>0){for(var A=0;A<T;++A){var U=i.readString(o,o._pos);if(!1===U)return new Error("Malformed OpenSSH private key");if(!1===i.readString(U,0,"ascii"))return new Error("Malformed OpenSSH private key")}var B=i.readString(o,o._pos);if(!1===B)return new Error("Malformed OpenSSH private key");if(void 0!==u){if(B.length<f.blockLen||B.length%f.blockLen!=0)return new Error("Malformed OpenSSH private key");try{var R={authTagLength:f.authLen},X=h(w[c],u,l,R);if(f.authLen>0){if(o.length-o._pos<f.authLen)return new Error("Malformed OpenSSH private key");X.setAuthTag(o.slice(o._pos,o._pos+=f.authLen))}B=P(X.update(B),X.final())}catch(e){return e}}if(o._pos!==o.length)return new Error("Malformed OpenSSH private key");n=function(e,t,r){var n,s,o,a,c=[];if(e.length<8)return new Error("Malformed OpenSSH private key");if(E(e,0)!==E(e,4))return r?new Error("OpenSSH key integrity check failed -- bad passphrase?"):new Error("OpenSSH key integrity check failed");for(e._pos=8,n=0;n<t;++n){var h=void 0,f=void 0,u=void 0,l=void 0,d=i.readString(e,e._pos,"ascii");if(!1===d)return new Error("Malformed OpenSSH private key");switch(d){case"ssh-rsa":var g=i.readString(e,e._pos);if(!1===g)return new Error("Malformed OpenSSH private key");var m=i.readString(e,e._pos);if(!1===m)return new Error("Malformed OpenSSH private key");var v=i.readString(e,e._pos);if(!1===v)return new Error("Malformed OpenSSH private key");var y=i.readString(e,e._pos);if(!1===y)return new Error("Malformed OpenSSH private key");if(!1===(_=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(w=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");u=O(g,m),l=I(g,m),f=C(g,m,v,y,_,w),h="sha1";break;case"ssh-dss":var _,w;if(!1===(_=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");if(!1===(w=i.readString(e,e._pos)))return new Error("Malformed OpenSSH private key");var S=i.readString(e,e._pos);if(!1===S)return new Error("Malformed OpenSSH private key");var k=i.readString(e,e._pos);if(!1===k)return new Error("Malformed OpenSSH private key");var T=i.readString(e,e._pos);if(!1===T)return new Error("Malformed OpenSSH private key");u=L(_,w,S,k),l=H(_,w,S,k),f=x(_,w,S,k,T),h="sha1";break;case"ssh-ed25519":if(!b)return new Error("Unsupported OpenSSH private key type: "+d);var A=i.readString(e,e._pos);if(!1===A||32!==A.length)return new Error("Malformed OpenSSH private key");var U=i.readString(e,e._pos);if(!1===U||64!==U.length)return new Error("Malformed OpenSSH private key");u=F(A),l=M(A),o=U.slice(0,32),a=void 0,(a=new p.Writer).startSequence(),a.writeInt(0,p.Integer),a.startSequence(),a.writeOID("1.3.101.112"),a.endSequence(),a.startSequence(p.OctetString),a.writeBuffer(o,p.OctetString),a.endSequence(),a.endSequence(),f=N("PRIVATE",a.buffer),h=null;break;case"ecdsa-sha2-nistp256":h="sha256",s="1.2.840.10045.3.1.7";case"ecdsa-sha2-nistp384":void 0===h&&(h="sha384",s="1.3.132.0.34");case"ecdsa-sha2-nistp521":if(void 0===h&&(h="sha512",s="1.3.132.0.35"),!D(e,1))return new Error("Malformed OpenSSH private key");var B=i.readString(e,e._pos);if(!1===B)return new Error("Malformed OpenSSH private key");var R=i.readString(e,e._pos);if(!1===R)return new Error("Malformed OpenSSH private key");u=K(s,B),l=G(s,B),f=W(s,B,R);break;default:return new Error("Unsupported OpenSSH private key type: "+d)}var P=i.readString(e,e._pos,"utf8");if(!1===P)return new Error("Malformed OpenSSH private key");c.push(new j(d,P,f,u,l,h,r))}var q=0;for(n=e._pos;n<e.length;++n)if(e[n]!==++q%255)return new Error("Malformed OpenSSH private key");return c}(B,T,void 0!==u)}else n=[];return n},V.prototype=X,function(){var e=/^-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----(?:\r\n|\n)((?:[^:]+:\s*[\S].*(?:\r\n|\n))*)([\s\S]+)(?:\r\n|\n)-----END (RSA|DSA|EC) PRIVATE KEY-----$/;V.parse=function(t,r){var i=e.exec(t);if(null===i)return null;var s,o,a,c,u,d,g=Buffer.from(i[3],"base64"),E=i[2],m=!1;if(void 0!==E){E=E.split(/\r\n|\n/g);for(var v=0;v<E.length;++v){var y=E[v],_=y.indexOf(":");if("DEK-Info"===y.slice(0,_)){var w=y.slice(_+2);if(-1===(_=w.indexOf(",")))continue;var b=w.slice(0,_).toLowerCase();if(-1===l.indexOf(b))return new Error("Cipher ("+b+") not supported for encrypted OpenSSH private key");var S=B[b];if(!S)return new Error("Cipher ("+b+") not supported for encrypted OpenSSH private key");var k=Buffer.from(w.slice(_+1),"hex");if(k.length!==S.ivLen)return new Error("Malformed encrypted OpenSSH private key");if(!r)return new Error("Encrypted OpenSSH private key detected, but no passphrase given");for(var T=k.slice(0,8),A=f("md5").update(r).update(T).digest();A.length<S.keyLen;)A=P(A,f("md5").update(A).update(r).update(T).digest());A.length>S.keyLen&&(A=A.slice(0,S.keyLen));try{var U=h(b,A,k);U.setAutoPadding(!1),g=P(U.update(g),U.final()),m=!0}catch(e){return e}}}}var R,D,C,x="Malformed OpenSSH private key";switch(m&&(x+=". Bad passphrase?"),i[1]){case"RSA":s="ssh-rsa",o=N("RSA PRIVATE",g);try{(d=new p.Reader(g)).readSequence(),d.readInt();var F=d.readString(p.Integer,!0);if(null===F)return new Error(x);var M=d.readString(p.Integer,!0);if(null===M)return new Error(x);a=O(F,M),c=I(F,M)}catch(e){return new Error(x)}u="sha1";break;case"DSA":s="ssh-dss",o=N("DSA PRIVATE",g);try{(d=new p.Reader(g)).readSequence(),d.readInt();var W=d.readString(p.Integer,!0);if(null===W)return new Error(x);var q=d.readString(p.Integer,!0);if(null===q)return new Error(x);var X=d.readString(p.Integer,!0);if(null===X)return new Error(x);var j=d.readString(p.Integer,!0);if(null===j)return new Error(x);a=L(W,q,X,j),c=H(W,q,X,j)}catch(e){return new Error(x)}u="sha1";break;case"EC":var Y,Q;try{(d=new p.Reader(g)).readSequence(),d.readInt(),Q=d.readString(p.OctetString,!0),d.readByte();var z=d.readLength();if(null===z)return new Error(x);d._offset=z;var $=d.readOID();if(null===$)return new Error(x);switch($){case"1.2.840.10045.3.1.7":Y="prime256v1",s="ecdsa-sha2-nistp256",u="sha256";break;case"1.3.132.0.34":Y="secp384r1",s="ecdsa-sha2-nistp384",u="sha384";break;case"1.3.132.0.35":Y="secp521r1",s="ecdsa-sha2-nistp521",u="sha512";break;default:return new Error("Unsupported private key EC OID: "+$)}}catch(e){return new Error(x)}o=N("EC PRIVATE",g);var Z=(R=Y,D=Q,(C=n.createECDH(R)).setPrivateKey(D),C.getPublicKey());a=K($,Z),c=G($,Z)}return new V(s,"",o,a,c,u,m)}}(),Y.prototype=X,function(){var e=Buffer.alloc(0),t=Buffer.from([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=Buffer.from([0,0,0,0]),s=Buffer.from([0,0,0,1]),o=/^PuTTY-User-Key-File-2: (ssh-(?:rsa|dss))\r?\nEncryption: (aes256-cbc|none)\r?\nComment: ([^\r\n]*)\r?\nPublic-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-Lines: \d+\r?\n([\s\S]+?)\r?\nPrivate-MAC: ([^\r\n]+)/;Y.parse=function(a,c){var l=o.exec(a);if(null===l)return null;var p=l[2],d="none"!==p;if(d&&!c)return new Error("Encrypted PPK private key detected, but no passphrase given");var g=Buffer.from(l[5],"base64");if(d){var E=_[p],v=P(f("sha1").update(n).update(c).digest(),f("sha1").update(s).update(c).digest());v.length>E.keyLen&&(v=v.slice(0,E.keyLen));try{var y=h(w[p],v,t);y.setAutoPadding(!1),g=P(y.update(g),y.final()),decrypted=!0}catch(e){return e}}var b,S,k,T=l[1],A=l[3],U=Buffer.from(l[4],"base64"),B=l[6],R=T.length,N=p.length,F=Buffer.byteLength(A),M=U.length,K=g.length,G=Buffer.allocUnsafe(4+R+4+N+4+F+4+M+4+K);if(m(G,R,V=0),G.write(T,V+=4,R,"ascii"),m(G,N,V+=R),G.write(p,V+=4,N,"ascii"),m(G,F,V+=N),G.write(A,V+=4,F,"utf8"),m(G,M,V+=F),U.copy(G,V+=4),m(G,K,V+=M),g.copy(G,V+4),c||(c=e),u("sha1",f("sha1").update("putty-private-key-file-mac-key").update(c).digest()).update(G).digest("hex")!==B)return d?new Error("PPK private key integrity check failed -- bad passphrase?"):new Error("PPK private key integrity check failed");switch(i||(i=r(4264)),U._pos=0,D(U,1),T){case"ssh-rsa":var W=i.readString(U,U._pos);if(!1===W)return new Error("Malformed PPK public key");var q=i.readString(U,U._pos);if(!1===q)return new Error("Malformed PPK public key");var X=i.readString(g,0);if(!1===X)return new Error("Malformed PPK private key");if(!1===(V=i.readString(g,g._pos)))return new Error("Malformed PPK private key");if(!1===(Q=i.readString(g,g._pos)))return new Error("Malformed PPK private key");var j=i.readString(g,g._pos);if(!1===j)return new Error("Malformed PPK private key");b=O(q,W),S=I(q,W),k=C(q,W,X,j,V,Q);break;case"ssh-dss":var V,Q;if(!1===(V=i.readString(U,U._pos)))return new Error("Malformed PPK public key");if(!1===(Q=i.readString(U,U._pos)))return new Error("Malformed PPK public key");var z=i.readString(U,U._pos);if(!1===z)return new Error("Malformed PPK public key");var $=i.readString(U,U._pos);if(!1===$)return new Error("Malformed PPK public key");var Z=i.readString(g,0);if(!1===Z)return new Error("Malformed PPK private key");b=L(V,Q,z,$),S=H(V,Q,z,$),k=x(V,Q,z,$,Z)}return new Y(T,A,k,b,S,"sha1",d)}}(),z.prototype=X,function(){var e;e=b?/^(((?:ssh-(?:rsa|dss|ed25519))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/:/^(((?:ssh-(?:rsa|dss))|ecdsa-sha2-nistp(?:256|384|521))(?:-cert-v0[01]@openssh.com)?) ([A-Z0-9a-z\/+=]+)(?:$|\s+([\S].*)?)$/,z.parse=function(t){var n=e.exec(t);if(null===n)return null;i||(i=r(4264));var s=n[1],o=n[2],a=Buffer.from(n[3],"base64"),c=n[4]||"",h=i.readString(a,a._pos,"ascii");return!1===h||0!==h.indexOf(o)?new Error("Malformed OpenSSH public key"):Q(a,o,c,s)}}(),$.prototype=X,function(){var e=/^---- BEGIN SSH2 PUBLIC KEY ----(?:\r\n|\n)((?:(?:[\x21-\x7E]+?):(?:(?:.*?\\\r?\n)*.*)(?:\r\n|\n))*)((?:[A-Z0-9a-z\/+=]+(?:\r\n|\n))+)---- END SSH2 PUBLIC KEY ----$/,t=/^([\x21-\x7E]+?):((?:.*?\\\r?\n)*.*)$/gm,n=/\\\r?\n/g;$.parse=function(s){var o=e.exec(s);if(null===o)return null;var a=o[1],c=Buffer.from(o[2],"base64"),h="";if(void 0!==a)for(;o=t.exec(a);)"comment"===o[1].toLowerCase()&&(h=R(o[2].replace(n,""))).length>1&&34===h.charCodeAt(0)&&34===h.charCodeAt(h.length-1)&&(h=h.slice(1,-1));i||(i=r(4264));var f=i.readString(c,0,"ascii");if(!1===f)return new Error("Malformed RFC4716 public key");var u=null,l=null;switch(f){case"ssh-rsa":var p=i.readString(c,c._pos);if(!1===p)return new Error("Malformed RFC4716 public key");var d=i.readString(c,c._pos);if(!1===d)return new Error("Malformed RFC4716 public key");u=O(d,p),l=I(d,p);break;case"ssh-dss":var g=i.readString(c,c._pos);if(!1===g)return new Error("Malformed RFC4716 public key");var E=i.readString(c,c._pos);if(!1===E)return new Error("Malformed RFC4716 public key");var m=i.readString(c,c._pos);if(!1===m)return new Error("Malformed RFC4716 public key");var v=i.readString(c,c._pos);if(!1===v)return new Error("Malformed RFC4716 public key");u=L(g,E,m,v),l=H(g,E,m,v);break;default:return new Error("Malformed RFC4716 public key")}return new $(f,h,u,l,"sha1")}}(),e.exports={parseDERKey:function(e,t){return Q(e,t,"",t)},parseKey:function(e,t){if(Buffer.isBuffer(e))e=e.toString("utf8").trim();else{if("string"!=typeof e)return new Error("Key data must be a Buffer or string");e=e.trim()}if(null!=t)if("string"==typeof t)t=Buffer.from(t);else if(!Buffer.isBuffer(t))return new Error("Passphrase must be a string or Buffer when supplied");var r;return null!==(r=j.parse(e,t))||null!==(r=V.parse(e,t))||null!==(r=Y.parse(e,t))||null!==(r=z.parse(e))||null!==(r=$.parse(e))?r:new Error("Unsupported key format")}}},4992:(e,t,r)=>{"use strict";var i=r(970).inspect;function n(e,t){if(!e)throw new ERR_INTERNAL_ASSERTION(t)}function s(e){for(var t="",r=e.length,i="-"===e[0]?1:0;r>=i+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function o(e,t){if(n("string"==typeof t,"`thing` has to be of type string"),Array.isArray(e)){var r=e.length;return n(r>0,"At least one expected value needs to be specified"),e=e.map((e=>String(e))),r>2?`one of ${t} ${e.slice(0,r-1).join(", ")}, or `+e[r-1]:2===r?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}n.fail=function(e){throw new ERR_INTERNAL_ASSERTION(e)},t.ERR_INTERNAL_ASSERTION=class e extends Error{constructor(t){super(),Error.captureStackTrace(this,e);var r="This is caused by either a bug in ssh2-streams or incorrect usage of ssh2-streams internals.\nPlease open an issue with this stack trace at https://github.com/mscdex/ssh2-streams/issues\n";this.message=void 0===t?r:`${t}\n${r}`}};var a=Math.pow(2,32),c=function(){try{return new Function("return 2n ** 32n")()}catch(e){}}();function h(e,t){emitErrorNT(e,t),f(e)}function f(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}t.ERR_OUT_OF_RANGE=class e extends RangeError{constructor(t,r,o,h){super(),Error.captureStackTrace(this,e),n(r,'Missing "range" argument');var f,u=h?t:`The value of "${t}" is out of range.`;Number.isInteger(o)&&Math.abs(o)>a?f=s(String(o)):"bigint"==typeof o?(f=String(o),(o>c||o<-c)&&(f=s(f)),f+="n"):f=i(o),u+=` It must be ${r}. Received ${f}`,this.message=u}},t.ERR_INVALID_ARG_TYPE=class e extends TypeError{constructor(t,r,i){var s,a;if(super(),Error.captureStackTrace(this,e),n("string"==typeof t,"'name' must be a string"),"string"==typeof r&&r.startsWith("not ")?(s="must not be",r=r.replace(/^not /,"")):s="must be",t.endsWith(" argument"))a=`The ${t} ${s} ${o(r,"type")}`;else{var c=t.includes(".")?"property":"argument";a=`The "${t}" ${c} ${s} ${o(r,"type")}`}a+=". Received type "+typeof i,this.message=a}},t.validateNumber=function(e,t){if("number"!=typeof e)throw new ERR_INVALID_ARG_TYPE(t,"number",e)},t.destroyImpl=function(e,t){const r=this._readableState&&this._readableState.destroyed,i=this._writableState&&this._writableState.destroyed;return r||i?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(emitErrorNT,this,e)):process.nextTick(emitErrorNT,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(e=>{!t&&e?this._writableState?this._writableState.errorEmitted?process.nextTick(f,this):(this._writableState.errorEmitted=!0,process.nextTick(h,this,e)):process.nextTick(h,this,e):t?(process.nextTick(f,this),t(e)):process.nextTick(f,this)})),this)}},6348:(e,t,r)=>{var i=r(8378).Transform,n=r(8378).Readable,s=r(8378).Writable,o=r(2058).constants||process.binding("constants"),a=r(970),c=a.inherits,h=a.isDate,f=r(467).EventEmitter.listenerCount,u=r(2058),l=r(4264).readString,p=r(4264).readInt,d=r(8128).readUInt32BE,g=r(8128).writeUInt32BE,E={OK:0,EOF:1,NO_SUCH_FILE:2,PERMISSION_DENIED:3,FAILURE:4,BAD_MESSAGE:5,NO_CONNECTION:6,CONNECTION_LOST:7,OP_UNSUPPORTED:8};Object.keys(E).forEach((function(e){E[E[e]]=e}));var m={0:"No error",1:"End of file",2:"No such file or directory",3:"Permission denied",4:"Failure",5:"Bad message",6:"No connection",7:"Connection lost",8:"Operation unsupported"};U.STATUS_CODE=E;var v={INIT:1,OPEN:3,CLOSE:4,READ:5,WRITE:6,LSTAT:7,FSTAT:8,SETSTAT:9,FSETSTAT:10,OPENDIR:11,READDIR:12,REMOVE:13,MKDIR:14,RMDIR:15,REALPATH:16,STAT:17,RENAME:18,READLINK:19,SYMLINK:20,EXTENDED:200};Object.keys(v).forEach((function(e){v[v[e]]=e}));var y={VERSION:2,STATUS:101,HANDLE:102,DATA:103,NAME:104,ATTRS:105,EXTENDED:201};Object.keys(y).forEach((function(e){y[y[e]]=e}));var _={READ:1,WRITE:2,APPEND:4,CREAT:8,TRUNC:16,EXCL:32};U.OPEN_MODE=_;var w=Math.pow(2,32)-1,b=Buffer.from([0,0,0,5,v.INIT,0,0,0,3]),S=Buffer.from([0,0,0,5,y.VERSION,0,0,0,3]),k=/^SSH-2.0-(?:OpenSSH|dropbear)/,T=260096;function A(e){}function U(e,t){"string"!=typeof e||t||(t=e,e=void 0),"object"==typeof e&&e||(e={}),i.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this.debug="function"==typeof e.debug?e.debug:A,this.server=!!e.server,this._isOpenSSH=t&&k.test(t),this._needContinue=!1,this._state={status:"packet_header",writeReqid:-1,pktLeft:void 0,pktHdrBuf:Buffer.allocUnsafe(9),pktBuf:void 0,pktType:void 0,version:void 0,extensions:{},maxDataLen:this._isOpenSSH?T:32768,requests:{}};var r=this;function n(){r.writable=!1,r._cleanup(!1)}this.on("end",(function(){r.readable=!1})).on("finish",n).on("prefinish",n),this.server||this.push(b)}function B(e,t,r,i,n,s){var o,a,c,h,f=64,l=32768;"function"==typeof n?s=n:"object"==typeof n&&null!==n&&("number"==typeof n.concurrency&&n.concurrency>0&&!isNaN(n.concurrency)&&(f=n.concurrency),"number"==typeof n.chunkSize&&n.chunkSize>0&&!isNaN(n.chunkSize)&&(l=n.chunkSize),"number"==typeof n.fileSize&&n.fileSize>0&&!isNaN(n.fileSize)&&(c=n.fileSize),"function"==typeof n.step&&(o=n.step),"string"!=typeof n.mode&&"number"!=typeof n.mode||(a=I(n.mode)));var p,d,g,E=0,m=0,v=!1,y=l*f;function _(r){if(!v){v=!0;var i,n=0;p||d?(i=function(){0==--n&&s(r)},p&&(e===u||e.writable)&&++n,d&&(t===u||t.writable)&&++n,p&&(e===u||e.writable)&&e.close(p,i),d&&(t===u||t.writable)&&t.close(d,i)):s(r)}}e.open(r,"r",(function(n,v){if(n)return _(n);function w(n,c){if(n)return e!==u?void e.stat(r,(function(e,t){if(e)return _(n);w(null,t)})):_(n);h=c.size,t.open(i,"w",(function(r,n){if(r)return _(r);if(d=n,h<=0)return _();for(;y>h;){if(1===f){y=h;break}y-=l,--f}if((g=function(e){try{return Buffer.allocUnsafe(e)}catch(e){return e}}(y))instanceof Error)return _(g);function c(r,i,n,a,c,f){if(r)return _(r);function v(r){if(r)return _(r);if(m+=i,o&&o(m,i,h),i<f)return w(c,a+i,f-i);if(m!==h){if(!(E>=h)){var n=E+l>h?h-E:l;w(c,E,n),E+=n}}else t.close(d,(function(t){if(d=void 0,t)return _(t);e.close(p,(function(e){if(p=void 0,e)return _(e);s()}))}))}c=c||0,e===u?t.writeData(d,g,c,i,a,v):t.write(d,g,c,i,a,v)}function v(e,t,r){return function(i,n,s){c(i,n,0,t,e,r)}}function w(t,r,i){e===u?e.read(p,g,t,i,r,v(t,r,i)):e.readData(p,g,t,i,r,v(t,r,i))}function b(){for(var e=0,t=0;E<h&&e<f;){var r=E+l>h?h-E:l;w(t,E,r),t+=r,E+=r,++e}}void 0!==a?t.fchmod(d,a,(function e(r){r?t.chmod(i,a,(function(t){e()})):b()})):b()}))}p=v,void 0===c?e.fstat(p,w):w(null,{size:c})}))}function R(e,t,r,i,n,s,o){var a="function"==typeof o?o:void 0;e.writeData(t,r,i,n,s,(function(o,c){if(o)return e.close(t,(function(){a&&a(o)}));c===n?e.close(t,a):R(e,t,r,i+=c,n-=c,s+=c,a)}))}function N(e,t,r,i){var n=d(e,t),s=new x;if(t+=4,1&n){var o=P(e,t,r,i);if(!1===o)return!1;s.size=o,t+=8}if(2&n){var a,c;if(!1===(a=p(e,t,this,i)))return!1;if(s.uid=a,!1===(c=p(e,t+=4,this,i)))return!1;s.gid=c,t+=4}if(4&n){var h=p(e,t,this,i);if(!1===h)return!1;s.mode=h,s.permissions=h,t+=4}if(8&n){var f,u;if(!1===(f=p(e,t,this,i)))return!1;if(s.atime=f,!1===(u=p(e,t+=4,this,i)))return!1;s.mtime=u,t+=4}if(2147483648&n){var l=p(e,t,this,i);if(!1===l)return!1;t+=4;for(var g,E=0;E<l;++E){if(!1===(g=p(e,t,this,i)))return!1;t+=4+g}}return e._pos=t,s}function P(e,t,r,i){if(e.length-t<8)return r&&r._cleanup(i),!1;for(var n=0,s=t+8;t<s;++t)n*=256,n+=e[t];return e._pos=t,n}function D(e){var t=0,r=0,i=[],n=0;if("object"!=typeof e||null===e)return{flags:t,nbytes:r,bytes:i};if("number"==typeof e.size){t|=1,r+=8;var s=new Array(8),o=e.size;for(n=7;n>=0;--n)s[n]=255&o,o/=256;i.push(s)}if("number"==typeof e.uid&&"number"==typeof e.gid&&(t|=2,r+=8,i.push([e.uid>>24&255,e.uid>>16&255,e.uid>>8&255,255&e.uid]),i.push([e.gid>>24&255,e.gid>>16&255,e.gid>>8&255,255&e.gid])),"number"==typeof e.permissions||"string"==typeof e.permissions||"number"==typeof e.mode||"string"==typeof e.mode){var a=I(e.mode||e.permissions);t|=4,r+=4,i.push([a>>24&255,a>>16&255,a>>8&255,255&a])}if(("number"==typeof e.atime||h(e.atime))&&("number"==typeof e.mtime||h(e.mtime))){var c=O(e.atime),f=O(e.mtime);t|=8,r+=8,i.push([c>>24&255,c>>16&255,c>>8&255,255&c]),i.push([f>>24&255,f>>16&255,f>>8&255,255&f])}return{flags:t,nbytes:r,bytes:i}}function O(e){if("number"==typeof e&&!isNaN(e))return e;if(h(e))return parseInt(e.getTime()/1e3,10);throw new Error("Cannot parse time: "+e)}function I(e){if("number"==typeof e&&!isNaN(e))return e;if("string"==typeof e)return I(parseInt(e,8));throw new Error("Cannot parse mode: "+e)}c(U,i),U.prototype.__read=i.prototype._read,U.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},U.prototype.__push=i.prototype.push,U.prototype.push=function(e,t){if(!this.readable)return!1;null===e&&(this.readable=!1);var r=this.__push(e,t);return this._needContinue=!1===r,r},U.prototype._cleanup=function(e){var t=this._state;t.pktBuf=void 0;var r=t.requests,i=Object.keys(r),n=i.length;if(n){if(this.readable)for(var s,o=new Error("SFTP session ended early"),a=0;a<n;++a)(s=r[i[a]].cb)&&s(o);t.requests={}}this.readable&&this.push(null),this._readableState.endEmitted||this._readableState.flowing||this.resume(),!1!==e&&(this.debug("DEBUG[SFTP]: Parser: Malformed packet"),e&&e(new Error("Malformed packet")))},U.prototype._transform=function(e,t,r){for(var i,n,s,o=this._state,a=this.server,c=o.status,h=o.pktType,u=o.pktBuf,_=o.pktLeft,w=o.version,b=o.pktHdrBuf,k=o.requests,T=this.debug,A=e.length,U=0;;){if("discard"===c){if(!(_<=(n=A-U))){_-=n;break}U+=_,_=0,c="packet_header",i=u=void 0}else{if(void 0!==u){if(_<=(n=A-U)){e.copy(u,u.length-_,U,U+_),U+=_,_=0,i=u,u=void 0;continue}e.copy(u,u.length-_,U),_-=n;break}if("packet_header"===c)if(i){if(_=d(i,4)-1,h=i[8],a){if(void 0===w&&h!==v.INIT)return T("DEBUG[SFTP]: Parser: Unexpected packet before init"),this._cleanup(!1),r(new Error("Unexpected packet before init"));if(void 0!==w&&h===v.INIT)T("DEBUG[SFTP]: Parser: Unexpected duplicate init"),c="bad_pkt";else{if(_>34e3)return T("DEBUG[SFTP]: Parser: "+(V="Packet length ("+_+") exceeds max length (34000)")),this._cleanup(!1),r(new Error(V));h===v.EXTENDED?c="bad_pkt":void 0===v[h]&&(T("DEBUG[SFTP]: Parser: Unsupported packet type: "+h),c="discard")}}else{if(void 0===w&&h!==y.VERSION)return T("DEBUG[SFTP]: Parser: Unexpected packet before version"),this._cleanup(!1),r(new Error("Unexpected packet before version"));void 0!==w&&h===y.VERSION?(T("DEBUG[SFTP]: Parser: Unexpected duplicate version"),c="bad_pkt"):void 0===y[h]&&(c="discard")}"bad_pkt"===c?(g(b,_+1,0),b[4]=h,_=4,u=b):(u=Buffer.allocUnsafe(_),c="payload")}else _=5,u=b;else if("payload"===c){if(h===y.VERSION||h===v.INIT){if(!1===(w=o.version=p(i,0,this,r)))return;if(w<3)return this._cleanup(!1),r(new Error("Incompatible SFTP version: "+w));a&&this.push(S);var B,R,D=i.length;for(i._pos=4;i._pos<D;){if(!1===(B=l(i,i._pos,"ascii",this,r)))return;if(!1===(R=l(i,i._pos,"ascii",this,r)))return;o.extensions[B]?o.extensions[B].push(R):o.extensions[B]=[R]}this.emit("ready")}else{if(!1===(s=p(i,0,this,r)))return;var O,I,C,L;if(a){var H,x,F=v[h];if(T("DEBUG[SFTP]: Parser: Request: "+F),f(this,F)){if(h===v.OPEN){if(!1===(O=l(i,4,"utf8",this,r)))return;var M=p(i,i._pos,this,r);if(!1===M)return;if(!1===(I=N(i,i._pos+4,this,r)))return;this.emit(F,s,O,M,I)}else if(h===v.CLOSE||h===v.FSTAT||h===v.READDIR){if(!1===(C=l(i,4,this,r)))return;this.emit(F,s,C)}else if(h===v.READ){if(!1===(C=l(i,4,this,r)))return;if(!1===(H=P(i,i._pos,this,r)))return;var K=p(i,i._pos,this,r);if(!1===K)return;this.emit(F,s,C,H,K)}else if(h===v.WRITE){if(!1===(C=l(i,4,this,r)))return;if(!1===(H=P(i,i._pos,this,r)))return;if(!1===(L=l(i,i._pos,this,r)))return;this.emit(F,s,C,H,L)}else if(h===v.LSTAT||h===v.STAT||h===v.OPENDIR||h===v.REMOVE||h===v.RMDIR||h===v.REALPATH||h===v.READLINK){if(!1===(x=l(i,4,"utf8",this,r)))return;this.emit(F,s,x)}else if(h===v.SETSTAT||h===v.MKDIR){if(!1===(x=l(i,4,"utf8",this,r)))return;if(!1===(I=N(i,i._pos,this,r)))return;this.emit(F,s,x,I)}else if(h===v.FSETSTAT){if(!1===(C=l(i,4,this,r)))return;if(!1===(I=N(i,i._pos,this,r)))return;this.emit(F,s,C,I)}else if(h===v.RENAME||h===v.SYMLINK){var G,W;if(!1===(G=l(i,4,"utf8",this,r)))return;if(!1===(W=l(i,i._pos,"utf8",this,r)))return;h===v.SYMLINK&&this._isOpenSSH?this.emit(F,s,W,G):this.emit(F,s,G,W)}}else this.status(s,E.OP_UNSUPPORTED)}else{var q=k[s],X=q&&q.cb;if(T("DEBUG[SFTP]: Parser: Response: "+y[h]),q&&X)if(h===y.STATUS){var j=p(i,4,this,r);if(!1===j)return;if(j===E.OK)X();else{var V,Y="";if(i.length>=12){if(!1===(V=l(i,8,"utf8",this,r)))return;if(i._pos+4<i.length&&!1===(Y=l(i,i._pos,"ascii",this,r)))return}if(2===j||4===j)X();else{var Q=new Error(V||m[j]||"Unknown status");Q.code=j,Q.lang=Y,X(Q)}}}else if(h===y.HANDLE){if(!1===(C=l(i,4,this,r)))return;X(void 0,C)}else if(h===y.DATA)if(q.buffer){var z=p(i,4,this,r);if(!1===z)return;var $=q.buffer.length;if(z>$&&g(i,$,4),!1===(L=l(i,4,q.buffer,this,r)))return;X(void 0,L,z)}else{if(!1===(L=l(i,4,this,r)))return;X(void 0,L)}else if(h===y.NAME){var Z=p(i,4,this,r);if(!1===Z)return;var J,ee=[];i._pos=8;for(var te=0;te<Z;++te){if(!1===(O=l(i,i._pos,"utf8",this,r)))return;if(!1===(J=l(i,i._pos,"utf8",this,r)))return;if(!1===(I=N(i,i._pos,this,r)))return;ee.push({filename:O,longname:J,attrs:I})}X(void 0,ee)}else if(h===y.ATTRS){if(!1===(I=N(i,4,this,r)))return;X(void 0,I)}else if(h===y.EXTENDED){if(q.extended)switch(q.extended){case"statvfs@openssh.com":case"fstatvfs@openssh.com":var re={f_bsize:void 0,f_frsize:void 0,f_blocks:void 0,f_bfree:void 0,f_bavail:void 0,f_files:void 0,f_ffree:void 0,f_favail:void 0,f_sid:void 0,f_flag:void 0,f_namemax:void 0};if(re.f_bsize=P(i,4,this,r),!1===re.f_bsize)return;if(re.f_frsize=P(i,12,this,r),!1===re.f_frsize)return;if(re.f_blocks=P(i,20,this,r),!1===re.f_blocks)return;if(re.f_bfree=P(i,28,this,r),!1===re.f_bfree)return;if(re.f_bavail=P(i,36,this,r),!1===re.f_bavail)return;if(re.f_files=P(i,44,this,r),!1===re.f_files)return;if(re.f_ffree=P(i,52,this,r),!1===re.f_ffree)return;if(re.f_favail=P(i,60,this,r),!1===re.f_favail)return;if(re.f_sid=P(i,68,this,r),!1===re.f_sid)return;if(re.f_flag=P(i,76,this,r),!1===re.f_flag)return;if(re.f_namemax=P(i,84,this,r),!1===re.f_namemax)return;X(void 0,re)}X()}q&&delete k[s]}}c="packet_header",i=u=void 0}else if("bad_pkt"===c){if(a&&i[4]!==v.INIT){var ie=i[4]===v.EXTENDED?E.OP_UNSUPPORTED:E.FAILURE;if(i[4]===v.INIT||i[4]===y.VERSION)return this._cleanup(r);if(!1===(s=p(i,5,this,r)))return;this.status(s,ie)}_=d(i,0)-5,c="discard"}}if(U>=A)break}o.status=c,o.pktType=h,o.pktBuf=u,o.pktLeft=_,o.version=w,r()},U.prototype.createReadStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new Y(this,e,t)},U.prototype.createWriteStream=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");return new z(this,e,t)},U.prototype.open=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=this._state;"function"==typeof r&&(i=r,r=void 0);var s="number"==typeof t?t:H(t);if(null===s)throw new Error("Unknown flags string: "+t);var o=0,a=0;"string"!=typeof r&&"number"!=typeof r||(r={mode:r}),"object"==typeof r&&null!==r&&(o=(r=D(r)).flags,a=r.nbytes,r=r.bytes);var c=Buffer.byteLength(e),h=9,f=Buffer.allocUnsafe(13+c+4+4+a);g(f,f.length-4,0),f[4]=v.OPEN;var u=n.writeReqid=(n.writeReqid+1)%w;if(g(f,u,5),g(f,c,h),f.write(e,h+=4,c,"utf8"),g(f,s,h+=c),g(f,o,h+=4),r&&o){h+=4;for(var l=0,p=r.length;l<p;++l)for(var d=0,E=r[l].length;d<E;++d)f[h++]=r[l][d]}return n.requests[u]={cb:i},this.debug("DEBUG[SFTP]: Outgoing: Writing OPEN"),this.push(f)},U.prototype.close=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var r=this._state,i=e.length,n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.CLOSE;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),e.copy(s,n+=4),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing CLOSE"),this.push(s)},U.prototype.readData=function(e,t,r,i,n,s){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(r>=t.length)throw new Error("offset is out of bounds");if(r+i>t.length)throw new Error("length extends beyond buffer");if(null===n)throw new Error("null position currently unsupported");var o=this._state,a=e.length,c=9,h=n,f=Buffer.allocUnsafe(13+a+8+4);g(f,f.length-4,0),f[4]=v.READ;var u=o.writeReqid=(o.writeReqid+1)%w;g(f,u,5),g(f,a,c),e.copy(f,c+=4),c+=a;for(var l=7;l>=0;--l)f[c+l]=255&h,h/=256;return g(f,i,c+=8),o.requests[u]={cb:function(e,t,r){if(e){if(s._wantEOFError||e.code!==E.EOF)return s(e)}else if(r>i)return s(new Error("Received more data than requested"));s(void 0,r||0,t,n)},buffer:t.slice(r,r+i)},this.debug("DEBUG[SFTP]: Outgoing: Writing READ"),this.push(f)},U.prototype.writeData=function(e,t,r,i,n,s){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");if(!Buffer.isBuffer(t))throw new Error("buffer is not a Buffer");if(r>t.length)throw new Error("offset is out of bounds");if(r+i>t.length)throw new Error("length extends beyond buffer");if(null===n)throw new Error("null position currently unsupported");var o=this,a=this._state;if(i){var c=i>a.maxDataLen?i-a.maxDataLen:0,h=n;c&&(i=a.maxDataLen);var f=e.length,u=9,l=Buffer.allocUnsafe(13+f+8+4+i);g(l,l.length-4,0),l[4]=v.WRITE;var p=a.writeReqid=(a.writeReqid+1)%w;g(l,p,5),g(l,f,u),e.copy(l,u+=4),u+=f;for(var d=7;d>=0;--d)l[u+d]=255&n,n/=256;return g(l,i,u+=8),t.copy(l,u+=4,r,r+i),a.requests[p]={cb:function(n){n?s&&s(n):c?o.writeData(e,t,r+i,c,h+i,s):s&&s(void 0,r+i)}},this.debug("DEBUG[SFTP]: Outgoing: Writing WRITE"),this.push(l)}s&&process.nextTick((function(){s(void 0,0)}))},U.prototype.fastGet=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");B(this,u,e,t,r,i)},U.prototype.fastPut=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");B(u,this,e,t,r,i)},U.prototype.readFile=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i;"function"==typeof r?i=r:"function"==typeof t&&(i=t,t=void 0);var n=this;if("string"==typeof t)t={encoding:t,flag:"r"};else if(t){if("object"!=typeof t)throw new TypeError("Bad arguments")}else t={encoding:null,flag:"r"};var s,o,a,c=t.encoding;if(c&&!Buffer.isEncoding(c))throw new Error("Unknown encoding: "+c);var h,f=0,u=0,l=t.flag||"r";function p(){0===s?(o=Buffer.allocUnsafe(8192),n.readData(h,o,0,8192,u,d)):n.readData(h,o,f,s-f,u,d)}function d(e,t){var r;if(e){if(!(r=e.code===E.EOF))return n.close(h,(function(){return i&&i(e)}))}else r=!1;if(r||0===s&&0===t)return g();u+=t,f+=t,0!==s?f===s?g():p():(a.push(o.slice(0,t)),p())}function g(){n.close(h,(function(e){return 0===s?o=Buffer.concat(a,f):f<s&&(o=o.slice(0,f)),c&&(o=o.toString(c)),i&&i(e,o)}))}this.open(e,l,438,(function(t,r){if(t)return i&&i(t);h=r,n.fstat(h,(function t(r,c){if(r)n.stat(e,(function(e,s){if(e)return n.close(h,(function(){i&&i(r)}));t(null,s)}));else{if(0===(s=c.size||0))return a=[],p();o=Buffer.allocUnsafe(s),p()}}))})),d._wantEOFError=!0},U.prototype.writeFile=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n;"function"==typeof i?n=i:"function"==typeof r&&(n=r,r=void 0);var s=this;if("string"==typeof r)r={encoding:r,mode:438,flag:"w"};else if(r){if("object"!=typeof r)throw new TypeError("Bad arguments")}else r={encoding:"utf8",mode:438,flag:"w"};if(r.encoding&&!Buffer.isEncoding(r.encoding))throw new Error("Unknown encoding: "+r.encoding);var o=r.flag||"w";this.open(e,o,r.mode,(function(i,a){if(i)n&&n(i);else{var c=Buffer.isBuffer(t)?t:Buffer.from(""+t,r.encoding||"utf8"),h=/a/.test(o)?null:0;if(null===h)return void s.fstat(a,(function t(r,i){r?s.stat(e,(function(e,i){if(e)return s.close(a,(function(){n&&n(r)}));t(null,i)})):R(s,a,c,0,c.length,i.size,n)}));R(s,a,c,0,c.length,h,n)}}))},U.prototype.appendFile=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n;if("function"==typeof i?n=i:"function"==typeof r&&(n=r,r=void 0),"string"==typeof r)r={encoding:r,mode:438,flag:"a"};else if(r){if("object"!=typeof r)throw new TypeError("Bad arguments")}else r={encoding:"utf8",mode:438,flag:"a"};r.flag||(r=a._extend({flag:"a"},r)),this.writeFile(e,t,r,n)},U.prototype.exists=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");this.stat(e,(function(e){t&&t(!e)}))},U.prototype.unlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.REMOVE;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing REMOVE"),this.push(s)},U.prototype.rename=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(13+n+4+s);g(a,a.length-4,0),a[4]=v.RENAME;var c=i.writeReqid=(i.writeReqid+1)%w;return g(a,c,5),g(a,n,o),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing RENAME"),this.push(a)},U.prototype.mkdir=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=0,n=0,s=this._state;"function"==typeof t&&(r=t,t=void 0),"object"==typeof t&&null!==t&&(i=(t=D(t)).flags,n=t.nbytes,t=t.bytes);var o=Buffer.byteLength(e),a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=v.MKDIR;var h=s.writeReqid=(s.writeReqid+1)%w;if(g(c,h,5),g(c,o,a),c.write(e,a+=4,o,"utf8"),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing MKDIR"),this.push(c)},U.prototype.rmdir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.RMDIR;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing RMDIR"),this.push(s)},U.prototype.readdir=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i,n=this._state;if("function"==typeof t&&(r=t,t={}),"object"==typeof t&&null!==t||(t={}),i=!t||!t.full,!Buffer.isBuffer(e)&&"string"!=typeof e)throw new Error("missing directory handle or path");if("string"==typeof e){var s=this,o=[],a=0;return this.opendir(e,(function e(i,n){if(i)return r(i);s.readdir(n,t,(function(t,i){var c=t&&t.code===E.EOF;if(t&&!c)return s.close(n,(function(){r(t)}));if(c)return s.close(n,(function(e){if(e)return r(e);r(void 0,o)}));for(var h=0,f=i.length;h<f;++h,++a)o[a]=i[h];e(void 0,n)}))}))}var c=e.length,h=9,f=Buffer.allocUnsafe(13+c);g(f,f.length-4,0),f[4]=v.READDIR;var u=n.writeReqid=(n.writeReqid+1)%w;return g(f,u,5),g(f,c,h),e.copy(f,h+=4),n.requests[u]={cb:i?function(e,t){if(e)return r(e);for(var i=t.length-1;i>=0;--i)"."!==t[i].filename&&".."!==t[i].filename||t.splice(i,1);r(void 0,t)}:r},this.debug("DEBUG[SFTP]: Outgoing: Writing READDIR"),this.push(f)},U.prototype.fstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var r=this._state,i=e.length,n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.FSTAT;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),e.copy(s,n+=4),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing FSTAT"),this.push(s)},U.prototype.stat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.STAT;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing STAT"),this.push(s)},U.prototype.lstat=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.LSTAT;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing LSTAT"),this.push(s)},U.prototype.opendir=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.OPENDIR;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing OPENDIR"),this.push(s)},U.prototype.setstat=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=0,n=0,s=this._state;"object"==typeof t&&null!==t?(i=(t=D(t)).flags,n=t.nbytes,t=t.bytes):"function"==typeof t&&(r=t);var o=Buffer.byteLength(e),a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=v.SETSTAT;var h=s.writeReqid=(s.writeReqid+1)%w;if(g(c,h,5),g(c,o,a),c.write(e,a+=4,o,"utf8"),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing SETSTAT"),this.push(c)},U.prototype.fsetstat=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=0,n=0,s=this._state;"object"==typeof t&&null!==t?(i=(t=D(t)).flags,n=t.nbytes,t=t.bytes):"function"==typeof t&&(r=t);var o=e.length,a=9,c=Buffer.allocUnsafe(13+o+4+n);g(c,c.length-4,0),c[4]=v.FSETSTAT;var h=s.writeReqid=(s.writeReqid+1)%w;if(g(c,h,5),g(c,o,a),e.copy(c,a+=4),g(c,i,a+=o),i){a+=4;for(var f=0,u=t.length;f<u;++f)for(var l=0,p=t[f].length;l<p;++l)c[a++]=t[f][l]}return s.requests[h]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing FSETSTAT"),this.push(c)},U.prototype.futimes=function(e,t,r,i){return this.fsetstat(e,{atime:O(t),mtime:O(r)},i)},U.prototype.utimes=function(e,t,r,i){return this.setstat(e,{atime:O(t),mtime:O(r)},i)},U.prototype.fchown=function(e,t,r,i){return this.fsetstat(e,{uid:t,gid:r},i)},U.prototype.chown=function(e,t,r,i){return this.setstat(e,{uid:t,gid:r},i)},U.prototype.fchmod=function(e,t,r){return this.fsetstat(e,{mode:t},r)},U.prototype.chmod=function(e,t,r){return this.setstat(e,{mode:t},r)},U.prototype.readlink=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.READLINK;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:function(e,r){return e?t(e):r&&r.length?void t(void 0,r[0].filename):t(new Error("Response missing link info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing READLINK"),this.push(s)},U.prototype.symlink=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=this._state,n=Buffer.byteLength(t),s=Buffer.byteLength(e),o=9,a=Buffer.allocUnsafe(13+n+4+s);g(a,a.length-4,0),a[4]=v.SYMLINK;var c=i.writeReqid=(i.writeReqid+1)%w;return g(a,c,5),this._isOpenSSH?(g(a,s,o),a.write(e,o+=4,s,"utf8"),g(a,n,o+=s),a.write(t,o+=4,n,"utf8")):(g(a,n,o),a.write(t,o+=4,n,"utf8"),g(a,s,o+=n),a.write(e,o+=4,s,"utf8")),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing SYMLINK"),this.push(a)},U.prototype.realpath=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=this._state,i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(13+i);g(s,s.length-4,0),s[4]=v.REALPATH;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,i,n),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:function(e,r){return e?t(e):r&&r.length?void t(void 0,r[0].filename):t(new Error("Response missing path info"))}},this.debug("DEBUG[SFTP]: Outgoing: Writing REALPATH"),this.push(s)},U.prototype.ext_openssh_rename=function(e,t,r){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["posix-rename@openssh.com"]||-1===i.extensions["posix-rename@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(41+n+4+s);g(a,a.length-4,0),a[4]=v.EXTENDED;var c=i.writeReqid=(i.writeReqid+1)%w;return g(a,c,5),g(a,24,o),a.write("posix-rename@openssh.com",o+=4,24,"ascii"),g(a,n,o+=24),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing posix-rename@openssh.com"),this.push(a)},U.prototype.ext_openssh_statvfs=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["statvfs@openssh.com"]||-1===r.extensions["statvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");var i=Buffer.byteLength(e),n=9,s=Buffer.allocUnsafe(36+i);g(s,s.length-4,0),s[4]=v.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,19,n),s.write("statvfs@openssh.com",n+=4,19,"ascii"),g(s,i,n+=19),s.write(e,n+=4,i,"utf8"),r.requests[o]={extended:"statvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing statvfs@openssh.com"),this.push(s)},U.prototype.ext_openssh_fstatvfs=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["fstatvfs@openssh.com"]||-1===r.extensions["fstatvfs@openssh.com"].indexOf("2"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=e.length,n=9,s=Buffer.allocUnsafe(37+i);g(s,s.length-4,0),s[4]=v.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,20,n),s.write("fstatvfs@openssh.com",n+=4,20,"ascii"),g(s,i,n+=20),s.write(e,n+=4,i,"utf8"),r.requests[o]={extended:"fstatvfs@openssh.com",cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fstatvfs@openssh.com"),this.push(s)},U.prototype.ext_openssh_hardlink=function(e,t,r){var i=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!i.extensions["hardlink@openssh.com"]||-1===i.extensions["hardlink@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");var n=Buffer.byteLength(e),s=Buffer.byteLength(t),o=9,a=Buffer.allocUnsafe(37+n+4+s);g(a,a.length-4,0),a[4]=v.EXTENDED;var c=i.writeReqid=(i.writeReqid+1)%w;return g(a,c,5),g(a,20,o),a.write("hardlink@openssh.com",o+=4,20,"ascii"),g(a,n,o+=20),a.write(e,o+=4,n,"utf8"),g(a,s,o+=n),a.write(t,o+=4,s,"utf8"),i.requests[c]={cb:r},this.debug("DEBUG[SFTP]: Outgoing: Writing hardlink@openssh.com"),this.push(a)},U.prototype.ext_openssh_fsync=function(e,t){var r=this._state;if(this.server)throw new Error("Client-only method called in server mode");if(!r.extensions["fsync@openssh.com"]||-1===r.extensions["fsync@openssh.com"].indexOf("1"))throw new Error("Server does not support this extended request");if(!Buffer.isBuffer(e))throw new Error("handle is not a Buffer");var i=e.length,n=9,s=Buffer.allocUnsafe(34+i);g(s,s.length-4,0),s[4]=v.EXTENDED;var o=r.writeReqid=(r.writeReqid+1)%w;return g(s,o,5),g(s,17,n),s.write("fsync@openssh.com",n+=4,17,"ascii"),g(s,i,n+=17),s.write(e,n+=4,i,"utf8"),r.requests[o]={cb:t},this.debug("DEBUG[SFTP]: Outgoing: Writing fsync@openssh.com"),this.push(s)},U.prototype.status=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");if(!E[t]||"number"!=typeof t)throw new Error("Bad status code: "+t);r||(r=""),i||(i="");var n=Buffer.byteLength(r),s=Buffer.byteLength(i),o=Buffer.allocUnsafe(17+n+4+s);return g(o,o.length-4,0),o[4]=y.STATUS,g(o,e,5),g(o,t,9),g(o,n,13),n&&o.write(r,17,n,"utf8"),g(o,s,17+n),s&&o.write(i,17+n+4,s,"ascii"),this.debug("DEBUG[SFTP]: Outgoing: Writing STATUS"),this.push(o)},U.prototype.handle=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Buffer.isBuffer(t))throw new Error("handle is not a Buffer");var r=t.length;if(r>256)throw new Error("handle too large (> 256 bytes)");var i=Buffer.allocUnsafe(13+r);return g(i,i.length-4,0),i[4]=y.HANDLE,g(i,e,5),g(i,r,9),r&&t.copy(i,13),this.debug("DEBUG[SFTP]: Outgoing: Writing HANDLE"),this.push(i)},U.prototype.data=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.isBuffer(t);if(!i&&"string"!=typeof t)throw new Error("data is not a Buffer or string");i||r||(r="utf8");var n=i?t.length:Buffer.byteLength(t,r),s=Buffer.allocUnsafe(13+n);return g(s,s.length-4,0),s[4]=y.DATA,g(s,e,5),g(s,n,9),n&&(i?t.copy(s,13):s.write(t,13,n,r)),this.debug("DEBUG[SFTP]: Outgoing: Writing DATA"),this.push(s)},U.prototype.name=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if(!Array.isArray(t)){if("object"!=typeof t||null===t)throw new Error("names is not an object or array");t=[t]}var r,i,n,s,o,a,c,h,f,u,l,p,d=t.length,E=0,m=[];for(u=0;u<d;++u)n=(i=t[u])&&i.filename&&"string"==typeof i.filename?i.filename:"",E+=4+Buffer.byteLength(n),s=i&&i.longname&&"string"==typeof i.longname?i.longname:"",E+=4+Buffer.byteLength(s),"object"==typeof i.attrs&&null!==i.attrs?(E+=4+(r=D(i.attrs)).nbytes,m.push(r)):(E+=4,m.push(null));for(h=Buffer.allocUnsafe(13+E),g(h,h.length-4,0),h[4]=y.NAME,g(h,e,5),g(h,d,9),f=13,u=0;u<d;++u)if(n=(i=t[u])&&i.filename&&"string"==typeof i.filename?i.filename:"",a=Buffer.byteLength(n),g(h,a,f),f+=4,a&&(h.write(n,f,a,"utf8"),f+=a),s=i&&i.longname&&"string"==typeof i.longname?i.longname:"",a=Buffer.byteLength(s),g(h,a,f),f+=4,a&&(h.write(s,f,a,"utf8"),f+=a),o=m[u]){if(g(h,o.flags,f),f+=4,o.flags&&o.bytes){var v=o.bytes;for(l=0,a=v.length;l<a;++l)for(p=0,c=v[l].length;p<c;++p)h[f++]=v[l][p]}}else g(h,0,f),f+=4;return this.debug("DEBUG[SFTP]: Outgoing: Writing NAME"),this.push(h)},U.prototype.attrs=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");if("object"!=typeof t||null===t)throw new Error("attrs is not an object");var r=D(t),i=Buffer.allocUnsafe(13+r.nbytes),n=13;if(g(i,i.length-4,0),i[4]=y.ATTRS,g(i,e,5),g(i,r.flags,9),r.flags&&r.bytes)for(var s=r.bytes,o=0,a=s.length;o<a;++o)for(var c=0,h=s[o].length;c<h;++c)i[n++]=s[o][c];return this.debug("DEBUG[SFTP]: Outgoing: Writing ATTRS"),this.push(i)};var C={r:_.READ,"r+":_.READ|_.WRITE,w:_.TRUNC|_.CREAT|_.WRITE,wx:_.TRUNC|_.CREAT|_.WRITE|_.EXCL,xw:_.TRUNC|_.CREAT|_.WRITE|_.EXCL,"w+":_.TRUNC|_.CREAT|_.READ|_.WRITE,"wx+":_.TRUNC|_.CREAT|_.READ|_.WRITE|_.EXCL,"xw+":_.TRUNC|_.CREAT|_.READ|_.WRITE|_.EXCL,a:_.APPEND|_.CREAT|_.WRITE,ax:_.APPEND|_.CREAT|_.WRITE|_.EXCL,xa:_.APPEND|_.CREAT|_.WRITE|_.EXCL,"a+":_.APPEND|_.CREAT|_.READ|_.WRITE,"ax+":_.APPEND|_.CREAT|_.READ|_.WRITE|_.EXCL,"xa+":_.APPEND|_.CREAT|_.READ|_.WRITE|_.EXCL},L=Object.keys(C);function H(e){var t=C[e];return void 0!==t?t:null}function x(e){this.mode=e&&e.mode,this.permissions=this.mode,this.uid=e&&e.uid,this.gid=e&&e.gid,this.size=e&&e.size,this.atime=e&&e.atime,this.mtime=e&&e.mtime}U.stringToFlags=H,U.flagsToString=function(e){for(var t=0;t<L.length;++t){var r=L[t];if(C[r]===e)return r}return null},x.prototype._checkModeProperty=function(e){return(this.mode&o.S_IFMT)===e},x.prototype.isDirectory=function(){return this._checkModeProperty(o.S_IFDIR)},x.prototype.isFile=function(){return this._checkModeProperty(o.S_IFREG)},x.prototype.isBlockDevice=function(){return this._checkModeProperty(o.S_IFBLK)},x.prototype.isCharacterDevice=function(){return this._checkModeProperty(o.S_IFCHR)},x.prototype.isSymbolicLink=function(){return this._checkModeProperty(o.S_IFLNK)},x.prototype.isFIFO=function(){return this._checkModeProperty(o.S_IFIFO)},x.prototype.isSocket=function(){return this._checkModeProperty(o.S_IFSOCK)},U.Stats=x;var F,M=r(4992),K=M.validateNumber,G=M.destroyImpl,W=M.ERR_OUT_OF_RANGE,q=M.ERR_INVALID_ARG_TYPE,X=[];function j(e,t){if(!Number.isSafeInteger(e)){if(K(e,t),!Number.isInteger(e))throw new W(t,"an integer",e);throw new W(t,">= 0 and <= 2 ** 53 - 1",e)}if(e<0)throw new W(t,">= 0 and <= 2 ** 53 - 1",e)}function V(e){return e+7&-8}function Y(e,t,r){if(void 0===r)r={};else if("string"==typeof r)r={encoding:r};else{if(null===r||"object"!=typeof r)throw new TypeError('"options" argument must be a string or an object');r=Object.create(r)}if(void 0===r.highWaterMark&&(r.highWaterMark=65536),r.emitClose=!1,n.call(this,r),this.path=t,this.flags=void 0===r.flags?"r":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.end=r.end,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=0,this.bytesRead=0,this.closed=!1,this.handle=void 0===r.handle?null:r.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(j(this.start,"start"),this.pos=this.start),void 0===this.end)this.end=1/0;else if(this.end!==1/0&&(j(this.end,"end"),void 0!==this.start&&this.start>this.end))throw new W("start",`<= "end" (here: ${this.end})`,this.start);this.on("end",(function(){this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}function Q(e,t,r){if(!e.handle)return i();function i(i){t(i=i||r),e.closed=!0,i||e.emit("close")}e.sftp.close(e.handle,i)}function z(e,t,r){if(void 0===r)r={};else if("string"==typeof r)r={encoding:r};else{if(null===r||"object"!=typeof r)throw new TypeError('"options" argument must be a string or an object');r=Object.create(r)}r.emitClose=!1,s.call(this,r),this.path=t,this.flags=void 0===r.flags?"w":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=0,this.bytesWritten=0,this.closed=!1,this.handle=void 0===r.handle?null:r.handle,this.sftp=e,this._opening=!1,void 0!==this.start&&(j(this.start,"start"),this.pos=this.start),r.encoding&&this.setDefaultEncoding(r.encoding),this.on("finish",(function(){this._writableState.finalCalled||this.autoClose&&this.destroy()})),Buffer.isBuffer(this.handle)||this.open()}c(Y,n),Y.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,((e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t,this.emit("open",t),this.emit("ready"),this.read()})))},Y.prototype._read=function(e){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._read(e)}));if(!this.destroyed){var t;(!F||F.length-F.used<128)&&(t=this.readableHighWaterMark||this._readableState.highWaterMark,(F=X.length>0?X.pop():Buffer.allocUnsafe(t)).used=0);var r=F,i=Math.min(F.length-F.used,e),n=F.used;if(void 0!==this.end&&(i=Math.min(this.end-this.pos+1,i)),i<=0)return this.push(null);this.sftp.readData(this.handle,F,F.used,i,this.pos,((e,t)=>{if(e)return this.emit("error",e),void(this.autoClose&&this.destroy());var s=null;if(n+i===r.used&&r===F){var o=r.used+t-i;r.used=V(o)}else{var a=n+i&-8,c=V(n+t);a-c>=128&&X.push(r.slice(c,a))}t>0&&(this.bytesRead+=t,s=r.slice(n,n+t)),this.pos+=t,this.push(s)})),F.used=V(F.used+i)}},"function"!=typeof n.prototype.destroy&&(Y.prototype.destroy=G),Y.prototype._destroy=function(e,t){!this._opening||Buffer.isBuffer(this.handle)?(Q(this,t,e),this.handle=null,this._opening=!1):this.once("open",Q.bind(null,this,t,e))},Y.prototype.close=function(e){this.destroy(null,e)},Object.defineProperty(Y.prototype,"pending",{get(){return null===this.handle},configurable:!0}),c(z,s),z.prototype._final=function(e){this.autoClose&&this.destroy(),e()},z.prototype.open=function(){this._opening||(this._opening=!0,this.sftp.open(this.path,this.flags,this.mode,((e,t)=>{if(this._opening=!1,e)return this.emit("error",e),void(this.autoClose&&this.destroy());this.handle=t;var r=e=>{if(e)this.sftp.chmod(this.path,this.mode,(e=>{r()}));else if("a"!==this.flags[0])this.emit("open",t),this.emit("ready");else{var i=(e,r)=>{e?this.sftp.stat(this.path,((t,r)=>{if(t)return this.destroy(),void this.emit("error",e);i(null,r)})):(this.pos=r.size,this.emit("open",t),this.emit("ready"))};this.sftp.fstat(t,i)}};this.sftp.fchmod(t,this.mode,r)})))},z.prototype._write=function(e,t,r){if(!Buffer.isBuffer(e)){const t=new q("data","Buffer",e);return this.emit("error",t)}if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._write(e,t,r)}));this.sftp.writeData(this.handle,e,0,e.length,this.pos,((e,t)=>{if(e)return this.autoClose&&this.destroy(),r(e);this.bytesWritten+=t,r()})),this.pos+=e.length},z.prototype._writev=function(e,t){if(!Buffer.isBuffer(this.handle))return this.once("open",(function(){this._writev(e,t)}));for(var r=this.sftp,i=this.handle,n=e.length,s=(e,r)=>{if(e)return this.destroy(),t(e);this.bytesWritten+=r,0==--n&&t()},o=0;o<e.length;++o){var a=e[o].chunk;r.writeData(i,a,0,a.length,this.pos,s),this.pos+=a.length}},"function"!=typeof s.prototype.destroy&&(z.prototype.destroy=Y.prototype.destroy),z.prototype._destroy=Y.prototype._destroy,z.prototype.close=function(e){if(e){if(this.closed)return void process.nextTick(e);this.on("close",e)}this.autoClose||this.on("finish",this.destroy.bind(this)),this.end()},z.prototype.destroySoon=z.prototype.end,Object.defineProperty(z.prototype,"pending",{get(){return null===this.handle},configurable:!0}),e.exports=U},9104:(e,t,r)=>{var i=r(7968),n=r(592),s=r(8378).Transform,o=r(970).inherits,a=r(970).inspect,c=r(1240),h=r(8304).Ber,f=r(8128).readUInt32BE,u=r(8128).writeUInt32BE,l=r(4e3),p=r(4264),d=p.iv_inc,g=p.readString,E=p.readInt,m=p.DSASigBERToBare,v=p.ECDSASigASN1ToSSH,y=p.sigSSHToASN1,_=r(4368).parseDERKey,w=l.CIPHER_INFO,b=l.HMAC_INFO,S=l.MESSAGE,k=(l.DYNAMIC_KEXDH_MESSAGE,l.KEXDH_MESSAGE,l.ALGORITHMS),T=l.DISCONNECT_REASON,A=l.CHANNEL_OPEN_FAILURE,U=l.SSH_TO_OPENSSL,B=l.TERMINAL_MODE,R=l.SIGNALS,N=(l.EDDSA_SUPPORTED,l.CURVE25519_SUPPORTED),P=l.BUGS,D=l.BUGGY_IMPLS,O=D.length,I=r(2968).WU,C=0,L=C++,H=C++,x=C++,F=C++,M=C++,K=C++,G=C++,W=C++,q=C++,X=C++,j=C++,V=4294967295,Y=2,Q=n.Z_PARTIAL_FLUSH,z={flush:Q},$=/\x00/g,Z=Buffer.from("SSH-"),J=Buffer.allocUnsafe(0),ee=Buffer.allocUnsafe(9),te=Buffer.from([S.GLOBAL_REQUEST,0,0,0,21,107,101,101,112,97,108,105,118,101,64,111,112,101,110,115,115,104,46,99,111,109,1]),re=Buffer.from([S.NEWKEYS]),ie=Buffer.from([S.USERAUTH_SUCCESS]),ne=Buffer.from([S.REQUEST_SUCCESS]),se=Buffer.from([S.REQUEST_FAILURE]),oe=Buffer.from([B.TTY_OP_END]),ae=Buffer.from([S.KEXDH_GEX_REQUEST,0,0,4,0,0,0,16,0,0,0,32,0]);function ce(e){}function he(e){"object"==typeof e&&null!==e||(e={}),s.call(this,{highWaterMark:"number"==typeof e.highWaterMark?e.highWaterMark:32768}),this._needContinue=!1,this.bytesSent=this.bytesReceived=0,this.debug="function"==typeof e.debug?e.debug:ce,this.server=!0===e.server,this.maxPacketSize="number"==typeof e.maxPacketSize?e.maxPacketSize:35e3,this.remoteBugs=0,this.server&&(this.remoteBugs=P.BAD_DHGEX),this.readable=!0;var t=this,r=e.hostKeys;if(this.server&&("object"!=typeof r||null===r))throw new Error("hostKeys must be an object keyed on host key type");if(this.config={hostKeys:r,ident:"SSH-2.0-"+(e.ident||"ssh2js"+I+(this.server?"srv":"")),algorithms:{kex:k.KEX,kexBuf:k.KEX_BUF,serverHostKey:k.SERVER_HOST_KEY,serverHostKeyBuf:k.SERVER_HOST_KEY_BUF,cipher:k.CIPHER,cipherBuf:k.CIPHER_BUF,hmac:k.HMAC,hmacBuf:k.HMAC_BUF,compress:k.COMPRESS,compressBuf:k.COMPRESS_BUF}},this.config.ident.replace($,""),this.config.ident.length+2>255)throw new Error("ident too long");if("object"==typeof e.algorithms&&null!==e.algorithms){var n=e.algorithms;Array.isArray(n.kex)&&n.kex.length>0&&(this.config.algorithms.kex=n.kex,Buffer.isBuffer(n.kexBuf)||(n.kexBuf=Buffer.from(n.kex.join(","),"ascii")),this.config.algorithms.kexBuf=n.kexBuf),Array.isArray(n.serverHostKey)&&n.serverHostKey.length>0&&(this.config.algorithms.serverHostKey=n.serverHostKey,Buffer.isBuffer(n.serverHostKeyBuf)||(n.serverHostKeyBuf=Buffer.from(n.serverHostKey.join(","),"ascii")),this.config.algorithms.serverHostKeyBuf=n.serverHostKeyBuf),Array.isArray(n.cipher)&&n.cipher.length>0&&(this.config.algorithms.cipher=n.cipher,Buffer.isBuffer(n.cipherBuf)||(n.cipherBuf=Buffer.from(n.cipher.join(","),"ascii")),this.config.algorithms.cipherBuf=n.cipherBuf),Array.isArray(n.hmac)&&n.hmac.length>0&&(this.config.algorithms.hmac=n.hmac,Buffer.isBuffer(n.hmacBuf)||(n.hmacBuf=Buffer.from(n.hmac.join(","),"ascii")),this.config.algorithms.hmacBuf=n.hmacBuf),Array.isArray(n.compress)&&n.compress.length>0&&(this.config.algorithms.compress=n.compress,Buffer.isBuffer(n.compressBuf)||(n.compressBuf=Buffer.from(n.compress.join(","),"ascii")),this.config.algorithms.compressBuf=n.compressBuf)}this.reset(!0),this.on("end",(function(){t.readable=!1,t._state=void 0,t.reset(),t._state.outgoing.bufSeqno=void 0})),this.on("DISCONNECT",(function(e,r,i,n){!function(e,t,r,i,n){if(r!==T.BY_APPLICATION){var s=new Error(i||t);s.code=r,e.emit("error",s)}e.reset()}(t,e,r,i)})),this.on("KEXINIT",(function(e,r){!function(e,t,r){var i=e._state,n=i.outgoing;function s(){!0===function(e,t,r){var i,n,s,o,a=e._state,c=a.incoming,h=a.outgoing,f=e.debug;f("DEBUG: Comparing KEXINITs ...");var u=e.config.algorithms,l=u.kex;if(e.remoteBugs&P.BAD_DHGEX)for(var p=!1,d=l.length-1;d>=0;--d)-1!==l[d].indexOf("group-exchange")&&(p||(l=l.slice(),p=!0),l.splice(d,1));for(f("DEBUG: (local) KEX algorithms: "+l),f("DEBUG: (remote) KEX algorithms: "+t.algorithms.kex),e.server?(i=l,n=t.algorithms.kex):(i=t.algorithms.kex,n=l),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching key exchange algorithm"),(g=new Error("Handshake failed: no matching key exchange algorithm")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var g,E=n[o];for(f("DEBUG: KEX algorithm: "+E),!r||t.algorithms.kex.length&&E===t.algorithms.kex[0]||(c.ignoreNext=!0),f("DEBUG: (local) Host key formats: "+u.serverHostKey),f("DEBUG: (remote) Host key formats: "+t.algorithms.srvHostKey),e.server?(i=u.serverHostKey,n=t.algorithms.srvHostKey):(i=t.algorithms.srvHostKey,n=u.serverHostKey),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching host key format"),(g=new Error("Handshake failed: no matching host key format")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(a.hostkeyFormat=n[o],f("DEBUG: Host key format: "+a.hostkeyFormat),f("DEBUG: (local) Client->Server ciphers: "+u.cipher),f("DEBUG: (remote) Client->Server ciphers: "+t.algorithms.cs.encrypt),e.server?(i=u.cipher,n=t.algorithms.cs.encrypt):(i=t.algorithms.cs.encrypt,n=u.cipher),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching Client->Server cipher"),(g=new Error("Handshake failed: no matching client->server cipher")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(f("DEBUG: Client->Server Cipher: "+(e.server?c.decrypt.type=n[o]:h.encrypt.type=n[o])),f("DEBUG: (local) Server->Client ciphers: "+u.cipher),f("DEBUG: (remote) Server->Client ciphers: "+t.algorithms.sc.encrypt),e.server?(i=u.cipher,n=t.algorithms.sc.encrypt):(i=t.algorithms.sc.encrypt,n=u.cipher),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching Server->Client cipher"),(g=new Error("Handshake failed: no matching server->client cipher")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(f("DEBUG: Server->Client Cipher: "+(e.server?h.encrypt.type=n[o]:c.decrypt.type=n[o])),f("DEBUG: (local) Client->Server HMAC algorithms: "+u.hmac),f("DEBUG: (remote) Client->Server HMAC algorithms: "+t.algorithms.cs.mac),e.server?(i=u.hmac,n=t.algorithms.cs.mac):(i=t.algorithms.cs.mac,n=u.hmac),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching Client->Server HMAC algorithm"),(g=new Error("Handshake failed: no matching client->server HMAC")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(f("DEBUG: Client->Server HMAC algorithm: "+(e.server?c.hmac.type=n[o]:h.hmac.type=n[o])),f("DEBUG: (local) Server->Client HMAC algorithms: "+u.hmac),f("DEBUG: (remote) Server->Client HMAC algorithms: "+t.algorithms.sc.mac),e.server?(i=u.hmac,n=t.algorithms.sc.mac):(i=t.algorithms.sc.mac,n=u.hmac),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching Server->Client HMAC algorithm"),(g=new Error("Handshake failed: no matching server->client HMAC")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(f("DEBUG: Server->Client HMAC algorithm: "+(e.server?h.hmac.type=n[o]:c.hmac.type=n[o])),f("DEBUG: (local) Client->Server compression algorithms: "+u.compress),f("DEBUG: (remote) Client->Server compression algorithms: "+t.algorithms.cs.compress),e.server?(i=u.compress,n=t.algorithms.cs.compress):(i=t.algorithms.cs.compress,n=u.compress),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);if(o===s)return f("DEBUG: No matching Client->Server compression algorithm"),(g=new Error("Handshake failed: no matching client->server compression algorithm")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;for(f("DEBUG: Client->Server compression algorithm: "+(e.server?c.decompress.type=n[o]:h.compress.type=n[o])),f("DEBUG: (local) Server->Client compression algorithms: "+u.compress),f("DEBUG: (remote) Server->Client compression algorithms: "+t.algorithms.sc.compress),e.server?(i=u.compress,n=t.algorithms.sc.compress):(i=t.algorithms.sc.compress,n=u.compress),o=0,s=n.length;o<s&&-1===i.indexOf(n[o]);++o);return o===s?(f("DEBUG: No matching Server->Client compression algorithm"),(g=new Error("Handshake failed: no matching server->client compression algorithm")).level="handshake",e.emit("error",g),e.disconnect(T.KEY_EXCHANGE_FAILED),!1):(f("DEBUG: Server->Client compression algorithm: "+(e.server?h.compress.type=n[o]:c.decompress.type=n[o])),a.kex=new Be(E),a.kex.generateKeys(),h.pubkey=a.kex.getPublicKey(),!0)}(e,t,r)&&(e.server?i.incoming.expectedPacket=i.kex.pktInit:"groupex"===i.kex.type?function(e){e._state.incoming.expectedPacket="KEXDH_GEX_GROUP",e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_REQUEST"),Se(e,ae,void 0,!0)}(e):_e(e))}n.status===X?(e.debug("DEBUG: Received re-key request"),n.status=j,n.kexinit=void 0,ye(e,s)):s()}(t,e,r)})),this.on("NEWKEYS",(function(){ue(t)})),this.server?this.on("KEXDH_INIT",(function(e){!function(e,t){!function(e,t){var r=e._state,n=r.outgoing,s=r.incoming,o=e.config.hostKeys[r.hostkeyFormat];Array.isArray(o)&&(o=o[0]);var a=o.getPublicSSH(),c=o.type;t=r.kex.convertPublicKey(t);var h=r.kex.computeSecret(t);if(h instanceof Error)return h.message="Error while computing DH secret ("+r.kex.type+"): "+h.message,h.level="handshake",e.emit("error",h),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var f,l,p,d,g=i.createHash(r.kex.hash),E=Buffer.byteLength(s.identRaw),m=Buffer.byteLength(e.config.ident),v=s.kexinit.length,y=n.kexinit.length,_=a.length,w=t.length,b=n.pubkey.length,k=h.length,A=E+m+v+y+_+w+b+k+32,U=r.kex.getDHParams();U&&(p=U.prime,d=U.generator,A+=12,A+=8,A+=f=p.length,A+=l=d.length);var B=0,R=Buffer.allocUnsafe(A);u(R,E,B),B+=4,R.write(s.identRaw,B,"utf8"),u(R,m,B+=E),B+=4,R.write(e.config.ident,B,"utf8"),u(R,v,B+=m),B+=4,s.kexinit.copy(R,B),B+=v,s.kexinit=void 0,u(R,y,B),B+=4,n.kexinit.copy(R,B),B+=y,n.kexinit=void 0,u(R,_,B),B+=4,a.copy(R,B),B+=_,U&&(ae.slice(1).copy(R,B),u(R,f,B+=12),B+=4,p.copy(R,B),u(R,l,B+=f),B+=4,d.copy(R,B),B+=l),u(R,w,B),B+=4,t.copy(R,B),u(R,b,B+=w),B+=4,n.pubkey.copy(R,B),u(R,k,B+=b),B+=4,h.copy(R,B),n.exchangeHash=g.update(R).digest(),void 0===n.sessionId&&(n.sessionId=n.exchangeHash),n.kexsecret=h;var N=o.sign(n.exchangeHash);if(N instanceof Error)return N.message="Error while signing data with host key ("+c+"): "+N.message,N.level="handshake",e.emit("error",N),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;if(!1===(N=Ae(N,c)))return N.message="Error while converting handshake signature",N.level="handshake",e.emit("error",N),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var P=4+c.length+4+N.length,D=Buffer.allocUnsafe(5+_+4+b+4+P);D[B=0]=S[r.kex.pktReply],++B,u(D,_,B),B+=4,a.copy(D,B),u(D,b,B+=_),B+=4,n.pubkey.copy(D,B),u(D,P,B+=b),B+=4,u(D,c.length,B),B+=4,D.write(c,B,c.length,"ascii"),B+=c.length,u(D,N.length,B),B+=4,N.copy(D,B),r.incoming.expectedPacket="NEWKEYS",e.debug("DEBUG: Outgoing: Writing "+r.kex.pktReply),Se(e,D,void 0,!0),n.sentNEWKEYS=!0,e.debug("DEBUG: Outgoing: Writing NEWKEYS"),Se(e,re,void 0,!0)}(e,t)}(t,e)})):this.on("KEXDH_REPLY",(function(e){fe(t,e)})).on("KEXDH_GEX_GROUP",(function(e,r){!function(e,t,r){var i=e._state,n=i.outgoing;i.kex.setDHParams(t,r),i.kex.generateKeys(),n.pubkey=i.kex.getPublicKey(),_e(e)}(t,e,r)})),this.server&&("string"==typeof e.greeting&&e.greeting.length&&("\r\n"===e.greeting.slice(-2)?this.push(e.greeting):this.push(e.greeting+"\r\n")),"string"==typeof e.banner&&e.banner.length&&("\r\n"===e.banner.slice(-2)?this.banner=e.banner:this.banner=e.banner+"\r\n")),this.debug("DEBUG: Local ident: "+a(this.config.ident)),this.push(this.config.ident+"\r\n"),this._state.incoming.expectedPacket="KEXINIT"}function fe(e,t,r){var n=e._state,s=n.incoming,o=n.outgoing,a=e.debug;if(void 0===r){s.expectedPacket="NEWKEYS",o.sentNEWKEYS=!1,a("DEBUG: Checking host key format");var c=g(t.hostkey,0,"ascii",e);if(!1===c)return!1;if(t.hostkey_format!==n.hostkeyFormat||t.hostkey_format!==c)return a("DEBUG: Host key format mismatch"),e.disconnect(T.KEY_EXCHANGE_FAILED),e.reset(),(C=new Error("Handshake failed: host key format mismatch")).level="handshake",e.emit("error",C),!1;a("DEBUG: Checking signature format");var h=g(t.sig,0,"ascii",e);if(!1===h)return!1;if(t.sig_format!==h)return a("DEBUG: Signature format mismatch"),e.disconnect(T.KEY_EXCHANGE_FAILED),e.reset(),(C=new Error("Handshake failed: signature format mismatch")).level="handshake",e.emit("error",C),!1}if(o.status===q){if(void 0===r){a("DEBUG: Verifying host fingerprint");var f=!0,l=e.emit("fingerprint",t.hostkey,(function(i){void 0===r&&(r=!!i,f||fe(e,t,r))}));if(f=!1,l&&void 0===r)return}if(void 0===r)a("DEBUG: Host accepted by default (no verification)");else{if(!0!==r)return a("DEBUG: Host denied via fingerprint verification"),e.disconnect(T.KEY_EXCHANGE_FAILED),e.reset(),(C=new Error("Handshake failed: host fingerprint verification failed")).level="handshake",e.emit("error",C),!1;a("DEBUG: Host accepted (verified)")}}if(t.pubkey=n.kex.convertPublicKey(t.pubkey),t.secret=n.kex.computeSecret(t.pubkey),t.secret instanceof Error)return t.secret.message="Error while computing DH secret ("+n.kex.type+"): "+t.secret.message,t.secret.level="handshake",e.emit("error",t.secret),e.disconnect(T.KEY_EXCHANGE_FAILED),!1;var p,d,E,m,v=i.createHash(n.kex.hash),w=Buffer.byteLength(e.config.ident),b=Buffer.byteLength(s.identRaw),S=o.kexinit.length,k=s.kexinit.length,A=t.hostkey.length,U=o.pubkey.length,B=t.pubkey.length,R=t.secret.length,N=w+b+S+k+A+U+B+R+32,P=n.kex.getDHParams();P&&(E=P.prime,m=P.generator,N+=12,N+=8,N+=p=E.length,N+=d=m.length);var D=0,O=Buffer.allocUnsafe(N);u(O,w,D),D+=4,O.write(e.config.ident,D,"utf8"),u(O,b,D+=w),D+=4,O.write(s.identRaw,D,"utf8"),u(O,S,D+=b),D+=4,o.kexinit.copy(O,D),D+=S,o.kexinit=void 0,u(O,k,D),D+=4,s.kexinit.copy(O,D),D+=k,s.kexinit=void 0,u(O,A,D),D+=4,t.hostkey.copy(O,D),D+=A,P&&(ae.slice(1).copy(O,D),u(O,p,D+=12),D+=4,E.copy(O,D),u(O,d,D+=p),D+=4,m.copy(O,D),D+=d),u(O,U,D),D+=4,o.pubkey.copy(O,D),u(O,B,D+=U),D+=4,t.pubkey.copy(O,D),u(O,R,D+=B),D+=4,t.secret.copy(O,D),o.exchangeHash=v.update(O).digest();var I=g(t.sig,t.sig._pos,e);if(!1===I||!(I=y(I,t.sig_format,e)))return!1;var C,L=_(t.hostkey,t.sig_format);return!(L instanceof Error)&&(a("DEBUG: Verifying signature"),!0!==L.verify(o.exchangeHash,I)?(a("DEBUG: Signature verification failed"),e.disconnect(T.KEY_EXCHANGE_FAILED),e.reset(),(C=new Error("Handshake failed: signature verification failed")).level="handshake",e.emit("error",C),!1):(void 0===o.sessionId&&(o.sessionId=o.exchangeHash),o.kexsecret=t.secret,a("DEBUG: Outgoing: Writing NEWKEYS"),o.status===j?Se(e,re,void 0,!0):Se(e,re),o.sentNEWKEYS=!0,void(void 0!==r&&void 0===s.expectedPacket&&ue(e))))}function ue(e){var t=e._state,r=t.outgoing,s=t.incoming;if(s.expectedPacket=void 0,r.sentNEWKEYS){var o,a,c=r.kexsecret.length,h=r.encrypt.info=w[r.encrypt.type],f=0,l=t.kex.hash,p=Buffer.allocUnsafe(4+c);if(t.authsQueue=[],u(p,c,f),f+=4,r.kexsecret.copy(p,f),r.kexsecret=void 0,h.stream)o=J;else{for(o=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"B":"A","ascii").update(r.sessionId).digest();o.length<h.ivLen;)o=Buffer.concat([o,i.createHash(l).update(p).update(r.exchangeHash).update(o).digest()]);o.length>h.ivLen&&(o=o.slice(0,h.ivLen))}for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"D":"C","ascii").update(r.sessionId).digest();a.length<h.keyLen;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);if(a.length>h.keyLen&&(a=a.slice(0,h.keyLen)),h.authLen>0)r.encrypt.iv=o,r.encrypt.key=a,r.encrypt.instance=!0;else{var d=U[r.encrypt.type];r.encrypt.instance=i.createCipheriv(d,a,o),r.encrypt.instance.setAutoPadding(!1)}var g=s.decrypt.info=w[s.decrypt.type];if(g.stream)o=J;else{for(o=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"A":"B","ascii").update(r.sessionId).digest();o.length<g.ivLen;)o=Buffer.concat([o,i.createHash(l).update(p).update(r.exchangeHash).update(o).digest()]);o.length>g.ivLen&&(o=o.slice(0,g.ivLen))}for(s.decrypt.buf=Buffer.allocUnsafe(g.blockLen),a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"C":"D","ascii").update(r.sessionId).digest();a.length<g.keyLen;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>g.keyLen&&(a=a.slice(0,g.keyLen));var E,m=U[s.decrypt.type];s.decrypt.instance=i.createDecipheriv(m,a,o),s.decrypt.instance.setAutoPadding(!1),s.decrypt.iv=o,s.decrypt.key=a,h.discardLen>0&&(E=Buffer.alloc(h.discardLen),r.encrypt.instance.update(E)),g.discardLen>0&&(E&&E.length===g.discardLen||(E=Buffer.alloc(h.discardLen)),s.decrypt.instance.update(E));var v=r.hmac.info=b[r.hmac.type],y=s.hmac.info=b[s.hmac.type];if(0===h.authLen){for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"F":"E","ascii").update(r.sessionId).digest();a.length<v.len;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>v.len&&(a=a.slice(0,v.len)),r.hmac.key=a}else r.hmac.key=void 0;if(0===g.authLen){for(a=i.createHash(l).update(p).update(r.exchangeHash).update(e.server?"E":"F","ascii").update(r.sessionId).digest();a.length<y.len;)a=Buffer.concat([a,i.createHash(l).update(p).update(r.exchangeHash).update(a).digest()]);a.length>y.len&&(a=a.slice(0,y.len)),s.hmac.key=a}else s.hmac.key=void 0;var _=g.authLen||s.hmac.info.actualLen;if(s.hmac.buf&&s.hmac.buf.length===_||(s.hmac.buf=Buffer.allocUnsafe(_)),r.exchangeHash=void 0,"zlib"===r.compress.type?(r.compress.instance=n.createDeflate(z),r.compress.queue=[]):"none"===r.compress.type&&(r.compress.instance=!1,r.compress.queue=null),"zlib"===s.decompress.type?s.decompress.instance=n.createInflate(z):"none"===s.decompress.type&&(s.decompress.instance=!1),e.bytesSent=e.bytesReceived=0,r.status===j){r.status=X;var S=r.rekeyQueue,k=S.length,T=0;for(r.rekeyQueue=[];T<k;++T)Buffer.isBuffer(S[T])?Se(e,S[T]):Se(e,S[T][0],S[T][1]);k=(S=s.rekeyQueue).length,T=0,s.rekeyQueue=[];for(var A=s.seqno;T<k;++T){if(s.seqno=S[T][0],s.payload=S[T][1],!1===pe(e))return;if(s.status===L)return}s.seqno=A}else r.status=X,s.status===M&&(e.debug("DEBUG: Parser: IN_PACKETBEFORE (update) (expecting "+g.blockLen+")"),me(e,Y,g.blockLen,s.decrypt.buf)),e.emit("ready")}}function le(e,t){var r=e._state.kex;if(r)switch(t){case 30:return r.pktInit;case 31:switch(r.type){case"group":return"KEXDH_REPLY";case"groupex":return"KEXDH_GEX_GROUP";default:return"KEXECDH_REPLY"}break;case 33:if("groupex"===r.type)return"KEXDH_GEX_REPLY"}return S[t]}function pe(e,t){var r,i,s,o,a,c,h,l,p,d,m,v,_,w,b=e._state.incoming,k=e._state.outgoing,U=b.payload,R=b.seqno;if(++b.seqno>V&&(b.seqno=0),b.ignoreNext)return e.debug("DEBUG: Parser: Packet ignored"),void(b.ignoreNext=!1);var N=U[0];if(void 0===N)return!1;if(k.status!==X&&le(e,N)!==b.expectedPacket&&N<1&&N>4){e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+b.expectedPacket+" but got: "+le(e,N)),e.disconnect(T.PROTOCOL_ERROR);var D=new Error("Received unexpected packet");return D.level="protocol",e.emit("error",D),!1}if(N===S.CHANNEL_DATA){if(!1===(a=E(U,1,e,t)))return!1;if(!1===(c=g(U,5,e,t,32768)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_DATA ("+a+")"),e.emit("CHANNEL_DATA:"+a,c)}else if(N===S.CHANNEL_EXTENDED_DATA){if(!1===(a=E(U,1,e,t)))return!1;var O=E(U,5,e,t);if(!1===O)return!1;if(!1===(c=g(U,9,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EXTENDED_DATA ("+a+")"),e.emit("CHANNEL_EXTENDED_DATA:"+a,O,c)}else if(N===S.CHANNEL_WINDOW_ADJUST){if(!1===(a=E(U,1,e,t)))return!1;var I=E(U,5,e,t);if(!1===I)return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_WINDOW_ADJUST ("+a+", "+I+")"),e.emit("CHANNEL_WINDOW_ADJUST:"+a,I)}else if(N===S.CHANNEL_SUCCESS){if(!1===(a=E(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_SUCCESS ("+a+")"),e.emit("CHANNEL_SUCCESS:"+a)}else if(N===S.CHANNEL_FAILURE){if(!1===(a=E(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_FAILURE ("+a+")"),e.emit("CHANNEL_FAILURE:"+a)}else if(N===S.CHANNEL_EOF){if(!1===(a=E(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_EOF ("+a+")"),e.emit("CHANNEL_EOF:"+a)}else if(N===S.CHANNEL_OPEN){var C,L=g(U,1,"ascii",e,t);if(!1===L)return!1;if(!1===(p=E(U,U._pos,e,t)))return!1;if(!1===(d=E(U,U._pos+=4,e,t)))return!1;if(!1===(m=E(U,U._pos+=4,e,t)))return!1;if(e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_OPEN ("+p+", "+L+")"),"forwarded-tcpip"===L||"direct-tcpip"===L){var H=g(U,U._pos+=4,"ascii",e,t);if(!1===H)return!1;var x=E(U,U._pos,e,t);if(!1===x)return!1;if(!1===(h=g(U,U._pos+=4,"ascii",e,t)))return!1;if(!1===(l=E(U,U._pos,e,t)))return!1;C={type:L,sender:p,window:d,packetSize:m,data:{destIP:H,destPort:x,srcIP:h,srcPort:l}}}else if("forwarded-streamlocal@openssh.com"===L||"direct-streamlocal@openssh.com"===L){if(!1===(w=g(U,U._pos+=4,"utf8",e,t)))return!1;C={type:L,sender:p,window:d,packetSize:m,data:{socketPath:w}}}else if("x11"===L){if(!1===(h=g(U,U._pos+=4,"ascii",e,t)))return!1;if(!1===(l=E(U,U._pos,e,t)))return!1;C={type:L,sender:p,window:d,packetSize:m,data:{srcIP:h,srcPort:l}}}else C={type:L,sender:p,window:d,packetSize:m,data:{}};e.emit("CHANNEL_OPEN",C)}else if(N===S.CHANNEL_OPEN_CONFIRMATION){if(!1===(v=E(U,1,e,t)))return!1;if(!1===(p=E(U,5,e,t)))return!1;if(!1===(d=E(U,9,e,t)))return!1;if(!1===(m=E(U,13,e,t)))return!1;o={recipient:v,sender:p,window:d,packetSize:m},U.length>17&&(o.data=U.slice(17)),e.emit("CHANNEL_OPEN_CONFIRMATION:"+o.recipient,o)}else if(N===S.CHANNEL_OPEN_FAILURE){if(!1===(v=E(U,1,e,t)))return!1;var F=E(U,5,e,t);if(!1===F)return!1;if(!1===(_=g(U,9,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"utf8",e,t)))return!1;U._pos=9,o={recipient:v,reasonCode:F,reason:A[F],description:_,lang:i},e.emit("CHANNEL_OPEN_FAILURE:"+o.recipient,o)}else if(N===S.CHANNEL_CLOSE){if(!1===(a=E(U,1,e,t)))return!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_CLOSE ("+a+")"),e.emit("CHANNEL_CLOSE:"+a)}else if(N===S.IGNORE);else if(N===S.DISCONNECT){var M=E(U,1,e,t);if(!1===M)return!1;var K=T[M];if(!1===(_=g(U,5,"utf8",e,t)))return!1;U._pos<U.length&&(i=g(U,U._pos,"ascii",e,t)),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: DISCONNECT ("+K+")"),e.emit("DISCONNECT",K,M,_,i)}else if(N===S.DEBUG){if(!1===(s=g(U,2,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"ascii",e,t)))return!1;e.emit("DEBUG",s,i)}else if(N===S.NEWKEYS)e.emit("NEWKEYS");else if(N===S.SERVICE_REQUEST){if(!1===(r=g(U,1,"ascii",e,t)))return!1;e.emit("SERVICE_REQUEST",r)}else if(N===S.SERVICE_ACCEPT){if(!1===(r=g(U,1,"ascii",e,t)))return!1;e.emit("SERVICE_ACCEPT",r)}else if(N===S.USERAUTH_REQUEST){var G=g(U,1,"utf8",e,t);if(!1===G)return!1;var W=g(U,U._pos,"ascii",e,t);if(!1===W)return!1;var q,j,Y=g(U,U._pos,"ascii",e,t);if(!1===Y)return!1;if("password"===Y){if(!1===(q=g(U,U._pos+1,"utf8",e,t)))return!1}else if("publickey"===Y||"hostbased"===Y){var Q,$,Z,J,ee,te,re;if("publickey"===Y){if(void 0===(Q=U[U._pos++]))return!1;Q=0!==Q}if(!1===($=g(U,U._pos,"ascii",e,t)))return!1;if(!1===(Z=g(U,U._pos,e,t)))return!1;if(Q||"hostbased"===Y){if("hostbased"===Y){if(!1===(te=g(U,U._pos,"ascii",e,t)))return!1;if(!1===(re=g(U,U._pos,"utf8",e,t)))return!1}var ie=U._pos;if(!1===(J=g(U,ie,e,t)))return!1;if(J.length>4+$.length+4&&J.toString("ascii",4,4+$.length)===$&&(J=J.slice(4+$.length+4)),!1===(J=y(J,$,e,t)))return!1;ee=Buffer.allocUnsafe(4+k.sessionId.length+ie),u(ee,k.sessionId.length,0),k.sessionId.copy(ee,4),U.copy(ee,4+k.sessionId.length,0,ie)}else j="publickey -- check";q={keyAlgo:$,key:Z,signature:J,blob:ee,localHostname:te,localUsername:re}}else if("keyboard-interactive"===Y){var ne=E(U,U._pos,e,t);if(!1===ne)return!1;if(!1===(q=g(U,U._pos+4+ne,"utf8",e,t)))return!1}else"none"!==Y&&(q=U.slice(U._pos));void 0===j&&(j=Y),e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: USERAUTH_REQUEST ("+j+")"),e._state.authsQueue.push(Y),e.emit("USERAUTH_REQUEST",G,W,Y,q)}else if(N===S.USERAUTH_SUCCESS)"zlib@openssh.com"===k.compress.type&&(k.compress.instance=n.createDeflate(z),k.compress.queue=[]),"zlib@openssh.com"===b.decompress.type&&(b.decompress.instance=n.createInflate(z)),e._state.authsQueue.shift(),e.emit("USERAUTH_SUCCESS");else if(N===S.USERAUTH_FAILURE){var se=g(U,1,"ascii",e,t);if(!1===se)return!1;var oe=U[U._pos];if(void 0===oe)return!1;oe=0!==oe,se=se.split(","),e._state.authsQueue.shift(),e.emit("USERAUTH_FAILURE",se,oe)}else if(N===S.USERAUTH_BANNER){if(!1===(s=g(U,1,"utf8",e,t)))return!1;if(!1===(i=g(U,U._pos,"utf8",e,t)))return!1;e.emit("USERAUTH_BANNER",s,i)}else if(N===S.GLOBAL_REQUEST){var ae=g(U,1,"ascii",e,t);if(!1===ae)return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST"),!1;e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: GLOBAL_REQUEST ("+ae+")");var ce,he=U[U._pos++];if(void 0===he)return!1;if(he=0!==he,"tcpip-forward"===ae||"cancel-tcpip-forward"===ae){var fe=g(U,U._pos,"ascii",e,t);if(!1===fe)return!1;var ue=E(U,U._pos,e,t);if(!1===ue)return!1;ce={bindAddr:fe,bindPort:ue}}else if("streamlocal-forward@openssh.com"===ae||"cancel-streamlocal-forward@openssh.com"===ae){if(!1===(w=g(U,U._pos,"utf8",e,t)))return!1;ce={socketPath:w}}else"no-more-sessions@openssh.com"===ae||(ce=U.slice(U._pos));e.emit("GLOBAL_REQUEST",ae,he,ce)}else if(N===S.REQUEST_SUCCESS)U.length>1?e.emit("REQUEST_SUCCESS",U.slice(1)):e.emit("REQUEST_SUCCESS");else if(N===S.REQUEST_FAILURE)e.emit("REQUEST_FAILURE");else if(N===S.UNIMPLEMENTED);else{if(N===S.KEXINIT)return function(e,t){var r,i=e._state.incoming,n=i.payload,s={algorithms:{kex:void 0,srvHostKey:void 0,cs:{encrypt:void 0,mac:void 0,compress:void 0},sc:{encrypt:void 0,mac:void 0,compress:void 0}},languages:{cs:void 0,sc:void 0}};if(!1===(r=ve(n,17,e,t)))return!1;if(s.algorithms.kex=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.srvHostKey=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.cs.encrypt=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.sc.encrypt=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.cs.mac=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.sc.mac=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.cs.compress=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.algorithms.sc.compress=r,!1===(r=ve(n,n._pos,e,t)))return!1;if(s.languages.cs=r,!1===(r=ve(n,n._pos,e,t)))return!1;s.languages.sc=r;var o=n._pos<n.length&&1===n[n._pos];i.kexinit=n,e.emit("KEXINIT",s,o)}(e,t);if(N===S.CHANNEL_REQUEST)return function(e,t){var r,i,n,s,o,a,c,h=e._state.incoming.payload,u=E(h,1,e,t);if(!1===u)return!1;var l=g(h,5,"ascii",e,t);if(!1===l)return!1;if("exit-status"===l){var p=E(h,++h._pos,e,t);if(!1===p)return!1;r={recipient:u,request:l,wantReply:!1,code:p}}else if("exit-signal"===l){var d;if(e.remoteBugs&P.OLD_EXIT){if(!1===(c=E(h,++h._pos,e,t)))return!1;switch(c){case 1:c="HUP";break;case 2:c="INT";break;case 3:c="QUIT";break;case 6:c="ABRT";break;case 9:c="KILL";break;case 14:c="ALRM";break;case 15:c="TERM";break;default:c="UNKNOWN ("+c+")"}d=!1}else{if(!1===(c=g(h,++h._pos,"ascii",e,t)))return!1;if(void 0===(d=h[h._pos++]))return!1;d=0!==d}var m=g(h,h._pos,"utf8",e,t);if(!1===m)return!1;var v=g(h,h._pos,"utf8",e,t);if(!1===v)return!1;r={recipient:u,request:l,wantReply:!1,signal:c,coredump:d,description:m,lang:v}}else if("pty-req"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var y=g(h,h._pos,"ascii",e,t);if(!1===y)return!1;if(!1===(i=E(h,h._pos,e,t)))return!1;if(!1===(n=E(h,h._pos+=4,e,t)))return!1;if(!1===(s=E(h,h._pos+=4,e,t)))return!1;if(!1===(o=E(h,h._pos+=4,e,t)))return!1;var _=g(h,h._pos+=4,e,t);if(!1===_)return!1;r={recipient:u,request:l,wantReply:a,term:y,cols:i,rows:n,width:s,height:o,modes:_=function(e){for(var t,r={},i=0,n=e.length;i<n&&!((t=e[i])===B.TTY_OP_END||void 0===B[t]||i+5>n);i+=5)r[B[t]]=f(e,i+1);return r}(_)}}else if("window-change"===l){if(!1===(i=E(h,++h._pos,e,t)))return!1;if(!1===(n=E(h,h._pos+=4,e,t)))return!1;if(!1===(s=E(h,h._pos+=4,e,t)))return!1;if(!1===(o=E(h,h._pos+=4,e,t)))return!1;r={recipient:u,request:l,wantReply:!1,cols:i,rows:n,width:s,height:o}}else if("x11-req"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var w=h[h._pos++];if(void 0===w)return!1;w=0!==w;var b=g(h,h._pos,"ascii",e,t);if(!1===b)return!1;var S=g(h,h._pos,"binary",e,t);if(!1===S)return!1;var k=E(h,h._pos,e,t);if(!1===k)return!1;r={recipient:u,request:l,wantReply:a,single:w,protocol:b,cookie:S,screen:k}}else if("env"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var T=g(h,h._pos,"utf8",e,t);if(!1===T)return!1;var A=g(h,h._pos,"utf8",e,t);if(!1===A)return!1;r={recipient:u,request:l,wantReply:a,key:T,val:A}}else if("shell"===l){if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}else if("exec"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var U=g(h,h._pos,"utf8",e,t);if(!1===U)return!1;r={recipient:u,request:l,wantReply:a,command:U}}else if("subsystem"===l){if(void 0===(a=h[h._pos++]))return!1;a=0!==a;var R=g(h,h._pos,"utf8",e,t);if(!1===R)return!1;r={recipient:u,request:l,wantReply:a,subsystem:R}}else if("signal"===l){if(!1===(c=g(h,++h._pos,"ascii",e,t)))return!1;r={recipient:u,request:l,wantReply:!1,signal:"SIG"+c}}else if("xon-xoff"===l){var N=h[++h._pos];if(void 0===N)return!1;r={recipient:u,request:l,wantReply:!1,clientControl:N=0!==N}}else if("auth-agent-req@openssh.com"===l){if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}else{if(void 0===(a=h[h._pos]))return!1;r={recipient:u,request:l,wantReply:a=0!==a}}e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, packet: CHANNEL_REQUEST ("+u+", "+l+")"),e.emit("CHANNEL_REQUEST:"+u,r)}(e,t);if(N>=30&&N<=49)return function(e,t,r){var i=e._state,n=i.incoming,s=n.payload;if(i.outgoing.status===X||le(e,t)!==n.expectedPacket)return e.debug("DEBUG: Parser: IN_PACKETDATAAFTER, expected: "+n.expectedPacket+" but got: "+le(e,t)),e.disconnect(T.PROTOCOL_ERROR),(o=new Error("Received unexpected packet")).level="protocol",e.emit("error",o),!1;if("groupex"===i.kex.type){var o;if(e.server)return e.disconnect(T.PROTOCOL_ERROR),(o=new Error("DH group exchange not supported by server")).level="handshake",e.emit("error",o),!1;if(t===S.KEXDH_GEX_GROUP){var a=g(s,1,e,r);if(!1===a)return!1;var c=g(s,s._pos,e,r);if(!1===c)return!1;e.emit("KEXDH_GEX_GROUP",a,c)}else if(t===S.KEXDH_GEX_REPLY)return de(e,r)}else if(t===S.KEXDH_INIT){var h=g(s,1,e,r);if(!1===h)return!1;e.emit("KEXDH_INIT",h)}else if(t===S.KEXDH_REPLY)return de(e,r)}(e,N,t);if(N>=60&&N<=70)return function(e,t,r){var i,n,s,o=e._state,a=o.authsQueue[0],c=o.incoming.payload;if("password"===a){if(t===S.USERAUTH_PASSWD_CHANGEREQ){if(!1===(i=g(c,1,"utf8",e,r)))return!1;if(!1===(n=g(c,c._pos,"utf8",e,r)))return!1;e.emit("USERAUTH_PASSWD_CHANGEREQ",i,n)}}else if("keyboard-interactive"===a){if(t===S.USERAUTH_INFO_REQUEST){var h,f,u;if(!1===(h=g(c,1,"utf8",e,r)))return!1;if(!1===(f=g(c,c._pos,"utf8",e,r)))return!1;if(!1===(n=g(c,c._pos,"utf8",e,r)))return!1;if(!1===(u=E(c,c._pos,e,r)))return!1;c._pos+=4;for(var l=[],p=0;p<u;++p){if(!1===(s=g(c,c._pos,"utf8",e,r)))return!1;var d=c[c._pos++];if(void 0===d)return!1;d=0!==d,l.push({prompt:s,echo:d})}e.emit("USERAUTH_INFO_REQUEST",h,f,n,l)}else if(t===S.USERAUTH_INFO_RESPONSE){var m=E(c,1,e,r);if(!1===m)return!1;c._pos=5;for(var v=[],y=0;y<m;++y){if(!1===(s=g(c,c._pos,"utf8",e,r)))return!1;v.push(s)}e.emit("USERAUTH_INFO_RESPONSE",v)}}else if("publickey"===a){if(t===S.USERAUTH_PK_OK){var _=e._state.authsQueue;if(!_.length||"publickey"!==_[0])return;_.shift(),e.emit("USERAUTH_PK_OK")}}else if(void 0!==a){e.disconnect(T.PROTOCOL_ERROR);var w=new Error("Invalid authentication method: "+a);w.level="protocol",e.emit("error",w)}}(e,N,t);var pe=Buffer.allocUnsafe(5);pe[0]=S.UNIMPLEMENTED,u(pe,R,1),Se(e,pe)}}function de(e,t){var r=e._state.incoming.payload,i=g(r,1,e,t);if(!1===i)return!1;var n=g(r,r._pos,e,t);if(!1===n)return!1;var s=g(r,r._pos,e,t);if(!1===s)return!1;var o={hostkey:i,hostkey_format:void 0,pubkey:n,sig:s,sig_format:void 0},a=g(i,0,"ascii",e,t);if(!1===a)return!1;o.hostkey_format=a;var c=g(s,0,"ascii",e,t);if(!1===c)return!1;o.sig_format=c,e.emit("KEXDH_REPLY",o)}function ge(e,t){var r=e._state.incoming,n=r.hmac;if(e.debug("DEBUG: Parser: Verifying MAC"),r.decrypt.info.authLen>0){var s=r.decrypt,o=s.instance;o.setAuthTag(t);var a=o.update(r.packet);return r.payload=a.slice(1,r.packet.length-a[0]),d(s.iv),s.instance=i.createDecipheriv(U[s.type],s.key,s.iv),s.instance.setAutoPadding(!1),!0}var c=i.createHmac(U[n.type],n.key);u(ee,r.seqno,0),u(ee,r.pktLen,4),ee[8]=r.padLen,c.update(ee),c.update(r.packet);var h=c.digest();return h.length>r.hmac.info.actualLen&&(h=h.slice(0,r.hmac.info.actualLen)),Ue(h,t)}function Ee(e,t){var r=e._state.incoming.decrypt.instance;return e.debug("DEBUG: Parser: Decrypting"),r.update(t)}function me(e,t,r,i){var n=e._state.incoming.expect;n.amount=r,n.type=t,n.ptr=0,i?n.buf=i:r&&(n.buf=Buffer.allocUnsafe(r))}function ve(e,t,r,i){var n=g(e,t,"ascii",r,i);return!1!==n&&(n.length?n.split(","):[])}function ye(e,t){return function(e,t){i.randomBytes(16,(function e(r,n){if(r)return i.randomBytes(16,e);t&&t(n)}))}(0,(function(r){var i=e.config.algorithms,n=i.kexBuf;if(e.remoteBugs&P.BAD_DHGEX){for(var s=!1,o=i.kex,a=o.length-1;a>=0;--a)-1!==o[a].indexOf("group-exchange")&&(s||(o=o.slice(),s=!0),o.splice(a,1));s&&(n=Buffer.from(o.join(",")))}var c=i.serverHostKeyBuf,h=21+n.length+4+c.length+2*(4+i.cipherBuf.length)+2*(4+i.hmacBuf.length)+2*(4+i.compressBuf.length)+8+1+4,f=Buffer.allocUnsafe(h),l=17;f[0]=S.KEXINIT,!1!==r&&r.copy(f,1),u(f,n.length,l),l+=4,n.copy(f,l),l+=n.length,u(f,c.length,l),l+=4,c.copy(f,l),l+=c.length,u(f,i.cipherBuf.length,l),l+=4,i.cipherBuf.copy(f,l),l+=i.cipherBuf.length,u(f,i.cipherBuf.length,l),l+=4,i.cipherBuf.copy(f,l),l+=i.cipherBuf.length,u(f,i.hmacBuf.length,l),l+=4,i.hmacBuf.copy(f,l),l+=i.hmacBuf.length,u(f,i.hmacBuf.length,l),l+=4,i.hmacBuf.copy(f,l),l+=i.hmacBuf.length,u(f,i.compressBuf.length,l),l+=4,i.compressBuf.copy(f,l),l+=i.compressBuf.length,u(f,i.compressBuf.length,l),l+=4,i.compressBuf.copy(f,l),l+=i.compressBuf.length,f.fill(0,f.length-13),e.debug("DEBUG: Outgoing: Writing KEXINIT"),e._state.incoming.expectedPacket="KEXINIT";var p=e._state.outgoing;p.kexinit=f,p.status===X&&(p.status=j),Se(e,f,t,!0)})),!0}function _e(e){var t=e._state,r=t.outgoing,i=Buffer.allocUnsafe(5+r.pubkey.length);return t.incoming.expectedPacket=t.kex.pktReply,"groupex"===t.kex.type?(i[0]=S.KEXDH_GEX_INIT,e.debug("DEBUG: Outgoing: Writing KEXDH_GEX_INIT")):(i[0]=S.KEXDH_INIT,"group"===t.kex.type?e.debug("DEBUG: Outgoing: Writing KEXDH_INIT"):e.debug("DEBUG: Outgoing: Writing KEXECDH_INIT")),u(i,r.pubkey.length,1),r.pubkey.copy(i,5),Se(e,i,void 0,!0)}function we(e,t,r){var i=e._state.outgoing.compress.instance;i.write(t),i.flush(Q,be.bind(e,r))}function be(e){if(!this._readableState.ended&&!this._writableState.ended){ke(this,this._state.outgoing.compress.instance.read(),e);var t=this._state.outgoing.compress.queue;t.shift(),t.length>0&&we(this,t[0][0],t[0][1])}}function Se(e,t,r,i){var n=e._state;if(!n)return!1;var s=n.outgoing;if(s.status===j&&!i)return"function"==typeof r?s.rekeyQueue.push([t,r]):s.rekeyQueue.push(t),!1;if(e._readableState.ended||e._writableState.ended)return!1;if(s.compress.instance){var o=s.compress.queue;return o.push([t,r]),1===o.length&&we(e,o[0][0],o[0][1]),!0}return ke(e,t,r)}function ke(e,t,r){var n,s,o,a,c,h=e._state.outgoing,f=h.encrypt,l=h.hmac;if(n=t.length+9,!1!==f.instance)if(f.info.authLen>0){for(var p=1+t.length+4;p%f.info.blockLen!=0;)++p;s=p-1-t.length,n=4+p}else{var g=f.info.blockLen;s=(n+=(g-1)*n%g)-t.length-5}else s=(n+=7*n%8)-t.length-5;o=Buffer.allocUnsafe(n),u(o,n-4,0),o[4]=s,t.copy(o,5),Te(o,5+t.length,s),!1!==l.type&&l.key&&(a=i.createHmac(U[l.type],l.key),u(h.bufSeqno,h.seqno,0),a.update(h.bufSeqno),a.update(o),(a=a.digest()).length>l.info.actualLen&&(a=a.slice(0,l.info.actualLen)));var E,m=0;if(!1!==f.instance)if(f.info.authLen>0){var v=i.createCipheriv(U[f.type],f.key,f.iv);v.setAutoPadding(!1);var y=o.slice(0,4);v.setAAD(y),e.push(y),m+=y,E=v.update(o.slice(4)),e.push(E),m+=E.length;var _=v.final();_.length&&(e.push(_),m+=_.length);var w=v.getAuthTag();c=e.push(w),m+=w.length,d(f.iv)}else E=f.instance.update(o),e.push(E),m+=E.length,c=e.push(a),m+=a.length;else c=e.push(o),m=o.length;return e.bytesSent+=m,++h.seqno>V&&(h.seqno=0),r&&r(),c}o(he,s),he.prototype.__read=s.prototype._read,he.prototype._read=function(e){return this._needContinue&&(this._needContinue=!1,this.emit("continue")),this.__read(e)},he.prototype.__push=s.prototype.push,he.prototype.push=function(e,t){var r=this.__push(e,t);return this._needContinue=!1===r,r},he.prototype._cleanup=function(e){this.reset(),this.debug("DEBUG: Parser: Malformed packet"),e&&e(new Error("Malformed packet"))},he.prototype._transform=function(e,t,r,i){var n,s,o,h,f=!1,u=!1,l=this._state,p=l.incoming,d=l.outgoing,g=p.expect,m=p.decrypt,v=p.decompress,y=e.length,_=0,w=this.debug,b=this,k=0,A=k;for(this.bytesReceived+=y;;){if(void 0!==g.type){if(k>=y)break;if(g.type===Y){_=y-k;var U=g.buf.length-g.ptr;U<=_?(e.copy(g.buf,g.ptr,k,k+U),k+=U,s=g.buf,g.buf=void 0,g.ptr=0,g.type=void 0):(e.copy(g.buf,g.ptr,k),g.ptr+=_,k+=_);continue}if(0===g.type){if(k+=p.search.push(e),void 0!==g.type)continue}else if(1===g.type){if(4+ ++g.ptr>255)return this.reset(),w("DEBUG: Parser: Identification string exceeded 255 characters"),r(new Error("Max identification string size exceeded"));if(10!==e[k]){++k===y&&A<k&&(void 0===g.buf?g.buf=e.toString("ascii",A,k):g.buf+=e.toString("ascii",A,k));continue}g.type=void 0,A<k&&(void 0===g.buf?g.buf=e.toString("ascii",A,k):g.buf+=e.toString("ascii",A,k)),s=g.buf,g.buf=void 0,++k}}if(p.status===L){if(!this.readable)return r();if(this.server)if(s){if(83!==s[0]||83!==s[1]||72!==s[2]||45!==s[3])return this.reset(),w("DEBUG: Parser: Bad identification start"),r(new Error("Bad identification start"));p.status=H,w("DEBUG: Parser: IN_INIT (waiting for rest of identification)")}else w("DEBUG: Parser: IN_INIT (waiting for identification begin)"),me(this,Y,4);else{w("DEBUG: Parser: IN_INIT");var B=p.search=new c(Z);B.on("info",(function e(t,r,i,n){r&&(void 0===p.greeting?p.greeting=r.toString("binary",i,n):p.greeting+=r.toString("binary",i,n)),t&&(g.type=void 0,p.search.removeListener("info",e))})),B.maxMatches=1,me(this,0),p.status=H}}else if(p.status===H)w("DEBUG: Parser: IN_GREETING"),p.search=void 0,A=k,me(this,1),p.status=x;else{if(p.status===x){w("DEBUG: Parser: IN_HEADER"),13===s.charCodeAt(s.length-1)&&(s=s.slice(0,-1));var R=s.indexOf("-"),N=s.indexOf(" "),P={greeting:p.greeting,identRaw:"SSH-"+s,versions:{protocol:s.substr(0,R),software:-1===N?s.substring(R+1):s.substring(R+1,N)},comments:N>-1?s.substring(N+1):void 0};if(p.greeting=void 0,"1.99"!==P.versions.protocol&&"2.0"!==P.versions.protocol)return this.reset(),w("DEBUG: Parser: protocol version not supported: "+P.versions.protocol),r(new Error("Protocol version not supported"));if(this.emit("header",P),p.status===L)return;var I=P.identRaw,C=P.versions.software;this.debug("DEBUG: Remote ident: "+a(I));for(var q,z=0;z<O;++z)"string"==typeof(q=D[z])[0]?C===q[0]&&(this.remoteBugs|=q[1]):q[0].test(C)&&(this.remoteBugs|=q[1]);return p.identRaw=I,this.bytesReceived-=y-k,ye(this,(function(){k===y?r():b._transform(e.slice(k),t,r)})),void(p.status=F)}if(p.status===F)w("DEBUG: Parser: IN_PACKETBEFORE (expecting "+(n=m.instance?m.info.blockLen:8)+")"),me(this,Y,n,m.buf),p.status=M;else if(p.status===M){if(w("DEBUG: Parser: IN_PACKET"),m.instance?((u=m.info.authLen>0)||(s=Ee(this,s)),n=m.info.blockLen):(u=!1,n=8),!1===(h=E(s,0,this,r)))return;var $,ee=p.hmac.info,te=h+4+($=ee?ee.actualLen:0),re=this.maxPacketSize;if(v.instance&&(re+=5*(this.maxPacketSize/16384+1)+6),h>re||te<16+$||(h+(u?0:4))%n!=0)return this.disconnect(T.PROTOCOL_ERROR),w("DEBUG: Parser: Bad packet length ("+te+")"),r(new Error("Bad packet length"));p.pktLen=h;var ie=p.pktLen+4-n;if(u?(m.instance.setAAD(s.slice(0,4)),w("DEBUG: Parser: pktLen:"+p.pktLen+",remainLen:"+ie)):(p.padLen=s[4],w("DEBUG: Parser: pktLen:"+p.pktLen+",padLen:"+p.padLen+",remainLen:"+ie)),ie>0)p.pktExtra=u?s.slice(4):s.slice(5),me(this,Y,ie),p.status=K;else{if(!(ie<0)){f=!0,p.status=K;continue}p.status=F}}else if(p.status===K){w("DEBUG: Parser: IN_PACKETDATA"),m.instance?(u=m.info.authLen>0,f?f=!1:u||(s=Ee(this,s))):(u=!1,f=!1);var ne=p.pktLen-p.padLen-1;if(p.pktExtra?(o=Buffer.allocUnsafe(p.pktExtra.length+s.length),p.pktExtra.copy(o),s.copy(o,p.pktExtra.length),p.payload=o.slice(0,ne)):(o=u?s.slice(4):s.slice(5),p.payload=s.slice(5,5+ne)),void 0!==p.hmac.info){var se=m.info.authLen||p.hmac.info.actualLen;w("DEBUG: Parser: HMAC size:"+se),me(this,Y,se,p.hmac.buf),p.status=G,p.packet=o}else p.status=W;p.pktExtra=void 0,o=void 0}else if(p.status===G){if(w("DEBUG: Parser: IN_PACKETDATAVERIFY"),!ge(this,s))return this.reset(),w("DEBUG: Parser: IN_PACKETDATAVERIFY (Invalid HMAC)"),r(new Error("Invalid HMAC"));w("DEBUG: Parser: IN_PACKETDATAVERIFY (Valid HMAC)"),p.status=W,p.packet=void 0}else if(p.status===W){if(v.instance){if(!i){w("DEBUG: Parser: Decompressing"),v.instance.write(p.payload);var oe=[],ae=0;return void v.instance.on("readable",(function(){for(var e;e=this.read();)oe.push(e),ae+=e.length})).flush(Q,(function(){var i;v.instance.removeAllListeners("readable"),1===oe.length?p.payload=oe[0]:p.payload=Buffer.concat(oe,ae),oe=null,i=k===y?J:e.slice(k),b._transform(i,t,r,!0)}))}i=!1}this.emit("packet");var he=p.payload[0];if(w!==ce){var fe="DEBUG: Parser: IN_PACKETDATAAFTER, packet: ",ue=l.authsQueue[0],le=null;if(d.status!==j||he<=4||he>=20&&he<=49||(fe+="(enqueued) "),he===S.KEXDH_INIT)switch(l.kex.type){case"group":le="KEXDH_INIT";break;case"groupex":le="KEXDH_GEX_REQUEST";break;default:le="KEXECDH_INIT"}else if(he===S.KEXDH_REPLY)switch(l.kex.type){case"group":le="KEXDH_REPLY";break;case"groupex":le="KEXDH_GEX_GROUP";break;default:le="KEXECDH_REPLY"}else he===S.KEXDH_GEX_GROUP?le="KEXDH_GEX_GROUP":he===S.KEXDH_GEX_REPLY?le="KEXDH_GEX_REPLY":60===he?le="password"===ue?"USERAUTH_PASSWD_CHANGEREQ":"keyboard-interactive"===ue?"USERAUTH_INFO_REQUEST":"publickey"===ue?"USERAUTH_PK_OK":"UNKNOWN PACKET 60":61===he&&(le="keyboard-interactive"===ue?"USERAUTH_INFO_RESPONSE":"UNKNOWN PACKET 61");null===le&&(le=S[he]),he!==S.CHANNEL_OPEN&&he!==S.CHANNEL_REQUEST&&he!==S.CHANNEL_SUCCESS&&he!==S.CHANNEL_FAILURE&&he!==S.CHANNEL_EOF&&he!==S.CHANNEL_CLOSE&&he!==S.CHANNEL_DATA&&he!==S.CHANNEL_EXTENDED_DATA&&he!==S.CHANNEL_WINDOW_ADJUST&&he!==S.DISCONNECT&&he!==S.USERAUTH_REQUEST&&he!==S.GLOBAL_REQUEST&&w(fe+le)}if(d.status===X||he<=4||he>=20&&he<=49){if(!1===pe(this,r))return;if(p.status===L)return}else if(d.status===j){if(50===p.rekeyQueue.length)return w("DEBUG: Parser: Max incoming re-key queue length reached"),this.disconnect(T.PROTOCOL_ERROR),r(new Error("Incoming re-key queue length limit reached"));var de=p.seqno;++p.seqno>V&&(p.seqno=0),p.rekeyQueue.push([de,p.payload])}p.status=F,p.payload=void 0}}void 0!==s&&(s=void 0)}r()},he.prototype.reset=function(e){if(this._state){var t=this._state;t.incoming.status=L,t.outgoing.status=q}else this._state={authsQueue:[],hostkeyFormat:void 0,kex:void 0,incoming:{status:L,expectedPacket:void 0,search:void 0,greeting:void 0,seqno:0,pktLen:void 0,padLen:void 0,pktExtra:void 0,payload:void 0,packet:void 0,kexinit:void 0,identRaw:void 0,rekeyQueue:[],ignoreNext:!1,expect:{amount:void 0,type:void 0,ptr:0,buf:void 0},decrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,buf:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},decompress:{instance:!1,type:!1}},outgoing:{status:q,seqno:0,bufSeqno:Buffer.allocUnsafe(4),rekeyQueue:[],kexinit:void 0,kexsecret:void 0,pubkey:void 0,exchangeHash:void 0,sessionId:void 0,sentNEWKEYS:!1,encrypt:{instance:!1,info:void 0,iv:void 0,key:void 0,type:void 0},hmac:{info:void 0,key:void 0,buf:void 0,type:!1},compress:{instance:!1,type:!1,queue:null}}};e||this.readable&&this.push(null)},he.prototype.disconnect=function(e){var t=Buffer.alloc(13);return t[0]=S.DISCONNECT,void 0===T[e]&&(e=T.BY_APPLICATION),u(t,e,1),this.debug("DEBUG: Outgoing: Writing DISCONNECT ("+T[e]+")"),Se(this,t),this.reset(),!1},he.prototype.ping=function(){return this.debug("DEBUG: Outgoing: Writing ping (GLOBAL_REQUEST: keepalive@openssh.com)"),Se(this,te)},he.prototype.rekey=function(){var e=this._state.outgoing.status;if(e===j)throw new Error("A re-key is already in progress");if(e!==X)throw new Error("Cannot re-key yet");return this.debug("DEBUG: Outgoing: Starting re-key"),ye(this)},he.prototype.requestSuccess=function(e){var t;return Buffer.isBuffer(e)?((t=Buffer.allocUnsafe(1+e.length))[0]=S.REQUEST_SUCCESS,e.copy(t,1)):t=ne,this.debug("DEBUG: Outgoing: Writing REQUEST_SUCCESS"),Se(this,t)},he.prototype.requestFailure=function(){return this.debug("DEBUG: Outgoing: Writing REQUEST_FAILURE"),Se(this,se)},he.prototype.channelSuccess=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_SUCCESS,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_SUCCESS ("+e+")"),Se(this,t)},he.prototype.channelFailure=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_FAILURE,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_FAILURE ("+e+")"),Se(this,t)},he.prototype.channelEOF=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_EOF,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_EOF ("+e+")"),Se(this,t)},he.prototype.channelClose=function(e){var t=Buffer.allocUnsafe(5);return t[0]=S.CHANNEL_CLOSE,u(t,e,1),this.debug("DEBUG: Outgoing: Writing CHANNEL_CLOSE ("+e+")"),Se(this,t)},he.prototype.channelWindowAdjust=function(e,t){var r=Buffer.allocUnsafe(9);return r[0]=S.CHANNEL_WINDOW_ADJUST,u(r,e,1),u(r,t,5),this.debug("DEBUG: Outgoing: Writing CHANNEL_WINDOW_ADJUST ("+e+", "+t+")"),Se(this,r)},he.prototype.channelData=function(e,t){var r=Buffer.isBuffer(t),i=r?t.length:Buffer.byteLength(t),n=Buffer.allocUnsafe(9+i);return n[0]=S.CHANNEL_DATA,u(n,e,1),u(n,i,5),r?t.copy(n,9):n.write(t,9,i,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_DATA ("+e+")"),Se(this,n)},he.prototype.channelExtData=function(e,t,r){var i=Buffer.isBuffer(t),n=i?t.length:Buffer.byteLength(t),s=Buffer.allocUnsafe(13+n);return s[0]=S.CHANNEL_EXTENDED_DATA,u(s,e,1),u(s,r,5),u(s,n,9),i?t.copy(s,13):s.write(t,13,n,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_EXTENDED_DATA ("+e+")"),Se(this,s)},he.prototype.channelOpenConfirm=function(e,t,r,i){var n=Buffer.allocUnsafe(17);return n[0]=S.CHANNEL_OPEN_CONFIRMATION,u(n,e,1),u(n,t,5),u(n,r,9),u(n,i,13),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_CONFIRMATION (r:"+e+", l:"+t+")"),Se(this,n)},he.prototype.channelOpenFail=function(e,t,r,i){"string"!=typeof r&&(r=""),"string"!=typeof i&&(i="");var n=Buffer.byteLength(r),s=Buffer.byteLength(i),o=9,a=Buffer.allocUnsafe(13+n+4+s);return a[0]=S.CHANNEL_OPEN_FAILURE,u(a,e,1),u(a,t,5),u(a,n,o),o+=4,n&&(a.write(r,o,n,"utf8"),o+=n),u(a,s,o),s&&a.write(i,o+=4,s,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN_FAILURE ("+e+")"),Se(this,a)},he.prototype.service=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=Buffer.allocUnsafe(5+t);return r[0]=S.SERVICE_REQUEST,u(r,t,1),r.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_REQUEST ("+e+")"),Se(this,r)},he.prototype.tcpipForward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(23+i+4);return n[0]=S.GLOBAL_REQUEST,u(n,13,1),n.write("tcpip-forward",5,13,"ascii"),n[18]=void 0===r||!0===r?1:0,u(n,i,19),n.write(e,23,i,"ascii"),u(n,t,23+i),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (tcpip-forward)"),Se(this,n)},he.prototype.cancelTcpipForward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(e),n=Buffer.allocUnsafe(30+i+4);return n[0]=S.GLOBAL_REQUEST,u(n,20,1),n.write("cancel-tcpip-forward",5,20,"ascii"),n[25]=void 0===r||!0===r?1:0,u(n,i,26),n.write(e,30,i,"ascii"),u(n,t,30+i),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-tcpip-forward)"),Se(this,n)},he.prototype.openssh_streamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.allocUnsafe(41+r);return i[0]=S.GLOBAL_REQUEST,u(i,31,1),i.write("streamlocal-forward@openssh.com",5,31,"ascii"),i[36]=void 0===t||!0===t?1:0,u(i,r,37),i.write(e,41,r,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (streamlocal-forward@openssh.com)"),Se(this,i)},he.prototype.openssh_cancelStreamLocalForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.allocUnsafe(48+r);return i[0]=S.GLOBAL_REQUEST,u(i,38,1),i.write("cancel-streamlocal-forward@openssh.com",5,38,"ascii"),i[43]=void 0===t||!0===t?1:0,u(i,r,44),i.write(e,48,r,"utf8"),this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (cancel-streamlocal-forward@openssh.com)"),Se(this,i)},he.prototype.directTcpip=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(i.srcIP),s=Buffer.byteLength(i.dstIP),o=29,a=Buffer.allocUnsafe(33+n+4+4+s+4);return a[0]=S.CHANNEL_OPEN,u(a,12,1),a.write("direct-tcpip",5,12,"ascii"),u(a,e,17),u(a,t,21),u(a,r,25),u(a,s,o),a.write(i.dstIP,o+=4,s,"ascii"),u(a,i.dstPort,o+=s),u(a,n,o+=4),a.write(i.srcIP,o+=4,n,"ascii"),u(a,i.srcPort,o+=n),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-tcpip)"),Se(this,a)},he.prototype.openssh_directStreamLocal=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(i.socketPath),s=47,o=Buffer.allocUnsafe(51+n+4+4);return o[0]=S.CHANNEL_OPEN,u(o,30,1),o.write("direct-streamlocal@openssh.com",5,30,"ascii"),u(o,e,35),u(o,t,39),u(o,r,43),u(o,n,s),o.write(i.socketPath,s+=4,n,"utf8"),o.fill(0,o.length-8),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", direct-streamlocal@openssh.com)"),Se(this,o)},he.prototype.openssh_noMoreSessions=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.allocUnsafe(34);return t[0]=S.GLOBAL_REQUEST,u(t,28,1),t.write("no-more-sessions@openssh.com",5,28,"ascii"),t[33]=void 0===e||!0===e?1:0,this.debug("DEBUG: Outgoing: Writing GLOBAL_REQUEST (no-more-sessions@openssh.com)"),Se(this,t)},he.prototype.session=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.allocUnsafe(24);return i[0]=S.CHANNEL_OPEN,u(i,7,1),i.write("session",5,7,"ascii"),u(i,e,12),u(i,t,16),u(i,r,20),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", session)"),Se(this,i)},he.prototype.windowChange=function(e,t,r,i,n){if(this.server)throw new Error("Client-only method called in server mode");var s=Buffer.allocUnsafe(39);return s[0]=S.CHANNEL_REQUEST,u(s,e,1),u(s,13,5),s.write("window-change",9,13,"ascii"),s[22]=0,u(s,r,23),u(s,t,27),u(s,n,31),u(s,i,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", window-change)"),Se(this,s)},he.prototype.pty=function(e,t,r,i,n,s,o,a){if(this.server)throw new Error("Client-only method called in server mode");s&&s.length||(s="vt100"),!o||Buffer.isBuffer(o)||Array.isArray(o)||"object"!=typeof o||(o=function(e){for(var t,r,i,n=/^\d+$/,s=Object.keys(e),o=0,a=[],c=0,h=s.length;c<h;++c)t=s[c],(r=B[t])&&!n.test(t)&&"number"==typeof e[t]&&"TTY_OP_END"!==t&&(i=e[t],a[o++]=r,a[o++]=i>>>24&255,a[o++]=i>>>16&255,a[o++]=i>>>8&255,a[o++]=255&i);return a[o]=B.TTY_OP_END,a}(o)),o&&o.length||(o=oe);var c=s.length,h=o.length,f=21,l=Buffer.allocUnsafe(21+c+4+4+4+4+4+h);if(l[0]=S.CHANNEL_REQUEST,u(l,e,1),u(l,7,5),l.write("pty-req",9,7,"ascii"),l[16]=void 0===a||!0===a?1:0,u(l,c,17),l.write(s,21,c,"utf8"),u(l,r,f+=c),u(l,t,f+=4),u(l,n,f+=4),u(l,i,f+=4),u(l,h,f+=4),f+=4,Array.isArray(o))for(var p=0;p<h;++p)l[f++]=o[p];else Buffer.isBuffer(o)&&o.copy(l,f);return this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", pty-req)"),Se(this,l)},he.prototype.shell=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.allocUnsafe(15);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,5,5),r.write("shell",9,5,"ascii"),r[14]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", shell)"),Se(this,r)},he.prototype.exec=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.isBuffer(t)?t.length:Buffer.byteLength(t),n=Buffer.allocUnsafe(18+i);return n[0]=S.CHANNEL_REQUEST,u(n,e,1),u(n,4,5),n.write("exec",9,4,"ascii"),n[13]=void 0===r||!0===r?1:0,u(n,i,14),Buffer.isBuffer(t)?t.copy(n,18):n.write(t,18,i,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exec)"),Se(this,n)},he.prototype.signal=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");if("SIG"===(t=t.toUpperCase()).slice(0,3)&&(t=t.substring(3)),-1===R.indexOf(t))throw new Error("Invalid signal: "+t);var r=t.length,i=Buffer.allocUnsafe(20+r);return i[0]=S.CHANNEL_REQUEST,u(i,e,1),u(i,6,5),i.write("signal",9,6,"ascii"),i[15]=0,u(i,r,16),i.write(t,20,r,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", signal)"),Se(this,i)},he.prototype.env=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");var n=Buffer.byteLength(t),s=Buffer.isBuffer(r)?r.length:Buffer.byteLength(r),o=Buffer.allocUnsafe(17+n+4+s);return o[0]=S.CHANNEL_REQUEST,u(o,e,1),u(o,3,5),o.write("env",9,3,"ascii"),o[12]=void 0===i||!0===i?1:0,u(o,n,13),o.write(t,17,n,"ascii"),u(o,s,17+n),Buffer.isBuffer(r)?r.copy(o,17+n+4):o.write(r,17+n+4,s,"utf8"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", env)"),Se(this,o)},he.prototype.x11Forward=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(t.protocol),n=Buffer.byteLength(t.cookie),s=Buffer.allocUnsafe(22+i+4+n+4);s[0]=S.CHANNEL_REQUEST,u(s,e,1),u(s,7,5),s.write("x11-req",9,7,"ascii"),s[16]=void 0===r||!0===r?1:0,s[17]=t.single?1:0,u(s,i,18);var o=22;return Buffer.isBuffer(t.protocol)?t.protocol.copy(s,o):s.write(t.protocol,o,i,"utf8"),u(s,n,o+=i),o+=4,Buffer.isBuffer(t.cookie)?t.cookie.copy(s,o):s.write(t.cookie,o,n,"binary"),o+=n,u(s,t.screen||0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", x11-req)"),Se(this,s)},he.prototype.subsystem=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i=Buffer.byteLength(t),n=Buffer.allocUnsafe(23+i);return n[0]=S.CHANNEL_REQUEST,u(n,e,1),u(n,9,5),n.write("subsystem",9,9,"ascii"),n[18]=void 0===r||!0===r?1:0,u(n,i,19),n.write(t,23,i,"ascii"),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", subsystem: "+t+")"),Se(this,n)},he.prototype.openssh_agentForward=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.allocUnsafe(36);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,26,5),r.write("auth-agent-req@openssh.com",9,26,"ascii"),r[35]=void 0===t||!0===t?1:0,this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", auth-agent-req@openssh.com)"),Se(this,r)},he.prototype.authPassword=function(e,t){if(this.server)throw new Error("Client-only method called in server mode");var r=Buffer.byteLength(e),i=Buffer.byteLength(t),n=0,s=Buffer.allocUnsafe(5+r+4+14+4+8+1+4+i);return s[n]=S.USERAUTH_REQUEST,u(s,r,++n),s.write(e,n+=4,r,"utf8"),u(s,14,n+=r),s.write("ssh-connection",n+=4,14,"ascii"),u(s,8,n+=14),s.write("password",n+=4,8,"ascii"),s[n+=8]=0,u(s,i,++n),s.write(t,n+=4,i,"utf8"),this._state.authsQueue.push("password"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (password)"),Se(this,s)},he.prototype.authPK=function(e,t,r){if(this.server)throw new Error("Client-only method called in server mode");var i,n=this,s=this._state.outgoing;"function"==typeof t.getPublicSSH?(i=t.type,t=t.getPublicSSH()):i=t.toString("ascii",4,4+f(t,0));var o=Buffer.byteLength(e),a=Buffer.byteLength(i),c=t.length,h=s.sessionId.length,l=0,p=Buffer.allocUnsafe((r?4+h:0)+1+4+o+4+14+4+9+1+4+a+4+c);return r?(u(p,h,l),s.sessionId.copy(p,l+=4),p[l+=h]=S.USERAUTH_REQUEST):p[l]=S.USERAUTH_REQUEST,u(p,o,++l),p.write(e,l+=4,o,"utf8"),u(p,14,l+=o),p.write("ssh-connection",l+=4,14,"ascii"),u(p,9,l+=14),p.write("publickey",l+=4,9,"ascii"),p[l+=9]=r?1:0,u(p,a,++l),p.write(i,l+=4,a,"ascii"),u(p,c,l+=a),t.copy(p,l+=4),r?(r(p,(function(r){if(!1===(r=Ae(r,i)))throw new Error("Error while converting handshake signature");var s=r.length,h=Buffer.allocUnsafe(5+o+4+14+4+9+1+4+a+4+c+4+4+a+4+s);return h[l=0]=S.USERAUTH_REQUEST,u(h,o,++l),h.write(e,l+=4,o,"utf8"),u(h,14,l+=o),h.write("ssh-connection",l+=4,14,"ascii"),u(h,9,l+=14),h.write("publickey",l+=4,9,"ascii"),h[l+=9]=1,u(h,a,++l),h.write(i,l+=4,a,"ascii"),u(h,c,l+=a),t.copy(h,l+=4),u(h,4+a+4+s,l+=c),u(h,a,l+=4),h.write(i,l+=4,a,"ascii"),u(h,s,l+=a),r.copy(h,l+=4),n._state.authsQueue.push("publickey"),n.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey)"),Se(n,h)})),!0):(this._state.authsQueue.push("publickey"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (publickey -- check)"),Se(this,p))},he.prototype.authHostbased=function(e,t,r,i,n){if(this.server)throw new Error("Client-only method called in server mode");var s,o=this,a=this._state.outgoing;"function"==typeof t.getPublicSSH?(s=t.type,t=t.getPublicSSH()):s=t.toString("ascii",4,4+f(t,0));var c=Buffer.byteLength(e),h=Buffer.byteLength(s),l=t.length,p=a.sessionId.length,d=Buffer.byteLength(r),g=Buffer.byteLength(i),E=0,m=Buffer.allocUnsafe(4+p+1+4+c+4+14+4+9+4+h+4+l+4+d+4+g);return u(m,p,E),a.sessionId.copy(m,E+=4),m[E+=p]=S.USERAUTH_REQUEST,u(m,c,++E),m.write(e,E+=4,c,"utf8"),u(m,14,E+=c),m.write("ssh-connection",E+=4,14,"ascii"),u(m,9,E+=14),m.write("hostbased",E+=4,9,"ascii"),u(m,h,E+=9),m.write(s,E+=4,h,"ascii"),u(m,l,E+=h),t.copy(m,E+=4),u(m,d,E+=l),m.write(r,E+=4,d,"ascii"),u(m,g,E+=d),m.write(i,E+=4,g,"utf8"),n(m,(function(e){if(!1===(e=Ae(e,s)))throw new Error("Error while converting handshake signature");var t=e.length,r=Buffer.allocUnsafe(m.length-p+t);return m.copy(r,0,4+p),u(r,t,r.length-t-4),e.copy(r,r.length-t),o._state.authsQueue.push("hostbased"),o.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (hostbased)"),Se(o,r)})),!0},he.prototype.authKeyboard=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=0,i=Buffer.allocUnsafe(5+t+4+14+4+20+4+4);return i[r]=S.USERAUTH_REQUEST,u(i,t,++r),i.write(e,r+=4,t,"utf8"),u(i,14,r+=t),i.write("ssh-connection",r+=4,14,"ascii"),u(i,20,r+=14),i.write("keyboard-interactive",r+=4,20,"ascii"),u(i,0,r+=20),u(i,0,r+=4),this._state.authsQueue.push("keyboard-interactive"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (keyboard-interactive)"),Se(this,i)},he.prototype.authNone=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t=Buffer.byteLength(e),r=0,i=Buffer.allocUnsafe(5+t+4+14+4+4);return i[r]=S.USERAUTH_REQUEST,u(i,t,++r),i.write(e,r+=4,t,"utf8"),u(i,14,r+=t),i.write("ssh-connection",r+=4,14,"ascii"),u(i,4,r+=14),i.write("none",r+=4,4,"ascii"),this._state.authsQueue.push("none"),this.debug("DEBUG: Outgoing: Writing USERAUTH_REQUEST (none)"),Se(this,i)},he.prototype.authInfoRes=function(e){if(this.server)throw new Error("Client-only method called in server mode");var t,r,i,n=0,s=0;if(e)for(i=0,r=e.length;i<r;++i)n+=4+Buffer.byteLength(e[i]);var o=Buffer.allocUnsafe(5+n);if(o[s++]=S.USERAUTH_INFO_RESPONSE,u(o,e?e.length:0,s),e)for(s+=4,i=0,r=e.length;i<r;++i)t=Buffer.byteLength(e[i]),u(o,t,s),s+=4,t&&(o.write(e[i],s,t,"utf8"),s+=t);return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_RESPONSE"),Se(this,o)},he.prototype.serviceAccept=function(e){if(!this.server)throw new Error("Server-only method called in client mode");var t=e.length,r=Buffer.allocUnsafe(5+t);if(r[0]=S.SERVICE_ACCEPT,u(r,t,1),r.write(e,5,t,"ascii"),this.debug("DEBUG: Outgoing: Writing SERVICE_ACCEPT ("+e+")"),Se(this,r),this.server&&this.banner&&"ssh-userauth"===e){var i=Buffer.byteLength(this.banner),n=5+i+4,s=Buffer.allocUnsafe(n);s[0]=S.USERAUTH_BANNER,u(s,i,1),s.write(this.banner,5,i,"utf8"),s.fill(0,n-4),this.debug("DEBUG: Outgoing: Writing USERAUTH_BANNER"),Se(this,s),this.banner=void 0}},he.prototype.forwardedTcpip=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.boundAddr),s=Buffer.byteLength(i.remoteAddr),o=36+n,a=Buffer.allocUnsafe(36+n+4+4+s+4);return a[0]=S.CHANNEL_OPEN,u(a,15,1),a.write("forwarded-tcpip",5,15,"ascii"),u(a,e,20),u(a,t,24),u(a,r,28),u(a,n,32),a.write(i.boundAddr,36,n,"ascii"),u(a,i.boundPort,o),u(a,s,o+=4),a.write(i.remoteAddr,o+=4,s,"ascii"),u(a,i.remotePort,o+=s),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-tcpip)"),Se(this,a)},he.prototype.x11=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.originAddr),s=24+n,o=Buffer.allocUnsafe(24+n+4);return o[0]=S.CHANNEL_OPEN,u(o,3,1),o.write("x11",5,3,"ascii"),u(o,e,8),u(o,t,12),u(o,r,16),u(o,n,20),o.write(i.originAddr,24,n,"ascii"),u(o,i.originPort,s),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", x11)"),Se(this,o)},he.prototype.openssh_authAgent=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i=Buffer.allocUnsafe(39);return i[0]=S.CHANNEL_OPEN,u(i,22,1),i.write("auth-agent@openssh.com",5,22,"ascii"),u(i,e,27),u(i,t,31),u(i,r,35),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", auth-agent@openssh.com)"),Se(this,i)},he.prototype.openssh_forwardedStreamLocal=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(i.socketPath),s=Buffer.allocUnsafe(54+n+4);return s[0]=S.CHANNEL_OPEN,u(s,33,1),s.write("forwarded-streamlocal@openssh.com",5,33,"ascii"),u(s,e,38),u(s,t,42),u(s,r,46),u(s,n,50),s.write(i.socketPath,54,n,"utf8"),u(s,0,54+n),this.debug("DEBUG: Outgoing: Writing CHANNEL_OPEN ("+e+", forwarded-streamlocal@openssh.com)"),Se(this,s)},he.prototype.exitStatus=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.allocUnsafe(25);return r[0]=S.CHANNEL_REQUEST,u(r,e,1),u(r,11,5),r.write("exit-status",9,11,"ascii"),r[20]=0,u(r,t,21),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-status)"),Se(this,r)},he.prototype.exitSignal=function(e,t,r,i){if(!this.server)throw new Error("Server-only method called in client mode");var n=Buffer.byteLength(t),s=i?Buffer.byteLength(i):0,o=25+n,a=Buffer.allocUnsafe(25+n+1+4+s+4);return a[0]=S.CHANNEL_REQUEST,u(a,e,1),u(a,11,5),a.write("exit-signal",9,11,"ascii"),a[20]=0,u(a,n,21),a.write(t,25,n,"utf8"),a[o++]=r?1:0,u(a,s,o),o+=4,s&&(a.write(i,o,s,"utf8"),o+=s),u(a,0,o),this.debug("DEBUG: Outgoing: Writing CHANNEL_REQUEST ("+e+", exit-signal)"),Se(this,a)},he.prototype.authFailure=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r;if(!this._state.authsQueue.length)throw new Error("No auth in progress");if("boolean"==typeof e&&(t=e,e=void 0),e){r=[];for(var i=0,n=e.length;i<n;++i)"none"!==e[i].toLowerCase()&&r.push(e[i]);r=r.join(",")}else r="";var s=r.length,o=Buffer.allocUnsafe(5+s+1);return o[0]=S.USERAUTH_FAILURE,u(o,s,1),o.write(r,5,s,"ascii"),o[5+s]=!0===t?1:0,this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_FAILURE"),Se(this,o)},he.prototype.authSuccess=function(){if(!this.server)throw new Error("Server-only method called in client mode");if(!this._state.authsQueue.length)throw new Error("No auth in progress");var e=this._state,t=e.outgoing,r=e.incoming;e.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_SUCCESS");var i=Se(this,ie);return"zlib@openssh.com"===t.compress.type&&(t.compress.instance=n.createDeflate(z),t.compress.queue=[]),"zlib@openssh.com"===r.decompress.type&&(r.decompress.instance=n.createInflate(z)),i},he.prototype.authPKOK=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=this._state.authsQueue;if(!r.length||"publickey"!==r[0])throw new Error('"publickey" auth not in progress');var i=e.length,n=t.length,s=Buffer.allocUnsafe(5+i+4+n);return s[0]=S.USERAUTH_PK_OK,u(s,i,1),s.write(e,5,i,"ascii"),u(s,n,5+i),t.copy(s,5+i+4),this._state.authsQueue.shift(),this.debug("DEBUG: Outgoing: Writing USERAUTH_PK_OK"),Se(this,s)},he.prototype.authPasswdChg=function(e,t){if(!this.server)throw new Error("Server-only method called in client mode");var r=Buffer.byteLength(e),i=t?t.length:0,n=0,s=Buffer.allocUnsafe(5+r+4+i);return s[n]=S.USERAUTH_PASSWD_CHANGEREQ,u(s,r,++n),s.write(e,n+=4,r,"utf8"),u(s,i,n+=r),i&&s.write(t,n+=4,i,"ascii"),this.debug("DEBUG: Outgoing: Writing USERAUTH_PASSWD_CHANGEREQ"),Se(this,s)},he.prototype.authInfoReq=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");var i,n,s,o,a=0,c=e?Buffer.byteLength(e):0,h=t?Buffer.byteLength(t):0,f=0;for(o=0,s=r.length;o<s;++o)a+=4+Buffer.byteLength(r[o].prompt)+1;var l=Buffer.allocUnsafe(5+c+4+h+4+4+a);for(l[f++]=S.USERAUTH_INFO_REQUEST,u(l,c,f),f+=4,e&&(l.write(e,f,c,"utf8"),f+=c),u(l,h,f),f+=4,t&&(l.write(t,f,h,"utf8"),f+=h),u(l,0,f),f+=4,u(l,r.length,f),f+=4,o=0,s=r.length;o<s;++o)n=r[o],i=Buffer.byteLength(n.prompt),u(l,i,f),f+=4,i&&(l.write(n.prompt,f,i,"utf8"),f+=i),l[f++]=n.echo?1:0;return this.debug("DEBUG: Outgoing: Writing USERAUTH_INFO_REQUEST"),Se(this,l)};var Te="function"==typeof i.randomFillSync?i.randomFillSync:function(e,t,r){i.randomBytes(r).copy(e,t)};function Ae(e,t){switch(t){case"ssh-dss":return m(e);case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return v(e)}return e}var Ue="function"==typeof i.timingSafeEqual?function(e,t){return e.length!==t.length?(i.timingSafeEqual(e,e),!1):i.timingSafeEqual(e,t)}:function(e,t){var r;e.length===t.length?r=0:(r=1,t=e);for(var i=0,n=e.length;i<n;++i)r|=e[i]^t[i];return 0===r};function Be(e,t){switch(e){case"curve25519-sha256":case"curve25519-sha256@libssh.org":if(!N)break;return this.type="25519",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp256":return this.type="ecdh",this.name="prime256v1",this.hash="sha256",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp384":return this.type="ecdh",this.name="secp384r1",this.hash="sha384",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"ecdh-sha2-nistp521":return this.type="ecdh",this.name="secp521r1",this.hash="sha512",this.pktInit="KEXECDH_INIT",void(this.pktReply="KEXECDH_REPLY");case"diffie-hellman-group1-sha1":return this.type="group",this.name="modp2",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha1":return this.type="group",this.name="modp14",this.hash="sha1",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group14-sha256":return this.type="group",this.name="modp14",this.hash="sha256",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group16-sha512":return this.type="group",this.name="modp16",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group18-sha512":return this.type="group",this.name="modp18",this.hash="sha512",this.pktInit="KEXDH_INIT",void(this.pktReply="KEXDH_REPLY");case"diffie-hellman-group-exchange-sha1":return this.type="groupex",this.hash="sha1",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null);case"diffie-hellman-group-exchange-sha256":return this.type="groupex",this.hash="sha256",this.pktInit="KEXDH_GEX_REQ",this.pktReply="KEXDH_GEX_REPLY",this._prime=null,void(this._generator=null)}throw new Error("Unsupported key exchange algorithm: "+e)}function Re(e){for(var t,r=0,i=e.length;0===e[r];)++r,--i;return 128&e[r]?((t=Buffer.allocUnsafe(1+i))[0]=0,e.copy(t,1,r),e=t):i!==e.length&&(t=Buffer.allocUnsafe(i),e.copy(t,0,r),e=t),e}Be.prototype.setDHParams=function(e,t){if("groupex"===this.type){if(!Buffer.isBuffer(e))throw new Error("Invalid prime value");if(!Buffer.isBuffer(t))throw new Error("Invalid generator value");this._prime=e,this._generator=t}},Be.prototype.getDHParams=function(){if("groupex"===this.type&&this._kex)return{prime:Re(this._kex.getPrime()),generator:Re(this._kex.getGenerator())}},Be.prototype.generateKeys=function(){switch(this.type){case"25519":this._keys||(this._keys=i.generateKeyPairSync("x25519"));break;case"ecdh":this._kex||(this._kex=i.createECDH(this.name),this._public=this._kex.generateKeys());break;case"group":case"groupex":this._kex||(this.name?this._kex=i.createDiffieHellmanGroup(this.name):this._prime&&this._generator&&(this._kex=i.createDiffieHellman(this._prime,this._generator)),this._kex&&(this._public=this._kex.generateKeys()))}},Be.prototype.getPublicKey=function(){var e;switch(this.generateKeys(),this.type){case"25519":return(e=this._keys.publicKey.export({type:"spki",format:"der"})).slice(-32);case"ecdh":case"group":case"groupex":e=this._public}if(e)return this.convertPublicKey(e)},Be.prototype.convertPublicKey=function(e){for(var t,r=0,i=e.length;0===e[r];)++r,--i;if("25519"===this.type){if(32===e.length)return e}else if(128&e[r])return(t=Buffer.allocUnsafe(1+i))[0]=0,e.copy(t,1,r),t;return i!==e.length&&(t=Buffer.allocUnsafe(i),e.copy(t,0,r),e=t),e},Be.prototype.computeSecret=function(e){switch(this.generateKeys(),this.type){case"25519":try{var t=new h.Writer;return t.startSequence(),t.startSequence(),t.writeOID("1.3.101.110"),t.endSequence(),t.startSequence(h.BitString),t.writeByte(0),t._ensure(e.length),e.copy(t._buf,t._offset,0,e.length),t._offset+=e.length,t.endSequence(),t.endSequence(),Re(i.diffieHellman({privateKey:this._keys.privateKey,publicKey:i.createPublicKey({key:t.buffer,type:"spki",format:"der"})}))}catch(e){return e}break;case"ecdh":case"group":case"groupex":try{return Re(this._kex.computeSecret(e))}catch(e){return e}}},e.exports=he,e.exports._send=Se},4264:(e,t,r)=>{var i=r(8304).Ber,n=r(8128).readUInt32BE,s=r(8128).writeUInt32BE;function o(e,t,r,i,s,o){r&&!Buffer.isBuffer(r)&&"string"!=typeof r&&("number"==typeof s&&(o=s),s=i,i=r,r=void 0),t||(t=0);var a,c,h=e.length,f=h-t;return t<0||t>=h||f<4||(a=n(e,t))>(o||Infinity)||f<4+a?(i&&i._cleanup(s),!1):(c=(t+=4)+a,e._pos=c,r?Buffer.isBuffer(r)?(e.copy(r,0,t,c),r):e.toString(r,t,c):e.slice(t,c))}e.exports={iv_inc:function(e){var t=12,r=0;do{if(255!==(r=e[--t]))return void(e[t]=++r);e[t]=0}while(t>4)},readInt:function(e,t,r,i){var s=e.length;return t<0||t>=s||s-t<4?(r&&r._cleanup(i),!1):n(e,t)},readString:o,parseKey:r(4368).parseKey,sigSSHToASN1:function(e,t,r,n){var s;switch(t){case"ssh-dss":if(e.length>40)return e;(s=new i.Writer).startSequence();var a=e.slice(0,20),c=e.slice(20);if(128&a[0]){var h=Buffer.allocUnsafe(21);h[0]=0,a.copy(h,1),a=h}else 0!==a[0]||128&a[1]||(a=a.slice(1));if(128&c[0]){var f=Buffer.allocUnsafe(21);f[0]=0,c.copy(f,1),c=f}else 0!==c[0]||128&c[1]||(c=c.slice(1));return s.writeBuffer(a,i.Integer),s.writeBuffer(c,i.Integer),s.endSequence(),s.buffer;case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":return!1!==(a=o(e,0,r,n))&&!1!==(c=o(e,e._pos,r,n))&&((s=new i.Writer).startSequence(),s.writeBuffer(a,i.Integer),s.writeBuffer(c,i.Integer),s.endSequence(),s.buffer);default:return e}},DSASigBERToBare:function(e){if(e.length<=40)return e;var t=new i.Reader(e);t.readSequence();var r=t.readString(i.Integer,!0),n=t.readString(i.Integer,!0),s=0,o=0;if(r.length<20){var a=Buffer.allocUnsafe(20);r.copy(a,1),(r=a)[0]=0}if(n.length<20){var c=Buffer.allocUnsafe(20);n.copy(c,1),(n=c)[0]=0}r.length>20&&0===r[0]&&(s=1),n.length>20&&0===n[0]&&(o=1);var h=Buffer.allocUnsafe(r.length-s+(n.length-o));return r.copy(h,0,s),n.copy(h,r.length-s,o),h},ECDSASigASN1ToSSH:function(e){if(0===e[0])return e;var t=new i.Reader(e);t.readSequence();var r=t.readString(i.Integer,!0),n=t.readString(i.Integer,!0);if(null===r||null===n)return!1;var o=Buffer.allocUnsafe(4+r.length+4+n.length);return s(o,r.length,0),r.copy(o,4),s(o,n.length,4+r.length),n.copy(o,8+r.length),o}}},5248:(e,t,r)=>{var i=r(970).inherits,n=r(8378).Duplex,s=r(8378).Readable,o=r(8378).Writable,a=r(6728).constants.CHANNEL_EXTENDED_DATATYPE.STDERR,c=2097152,h=c/2,f=["CHANNEL_EOF","CHANNEL_CLOSE","CHANNEL_DATA","CHANNEL_EXTENDED_DATA","CHANNEL_WINDOW_ADJUST","CHANNEL_SUCCESS","CHANNEL_FAILURE","CHANNEL_REQUEST"],u=f.length;function l(e,t,r){var i={highWaterMark:c,allowHalfOpen:!r||r&&!1!==r.allowHalfOpen};this.allowHalfOpen=i.allowHalfOpen,n.call(this,i);var o=this,a=r&&r.server;this.server=a,this.type=e.type,this.subtype=void 0;var l,g,E,m,v,y=this.incoming=e.incoming,_=y.id,w=this.outgoing=e.outgoing,b=this._callbacks=[];this._client=t,this._hasX11=!1;var S=t._channels,k=t._sshstream;function T(){o._waitClientDrain&&(o._waitClientDrain=!1,o._waitWindow||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))}function A(){o.eof(),(a||!a&&!o.allowHalfOpen)&&o.close(),o.writable=!1}function U(){o.readable=!1}t._sock.on("drain",T),k.once("CHANNEL_EOF:"+_,(function(){"open"===y.state&&(y.state="eof",o.readable&&o.push(null),!a&&o.stderr.readable&&o.stderr.push(null))})).once("CHANNEL_CLOSE:"+_,(function(){if("closed"!==y.state){y.state="closed",o.readable&&o.push(null),a&&o.stderr.writable?o.stderr.end():!a&&o.stderr.readable&&o.stderr.push(null),"open"!==w.state&&"eof"!==w.state||o.close(),"closing"===w.state&&(w.state="closed"),delete S[_];var e=o._writableState;t._sock.removeListener("drain",T),e.ending||e.finished||o.end(),o._callbacks=[];for(var r=0;r<b.length;++r)b[r](!0);for(b=o._callbacks,a?o.readable?o.once("end",(function(){o.emit("close")})):o.emit("close"):(o.readable?o.once("end",(function(){null===l?o.emit("close",l,g,E,m,v):o.emit("close",l)})):null===l?o.emit("close",l,g,E,m,v):o.emit("close",l),o.stderr.readable?o.stderr.once("end",(function(){o.stderr.emit("close")})):o.stderr.emit("close")),r=0;r<u;++r)k.removeAllListeners(f[r]+":"+_)}})).on("CHANNEL_DATA:"+_,(function(e){0!==y.window&&(y.window-=e.length,o.push(e)?y.window<=h&&p(o):o._waitChanDrain=!0)})).on("CHANNEL_WINDOW_ADJUST:"+_,(function(e){w.window+=e,o._waitWindow&&(o._waitWindow=!1,o._waitClientDrain||(o._chunk?o._write(o._chunk,null,o._chunkcb):o._chunkcb?o._chunkcb():o._chunkErr?o.stderr._write(o._chunkErr,null,o._chunkcbErr):o._chunkcbErr&&o._chunkcbErr()))})).on("CHANNEL_SUCCESS:"+_,(function(){a?(k._kalast=Date.now(),k._kacnt=0):t._resetKA(),b.length&&b.shift()(!1)})).on("CHANNEL_FAILURE:"+_,(function(){a?(k._kalast=Date.now(),k._kacnt=0):t._resetKA(),b.length&&b.shift()(!0)})).on("CHANNEL_REQUEST:"+_,(function(e){if(!a){if("exit-status"===e.request)return void o.emit("exit",l=e.code);if("exit-signal"===e.request)return void o.emit("exit",l=null,g="SIG"+e.signal,E=e.coredump,m=e.description,v=e.lang)}e.wantReply&&k.channelFailure(w.id)})),this.stdin=this.stdout=this,a?this.stderr=new d(this):(this.stderr=new s(i),this.stderr._read=function(e){o._waitChanDrain&&(o._waitChanDrain=!1,y.window<=h&&p(o))},k.on("CHANNEL_EXTENDED_DATA:"+_,(function(e,t){0!==y.window&&(y.window-=t.length,o.stderr.push(t)?y.window<=h&&p(o):o._waitChanDrain=!0)}))),this._waitClientDrain=!1,this._waitWindow=!1,this._waitChanDrain=!1,this._chunk=void 0,this._chunkcb=void 0,this._chunkErr=void 0,this._chunkcbErr=void 0,this.on("finish",A).on("prefinish",A),this.on("end",U).on("close",U)}function p(e){if("closed"===e.outgoing.state)return!0;var t=c-e.incoming.window;return t<=0||(e.incoming.window+=t,e._client._sshstream.channelWindowAdjust(e.outgoing.id,t))}function d(e){o.call(this,{highWaterMark:c}),this._channel=e}i(l,n),l.prototype.eof=function(){var e=!0,t=this.outgoing;return"open"===t.state&&(t.state="eof",e=this._client._sshstream.channelEOF(t.id)),e},l.prototype.close=function(){var e=!0,t=this.outgoing;return"open"!==t.state&&"eof"!==t.state||(t.state="closing",e=this._client._sshstream.channelClose(t.id)),e},l.prototype._read=function(e){this._waitChanDrain&&(this._waitChanDrain=!1,this.incoming.window<=h&&p(this))},l.prototype._write=function(e,t,r){var i,n,s,o=this._client._sshstream,a=this.outgoing,c=a.packetSize,h=a.id,f=a.window,u=e.length,l=0;if("open"===a.state){for(;u-l>0&&f>0;)if((s=u-l)>f&&(s=f),s>c&&(s=c),i=o.channelData(h,e.slice(l,l+s)),l+=s,f-=s,!i){this._waitClientDrain=!0,this._chunk=void 0,this._chunkcb=r;break}if(a.window=f,u-l>0)return 0===f&&(this._waitWindow=!0),l>0?(n=Buffer.allocUnsafe(u-l),e.copy(n,0,l),this._chunk=n):this._chunk=e,void(this._chunkcb=r);this._waitClientDrain||r()}},l.prototype.destroy=function(){this.end()},l.prototype.setWindow=function(e,t,r,i){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||"shell"!==this.subtype&&"exec"!==this.subtype||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.windowChange(this.outgoing.id,e,t,r,i)},l.prototype.signal=function(e){if(this.server)throw new Error("Client-only method called in server mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||this._client._sshstream.signal(this.outgoing.id,e)},l.prototype.exit=function(e,t,r){if(!this.server)throw new Error("Server-only method called in client mode");return"session"!==this.type||!this.writable||"open"!==this.outgoing.state||("number"==typeof e?this._client._sshstream.exitStatus(this.outgoing.id,e):this._client._sshstream.exitSignal(this.outgoing.id,e,t,r))},l.MAX_WINDOW=c,l.PACKET_SIZE=32768,i(d,o),d.prototype._write=function(e,t,r){var i,n,s,o=this._channel,c=o._client._sshstream,h=o.outgoing,f=h.packetSize,u=h.id,l=h.window,p=e.length,d=0;if("open"===o.outgoing.state){for(;p-d>0&&l>0;)if((s=p-d)>l&&(s=l),s>f&&(s=f),i=c.channelExtData(u,e.slice(d,d+s),a),d+=s,l-=s,!i){o._waitClientDrain=!0,o._chunkErr=void 0,o._chunkcbErr=r;break}if(h.window=l,p-d>0)return 0===l&&(o._waitWindow=!0),d>0?(n=Buffer.allocUnsafe(p-d),e.copy(n,0,d),o._chunkErr=n):o._chunkErr=e,void(o._chunkcbErr=r);o._waitClientDrain||r()}},e.exports=l},4784:(e,t,r)=>{var i=r(970).inherits,n=r(467).EventEmitter;function s(e){var t=this;n.call(this),this._stream=e,e.on("error",(function(e){t.emit("error",e)})).on("end",(function(){t.emit("end")})).on("close",(function(){t.emit("close")})).on("continue",(function(){t.emit("continue")}))}i(s,n),s.prototype.end=function(){return this._stream.end()},s.prototype.createReadStream=function(e,t){return this._stream.createReadStream(e,t)},s.prototype.createWriteStream=function(e,t){return this._stream.createWriteStream(e,t)},s.prototype.open=function(e,t,r,i){return this._stream.open(e,t,r,i)},s.prototype.close=function(e,t){return this._stream.close(e,t)},s.prototype.read=function(e,t,r,i,n,s){return this._stream.readData(e,t,r,i,n,s)},s.prototype.write=function(e,t,r,i,n,s){return this._stream.writeData(e,t,r,i,n,s)},s.prototype.fastGet=function(e,t,r,i){return this._stream.fastGet(e,t,r,i)},s.prototype.fastPut=function(e,t,r,i){return this._stream.fastPut(e,t,r,i)},s.prototype.readFile=function(e,t,r){return this._stream.readFile(e,t,r)},s.prototype.writeFile=function(e,t,r,i){return this._stream.writeFile(e,t,r,i)},s.prototype.appendFile=function(e,t,r,i){return this._stream.appendFile(e,t,r,i)},s.prototype.exists=function(e,t){return this._stream.exists(e,t)},s.prototype.unlink=function(e,t){return this._stream.unlink(e,t)},s.prototype.rename=function(e,t,r){return this._stream.rename(e,t,r)},s.prototype.mkdir=function(e,t,r){return this._stream.mkdir(e,t,r)},s.prototype.rmdir=function(e,t){return this._stream.rmdir(e,t)},s.prototype.readdir=function(e,t,r){return this._stream.readdir(e,t,r)},s.prototype.fstat=function(e,t){return this._stream.fstat(e,t)},s.prototype.stat=function(e,t){return this._stream.stat(e,t)},s.prototype.lstat=function(e,t){return this._stream.lstat(e,t)},s.prototype.opendir=function(e,t){return this._stream.opendir(e,t)},s.prototype.setstat=function(e,t,r){return this._stream.setstat(e,t,r)},s.prototype.fsetstat=function(e,t,r){return this._stream.fsetstat(e,t,r)},s.prototype.futimes=function(e,t,r,i){return this._stream.futimes(e,t,r,i)},s.prototype.utimes=function(e,t,r,i){return this._stream.utimes(e,t,r,i)},s.prototype.fchown=function(e,t,r,i){return this._stream.fchown(e,t,r,i)},s.prototype.chown=function(e,t,r,i){return this._stream.chown(e,t,r,i)},s.prototype.fchmod=function(e,t,r){return this._stream.fchmod(e,t,r)},s.prototype.chmod=function(e,t,r){return this._stream.chmod(e,t,r)},s.prototype.readlink=function(e,t){return this._stream.readlink(e,t)},s.prototype.symlink=function(e,t,r){return this._stream.symlink(e,t,r)},s.prototype.realpath=function(e,t){return this._stream.realpath(e,t)},s.prototype.ext_openssh_rename=function(e,t,r){return this._stream.ext_openssh_rename(e,t,r)},s.prototype.ext_openssh_statvfs=function(e,t){return this._stream.ext_openssh_statvfs(e,t)},s.prototype.ext_openssh_fstatvfs=function(e,t){return this._stream.ext_openssh_fstatvfs(e,t)},s.prototype.ext_openssh_hardlink=function(e,t,r){return this._stream.ext_openssh_hardlink(e,t,r)},s.prototype.ext_openssh_fsync=function(e,t){return this._stream.ext_openssh_fsync(e,t)},e.exports=s},1728:(e,t,r)=>{var i=r(5256).Socket,n=r(467).EventEmitter,s=r(970).inherits,o=r(7072),a=r(2058),c=r(1984),h=r(9224).readUInt32BE,f=r(9224).writeUInt32BE,u=r(9224).writeUInt32LE,l=/^\!<socket >(\d+) s ([A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8}\-[A-Z0-9]{8})/,p=/^[/\\][/\\]\.[/\\]pipe[/\\].+/;if(e.exports=function(e,t,r,n,s){var o,d,g,m,v,y,_,w,b=0,S=Buffer.isBuffer(t),k=0,T=0,A=0,U=0,B=!1;function R(){var e;if(S){var r=9;e=Buffer.allocUnsafe(9+b+4+m+4),f(e,e.length-4,0),e[4]=13,f(e,b,5),t.copy(e,r),f(e,m,r+=b),n.copy(e,r+=4),f(e,0,r+=m),o.write(e)}else o.write(Buffer.from([0,0,0,1,11]))}function N(e){for(var r=0,i=e.length;r<i;++r)if(void 0===v)5==++k&&(v=e[r],k=0);else if(14===v)if(g){if(g[k]=e[r],++k===T)return o.removeAllListeners("data"),o.destroy()}else T<<=8,T+=e[r],4==++k&&(g=Buffer.allocUnsafe(T),k=0);else if(12===v)if(void 0===y){if(A<<=8,A+=e[r],4==++k&&(y=new Array(A),k=0,0===A))return o.removeAllListeners("data"),o.destroy()}else if(t)if(!1===B){if(t[k]=e[r],++k===b&&(y[A-1]=t,b=0,k=0,B=!0,0==--A))return t=void 0,o.removeAllListeners("data"),o.destroy()}else!0===B?(U<<=8,U+=e[r],4==++k&&(k=0,U>0?B=U:(t=void 0,B=!1),U=0)):++k===B&&(B=!1,k=0,t=void 0);else b<<=8,b+=e[r],4==++k&&(t=Buffer.allocUnsafe(b),k=0);else if(5===v)return d=S?new Error("Agent unable to sign data"):new Error("Unable to retrieve list of keys from agent"),o.removeAllListeners("data"),o.destroy()}function P(e){d=e}function D(){d?s(d):S&&!g||!S&&!y?s(new Error("Unexpected disconnection from agent")):S&&g?s(void 0,g):!S&&y&&s(void 0,y)}if("function"==typeof t&&"function"==typeof r?(_=t,w=r):S?(b=t.length,m=n.length):(s=t,t=void 0),"win32"!==process.platform||p.test(e))o=new i;else{if("pageant"!==e){var O=!1;return void a.readFile(e,(function t(r,n){if(r)return O?s(new Error("Invalid cygwin unix socket path")):void c.exec('cygpath -w "'+e+'"',(function(r,i,n){if(r||0===i.length)return s(new Error("Invalid cygwin unix socket path"));O=!0,e=i.toString().replace(/[\r\n]/g,""),a.readFile(e,t)}));var f;if(f=l.exec(n.toString("ascii"))){var p,d,g,E,m,v,y=0,_=!1,w=[],b=Buffer.allocUnsafe(12);for(b.fill(0),p=parseInt(f[1],10),d=f[2].replace(/\-/g,""),g=Buffer.allocUnsafe(16),m=0,v=0;v<32;++m,v+=2)g[m]=parseInt(d.substring(v,v+2),16);for(m=0;m<16;m+=4)u(g,h(g,m),m);function S(){y=0,E="secret",o.write(g)}function k(e){y+=e.length,"secret"===E?16===y&&(y=0,E="creds",o.write(b)):"creds"===E&&(_||w.push(e),12===y&&(o.removeListener("connect",S),o.removeListener("data",k),o.removeListener("close",T),_?(I(),o.emit("connect")):(_=!0,b=Buffer.concat(w),u(b,process.pid,0),o.destroy(),A())))}function T(){s(new Error("Problem negotiating cygwin unix socket security"))}function A(){(o=new i).once("connect",S),o.on("data",k),o.once("close",T),o.connect(p)}A()}else s(new Error("Malformed cygwin unix socket file"))}))}o=new E}function I(){var e;_||w?(o.once("connect",(function(){e=_();var t=!1;function r(){t||(o.destroy(),t=!0)}e.once("end",r).once("close",r).on("data",(function(e){o.write(e)})),o.on("data",(function(t){e.write(t)}))})),o.once("close",(function(){e||w()}))):(o.once("connect",R),o.on("data",N),o.once("error",P),o.once("close",D))}I(),o.connect(e)},"win32"===process.platform){var d={},g=o.resolve(__dirname,"..","util/pagent.exe");function E(){this.proc=void 0,this.buffer=null}d[10]=new Error("Invalid pagent.exe arguments"),d[11]=new Error("Pageant is not running"),d[12]=new Error("pagent.exe could not create an mmap"),d[13]=new Error("pagent.exe could not set mode for stdin"),d[14]=new Error("pagent.exe could not set mode for stdout"),d[15]=new Error("pagent.exe did not get expected input payload"),s(E,n),E.prototype.write=function(e){if(null===this.buffer?this.buffer=e:this.buffer=Buffer.concat([this.buffer,e],this.buffer.length+e.length),!(this.buffer.length<4)){var t=h(this.buffer,0);if(!(this.buffer.length-4<t)){e=this.buffer.slice(0,4+t),this.buffer.length>4+t?this.buffer=this.buffer.slice(4+t):this.buffer=null;var r,i=this,n=!1;(r=this.proc=c.spawn(g,[e.length])).stdout.on("data",(function(e){i.emit("data",e)})),r.once("error",(function(e){n||(n=!0,i.emit("error",e))})),r.once("close",(function(e){i.proc=void 0,d[e]&&!n&&(n=!0,i.emit("error",d[e])),i.emit("close",n)})),r.stdin.end(e)}}},E.prototype.end=E.prototype.destroy=function(){this.buffer=null,this.proc&&(this.proc.kill(),this.proc=void 0)},E.prototype.connect=function(){this.emit("connect")}}},9224:e=>{e.exports={readUInt32BE:function(e,t){return 16777216*e[t++]+65536*e[t++]+256*e[t++]+e[t]},writeUInt32BE:function(e,t,r){return e[r++]=t>>>24,e[r++]=t>>>16,e[r++]=t>>>8,e[r++]=t,r},writeUInt32LE:function(e,t,r){return e[r++]=t,e[r++]=t>>>8,e[r++]=t>>>16,e[r++]=t>>>24,r}}},461:(e,t,r)=>{var i=r(7968),n=r(5256).Socket,s=r(9880).lookup,o=r(467).EventEmitter,a=r(970).inherits,c=i.getHashes(),h=r(6728),f=h.SSH2Stream,u=h.SFTPStream,l=h.constants,p=l.BUGS,d=l.ALGORITHMS,g=l.EDDSA_SUPPORTED,E=h.utils.parseKey,m=r(2492),v=r(5248),y=r(1728),_=r(4784),w=r(9224).readUInt32BE,b=Math.pow(2,32)-1,S=/^OpenSSH_(?:(?![0-4])\d)|(?:\d{2,})/,k=function(e){};function T(){if(!(this instanceof T))return new T;o.call(this),this.config={host:void 0,port:void 0,localAddress:void 0,localPort:void 0,forceIPv4:void 0,forceIPv6:void 0,keepaliveCountMax:void 0,keepaliveInterval:void 0,readyTimeout:void 0,username:void 0,password:void 0,privateKey:void 0,tryKeyboard:void 0,agent:void 0,allowAgentFwd:void 0,authHandler:void 0,hostHashAlgo:void 0,hostHashCb:void 0,strictVendor:void 0,debug:void 0},this._readyTimeout=void 0,this._channels=void 0,this._callbacks=void 0,this._forwarding=void 0,this._forwardingUnix=void 0,this._acceptX11=void 0,this._agentFwdEnabled=void 0,this._curChan=void 0,this._remoteVer=void 0,this._sshstream=void 0,this._sock=void 0,this._resetKA=void 0}function A(e,t,r,i){var n=U(e),s=v.MAX_WINDOW,o=v.PACKET_SIZE,a=!0;if(!1===n)return i(new Error("No free channels available"));"function"==typeof r&&(i=r,r={}),e._channels[n]=i;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+n,h).once("CHANNEL_OPEN_FAILURE:"+n,f).once("CHANNEL_CLOSE:"+n,f),"session"===t?a=c.session(n,s,o):"direct-tcpip"===t?a=c.directTcpip(n,s,o,r):"direct-streamlocal@openssh.com"===t&&(a=c.openssh_directStreamLocal(n,s,o,r)),a;function h(r){c.removeListener("CHANNEL_OPEN_FAILURE:"+n,f),c.removeListener("CHANNEL_CLOSE:"+n,f);var a={type:t,incoming:{id:n,window:s,packetSize:o,state:"open"},outgoing:{id:r.sender,window:r.window,packetSize:r.packetSize,state:"open"}};i(void 0,new v(a,e))}function f(t){var r;c.removeListener("CHANNEL_OPEN_CONFIRMATION:"+n,h),c.removeListener("CHANNEL_OPEN_FAILURE:"+n,f),c.removeListener("CHANNEL_CLOSE:"+n,f),delete e._channels[n],t instanceof Error?r=t:"object"==typeof t&&null!==t?((r=new Error("(SSH) Channel open failure: "+t.description)).reason=t.reason,r.lang=t.lang):(r=new Error("(SSH) Channel open failure: server closed channel unexpectedly")).reason=r.lang="",i(r)}}function U(e){if(e._curChan<b)return++e._curChan;for(var t=0,r=e._channels;t<b;++t)if(!r[t])return t;return!1}function B(e,t,r){var i={single:!1,protocol:"MIT-MAGIC-COOKIE-1",cookie:void 0,screen:0};"function"==typeof t?r=t:"object"==typeof t&&null!==t&&("boolean"==typeof t.single&&(i.single=t.single),"number"==typeof t.screen&&(i.screen=t.screen),"string"==typeof t.protocol&&(i.protocol=t.protocol),"string"==typeof t.cookie?i.cookie=t.cookie:Buffer.isBuffer(t.cookie)&&(i.cookie=t.cookie.toString("hex"))),void 0===i.cookie&&(i.cookie=O());var n="function"==typeof r;return"open"!==e.outgoing.state?(n&&r(new Error("Channel is not open")),!0):(n&&e._callbacks.push((function(t){if(t)return r(!0!==t?t:new Error("Unable to request X11"));e._hasX11=!0,++e._client._acceptX11,e.once("close",(function(){e._client._acceptX11&&--e._client._acceptX11})),r()})),e._client._sshstream.x11Forward(e.outgoing.id,i,n))}function R(e,t,r){var i=24,n=80,s=640,o=480,a="vt100",c=null;"function"==typeof t?r=t:"object"==typeof t&&null!==t&&("number"==typeof t.rows&&(i=t.rows),"number"==typeof t.cols&&(n=t.cols),"number"==typeof t.width&&(s=t.width),"number"==typeof t.height&&(o=t.height),"string"==typeof t.term&&(a=t.term),"object"==typeof t.modes&&(c=t.modes));var h="function"==typeof r;return"open"!==e.outgoing.state?(h&&r(new Error("Channel is not open")),!0):(h&&e._callbacks.push((function(e){if(e)return r(!0!==e?e:new Error("Unable to request a pseudo-terminal"));r()})),e._client._sshstream.pty(e.outgoing.id,i,n,o,s,a,c,h))}function N(e,t){var r="function"==typeof t;return"open"!==e.outgoing.state?(r&&t(new Error("Channel is not open")),!0):e._client._agentFwdEnabled?(r&&t(!1),!0):(e._client._agentFwdEnabled=!0,e._callbacks.push((function(i){if(i)return e._client._agentFwdEnabled=!1,void(r&&t(!0!==i?i:new Error("Unable to request agent forwarding")));r&&t()})),e._client._sshstream.openssh_agentForward(e.outgoing.id,!0))}function P(e,t){if("open"!==e.outgoing.state)return!0;for(var r,i,n=!0,s=Object.keys(t||{}),o=0,a=s.length;o<a;++o)i=t[r=s[o]],n=e._client._sshstream.env(e.outgoing.id,r,i,!1);return n}function D(e,t,r){return"open"!==e.outgoing.state?(r(new Error("Channel is not open")),!0):(e._callbacks.push((function(i){if(i)return r(!0!==i?i:new Error("Unable to start subsystem: "+t));e.subtype="subsystem",r(void 0,e)})),e._client._sshstream.subsystem(e.outgoing.id,t,!0))}a(T,o),T.prototype.connect=function(e){var t=this;if(this._sock&&this._sock.writable)return this.once("close",(function(){t.connect(e)})),void this.end();this.config.host=e.hostname||e.host||"localhost",this.config.port=e.port||22,this.config.localAddress="string"==typeof e.localAddress?e.localAddress:void 0,this.config.localPort="string"==typeof e.localPort||"number"==typeof e.localPort?e.localPort:void 0,this.config.forceIPv4=e.forceIPv4||!1,this.config.forceIPv6=e.forceIPv6||!1,this.config.keepaliveCountMax="number"==typeof e.keepaliveCountMax&&e.keepaliveCountMax>=0?e.keepaliveCountMax:3,this.config.keepaliveInterval="number"==typeof e.keepaliveInterval&&e.keepaliveInterval>0?e.keepaliveInterval:0,this.config.readyTimeout="number"==typeof e.readyTimeout&&e.readyTimeout>=0?e.readyTimeout:2e4;var r,o={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var a,h;if(h=e.algorithms.kex,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_KEX,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported key exchange algorithm: "+h[r]);o.kex=h}if(h=e.algorithms.cipher,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_CIPHER,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported cipher algorithm: "+h[r]);o.cipher=h}if(h=e.algorithms.serverHostKey,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_SERVER_HOST_KEY,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported server host key algorithm: "+h[r]);o.serverHostKey=h}if(h=e.algorithms.hmac,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_HMAC,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported HMAC algorithm: "+h[r]);o.hmac=h}if(h=e.algorithms.compress,Array.isArray(h)&&h.length>0){for(a=d.SUPPORTED_COMPRESS,r=0;r<h.length;++r)if(-1===a.indexOf(h[r]))throw new Error("Unsupported compression algorithm: "+h[r]);o.compress=h}}if(void 0===o.compress&&(e.compress?(o.compress=["zlib@openssh.com","zlib"],"force"!==e.compress&&o.compress.push("none")):!1===e.compress&&(o.compress=["none"])),"string"==typeof e.username)this.config.username=e.username;else{if("string"!=typeof e.user)throw new Error("Invalid username");this.config.username=e.user}this.config.password="string"==typeof e.password?e.password:void 0,this.config.privateKey="string"==typeof e.privateKey||Buffer.isBuffer(e.privateKey)?e.privateKey:void 0,this.config.localHostname="string"==typeof e.localHostname&&e.localHostname.length?e.localHostname:void 0,this.config.localUsername="string"==typeof e.localUsername&&e.localUsername.length?e.localUsername:void 0,this.config.tryKeyboard=!0===e.tryKeyboard,this.config.agent="string"==typeof e.agent&&e.agent.length?e.agent:void 0,this.config.allowAgentFwd=!0===e.agentForward&&void 0!==this.config.agent;var u=this.config.authHandler="function"==typeof e.authHandler?e.authHandler:void 0;this.config.strictVendor="boolean"!=typeof e.strictVendor||e.strictVendor;var p=this.config.debug="function"==typeof e.debug?e.debug:k;if(!0===e.agentForward&&!this.config.allowAgentFwd)throw new Error("You must set a valid agent path to allow agent forwarding");var m,_=this._callbacks=[];if(this._channels={},this._forwarding={},this._forwardingUnix={},this._acceptX11=0,this._agentFwdEnabled=!1,this._curChan=-1,this._remoteVer=void 0,this.config.privateKey){if((m=E(this.config.privateKey,e.passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+m.message);if(Array.isArray(m)&&(m=m[0]),null===m.getPrivatePEM())throw new Error("privateKey value does not contain a (valid) private key")}var b=this._sshstream=new f({algorithms:o,debug:p===k?void 0:p}),S=this._sock=e.sock||new n;this._sock.stderr&&"function"==typeof this._sock.stderr.resume&&this._sock.stderr.resume();var T,A,B=this.config.keepaliveInterval,R=this.config.keepaliveCountMax,N=0;function P(){if(++N>R){if(clearInterval(T),S.readable){var e=new Error("Keepalive timeout");e.level="client-timeout",t.emit("error",e),S.destroy()}}else S.writable?(_.push(D),b.ping()):clearInterval(T)}function D(){B>0&&(N=0,clearInterval(T),S.writable&&(T=setInterval(P,B)))}if(this._resetKA=D,b.on("USERAUTH_BANNER",(function(e){t.emit("banner",e)})),S.on("connect",(function(){p("DEBUG: Client: Connected"),t.emit("connect"),e.sock||b.pipe(S).pipe(b)})).on("timeout",(function(){t.emit("timeout")})).on("error",(function(e){clearTimeout(t._readyTimeout),e.level="client-socket",t.emit("error",e)})).on("end",(function(){b.unpipe(S),clearTimeout(t._readyTimeout),clearInterval(T),t.emit("end")})).on("close",(function(){b.unpipe(S),clearTimeout(t._readyTimeout),clearInterval(T),t.emit("close");var e=_,i=new Error("No response from server");for(_=t._callbacks=[],r=0;r<e.length;++r)e[r](i);var n=t._channels,s=Object.keys(n);for(t._channels={},r=0;r<s.length;++r){var o,a=b.emit("CHANNEL_OPEN_FAILURE:"+s[r],i),c=b.emit("CHANNEL_CLOSE:"+s[r]);a||c||!(o=n[s[r]])||"function"!=typeof o||o(i)}})),b.on("drain",(function(){t.emit("drain")})).once("header",(function(e){t._remoteVer=e.versions.software,e.greeting&&t.emit("greeting",e.greeting)})).on("continue",(function(){t.emit("continue")})).on("error",(function(e){void 0===e.level?e.level="protocol":"handshake"===e.level&&clearTimeout(t._readyTimeout),t.emit("error",e)})).on("end",(function(){S.resume()})),"function"==typeof e.hostVerifier){if(-1===c.indexOf(e.hostHash))throw new Error("Invalid host hash algorithm: "+e.hostHash);var O=e.hostVerifier,I=i.createHash(e.hostHash);b.once("fingerprint",(function(e,t){I.update(e);var r=O(I.digest("hex"),t);void 0!==r&&t(r)}))}var C,L=null,H=null,x=0,F=["none"];if(void 0!==this.config.password&&F.push("password"),void 0!==m&&F.push("publickey"),void 0!==this.config.agent&&F.push("agent"),this.config.tryKeyboard&&F.push("keyboard-interactive"),void 0!==m&&void 0!==this.config.localHostname&&void 0!==this.config.localUsername&&F.push("hostbased"),void 0===u){var M=0;u=function(e,t,r){return M!==F.length&&F[M++]}}var K=!1;function G(e){if(K=!0,!1===e){b.removeListener("USERAUTH_FAILURE",V),b.removeListener("USERAUTH_PK_OK",j);var r=new Error("All configured authentication methods failed");return r.level="client-authentication",t.emit("error",r),void(b.writable&&t.end())}if(-1===F.indexOf(e))throw new Error("Authentication method not allowed: "+e);switch(A=e){case"password":b.authPassword(t.config.username,t.config.password);break;case"publickey":b.authPK(t.config.username,m),b.once("USERAUTH_PK_OK",j);break;case"hostbased":b.authHostbased(t.config.username,m,t.config.localHostname,t.config.localUsername,(function(e,r){var i=m.sign(e);if(i instanceof Error)return i.message="Error while signing data with privateKey: "+i.message,i.level="client-authentication",t.emit("error",i),W();r(i)}));break;case"agent":y(t.config.agent,(function(e,r){return e?(e.level="agent",t.emit("error",e),C=void 0,W()):0===r.length?(p("DEBUG: Agent: No keys stored in agent"),C=void 0,W()):(C=r,x=0,b.authPK(t.config.username,r[0]),void b.once("USERAUTH_PK_OK",j))}));break;case"keyboard-interactive":b.authKeyboard(t.config.username),b.on("USERAUTH_INFO_REQUEST",X);break;case"none":b.authNone(t.config.username)}}function W(){K=!1;var e=u(H,L,G);K||void 0===e||G(e)}function q(){if("agent"===A){if(x>=C.length)return;++x>=C.length?(p("DEBUG: Agent: No more keys left to try"),p("DEBUG: Client: agent auth failed"),C=void 0,W()):(p("DEBUG: Agent: Trying key #"+(x+1)),b.authPK(t.config.username,C[x]),b.once("USERAUTH_PK_OK",j))}}function X(e,r,i,n){if(0===(Array.isArray(n)?n.length:0))return p("DEBUG: Client: Sending automatic USERAUTH_INFO_RESPONSE"),b.authInfoRes();t.emit("keyboard-interactive",e,r,i,n,(function(e){b.authInfoRes(e)}))}function j(){if("agent"===A){var e=C[x],r=w(e,0),i=e.toString("ascii",4,4+r),n=i.slice(4);switch(i){case"ssh-rsa":case"ssh-dss":case"ecdsa-sha2-nistp256":case"ecdsa-sha2-nistp384":case"ecdsa-sha2-nistp521":break;default:if(g&&"ssh-ed25519"===i)break;return p("DEBUG: Agent: Skipping unsupported key type: "+i),q()}b.authPK(t.config.username,e,(function(r,s){y(t.config.agent,e,n,r,(function(e,r){if(e)e.level="agent",t.emit("error",e);else{var n=w(r,0);if(4+n+4<r.length){if(r.toString("ascii",4,4+n)===i)return s(r.slice(4+n+4));(e=new Error("Agent key/signature type mismatch")).level="agent",t.emit("error",e)}}q()}))}))}else"publickey"===A&&b.authPK(t.config.username,m,(function(e,r){var i=m.sign(e);if(i instanceof Error)return i.message="Error while signing data with privateKey: "+i.message,i.level="client-authentication",t.emit("error",i),W();r(i)}))}function V(e,t){if(b.removeListener("USERAUTH_PK_OK",j),b.removeListener("USERAUTH_INFO_REQUEST",X),"agent"===A)return p("DEBUG: Client: Agent key #"+(x+1)+" failed"),q();p("DEBUG: Client: "+A+" auth failed"),L=t,H=e,W()}if(b.once("USERAUTH_SUCCESS",(function(){b.removeListener("USERAUTH_FAILURE",V),b.removeListener("USERAUTH_INFO_REQUEST",X),D(),clearTimeout(t._readyTimeout),t.emit("ready")})).on("USERAUTH_FAILURE",V),b.once("ready",(function(){b.service("ssh-userauth"),b.once("SERVICE_ACCEPT",(function(e){"ssh-userauth"===e&&W()}))})),b.on("CHANNEL_OPEN",(function(e){!function(e,t){var r,i=!1;function n(){var r={type:t.type,incoming:{id:i,window:v.MAX_WINDOW,packetSize:v.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}},n=new v(r,e);return e._sshstream.channelOpenConfirm(t.sender,i,v.MAX_WINDOW,v.PACKET_SIZE),n}function s(){void 0===r&&(r=!1===i?l.CHANNEL_OPEN_FAILURE.RESOURCE_SHORTAGE:l.CHANNEL_OPEN_FAILURE.CONNECT_FAILED),e._sshstream.channelOpenFail(t.sender,r,"","")}if("forwarded-tcpip"===t.type||"x11"===t.type||"auth-agent@openssh.com"===t.type||"forwarded-streamlocal@openssh.com"===t.type){var o="forwarded-tcpip"===t.type&&void 0===e._forwarding[t.data.destIP+":"+t.data.destPort]||"forwarded-streamlocal@openssh.com"===t.type&&void 0===e._forwardingUnix[t.data.socketPath]||"x11"===t.type&&0===e._acceptX11||"auth-agent@openssh.com"===t.type&&!e._agentFwdEnabled;o?(r=l.CHANNEL_OPEN_FAILURE.ADMINISTRATIVELY_PROHIBITED,e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unexpected channel open for: "+t.type)):!1===(i=U(e))?(e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: no channels available"),o=!0):e._channels[i]=!0,o&&s(),!1!==i&&("forwarded-tcpip"===t.type?(0===t.data.destPort&&(t.data.destPort=e._forwarding[t.data.destIP+":"+t.data.destPort]),e.emit("tcp connection",t.data,n,s)):"x11"===t.type?e.emit("x11",t.data,n,s):"forwarded-streamlocal@openssh.com"===t.type?e.emit("unix connection",t.data,n,s):y(e.config.agent,n,s))}else e.config.debug("DEBUG: Client: Automatic rejection of incoming channel open: unsupported type: "+t.type),r=l.CHANNEL_OPEN_FAILURE.UNKNOWN_CHANNEL_TYPE,s()}(t,e)})),b.on("REQUEST_SUCCESS",(function(e){_.length&&_.shift()(!1,e)})).on("REQUEST_FAILURE",(function(){_.length&&_.shift()(!0)})),b.on("GLOBAL_REQUEST",(function(e,t,r){t&&b.requestFailure()})),e.sock)Z(),b.pipe(S).pipe(b);else{var Y=this.config.host,Q=this.config.forceIPv4,z=this.config.forceIPv6;function $(){Z(),t._sock.connect({host:Y,port:t.config.port,localAddress:t.config.localAddress,localPort:t.config.localPort}),t._sock.setNoDelay(!0),t._sock.setMaxListeners(0),t._sock.setTimeout("number"==typeof e.timeout?e.timeout:0)}p("DEBUG: Client: Trying "+Y+" on port "+this.config.port+" ..."),!Q&&!z||Q&&z?$():s(Y,Q?4:6,(function(e,r,i){if(e){var n=new Error("Error while looking up "+(Q?"IPv4":"IPv6")+" address for host "+Y+": "+e);return clearTimeout(t._readyTimeout),n.level="client-dns",t.emit("error",n),void t.emit("close")}Y=r,$()}))}function Z(){t.config.readyTimeout>0&&(t._readyTimeout=setTimeout((function(){var e=new Error("Timed out while waiting for handshake");e.level="client-timeout",t.emit("error",e),S.destroy()}),t.config.readyTimeout))}},T.prototype.end=function(){return!!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable)&&this._sshstream.disconnect()},T.prototype.destroy=function(){this._sock&&this._sock.destroy()},T.prototype.exec=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");"function"==typeof t&&(r=t,t={});var i=this;return A(this,"session",{allowHalfOpen:!1!==t.allowHalfOpen},(function(n,s){if(n)return r(n);var o=[];function a(e){if(e)return s.close(),r(e);o.length&&o.shift()()}(!0===i.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==i.config.agent)&&o.push((function(){N(s,a)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&P(s,t.env),("object"==typeof t.pty&&null!==t.pty||!0===t.pty)&&o.push((function(){R(s,t.pty,a)})),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){B(s,t.x11,a)}))),o.push((function(){!function(e,t,r,i){if("open"!==e.outgoing.state)return i(new Error("Channel is not open")),!0;e._callbacks.push((function(t){if(t)return i(!0!==t?t:new Error("Unable to exec"));e.subtype="exec",e.allowHalfOpen=!1!==r.allowHalfOpen,i(void 0,e)})),e._client._sshstream.exec(e.outgoing.id,t,!0)}(s,e,t,r)})),o.shift()()}))},T.prototype.shell=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this;return"function"==typeof e?(r=e,e=t=void 0):"function"==typeof t&&(r=t,t=void 0),!e||void 0===e.x11&&void 0===e.env||(t=e,e=void 0),A(this,"session",(function(n,s){if(n)return r(n);var o=[];function a(e){if(e)return s.close(),r(e);o.length&&o.shift()()}(!0===i.config.allowAgentFwd||t&&!0===t.agentForward&&void 0!==i.config.agent)&&o.push((function(){N(s,a)})),!1!==e&&o.push((function(){R(s,e,a)})),"object"==typeof t&&null!==t&&("object"==typeof t.env&&null!==t.env&&P(s,t.env),("object"==typeof t.x11&&null!==t.x11||"number"===t.x11||!0===t.x11)&&o.push((function(){B(s,t.x11,a)}))),o.push((function(){!function(e,t){if("open"!==e.outgoing.state)return t(new Error("Channel is not open")),!0;e._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to open shell"));e.subtype="shell",t(void 0,e)})),e._client._sshstream.shell(e.outgoing.id,!0)}(s,r)})),o.shift()()}))},T.prototype.subsys=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return A(this,"session",(function(r,i){if(r)return t(r);D(i,e,(function(e,r){if(e)return t(e);t(void 0,r)}))}))},T.prototype.sftp=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t=this;return A(this,"session",(function(r,i){if(r)return e(r);D(i,"sftp",(function(r,i){if(r)return e(r);var n=t._sshstream._state.incoming.identRaw,s={debug:t.config.debug},o=new u(s,n);function a(t){o.removeListener("ready",c),i.removeListener("exit",h),e(t)}function c(){o.removeListener("error",a),i.removeListener("exit",h),e(void 0,new _(o))}function h(t,r){o.removeListener("ready",c),o.removeListener("error",a);var i=new Error("number"==typeof t?"Received exit code "+t+" while establishing SFTP session":"Received signal "+r+" while establishing SFTP session");i.code=t,i.signal=r,e(i)}o.once("error",a).once("ready",c).once("close",(function(){i.end()})),i.once("exit",h),o.pipe(i).pipe(o)}))}))},T.prototype.forwardIn=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this,n="function"==typeof r;return n&&this._callbacks.push((function(n,s){if(n)return r(!0!==n?n:new Error("Unable to bind to "+e+":"+t));var o=t;0===t&&s&&s.length>=4&&(o=w(s,0),i._sshstream.remoteBugs&p.DYN_RPORT_BUG||(t=o)),i._forwarding[e+":"+t]=o,r(void 0,o)})),this._sshstream.tcpipForward(e,t,n)},T.prototype.unforwardIn=function(e,t,r){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var i=this,n="function"==typeof r;return n&&this._callbacks.push((function(n){if(n)return r(!0!==n?n:new Error("Unable to unbind from "+e+":"+t));delete i._forwarding[e+":"+t],r()})),this._sshstream.cancelTcpipForward(e,t,n)},T.prototype.forwardOut=function(e,t,r,i,n){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return A(this,"direct-tcpip",{srcIP:e,srcPort:t,dstIP:r,dstPort:i},n)},T.prototype.openssh_noMoreSessions=function(e){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var t="function"==typeof e;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(t&&this._callbacks.push((function(t){if(t)return e(!0!==t?t:new Error("Unable to disable future sessions"));e()})),this._sshstream.openssh_noMoreSessions(t)):(t&&process.nextTick((function(){e(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_forwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var r="function"==typeof t,i=this;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(r&&this._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to bind to "+e));i._forwardingUnix[e]=!0,t()})),this._sshstream.openssh_streamLocalForward(e,r)):(r&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_unforwardInStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");var r="function"==typeof t,i=this;return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?(r&&this._callbacks.push((function(r){if(r)return t(!0!==r?r:new Error("Unable to unbind on "+e));delete i._forwardingUnix[e],t()})),this._sshstream.openssh_cancelStreamLocalForward(e,r)):(r&&process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)},T.prototype.openssh_forwardOutStreamLocal=function(e,t){if(!(this._sock&&this._sock.writable&&this._sshstream&&this._sshstream.writable))throw new Error("Not connected");return!this.config.strictVendor||this.config.strictVendor&&S.test(this._remoteVer)?A(this,"direct-streamlocal@openssh.com",{socketPath:e},t):(process.nextTick((function(){t(new Error("strictVendor enabled and server is not OpenSSH or compatible version"))})),!0)};var O=function(){if("function"==typeof i.randomFillSync){var e=Buffer.alloc(16);return function(){return i.randomFillSync(e,0,16),e.toString("hex")}}return function(){return i.randomBytes(16).toString("hex")}}();T.Client=T,T.Server=r(2188),T.utils=h.utils,T.SFTP_STATUS_CODE=u.STATUS_CODE,T.SFTP_OPEN_MODE=u.OPEN_MODE,T.HTTPAgent=m.SSHTTPAgent,T.HTTPSAgent=m.SSHTTPSAgent,e.exports=T},2492:(e,t,r)=>{var i,n=r(6136).Agent,s=r(8876).Agent,o=r(970).inherits;function a(e,t){var n=e&&e.localAddress||this._defaultSrcIP,s=e&&e.localPort||0,o=e.host,a=e.port;void 0===i&&(i=r(461).Client);var h=new i,f=!1;h.on("ready",(()=>{h.forwardOut(n,s,o,a,((e,r)=>{if(f=!0,e)return h.end(),t(e);r.once("close",(()=>{h.end()})),t(null,function(e){return e.setKeepAlive=c,e.setNoDelay=c,e.setTimeout=c,e.ref=c,e.unref=c,e.destroySoon=e.destroy,e}(r))}))})).on("error",t).on("close",(()=>{f||t(new Error("Unexpected connection loss"))})).connect(this._connectCfg)}function c(){}[n,s].forEach((e=>{function r(t,i){if(!(this instanceof r))return new r(t,i);e.call(this,i),this._connectCfg=t,this._defaultSrcIP=i&&i.srcIP||"localhost"}o(r,e),r.prototype.createConnection=a,t[e===n?"SSHTTPAgent":"SSHTTPSAgent"]=r}))},7788:e=>{function t(e,t){for(var r=t,i=r+1,n=e.length;i<n;r+=1,i+=1)e[r]=e[i];e.pop()}function r(e,r,i){var n=this._streams=[];this._timer=void 0,this._timerInterval=e,this._timerfn=function(){for(var e,s,o=Date.now(),a=0,c=n.length;a<c;++a)if((s=(e=n[a])._kalast)&&o-s>=r)if(++e._kacnt>i){var h=new Error("Keepalive timeout");h.level="client-timeout",e.emit("error",h),e.disconnect(),t(n,a),--a,c=n.length}else e._kalast=o,e.ping()}}r.prototype.start=function(){this._timer&&this.stop(),this._timer=setInterval(this._timerfn,this._timerInterval)},r.prototype.stop=function(){this._timer&&(clearInterval(this._timer),this._timer=void 0)},r.prototype.add=function(e){var t=this._streams,r=this;function i(){e._kalast=Date.now(),e._kacnt=0}e.once("end",(function(){r.remove(e)})).on("packet",i),t[t.length]=e,i(),this._timer||this.start()},r.prototype.remove=function(e){var r=this._streams,i=r.indexOf(e);i>-1&&t(r,i),r.length||this.stop()},e.exports=r},2188:(e,t,r)=>{var i,n=r(5256),s=r(467).EventEmitter,o=s.listenerCount,a=r(970).inherits,c=r(6728),h=c.utils.parseKey,f=c.SSH2Stream,u=c.SFTPStream,l=c.constants,p=l.DISCONNECT_REASON,d=l.CHANNEL_OPEN_FAILURE,g=l.ALGORITHMS,E=r(5248),m=r(7788),v=r(9224).writeUInt32BE,y=Math.pow(2,32)-1,_=10;function w(e,t){if(!(this instanceof w))return new w(e,t);var r,a={"ssh-rsa":null,"ssh-dss":null,"ssh-ed25519":null,"ecdsa-sha2-nistp256":null,"ecdsa-sha2-nistp384":null,"ecdsa-sha2-nistp521":null},c=e.hostKeys;if(!Array.isArray(c))throw new Error("hostKeys must be an array");for(r=0;r<c.length;++r){var u;if((u=Buffer.isBuffer(c[r])||"string"==typeof c[r]?h(c[r]):h(c[r].key,c[r].passphrase))instanceof Error)throw new Error("Cannot parse privateKey: "+u.message);if(Array.isArray(u)&&(u=u[0]),null===u.getPrivatePEM())throw new Error("privateKey value contains an invalid private key");a[u.type]||(a[u.type]=u)}var l={kex:void 0,kexBuf:void 0,cipher:void 0,cipherBuf:void 0,serverHostKey:void 0,serverHostKeyBuf:void 0,hmac:void 0,hmacBuf:void 0,compress:void 0,compressBuf:void 0};if("object"==typeof e.algorithms&&null!==e.algorithms){var d,E;if(E=e.algorithms.kex,Array.isArray(E)&&E.length>0){for(d=g.SUPPORTED_KEX,r=0;r<E.length;++r)if(-1===d.indexOf(E[r]))throw new Error("Unsupported key exchange algorithm: "+E[r]);l.kex=E}if(E=e.algorithms.cipher,Array.isArray(E)&&E.length>0){for(d=g.SUPPORTED_CIPHER,r=0;r<E.length;++r)if(-1===d.indexOf(E[r]))throw new Error("Unsupported cipher algorithm: "+E[r]);l.cipher=E}E=e.algorithms.serverHostKey;var v=!1;if(Array.isArray(E)&&E.length>0){for(d=g.SUPPORTED_SERVER_HOST_KEY,r=E.length-1;r>=0;--r){if(-1===d.indexOf(E[r]))throw new Error("Unsupported server host key algorithm: "+E[r]);a[E[r]]||(v||(E=E.slice(),v=!0),E.splice(r,1))}E.length>0&&(l.serverHostKey=E)}if(E=e.algorithms.hmac,Array.isArray(E)&&E.length>0){for(d=g.SUPPORTED_HMAC,r=0;r<E.length;++r)if(-1===d.indexOf(E[r]))throw new Error("Unsupported HMAC algorithm: "+E[r]);l.hmac=E}if(E=e.algorithms.compress,Array.isArray(E)&&E.length>0){for(d=g.SUPPORTED_COMPRESS,r=0;r<E.length;++r)if(-1===d.indexOf(E[r]))throw new Error("Unsupported compression algorithm: "+E[r]);l.compress=E}}if(void 0===l.serverHostKey){var y=Object.keys(a);for(r=y.length-1;r>=0;--r)a[y[r]]||y.splice(r,1);l.serverHostKey=y}!i&&w.KEEPALIVE_INTERVAL>0&&w.KEEPALIVE_CLIENT_INTERVAL>0&&w.KEEPALIVE_CLIENT_COUNT_MAX>=0&&(i=new m(w.KEEPALIVE_INTERVAL,w.KEEPALIVE_CLIENT_INTERVAL,w.KEEPALIVE_CLIENT_COUNT_MAX));var _=this;s.call(this),"function"==typeof t&&_.on("connection",t);var S,k,T={algorithms:l,hostKeys:a,server:!0};for(r=0,k=(S=Object.keys(e)).length;r<k;++r){var A=S[r];"privateKey"!==A&&"publicKey"!==A&&"passphrase"!==A&&"algorithms"!==A&&"hostKeys"!==A&&"server"!==A&&(T[A]=e[A])}if("function"==typeof T.debug)var U=T.debug,B=Object.keys(T);this._srv=new n.Server((function(e){if(_._connections>=_.maxConnections)e.destroy();else{++_._connections,e.once("close",(function(e){--_._connections,s.read()})).on("error",(function(e){s.reset(),s.emit("error",e)}));var t=T;if(U){t={};for(var r,i=0;i<B.length;++i)t[r=B[i]]=T[r];var n="["+process.hrtime().join(".")+"] ";t.debug=function(e){U(n+e)}}var s=new f(t),a=new b(s,e);e.pipe(s).pipe(e),a.on("error",c),s.once("header",(function(t){if(!s._readableState.ended){if(!o(_,"connection"))return s.disconnect(p.BY_APPLICATION);a.removeListener("error",c),_.emit("connection",a,{ip:e.remoteAddress,family:e.remoteFamily,port:e.remotePort,header:t})}}))}function c(e){}})).on("error",(function(e){_.emit("error",e)})).on("listening",(function(){_.emit("listening")})).on("close",(function(){_.emit("close")})),this._connections=0,this.maxConnections=1/0}function b(e,t){s.call(this);var r=this;this._sshstream=e;var n=this._channels={};this._curChan=-1,this._sock=t,this.noMoreSessions=!1,this.authenticated=!1,e.on("end",(function(){t.resume(),r.emit("end")})).on("close",(function(e){r.emit("close",e)})).on("error",(function(e){r.emit("error",e)})).on("drain",(function(){r.emit("drain")})).on("continue",(function(){r.emit("continue")}));var a,c=0,h=!1,f=[];function u(t,i,n,s){if(0===c||a&&(a.username!==t||a.service!==i)||"password"!==n&&"publickey"!==n&&"hostbased"!==n&&"keyboard-interactive"!==n&&"none"!==n||f.length===_)return e.disconnect(p.PROTOCOL_ERROR);if("ssh-connection"!==i)return e.disconnect(p.SERVICE_NOT_AVAILABLE);var h;if(e._state.authMethod=n,"keyboard-interactive"===n?h=new A(e,t,i,n,s,l):"publickey"===n?h=new U(e,t,i,n,s,l):"hostbased"===n?h=new B(e,t,i,n,s,l):"password"===n?h=new R(e,t,i,n,s,l):"none"===n&&(h=new k(e,t,i,n,l)),a){if(!a._initialResponse)return f.push(h);a._multistep&&!this._finalResponse&&(a._cleanup&&a._cleanup(),a.emit("abort"))}a=h,o(r,"authentication")?r.emit("authentication",a):a.reject()}function l(t,i,n,s){a!==t||r.authenticated||(i?(e.removeListener("USERAUTH_REQUEST",u),a=void 0,r.authenticated=!0,e.authSuccess(),f=[],r.emit("ready")):(e.authFailure(n,s),f.length&&(a=f.pop(),o(r,"authentication")?r.emit("authentication",a):a.reject())))}e.on("SERVICE_REQUEST",(function(t){if(0===c||h||r.authenticated||"ssh-userauth"!==t)return e.disconnect(p.SERVICE_NOT_AVAILABLE);h=!0,e.serviceAccept(t)})).on("USERAUTH_REQUEST",u);var g=[];e.on("GLOBAL_REQUEST",(function(t,i,n){var s={type:null,buf:null};function a(t,r){s.type=t,s.buf=r,function(){for(var t;g.length>0&&g[0].type;)"SUCCESS"===(t=g.shift()).type&&e.requestSuccess(t.buf),"FAILURE"===t.type&&e.requestFailure()}()}if(i&&g.push(s),("tcpip-forward"===t||"cancel-tcpip-forward"===t||"no-more-sessions@openssh.com"===t||"streamlocal-forward@openssh.com"===t||"cancel-streamlocal-forward@openssh.com"===t)&&o(r,"request")&&r.authenticated){var c,h;if(i){var f=!1;c=function(e){var r;f||(f=!0,"tcpip-forward"===t&&0===n.bindPort&&"number"==typeof e&&(r=Buffer.allocUnsafe(4),v(r,e,0)),a("SUCCESS",r))},h=function(){f||(f=!0,a("FAILURE"))}}if("no-more-sessions@openssh.com"===t)return r.noMoreSessions=!0,void(c&&c());r.emit("request",c,h,t,n)}else i&&a("FAILURE")})),e.on("CHANNEL_OPEN",(function(t){if("session"===t.type&&r.noMoreSessions||!r.authenticated){var i=d.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,i)}var s,a,c=P(r),h=!1;if(!1===c)return e.channelOpenFail(t.sender,d.RESOURCE_SHORTAGE);switch(n[c]=!0,a=function(){if(!h){h=!0,delete n[c];var r=d.ADMINISTRATIVELY_PROHIBITED;return e.channelOpenFail(t.sender,r)}},t.type){case"session":o(r,"session")?(s=function(){if(!h)return h=!0,e.channelOpenConfirm(t.sender,c,E.MAX_WINDOW,E.PACKET_SIZE),new S(r,t,c)},r.emit("session",s,a)):a();break;case"direct-tcpip":o(r,"tcpip")?(s=function(){if(!h){h=!0,e.channelOpenConfirm(t.sender,c,E.MAX_WINDOW,E.PACKET_SIZE);var i={type:void 0,incoming:{id:c,window:E.MAX_WINDOW,packetSize:E.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new E(i,r)}},r.emit("tcpip",s,a,t.data)):a();break;case"direct-streamlocal@openssh.com":o(r,"openssh.streamlocal")?(s=function(){if(!h){h=!0,e.channelOpenConfirm(t.sender,c,E.MAX_WINDOW,E.PACKET_SIZE);var i={type:void 0,incoming:{id:c,window:E.MAX_WINDOW,packetSize:E.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};return new E(i,r)}},r.emit("openssh.streamlocal",s,a,t.data)):a();break;default:a()}})),e.on("NEWKEYS",(function(){++c>1&&r.emit("rekey")})),i&&this.once("ready",(function(){i.add(e)}))}function S(e,t,r){this.subtype=void 0;var i,n=!1,s=this,a=t.sender,c={type:"session",incoming:{id:r,window:E.MAX_WINDOW,packetSize:E.PACKET_SIZE,state:"open"},outgoing:{id:t.sender,window:t.window,packetSize:t.packetSize,state:"open"}};e._sshstream.on("CHANNEL_REQUEST:"+r,(function(t){var r,h,f=!1;if(t.wantReply&&("shell"!==t.request&&"exec"!==t.request&&"subsystem"!==t.request&&(r=function(){if(!(f||n||i))return f=!0,e._sshstream.channelSuccess(a)}),h=function(){if(!(f||n||i))return f=!0,e._sshstream.channelFailure(a)}),n)h&&h();else switch(t.request){case"env":o(s,"env")?s.emit("env",r,h,{key:t.key,val:t.val}):h&&h();break;case"pty-req":o(s,"pty")?s.emit("pty",r,h,{cols:t.cols,rows:t.rows,width:t.width,height:t.height,term:t.term,modes:t.modes}):h&&h();break;case"window-change":o(s,"window-change")?s.emit("window-change",r,h,{cols:t.cols,rows:t.rows,width:t.width,height:t.height}):h&&h();break;case"x11-req":o(s,"x11")?s.emit("x11",r,h,{single:t.single,protocol:t.protocol,cookie:t.cookie,screen:t.screen}):h&&h();break;case"signal":o(s,"signal")?s.emit("signal",r,h,{name:t.signal}):h&&h();break;case"auth-agent-req@openssh.com":o(s,"auth-agent")?s.emit("auth-agent",r,h):h&&h();break;case"shell":o(s,"shell")?(r=function(){if(!(f||n||i))return f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new E(c,e,{server:!0})).subtype=s.subtype=t.request,i},s.emit("shell",r,h)):h&&h();break;case"exec":o(s,"exec")?(r=function(){if(!(f||n||i))return f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new E(c,e,{server:!0})).subtype=s.subtype=t.request,i},s.emit("exec",r,h,{command:t.command})):h&&h();break;case"subsystem":r=function(){if(!(f||n||i)){if(f=!0,t.wantReply&&e._sshstream.channelSuccess(a),(i=new E(c,e,{server:!0})).subtype=s.subtype=t.request+":"+t.subsystem,"sftp"===t.subsystem){var r=new u({server:!0,debug:e._sshstream.debug});return i.pipe(r).pipe(i),r}return i}},"sftp"===t.subsystem&&o(s,"sftp")?s.emit("sftp",r,h):"sftp"!==t.subsystem&&o(s,"subsystem")?s.emit("subsystem",r,h,{name:t.subsystem}):h&&h();break;default:h&&h()}})).once("CHANNEL_EOF:"+r,(function(){n=!0,s.emit("eof"),s.emit("end")})).once("CHANNEL_CLOSE:"+r,(function(){n=!0,s.emit("close")}))}function k(e,t,r,i,n){s.call(this);var o=this;this.username=this.user=t,this.service=r,this.method=i,this._initialResponse=!1,this._finalResponse=!1,this._multistep=!1,this._cbfinal=function(e,t,r){o._finalResponse||(o._finalResponse=!0,n(o,e,t,r))},this._stream=e}a(w,s),w.prototype.listen=function(){return this._srv.listen.apply(this._srv,arguments),this},w.prototype.address=function(){return this._srv.address()},w.prototype.getConnections=function(e){this._srv.getConnections(e)},w.prototype.close=function(e){return this._srv.close(e),this},w.prototype.ref=function(){this._srv.ref()},w.prototype.unref=function(){this._srv.unref()},a(b,s),b.prototype.end=function(){return this._sshstream.disconnect(p.BY_APPLICATION)},b.prototype.x11=function(e,t,r){return N(this,"x11",{originAddr:e,originPort:t},r)},b.prototype.forwardOut=function(e,t,r,i,n){return N(this,"forwarded-tcpip",{boundAddr:e,boundPort:t,remoteAddr:r,remotePort:i},n)},b.prototype.openssh_forwardOutStreamLocal=function(e,t){return N(this,"forwarded-streamlocal@openssh.com",{socketPath:e},t)},b.prototype.rekey=function(e){var t,r=this._sshstream,i=!0;try{i=r.rekey()}catch(e){t=e}return"function"==typeof e&&(t?process.nextTick((function(){e(t)})):this.once("rekey",e)),i},a(S,s),a(k,s),k.prototype.accept=function(){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!0)},k.prototype.reject=function(e,t){this._cleanup&&this._cleanup(),this._initialResponse=!0,this._cbfinal(!1,e,t)};var T=/[ \t\r\n]*,[ \t\r\n]*/g;function A(e,t,r,i,n,s){k.call(this,e,t,r,i,s),this._multistep=!0;var o=this;this._cb=void 0,this._onInfoResponse=function(e){if(o._cb){var t=o._cb;o._cb=void 0,t(e)}},this.submethods=n.split(T),this.on("abort",(function(){o._cb&&o._cb(new Error("Authentication request aborted"))}))}function U(e,t,r,i,n,s){var o;if(k.call(this,e,t,r,i,s),this.key={algo:n.keyAlgo,data:n.key},this.signature=n.signature,this.signature)switch(n.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=n.blob}function B(e,t,r,i,n,s){var o;if(k.call(this,e,t,r,i,s),this.key={algo:n.keyAlgo,data:n.key},this.signature=n.signature,this.signature)switch(n.keyAlgo){case"ssh-rsa":case"ssh-dss":o="sha1";break;case"ssh-ed25519":o=null;break;case"ecdsa-sha2-nistp256":o="sha256";break;case"ecdsa-sha2-nistp384":o="sha384";break;case"ecdsa-sha2-nistp521":o="sha512"}this.sigAlgo=o,this.blob=n.blob,this.localHostname=n.localHostname,this.localUsername=n.localUsername}function R(e,t,r,i,n,s){k.call(this,e,t,r,i,s),this.password=n}function N(e,t,r,i){var n=P(e),s=E.MAX_WINDOW,o=E.PACKET_SIZE,a=!0;if(!1===n)return i(new Error("No free channels available"));"function"==typeof r&&(i=r,r={}),e._channels[n]=!0;var c=e._sshstream;return c.once("CHANNEL_OPEN_CONFIRMATION:"+n,(function(r){c.removeAllListeners("CHANNEL_OPEN_FAILURE:"+n);var a={type:t,incoming:{id:n,window:s,packetSize:o,state:"open"},outgoing:{id:r.sender,window:r.window,packetSize:r.packetSize,state:"open"}};i(void 0,new E(a,e,{server:!0}))})).once("CHANNEL_OPEN_FAILURE:"+n,(function(t){c.removeAllListeners("CHANNEL_OPEN_CONFIRMATION:"+n),delete e._channels[n];var r=new Error("(SSH) Channel open failure: "+t.description);r.reason=t.reason,r.lang=t.lang,i(r)})),"forwarded-tcpip"===t?a=c.forwardedTcpip(n,s,o,r):"x11"===t?a=c.x11(n,s,o,r):"forwarded-streamlocal@openssh.com"===t&&(a=c.openssh_forwardedStreamLocal(n,s,o,r)),a}function P(e){if(e._curChan<y)return++e._curChan;for(var t=0,r=e._channels;t<y;++t)if(!r[t])return t;return!1}a(A,k),A.prototype._cleanup=function(){this._stream.removeListener("USERAUTH_INFO_RESPONSE",this._onInfoResponse)},A.prototype.prompt=function(e,t,r,i){Array.isArray(e)||(e=[e]),"function"==typeof t?(i=t,t=r=void 0):"function"==typeof r&&(i=r,r=void 0);for(var n=0;n<e.length;++n)"string"==typeof e[n]&&(e[n]={prompt:e[n],echo:!0});return this._cb=i,this._initialResponse=!0,this._stream.once("USERAUTH_INFO_RESPONSE",this._onInfoResponse),this._stream.authInfoReq(t,r,e)},a(U,k),U.prototype.accept=function(){this.signature?k.prototype.accept.call(this):(this._initialResponse=!0,this._stream.authPKOK(this.key.algo,this.key.data))},a(B,k),a(R,k),w.createServer=function(e,t){return new w(e,t)},w.KEEPALIVE_INTERVAL=1e3,w.KEEPALIVE_CLIENT_INTERVAL=15e3,w.KEEPALIVE_CLIENT_COUNT_MAX=3,e.exports=w,e.exports.IncomingClient=b},560:e=>{e.exports={newInvalidAsn1Error:function(e){var t=new Error;return t.name="InvalidAsn1Error",t.message=e||"",t}}},1256:(e,t,r)=>{var i=r(560),n=r(2720),s=r(8124),o=r(1156);for(var a in e.exports={Reader:s,Writer:o},n)n.hasOwnProperty(a)&&(e.exports[a]=n[a]);for(var c in i)i.hasOwnProperty(c)&&(e.exports[c]=i[c])},8124:(e,t,r)=>{var i=r(6608),n=r(6968).Buffer,s=r(2720),o=r(560).newInvalidAsn1Error;function a(e){if(!e||!n.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(a.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(a.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(a.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),a.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var t=255&this._buf[this._offset];return e||(this._offset+=1),t},a.prototype.peek=function(){return this.readByte(!0)},a.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var t=255&this._buf[e++];if(null===t)return null;if(128==(128&t)){if(0==(t&=127))throw o("Indefinite length not supported");if(t>4)throw o("encoding too long");if(this._size-e<t)return null;this._len=0;for(var r=0;r<t;r++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=t;return e},a.prototype.readSequence=function(e){var t=this.peek();if(null===t)return null;if(void 0!==e&&e!==t)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var r=this.readLength(this._offset+1);return null===r?null:(this._offset=r,t)},a.prototype.readInt=function(){return this._readTag(s.Integer)},a.prototype.readBoolean=function(){return 0!==this._readTag(s.Boolean)},a.prototype.readEnumeration=function(){return this._readTag(s.Enumeration)},a.prototype.readString=function(e,t){e||(e=s.OctetString);var r=this.peek();if(null===r)return null;if(r!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+r.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>this._size-i)return null;if(this._offset=i,0===this.length)return t?n.alloc(0):"";var a=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,t?a:a.toString("utf8")},a.prototype.readOID=function(e){e||(e=s.OID);var t=this.readString(e,!0);if(null===t)return null;for(var r=[],i=0,n=0;n<t.length;n++){var o=255&t[n];i<<=7,i+=127&o,0==(128&o)&&(r.push(i),i=0)}return i=r.shift(),r.unshift(i%40),r.unshift(i/40>>0),r.join(".")},a.prototype._readTag=function(e){i.ok(void 0!==e);var t=this.peek();if(null===t)return null;if(t!==e)throw o("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var r=this.readLength(this._offset+1);if(null===r)return null;if(this.length>4)throw o("Integer too long: "+this.length);if(this.length>this._size-r)return null;this._offset=r;for(var n=this._buf[this._offset],s=0,a=0;a<this.length;a++)s<<=8,s|=255&this._buf[this._offset++];return 128==(128&n)&&4!==a&&(s-=1<<8*a),s>>0},e.exports=a},2720:e=>{e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},1156:(e,t,r)=>{var i=r(6608),n=r(6968).Buffer,s=r(2720),o=r(560).newInvalidAsn1Error,a={size:1024,growthFactor:8};function c(e){var t,r;t=a,r=e||{},i.ok(t),i.equal(typeof t,"object"),i.ok(r),i.equal(typeof r,"object"),Object.getOwnPropertyNames(t).forEach((function(e){if(!r[e]){var i=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,i)}})),e=r,this._buf=n.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(c.prototype,"buffer",{get:function(){if(this._seq.length)throw o(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),c.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},c.prototype.writeInt=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof t&&(t=s.Integer);for(var r=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&r>1;)r--,e<<=8;if(r>4)throw o("BER ints cannot be > 0xffffffff");for(this._ensure(2+r),this._buf[this._offset++]=t,this._buf[this._offset++]=r;r-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},c.prototype.writeNull=function(){this.writeByte(s.Null),this.writeByte(0)},c.prototype.writeEnumeration=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof t&&(t=s.Enumeration),this.writeInt(e,t)},c.prototype.writeBoolean=function(e,t){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof t&&(t=s.Boolean),this._ensure(3),this._buf[this._offset++]=t,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},c.prototype.writeString=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof t&&(t=s.OctetString);var r=n.byteLength(e);this.writeByte(t),this.writeLength(r),r&&(this._ensure(r),this._buf.write(e,this._offset),this._offset+=r)},c.prototype.writeBuffer=function(e,t){if("number"!=typeof t)throw new TypeError("tag must be a number");if(!n.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(t),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},c.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var t=this;e.forEach((function(e){t.writeString(e)}))},c.prototype.writeOID=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof t&&(t=s.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var r=e.split("."),i=[];i.push(40*parseInt(r[0],10)+parseInt(r[1],10)),r.slice(2).forEach((function(e){!function(e,t){t<128?e.push(t):t<16384?(e.push(t>>>7|128),e.push(127&t)):t<2097152?(e.push(t>>>14|128),e.push(255&(t>>>7|128)),e.push(127&t)):t<268435456?(e.push(t>>>21|128),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t)):(e.push(255&(t>>>28|128)),e.push(255&(t>>>21|128)),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t))}(i,parseInt(e,10))}));var n=this;this._ensure(2+i.length),this.writeByte(t),this.writeLength(i.length),i.forEach((function(e){n.writeByte(e)}))},c.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw o("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},c.prototype.startSequence=function(e){"number"!=typeof e&&(e=s.Sequence|s.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},c.prototype.endSequence=function(){var e=this._seq.pop(),t=e+3,r=this._offset-t;if(r<=127)this._shift(t,r,-2),this._buf[e]=r;else if(r<=255)this._shift(t,r,-1),this._buf[e]=129,this._buf[e+1]=r;else if(r<=65535)this._buf[e]=130,this._buf[e+1]=r>>8,this._buf[e+2]=r;else{if(!(r<=16777215))throw o("Sequence too long");this._shift(t,r,1),this._buf[e]=131,this._buf[e+1]=r>>16,this._buf[e+2]=r>>8,this._buf[e+3]=r}},c.prototype._shift=function(e,t,r){i.ok(void 0!==e),i.ok(void 0!==t),i.ok(r),this._buf.copy(this._buf,e+r,e,e+t),this._offset+=r},c.prototype._ensure=function(e){if(i.ok(e),this._size-this._offset<e){var t=this._size*this._options.growthFactor;t-this._offset<e&&(t+=e);var r=n.alloc(t);this._buf.copy(r,0,0,this._offset),this._buf=r,this._size=t}},e.exports=c},8304:(e,t,r)=>{var i=r(1256);e.exports={Ber:i,BerReader:i.Reader,BerWriter:i.Writer}},8327:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const i=r(2058),n=r(7072),s=r(192),o=r(970),a=r(4096),c=r(3704),h=r(4200),f=r(344),u=r(9660),l=r(6708),p=r(5224),d=r(3512),g=o.promisify(i.readdir),E=o.promisify(i.mkdir),m=o.promisify(i.stat),v=o.promisify(i.open),y=o.promisify(i.close),_=o.promisify(i.unlink);async function w(e){try{return await e()}catch(e){return}}t.Client=class{constructor(e=3e4){this.availableListCommands=["MLSD","LIST -a","LIST"],this.ftp=new a.FTPContext(e),this.prepareTransfer=this._enterFirstCompatibleMode([p.enterPassiveModeIPv6,p.enterPassiveModeIPv4]),this.parseList=c.parseList,this._progressTracker=new h.ProgressTracker}close(){this.ftp.close(),this._progressTracker.stop()}get closed(){return this.ftp.closed}connect(e="localhost",t=21){return this.ftp.reset(),this.ftp.socket.connect({host:e,port:t,family:this.ftp.ipFamily},(()=>this.ftp.log(`Connected to ${l.describeAddress(this.ftp.socket)} (${l.describeTLS(this.ftp.socket)})`))),this._handleConnectResponse()}connectImplicitTLS(e="localhost",t=21,r={}){return this.ftp.reset(),this.ftp.socket=s.connect(t,e,r,(()=>this.ftp.log(`Connected to ${l.describeAddress(this.ftp.socket)} (${l.describeTLS(this.ftp.socket)})`))),this.ftp.tlsOptions=r,this._handleConnectResponse()}_handleConnectResponse(){return this.ftp.handle(void 0,((e,t)=>{e instanceof Error?t.reject(e):d.positiveCompletion(e.code)?t.resolve(e):(this.ftp.socket.destroy(),t.reject(new a.FTPError(e)))}))}send(e,t=!1){return t?(this.ftp.log("Deprecated call using send(command, flag) with boolean flag to ignore errors. Use sendIgnoringError(command)."),this.sendIgnoringError(e)):this.ftp.request(e)}sendIgnoringError(e){return this.ftp.handle(e,((e,t)=>{e instanceof a.FTPError?t.resolve({code:e.code,message:e.message}):e instanceof Error?t.reject(e):t.resolve(e)}))}async useTLS(e={},t="AUTH TLS"){const r=await this.send(t);return this.ftp.socket=await l.upgradeSocket(this.ftp.socket,e),this.ftp.tlsOptions=e,this.ftp.log(`Control socket is using: ${l.describeTLS(this.ftp.socket)}`),r}login(e="anonymous",t="guest"){return this.ftp.log(`Login security: ${l.describeTLS(this.ftp.socket)}`),this.ftp.handle("USER "+e,((e,r)=>{e instanceof Error?r.reject(e):d.positiveCompletion(e.code)?r.resolve(e):331===e.code?this.ftp.send("PASS "+t):r.reject(new a.FTPError(e))}))}async useDefaultSettings(){await this.send("TYPE I"),await this.sendIgnoringError("STRU F"),await this.sendIgnoringError("OPTS UTF8 ON"),await this.sendIgnoringError("OPTS MLST type;size;modify;unique;unix.mode;unix.owner;unix.group;unix.ownername;unix.groupname;"),this.ftp.hasTLS&&(await this.sendIgnoringError("PBSZ 0"),await this.sendIgnoringError("PROT P"))}async access(e={}){const t=!0===e.secure;let r;return r="implicit"===e.secure?await this.connectImplicitTLS(e.host,e.port,e.secureOptions):await this.connect(e.host,e.port),t&&await this.useTLS(e.secureOptions),await this.login(e.user,e.password),await this.useDefaultSettings(),r}async pwd(){const e=await this.send("PWD"),t=e.message.match(/"(.+)"/);if(null===t||void 0===t[1])throw new Error(`Can't parse response to command 'PWD': ${e.message}`);return t[1]}async features(){const e=await this.sendIgnoringError("FEAT"),t=new Map;return e.code<400&&d.isMultiline(e.message)&&e.message.split("\n").slice(1,-1).forEach((e=>{const r=e.trim().split(" ");t.set(r[0],r[1]||"")})),t}async cd(e){const t=await this.protectWhitespace(e);return this.send("CWD "+t)}async cdup(){return this.send("CDUP")}async lastMod(e){const t=await this.protectWhitespace(e),r=(await this.send(`MDTM ${t}`)).message.slice(4);return u.parseMLSxDate(r)}async size(e){const t=`SIZE ${await this.protectWhitespace(e)}`,r=await this.send(t),i=parseInt(r.message.slice(4),10);if(Number.isNaN(i))throw new Error(`Can't parse response to command '${t}' as a numerical value: ${r.message}`);return i}async rename(e,t){const r=await this.protectWhitespace(e),i=await this.protectWhitespace(t);return await this.send("RNFR "+r),this.send("RNTO "+i)}async remove(e,t=!1){const r=await this.protectWhitespace(e);return this.send(`DELE ${r}`,t)}trackProgress(e){this._progressTracker.bytesOverall=0,this._progressTracker.reportTo(e)}async uploadFrom(e,t,r={}){return this._uploadWithCommand(e,t,"STOR",r)}async appendFrom(e,t,r={}){return this._uploadWithCommand(e,t,"APPE",r)}async _uploadWithCommand(e,t,r,i){return"string"==typeof e?this._uploadLocalFile(e,t,r,i):this._uploadFromStream(e,t,r)}async _uploadLocalFile(e,t,r,n){const s=await v(e,"r"),o=i.createReadStream("",{fd:s,start:n.localStart,end:n.localEndInclusive,autoClose:!1});try{return await this._uploadFromStream(o,t,r)}finally{await w((()=>y(s)))}}async _uploadFromStream(e,t,r){const i=e=>this.ftp.closeWithError(e);e.once("error",i);try{const i=await this.protectWhitespace(t);return await this.prepareTransfer(this.ftp),await p.uploadFrom(e,{ftp:this.ftp,tracker:this._progressTracker,command:r,remotePath:i,type:"upload"})}finally{e.removeListener("error",i)}}async downloadTo(e,t,r=0){return"string"==typeof e?this._downloadToFile(e,t,r):this._downloadToStream(e,t,r)}async _downloadToFile(e,t,r){const n=r>0,s=n?"r+":"w",o=await v(e,s),a=i.createWriteStream("",{fd:o,start:r,autoClose:!1});try{return await this._downloadToStream(a,t,r)}catch(t){const r=await w((()=>m(e))),i=r&&r.size>0;throw!n&&!i&&await w((()=>_(e))),t}finally{await w((()=>y(o)))}}async _downloadToStream(e,t,r){const i=e=>this.ftp.closeWithError(e);e.once("error",i);try{const i=await this.protectWhitespace(t);return await this.prepareTransfer(this.ftp),await p.downloadTo(e,{ftp:this.ftp,tracker:this._progressTracker,command:r>0?`REST ${r}`:`RETR ${i}`,remotePath:i,type:"download"})}finally{e.removeListener("error",i),e.end()}}async list(e=""){const t=await this.protectWhitespace(e);let r;for(const e of this.availableListCommands){const i=`${e} ${t}`.trim();await this.prepareTransfer(this.ftp);try{const t=await this._requestListWithCommand(i);return this.availableListCommands=[e],t}catch(e){if(!(e instanceof a.FTPError))throw e;r=e}}throw r}async _requestListWithCommand(e){const t=new f.StringWriter;await p.downloadTo(t,{ftp:this.ftp,tracker:this._progressTracker,command:e,remotePath:"",type:"list"});const r=t.getText(this.ftp.encoding);return this.ftp.log(r),this.parseList(r)}async removeDir(e){return this._exitAtCurrentDirectory((async()=>{await this.cd(e),await this.clearWorkingDir(),"/"!==e&&(await this.cdup(),await this.removeEmptyDir(e))}))}async clearWorkingDir(){for(const e of await this.list())e.isDirectory?(await this.cd(e.name),await this.clearWorkingDir(),await this.cdup(),await this.removeEmptyDir(e.name)):await this.remove(e.name)}async uploadFromDir(e,t){return this._exitAtCurrentDirectory((async()=>(t&&await this.ensureDir(t),await this._uploadToWorkingDir(e))))}async _uploadToWorkingDir(e){const t=await g(e);for(const r of t){const t=n.join(e,r),i=await m(t);i.isFile()?await this.uploadFrom(t,r):i.isDirectory()&&(await this._openDir(r),await this._uploadToWorkingDir(t),await this.cdup())}}async downloadToDir(e,t){return this._exitAtCurrentDirectory((async()=>(t&&await this.cd(t),await this._downloadFromWorkingDir(e))))}async _downloadFromWorkingDir(e){await async function(e){try{await m(e)}catch(t){await E(e,{recursive:!0})}}(e);for(const t of await this.list()){const r=n.join(e,t.name);t.isDirectory?(await this.cd(t.name),await this._downloadFromWorkingDir(r),await this.cdup()):t.isFile&&await this.downloadTo(r,t.name)}}async ensureDir(e){e.startsWith("/")&&await this.cd("/");const t=e.split("/").filter((e=>""!==e));for(const e of t)await this._openDir(e)}async _openDir(e){await this.sendIgnoringError("MKD "+e),await this.cd(e)}async removeEmptyDir(e){const t=await this.protectWhitespace(e);return this.send(`RMD ${t}`)}async protectWhitespace(e){if(!e.startsWith(" "))return e;const t=await this.pwd();return(t.endsWith("/")?t:t+"/")+e}async _exitAtCurrentDirectory(e){const t=await this.pwd();try{return await e()}finally{this.closed||await w((()=>this.cd(t)))}}_enterFirstCompatibleMode(e){return async t=>{t.log("Trying to find optimal transfer strategy...");for(const r of e)try{const e=await r(t);return t.log("Optimal transfer strategy found."),this.prepareTransfer=r,e}catch(e){if(!(e instanceof a.FTPError))throw e}throw new Error("None of the available transfer strategies work.")}}async upload(e,t,r={}){return this.ftp.log("Warning: upload() has been deprecated, use uploadFrom()."),this.uploadFrom(e,t,r)}async append(e,t,r={}){return this.ftp.log("Warning: append() has been deprecated, use appendFrom()."),this.appendFrom(e,t,r)}async download(e,t,r=0){return this.ftp.log("Warning: download() has been deprecated, use downloadTo()."),this.downloadTo(e,t,r)}async uploadDir(e,t){return this.ftp.log("Warning: uploadDir() has been deprecated, use uploadFromDir()."),this.uploadFromDir(e,t)}async downloadDir(e){return this.ftp.log("Warning: downloadDir() has been deprecated, use downloadToDir()."),this.downloadToDir(e)}}},4020:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.FileInfo=t.FileType=void 0,function(e){e[e.Unknown=0]="Unknown",e[e.File=1]="File",e[e.Directory=2]="Directory",e[e.SymbolicLink=3]="SymbolicLink"}(r=t.FileType||(t.FileType={}));class i{constructor(e){this.name=e,this.type=r.Unknown,this.size=0,this.rawModifiedAt="",this.modifiedAt=void 0,this.permissions=void 0,this.hardLinkCount=void 0,this.link=void 0,this.group=void 0,this.user=void 0,this.uniqueID=void 0,this.name=e}get isDirectory(){return this.type===r.Directory}get isSymbolicLink(){return this.type===r.SymbolicLink}get isFile(){return this.type===r.File}get date(){return this.rawModifiedAt}set date(e){this.rawModifiedAt=e}}t.FileInfo=i,i.UnixPermission={Read:4,Write:2,Execute:1}},4096:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FTPContext=t.FTPError=void 0;const i=r(5256),n=r(3512);class s extends Error{constructor(e){super(e.message),this.name=this.constructor.name,this.code=e.code}}t.FTPError=s,t.FTPContext=class{constructor(e=0,t="utf8"){this.timeout=e,this.verbose=!1,this.ipFamily=void 0,this.tlsOptions={},this._partialResponse="",this._encoding=t,this._socket=this.socket=this._newSocket(),this._dataSocket=void 0}close(){const e=this._task?"User closed client during task":"User closed client",t=new Error(e);this.closeWithError(t)}closeWithError(e){this._closingError||(this._closingError=e,this._closeSocket(this._socket),this._closeSocket(this._dataSocket),this._passToHandler(e),this._stopTrackingTask())}get closed(){return void 0===this.socket.remoteAddress||void 0!==this._closingError}reset(){this.socket=this._newSocket()}get socket(){return this._socket}set socket(e){this.dataSocket=void 0,this.tlsOptions={},this._partialResponse="",this._socket&&(e.localPort===this._socket.localPort||this._socket.destroy(),this._removeSocketListeners(this._socket)),e&&(this._closingError=void 0,e.setTimeout(0),e.setEncoding(this._encoding),e.setKeepAlive(!0),e.on("data",(e=>this._onControlSocketData(e))),e.on("end",(()=>this.closeWithError(new Error("Server sent FIN packet unexpectedly, closing connection.")))),e.on("close",(e=>{e||this.closeWithError(new Error("Server closed connection unexpectedly."))})),this._setupDefaultErrorHandlers(e,"control socket")),this._socket=e}get dataSocket(){return this._dataSocket}set dataSocket(e){this._closeSocket(this._dataSocket),e&&(e.setTimeout(0),this._setupDefaultErrorHandlers(e,"data socket")),this._dataSocket=e}get encoding(){return this._encoding}set encoding(e){this._encoding=e,this.socket&&this.socket.setEncoding(e)}send(e){const t=e.startsWith("PASS")?"> PASS ###":`> ${e}`;this.log(t),this._socket.write(e+"\r\n",this.encoding)}request(e){return this.handle(e,((e,t)=>{e instanceof Error?t.reject(e):t.resolve(e)}))}handle(e,t){if(this._task){const e=new Error("User launched a task while another one is still running. Forgot to use 'await' or '.then()'?");e.stack+=`\nRunning task launched at: ${this._task.stack}`,this.closeWithError(e)}return new Promise(((r,i)=>{const n=(new Error).stack||"Unknown call stack",s={resolve:(...e)=>{this._stopTrackingTask(),r(...e)},reject:e=>{this._stopTrackingTask(),i(e)}};if(this._task={stack:n,resolver:s,responseHandler:t},this._closingError){const e=new Error("Client is closed");return e.stack+=`\nClosing reason: ${this._closingError.stack}`,e.code=void 0!==this._closingError.code?this._closingError.code:"0",void this._passToHandler(e)}this.socket.setTimeout(this.timeout),e&&this.send(e)}))}log(e){this.verbose&&console.log(e)}get hasTLS(){return"encrypted"in this._socket}_stopTrackingTask(){this.socket.setTimeout(0),this._task=void 0}_onControlSocketData(e){const t=e.trim();this.log(`< ${t}`);const r=this._partialResponse+t,i=n.parseControlResponse(r);this._partialResponse=i.rest;for(const e of i.messages){const t=parseInt(e.substr(0,3),10),r={code:t,message:e},i=t>=400?new s(r):void 0;this._passToHandler(i||r)}}_passToHandler(e){this._task&&this._task.responseHandler(e,this._task.resolver)}_setupDefaultErrorHandlers(e,t){e.once("error",(e=>{e.message+=` (${t})`,this.closeWithError(e)})),e.once("close",(e=>{e&&this.closeWithError(new Error(`Socket closed due to transmission error (${t})`))})),e.once("timeout",(()=>this.closeWithError(new Error(`Timeout (${t})`))))}_closeSocket(e){e&&(e.destroy(),this._removeSocketListeners(e))}_removeSocketListeners(e){e.removeAllListeners(),e.removeAllListeners("timeout"),e.removeAllListeners("data"),e.removeAllListeners("end"),e.removeAllListeners("error"),e.removeAllListeners("close"),e.removeAllListeners("connect")}_newSocket(){return new i.Socket}}},4200:(e,t)=>{"use strict";function r(){}Object.defineProperty(t,"__esModule",{value:!0}),t.ProgressTracker=void 0,t.ProgressTracker=class{constructor(){this.bytesOverall=0,this.intervalMs=500,this.onStop=r,this.onHandle=r}reportTo(e=r){this.onHandle=e}start(e,t,i){let n=0;this.onStop=function(e,t){const i=setInterval(t,e);return t(),e=>{clearInterval(i),e&&t(),t=r}}(this.intervalMs,(()=>{const r=e.bytesRead+e.bytesWritten;this.bytesOverall+=r-n,n=r,this.onHandle({name:t,type:i,bytes:r,bytesOverall:this.bytesOverall})}))}stop(){this.onStop(!1)}updateAndStop(){this.onStop(!0)}}},5111:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},344:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StringWriter=void 0;const i=r(8378);class n extends i.Writable{constructor(){super(...arguments),this.buf=Buffer.alloc(0)}_write(e,t,r){e instanceof Buffer?(this.buf=Buffer.concat([this.buf,e]),r(null)):r(new Error("StringWriter expects chunks of type 'Buffer'."))}getText(e){return this.buf.toString(e)}}t.StringWriter=n},7636:function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||i(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),n(r(8327),t),n(r(4096),t),n(r(4020),t),n(r(3704),t),n(r(5111),t);var s=r(5224);Object.defineProperty(t,"enterPassiveModeIPv4",{enumerable:!0,get:function(){return s.enterPassiveModeIPv4}}),Object.defineProperty(t,"enterPassiveModeIPv6",{enumerable:!0,get:function(){return s.enterPassiveModeIPv6}})},6708:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ipIsPrivateV4Address=t.upgradeSocket=t.describeAddress=t.describeTLS=void 0;const i=r(192);t.describeTLS=function(e){if(e instanceof i.TLSSocket){return e.getProtocol()||"Server socket or disconnected client socket"}return"No encryption"},t.describeAddress=function(e){return"IPv6"===e.remoteFamily?`[${e.remoteAddress}]:${e.remotePort}`:`${e.remoteAddress}:${e.remotePort}`},t.upgradeSocket=function(e,t){return new Promise(((r,n)=>{const s=Object.assign({},t,{socket:e}),o=i.connect(s,(()=>{!1===s.rejectUnauthorized||o.authorized?(o.removeAllListeners("error"),r(o)):n(o.authorizationError)})).once("error",(e=>{n(e)}))}))},t.ipIsPrivateV4Address=function(e=""){e.startsWith("::ffff:")&&(e=e.substr(7));const t=e.split(".").map((e=>parseInt(e,10)));return 10===t[0]||172===t[0]&&t[1]>=16&&t[1]<=31||192===t[0]&&168===t[1]}},3512:(e,t)=>{"use strict";function r(e){return/^\d\d\d(?:$| )/.test(e)}function i(e){return/^\d\d\d-/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.positiveIntermediate=t.positiveCompletion=t.isMultiline=t.isSingleLine=t.parseControlResponse=void 0,t.parseControlResponse=function(e){const t=e.split(/\r?\n/),n=[];let s,o=0;for(let e=0;e<t.length;e++){const a=t[e];if(s)s.test(a)&&(s=void 0,n.push(t.slice(o,e+1).join("\n")));else if(i(a)){const t=a.substr(0,3);s=new RegExp(`^${t}(?:$| )`),o=e}else r(a)&&n.push(a)}return{messages:n,rest:s?t.slice(o).join("\n")+"\n":""}},t.isSingleLine=r,t.isMultiline=i,t.positiveCompletion=function(e){return e>=200&&e<300},t.positiveIntermediate=function(e){return e>=300&&e<400}},3704:function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.parseList=void 0;const o=[s(r(5908)),s(r(8512)),s(r(9660))];function a(e){return""!==e.trim()}const c=/\r?\n/;t.parseList=function(e){const t=e.split(c).filter(a);if(0===t.length)return[];const r=t[t.length-1],i=(n=r,o.find((e=>!0===e.testLine(n))));var n;if(!i)throw new Error("This library only supports MLSD, Unix- or DOS-style directory listing. Your FTP server seems to be using another format. You can see the transmitted listing when setting `client.ftp.verbose = true`. You can then provide a custom parser to `client.parseList`, see the documentation for details.");const s=t.map(i.parseLine).filter((e=>void 0!==e));return i.transformList(s)}},5908:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformList=t.parseLine=t.testLine=void 0;const i=r(4020),n=new RegExp("(\\S+)\\s+(\\S+)\\s+(?:(<DIR>)|([0-9]+))\\s+(\\S.*)");t.testLine=function(e){return/^\d{2}/.test(e)&&n.test(e)},t.parseLine=function(e){const t=e.match(n);if(null===t)return;const r=t[5];if("."===r||".."===r)return;const s=new i.FileInfo(r);return"<DIR>"===t[3]?(s.type=i.FileType.Directory,s.size=0):(s.type=i.FileType.File,s.size=parseInt(t[4],10)),s.rawModifiedAt=t[1]+" "+t[2],s},t.transformList=function(e){return e}},9660:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseMLSxDate=t.transformList=t.parseLine=t.testLine=void 0;const i=r(4020);function n(e,t){t.size=parseInt(e,10)}const s={size:n,sizd:n,unique:(e,t)=>{t.uniqueID=e},modify:(e,t)=>{t.modifiedAt=a(e),t.rawModifiedAt=t.modifiedAt.toISOString()},type:(e,t)=>{if(e.startsWith("OS.unix=slink"))return t.type=i.FileType.SymbolicLink,t.link=e.substr(e.indexOf(":")+1),1;switch(e){case"file":t.type=i.FileType.File;break;case"dir":t.type=i.FileType.Directory;break;case"OS.unix=symlink":t.type=i.FileType.SymbolicLink;break;case"cdir":case"pdir":return 2;default:t.type=i.FileType.Unknown}return 1},"unix.mode":(e,t)=>{const r=e.substr(-3);t.permissions={user:parseInt(r[0],10),group:parseInt(r[1],10),world:parseInt(r[2],10)}},"unix.ownername":(e,t)=>{t.user=e},"unix.owner":(e,t)=>{void 0===t.user&&(t.user=e)},get"unix.uid"(){return this["unix.owner"]},"unix.groupname":(e,t)=>{t.group=e},"unix.group":(e,t)=>{void 0===t.group&&(t.group=e)},get"unix.gid"(){return this["unix.group"]}};function o(e,t){const r=e.indexOf(t);return[e.substr(0,r),e.substr(r+t.length)]}function a(e){return new Date(Date.UTC(+e.slice(0,4),+e.slice(4,6)-1,+e.slice(6,8),+e.slice(8,10),+e.slice(10,12),+e.slice(12,14),+e.slice(15,18)))}t.testLine=function(e){return/^\S+=\S+;/.test(e)||e.startsWith(" ")},t.parseLine=function(e){const[t,r]=o(e," ");if(""===r||"."===r||".."===r)return;const n=new i.FileInfo(r),a=t.split(";");for(const e of a){const[t,r]=o(e,"=");if(!r)continue;const i=s[t.toLowerCase()];if(i&&2===i(r,n))return}return n},t.transformList=function(e){const t=new Map;for(const r of e)r.isSymbolicLink||void 0===r.uniqueID||t.set(r.uniqueID,r);const r=[];for(const i of e){if(i.isSymbolicLink&&void 0!==i.uniqueID&&void 0===i.link){const e=t.get(i.uniqueID);void 0!==e&&(i.link=e.name)}!i.name.includes("/")&&r.push(i)}return r},t.parseMLSxDate=a},8512:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformList=t.parseLine=t.testLine=void 0;const i=r(4020),n=new RegExp("([bcdelfmpSs-])(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?\\s*(\\d+)\\s+(?:(\\S+(?:\\s\\S+)*?)\\s+)?(?:(\\S+(?:\\s\\S+)*)\\s+)?(\\d+(?:,\\s*\\d+)?)\\s+((?:\\d+[-/]\\d+[-/]\\d+)|(?:\\S{3}\\s+\\d{1,2})|(?:\\d{1,2}\\s+\\S{3})|(?:\\d{1,2}月\\s+\\d{1,2}日))\\s+((?:\\d+(?::\\d+)?)|(?:\\d{4}年))\\s(.*)");function s(e,t,r){let n=0;"-"!==e&&(n+=i.FileInfo.UnixPermission.Read),"-"!==t&&(n+=i.FileInfo.UnixPermission.Write);const s=r.charAt(0);return"-"!==s&&s.toUpperCase()!==s&&(n+=i.FileInfo.UnixPermission.Execute),n}t.testLine=function(e){return n.test(e)},t.parseLine=function(e){const t=e.match(n);if(null===t)return;const r=t[21];if("."===r||".."===r)return;const o=new i.FileInfo(r);switch(o.size=parseInt(t[18],10),o.user=t[16],o.group=t[17],o.hardLinkCount=parseInt(t[15],10),o.rawModifiedAt=t[19]+" "+t[20],o.permissions={user:s(t[4],t[5],t[6]),group:s(t[8],t[9],t[10]),world:s(t[12],t[13],t[14])},t[1].charAt(0)){case"d":o.type=i.FileType.Directory;break;case"e":case"l":o.type=i.FileType.SymbolicLink;break;case"b":case"c":case"f":case"-":o.type=i.FileType.File;break;default:o.type=i.FileType.Unknown}if(o.isSymbolicLink){const e=r.indexOf(" -> ");-1!==e&&(o.name=r.substring(0,e),o.link=r.substring(e+4))}return o},t.transformList=function(e){return e}},5224:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.downloadTo=t.uploadFrom=t.connectForPassiveTransfer=t.parsePasvResponse=t.enterPassiveModeIPv4=t.parseEpsvResponse=t.enterPassiveModeIPv6=void 0;const i=r(6708),n=r(192),s=r(3512);function o(e){const t=e.match(/[|!]{3}(.+)[|!]/);if(null===t||void 0===t[1])throw new Error(`Can't parse response to 'EPSV': ${e}`);const r=parseInt(t[1],10);if(Number.isNaN(r))throw new Error(`Can't parse response to 'EPSV', port is not a number: ${e}`);return r}function a(e){const t=e.match(/([-\d]+,[-\d]+,[-\d]+,[-\d]+),([-\d]+),([-\d]+)/);if(null===t||4!==t.length)throw new Error(`Can't parse response to 'PASV': ${e}`);return{host:t[1].replace(/,/g,"."),port:256*(255&parseInt(t[2],10))+(255&parseInt(t[3],10))}}function c(e,t,r){return new Promise(((i,s)=>{const o=function(e){e.message="Can't open data connection in passive mode: "+e.message,s(e)};let a=r._newSocket();a.on("error",o),a.connect({port:t,host:e,family:r.ipFamily},(()=>{r.socket instanceof n.TLSSocket&&(a=n.connect(Object.assign({},r.tlsOptions,{socket:a,session:r.socket.getSession()}))),a.removeListener("error",o),r.dataSocket=a,i()}))}))}t.enterPassiveModeIPv6=async function(e){const t=await e.request("EPSV"),r=o(t.message);if(!r)throw new Error("Can't parse EPSV response: "+t.message);const i=e.socket.remoteAddress;if(void 0===i)throw new Error("Control socket is disconnected, can't get remote address.");return await c(i,r,e),t},t.parseEpsvResponse=o,t.enterPassiveModeIPv4=async function(e){const t=await e.request("PASV"),r=a(t.message);if(!r)throw new Error("Can't parse PASV response: "+t.message);const n=e.socket.remoteAddress;return i.ipIsPrivateV4Address(r.host)&&n&&!i.ipIsPrivateV4Address(n)&&(r.host=n),await c(r.host,r.port,e),t},t.parsePasvResponse=a,t.connectForPassiveTransfer=c;class h{constructor(e,t){this.ftp=e,this.progress=t,this.response=void 0,this.dataTransferDone=!1}onDataStart(e,t){if(void 0===this.ftp.dataSocket)throw new Error("Data transfer should start but there is no data connection.");this.ftp.socket.setTimeout(0),this.ftp.dataSocket.setTimeout(this.ftp.timeout),this.progress.start(this.ftp.dataSocket,e,t)}onDataDone(e){this.progress.updateAndStop(),this.ftp.socket.setTimeout(this.ftp.timeout),this.ftp.dataSocket&&this.ftp.dataSocket.setTimeout(0),this.dataTransferDone=!0,this.tryResolve(e)}onControlDone(e,t){this.response=t,this.tryResolve(e)}onError(e,t){this.progress.updateAndStop(),this.ftp.socket.setTimeout(this.ftp.timeout),this.ftp.dataSocket=void 0,e.reject(t)}onUnexpectedRequest(e){const t=new Error(`Unexpected FTP response is requesting an answer: ${e.message}`);this.ftp.closeWithError(t)}tryResolve(e){this.dataTransferDone&&void 0!==this.response&&(this.ftp.dataSocket=void 0,e.resolve(this.response))}}function f(e,t,r,i){!0===e?i():t.once(r,(()=>i()))}t.uploadFrom=function(e,t){const r=new h(t.ftp,t.tracker),n=`${t.command} ${t.remotePath}`;return t.ftp.handle(n,((n,o)=>{if(n instanceof Error)r.onError(o,n);else if(150===n.code||125===n.code){const n=t.ftp.dataSocket;if(!n)return void r.onError(o,new Error("Upload should begin but no data connection is available."));f(!("getCipher"in n)||void 0!==n.getCipher(),n,"secureConnect",(()=>{t.ftp.log(`Uploading to ${i.describeAddress(n)} (${i.describeTLS(n)})`),r.onDataStart(t.remotePath,t.type),e.pipe(n).once("finish",(()=>{n.destroy(),r.onDataDone(o)}))}))}else s.positiveCompletion(n.code)?r.onControlDone(o,n):s.positiveIntermediate(n.code)&&r.onUnexpectedRequest(n)}))},t.downloadTo=function(e,t){if(!t.ftp.dataSocket)throw new Error("Download will be initiated but no data connection is available.");t.ftp.dataSocket.pipe(e);const r=new h(t.ftp,t.tracker);return t.ftp.handle(t.command,((n,o)=>{if(n instanceof Error)r.onError(o,n);else if(150===n.code||125===n.code){const n=t.ftp.dataSocket;if(!n)return void r.onError(o,new Error("Download should begin but no data connection is available."));t.ftp.log(`Downloading from ${i.describeAddress(n)} (${i.describeTLS(n)})`),r.onDataStart(t.remotePath,t.type),f(function(e){if(e.writableFinished)return!0;const t=e._writableState;return!(!t||t.errored)&&(t.finished||t.ended&&0===t.length)}(e),e,"finish",(()=>r.onDataDone(o)))}else 350===n.code?t.ftp.send("RETR "+t.remotePath):s.positiveCompletion(n.code)?r.onControlDone(o,n):s.positiveIntermediate(n.code)&&r.onUnexpectedRequest(n)}))}},4688:(e,t,r)=>{"use strict";var i=r(9268).lowlevel.crypto_hash,n=0,s=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function o(e,t,r){return(e[0][t[r+3]]+e[1][t[r+2]]^e[2][t[r+1]])+e[3][t[r]]}function a(e,t){var r,i=0;for(r=0;r<4;r++,n++)n>=t&&(n=0),i=i<<8|e[n];return i}s.prototype.encipher=function(e,t){void 0===t&&(t=new Uint8Array(e.buffer),0!==e.byteOffset&&(t=t.subarray(e.byteOffset))),e[0]^=this.P[0];for(var r=1;r<16;r+=2)e[1]^=o(this.S,t,0)^this.P[r],e[0]^=o(this.S,t,4)^this.P[r+1];var i=e[0];e[0]=e[1]^this.P[17],e[1]=i},s.prototype.decipher=function(e){var t=new Uint8Array(e.buffer);0!==e.byteOffset&&(t=t.subarray(e.byteOffset)),e[0]^=this.P[17];for(var r=16;r>0;r-=2)e[1]^=o(this.S,t,0)^this.P[r],e[0]^=o(this.S,t,4)^this.P[r-1];var i=e[0];e[0]=e[1]^this.P[0],e[1]=i},s.prototype.expand0state=function(e,t){var r,i,s=new Uint32Array(2),o=new Uint8Array(s.buffer);for(r=0,n=0;r<18;r++)this.P[r]^=a(e,t);for(n=0,r=0;r<18;r+=2)this.encipher(s,o),this.P[r]=s[0],this.P[r+1]=s[1];for(r=0;r<4;r++)for(i=0;i<256;i+=2)this.encipher(s,o),this.S[r][i]=s[0],this.S[r][i+1]=s[1]},s.prototype.expandstate=function(e,t,r,i){var s,o,c=new Uint32Array(2);for(s=0,n=0;s<18;s++)this.P[s]^=a(r,i);for(s=0,n=0;s<18;s+=2)c[0]^=a(e,t),c[1]^=a(e,t),this.encipher(c),this.P[s]=c[0],this.P[s+1]=c[1];for(s=0;s<4;s++)for(o=0;o<256;o+=2)c[0]^=a(e,t),c[1]^=a(e,t),this.encipher(c),this.S[s][o]=c[0],this.S[s][o+1]=c[1];n=0},s.prototype.enc=function(e,t){for(var r=0;r<t;r++)this.encipher(e.subarray(2*r))},s.prototype.dec=function(e,t){for(var r=0;r<t;r++)this.decipher(e.subarray(2*r))};function c(e,t,r){var i,n=new s,o=new Uint32Array(8),c=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(n.expandstate(t,64,e,64),i=0;i<64;i++)n.expand0state(t,64),n.expand0state(e,64);for(i=0;i<8;i++)o[i]=a(c,c.byteLength);for(i=0;i<64;i++)n.enc(o,o.byteLength/8);for(i=0;i<8;i++)r[4*i+3]=o[i]>>>24,r[4*i+2]=o[i]>>>16,r[4*i+1]=o[i]>>>8,r[4*i+0]=o[i]}e.exports={BLOCKS:8,HASHSIZE:32,hash:c,pbkdf:function(e,t,r,n,s,o,a){var h,f,u,l,p,d,g=new Uint8Array(64),E=new Uint8Array(64),m=new Uint8Array(32),v=new Uint8Array(32),y=new Uint8Array(n+4),_=o;if(a<1)return-1;if(0===t||0===n||0===o||o>m.byteLength*m.byteLength||n>1<<20)return-1;for(l=Math.floor((o+m.byteLength-1)/m.byteLength),u=Math.floor((o+l-1)/l),h=0;h<n;h++)y[h]=r[h];for(i(g,e,t),d=1;o>0;d++){for(y[n+0]=d>>>24,y[n+1]=d>>>16,y[n+2]=d>>>8,y[n+3]=d,i(E,y,n+4),c(g,E,v),h=m.byteLength;h--;)m[h]=v[h];for(h=1;h<a;h++)for(i(E,v,v.byteLength),c(g,E,v),f=0;f<m.byteLength;f++)m[f]^=v[f];for(u=Math.min(u,o),h=0;h<u&&!((p=h*l+(d-1))>=_);h++)s[p]=m[h];o-=h}return 0}}},6968:(e,t,r)=>{"use strict";var i,n=r(2588),s=n.Buffer,o={};for(i in n)n.hasOwnProperty(i)&&"SlowBuffer"!==i&&"Buffer"!==i&&(o[i]=n[i]);var a=o.Buffer={};for(i in s)s.hasOwnProperty(i)&&"allocUnsafe"!==i&&"allocUnsafeSlow"!==i&&(a[i]=s[i]);if(o.Buffer.prototype=s.prototype,a.from&&a.from!==Uint8Array.from||(a.from=function(e,t,r){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return s(e,t,r)}),a.alloc||(a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var i=s(e);return t&&0!==t.length?"string"==typeof r?i.fill(t,r):i.fill(t):i.fill(0),i}),!o.kStringMaxLength)try{o.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}o.constants||(o.constants={MAX_LENGTH:o.kMaxLength},o.kStringMaxLength&&(o.constants.MAX_STRING_LENGTH=o.kStringMaxLength)),e.exports=o},1240:(e,t,r)=>{var i=r(467).EventEmitter;function n(e,t,r,i,n){for(var s=0;s<n;++s,++t,++i)if(e[t]!==r[i])return!1;return!0}function s(e){"string"==typeof e&&(e=new Buffer(e));var t,r,i=e.length;for(this.maxMatches=1/0,this.matches=0,this._occ=new Array(256),this._lookbehind_size=0,this._needle=e,this._bufpos=0,this._lookbehind=new Buffer(i),r=0;r<256;++r)this._occ[r]=i;if(i>=1)for(t=0;t<i-1;++t)this._occ[e[t]]=i-1-t}(0,r(970).inherits)(s,i),s.prototype.reset=function(){this._lookbehind_size=0,this.matches=0,this._bufpos=0},s.prototype.push=function(e,t){var r,i;for(Buffer.isBuffer(e)||(e=new Buffer(e,"binary")),i=e.length,this._bufpos=t||0;r!==i&&this.matches<this.maxMatches;)r=this._sbmh_feed(e);return r},s.prototype._sbmh_feed=function(e){var t=e.length,r=this._needle,i=r.length,s=-this._lookbehind_size,o=r[i-1],a=this._occ,c=this._lookbehind;if(s<0){for(;s<0&&s<=t-i;){if((f=this._sbmh_lookup_char(e,s+i-1))===o&&this._sbmh_memcmp(e,s,i-1))return this._lookbehind_size=0,++this.matches,s>-this._lookbehind_size?this.emit("info",!0,c,0,this._lookbehind_size+s):this.emit("info",!0),this._bufpos=s+i,s+i;s+=a[f]}if(s<0)for(;s<0&&!this._sbmh_memcmp(e,s,t-s);)s++;if(!(s>=0)){var h=this._lookbehind_size+s;return h>0&&this.emit("info",!1,c,0,h),c.copy(c,0,h,this._lookbehind_size-h),this._lookbehind_size-=h,e.copy(c,this._lookbehind_size),this._lookbehind_size+=t,this._bufpos=t,t}this.emit("info",!1,c,0,this._lookbehind_size),this._lookbehind_size=0}for(s>=0&&(s+=this._bufpos);s<=t-i;){var f;if((f=e[s+i-1])===o&&e[s]===r[0]&&n(r,0,e,s,i-1))return++this.matches,s>0?this.emit("info",!0,e,this._bufpos,s):this.emit("info",!0),this._bufpos=s+i,s+i;s+=a[f]}if(s<t){for(;s<t&&(e[s]!==r[0]||!n(e,s,r,0,t-s));)++s;s<t&&(e.copy(c,0,s,s+(t-s)),this._lookbehind_size=t-s)}return s>0&&this.emit("info",!1,e,this._bufpos,s<t?s:t),this._bufpos=t,t},s.prototype._sbmh_lookup_char=function(e,t){return t<0?this._lookbehind[this._lookbehind_size+t]:e[t]},s.prototype._sbmh_memcmp=function(e,t,r){for(var i=0;i<r;){if(this._sbmh_lookup_char(e,t+i)!==this._needle[i])return!1;++i}return!0},e.exports=s},9668:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const n=r(467),s=r(2058),o=r(9748),a=r(8652),c=r(5520),h=r(5712),f=r(6711);class u extends n.EventEmitter{get config(){return this._config}constructor(e){super(),this.workers=[],this.tasks=new o.TasksManager,this.transfers=new Map,this.strategies={ftp:a.FtpStrategy,ftps:a.FtpStrategy,sftp:f.SftpStrategy},this.handleWorkerEvents=e=>{e.on("connect",this.onConnect),e.on("disconnect",this.onDisconnect),e.on("progress",this.onProgress)},this.clearWorkerEvents=e=>{e.removeListener("connect",this.onConnect),e.removeListener("disconnect",this.onDisconnect),e.removeListener("progress",this.onProgress)},this.getWorkerInstance=e=>this.workers[e],this.workerFilter=(e,t)=>"all"===e.group||!t&&"misc"===e.group||e.group===t,this.onConnect=()=>{this.emit("connect")},this.onDisconnect=()=>{this.emit("disconnect")},this.onProgress=(e,t)=>{this.emit("transfer-progress",e,t)},this.options=Object.assign({pool:1},e),this.tasks.getWorkerInstance=this.getWorkerInstance,this.tasks.workerFilter=this.workerFilter}registerProtocol(e,t){this.strategies[e]=t}unregisterProtocol(e){delete this.strategies[e]}createWorker(){const{protocol:e}=this.config,t=this.strategies[e];if(!t)throw new Error(`Strategy for protocol ${e} not found.`);return new t(this.config,this._connectionOptions)}setWorkers(){this.workers.forEach(this.clearWorkerEvents),this.workers=[];const{pool:e}=this.options;for(let t=0;t<e;t++){const e=this.createWorker();this.handleWorkerEvents(e),this.workers.push(e)}this.setWorkerGroups()}setWorkerGroups(){const{pool:e,transferPool:t}=this.options,r=[];t&&1!==e?r.push("misc",...(0,c.repeat)("transfer",e-1)):r.push(...(0,c.repeat)("all",e)),this.tasks.setWorkers(...r)}connect(e,t){return i(this,void 0,void 0,(function*(){if(!this._config&&!e)throw new Error("Config must be provided!");yield this.disconnect(),e&&(this._config=e),t&&(this._connectionOptions=t),this.setWorkers(),yield Promise.all(this.workers.map((e=>e.connect())))}))}disconnect(){return i(this,void 0,void 0,(function*(){yield Promise.all(this.workers.map((e=>e.disconnect())))}))}abort(){return i(this,void 0,void 0,(function*(){this.emit("transfer-abort",...this.transfers.keys()),this.tasks.deleteAllTasks(),yield Promise.all(this.workers.map((e=>e.abort())))}))}abortTransfer(...e){return i(this,void 0,void 0,(function*(){const t=[],r=[];e.forEach((e=>{const i=this.transfers.get(e);null!=i&&r.push(this.workers[i]),t.push(i),this.emit("transfer-abort",e)})),this.tasks.deleteTasks(...e),this.tasks.pauseWorkers(...t),yield Promise.all(r.map((e=>e.abort()))),this.tasks.resumeWorkers(...t)}))}download(e,t,r){let n,o;return"string"==typeof e?(n=(0,s.createWriteStream)(e,{flags:r?"a":"w",start:r}),o=e):(n=e,o=(0,h.getPathFromStream)(e)),this.handleTransfer((({instance:e,taskId:s})=>i(this,void 0,void 0,(function*(){const i=yield e.size(t);yield e.download(n,{id:s,startAt:r,localPath:o,remotePath:t,totalBytes:i})}))),{remotePath:t,localPath:o})}upload(e,t){let r,n;return"string"==typeof e?(r=(0,s.createReadStream)(e),n=e):(r=e,n=(0,h.getPathFromStream)(e)),this.handleTransfer((({instance:e,taskId:s})=>i(this,void 0,void 0,(function*(){const i=yield(0,h.getFileSize)(n);yield e.upload(r,{id:s,localPath:n,remotePath:t,totalBytes:i})}))),{remotePath:t,localPath:n})}list(e){return this.tasks.handle((({instance:t})=>t.list(e)))}size(e){return this.tasks.handle((({instance:t})=>t.size(e)))}exists(e){return this.tasks.handle((({instance:t})=>t.exists(e)))}move(e,t){return this.tasks.handle((({instance:r})=>r.move(e,t)))}removeFile(e){return this.tasks.handle((({instance:t})=>t.removeFile(e)))}removeEmptyFolder(e){return this.tasks.handle((({instance:t})=>t.removeEmptyFolder(e)))}removeFolder(e){return this.tasks.handle((({instance:t})=>t.removeFolder(e)))}createFolder(e){return this.tasks.handle((({instance:t})=>t.createFolder(e)))}createEmptyFile(e){return this.tasks.handle((({instance:t})=>t.createEmptyFile(e)))}pwd(){return this.tasks.handle((({instance:e})=>e.pwd()))}send(e){return this.tasks.handle((({instance:t})=>t.send(e)))}handleTransfer(e,t){return i(this,void 0,void 0,(function*(){const r=this.tasks.createTaskId(),n=Object.assign({id:r},t);this.transfers.set(r,null),this.emit("transfer-new",n);try{yield this.tasks.handle((t=>i(this,void 0,void 0,(function*(){this.transfers.set(r,t.workerIndex),yield e(t)}))),"transfer-transfer",r)}catch(e){throw e}finally{this.transfers.delete(r),this.emit("transfer-finish",n)}}))}}t.Client=u},8652:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.FtpStrategy=void 0;const n=r(7636),s=r(8378),o=r(3911),a=r(3828);class c extends o.Strategy{constructor(){super(...arguments),this.connect=()=>i(this,void 0,void 0,(function*(){var e;this.connected||(this.client||(this.client=new n.Client),yield this.client.access(Object.assign({secure:this.isFTPS,secureOptions:null===(e=this.options)||void 0===e?void 0:e.secureOptions},this.config)),this.emit("connect"))})),this.disconnect=()=>i(this,void 0,void 0,(function*(){return this.connected?(this.emit("disconnect"),new Promise((e=>{this.client.close(),this.client.ftp.socket.once("close",(()=>{this.client=null,e()}))}))):null})),this.download=(e,t,r)=>i(this,void 0,void 0,(function*(){return this.handleTransfer((()=>this.client.downloadTo(e,t.remotePath,t.startAt)),t,r)})),this.upload=(e,t,r)=>i(this,void 0,void 0,(function*(){return this.handleTransfer((()=>this.client.uploadFrom(e,t.remotePath)),t,r)})),this.list=e=>this.handle((()=>this.client.list(e).then((e=>e.map(this.formatFile))))),this.size=e=>this.handle((()=>this.client.size(e))),this.exists=e=>i(this,void 0,void 0,(function*(){try{yield this.client.rename(e,e)}catch(e){return!1}return!0})),this.move=(e,t)=>this.handle((()=>this.client.rename(e,t))),this.removeFile=e=>this.handle((()=>this.client.remove(e))),this.removeEmptyFolder=e=>this.handle((()=>this.client.removeEmptyDir(e))),this.removeFolder=e=>this.handle((()=>this.client.removeDir(e))),this.createFolder=e=>i(this,void 0,void 0,(function*(){yield this.send(`MKD ${e}`)})),this.createEmptyFile=e=>i(this,void 0,void 0,(function*(){const t=s.Readable.from("\n");yield this.upload(t,{remotePath:e},{quiet:!0})})),this.pwd=()=>this.handle((()=>this.client.pwd())),this.send=e=>this.handle((()=>this.client.send(e).then((e=>e.message)))),this.formatFile=e=>Object.assign(Object.assign({},a.FtpUtils.formatFile(e)),{lastModified:a.FtpUtils.getValidDate(e.date)}),this.handle=e=>i(this,void 0,void 0,(function*(){try{return yield e()}catch(e){const t=e.message;if("Client is closed"!==t&&!t.startsWith("User closed client during task"))throw e}return null})),this.handleTransfer=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=this.prepareTransfer(t,r);this.client.trackProgress((e=>n(e.bytes))),yield this.handle(e),null===(i=this.client)||void 0===i||i.trackProgress(void 0),this.finishTransfer()}))}get connected(){var e;return!1===(null===(e=this.client)||void 0===e?void 0:e.closed)}get isFTPS(){return"ftps"===this.config.protocol}get socket(){var e,t;return null===(t=null===(e=this.client)||void 0===e?void 0:e.ftp)||void 0===t?void 0:t.socket}}t.FtpStrategy=c},6711:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SftpStrategy=void 0;const n=r(970),s=r(461),o=r(7636),a=r(3911),c=r(3828);class h extends a.Strategy{constructor(){super(...arguments),this.connected=!1,this.connect=()=>new Promise(((e,t)=>{var r,n;if(this.connected)return e();this.client=new s.Client;const o=()=>{this.client.removeListener("error",a),this.client.removeListener("ready",c),this.client.removeListener("keyboard-interactive",this.onKeyboardInteractive)},a=e=>{o(),t(e)},c=()=>i(this,void 0,void 0,(function*(){o();try{this.wrapper=yield this.getWrapper(),this.connected=!0,this.emit("connect"),e()}catch(e){t(e)}finally{o()}}));this.client.once("error",a),this.client.once("ready",c),this.client.once("end",this.onDisconnect),(null===(r=this.options)||void 0===r?void 0:r.tryKeyboard)&&this.client.once("keyboard-interactive",this.onKeyboardInteractive),this.client.connect(Object.assign(Object.assign({},this.config),{username:this.config.user,readyTimeout:null===(n=this.options)||void 0===n?void 0:n.timeout}))})),this.onKeyboardInteractive=(e,t,r,i,n)=>{n([this.config.password])},this.onDisconnect=()=>{this.connected=!1,this.client=null,this.wrapper=null,this.emit("disconnect")},this.disconnect=()=>this.connected?new Promise((e=>{this.socket.once("close",(()=>{e()})),this.client.end()})):null,this.download=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=null===(i=this.wrapper)||void 0===i?void 0:i.createReadStream(t.remotePath,{start:t.startAt,autoClose:!0});return this.handleTransfer(n,e,t,r)})),this.upload=(e,t,r)=>i(this,void 0,void 0,(function*(){var i;const n=null===(i=this.wrapper)||void 0===i?void 0:i.createWriteStream(t.remotePath);return this.handleTransfer(e,n,t,r)})),this.list=(e="./")=>this._list(e).then((e=>null==e?void 0:e.map((e=>this.formatFile((0,o.parseList)(e.longname)[0],e))))),this.formatFile=(e,t)=>Object.assign(Object.assign({},c.FtpUtils.formatFile(e)),{lastModified:c.FtpUtils.getDateFromUnixTime(t.attrs.mtime)}),this.size=e=>this._stat(e).then((e=>null==e?void 0:e.size)),this.exists=e=>i(this,void 0,void 0,(function*(){try{yield this._stat(e)}catch(e){return!1}return!0})),this.move=(e,t)=>{var r;return this.handle(null===(r=this.wrapper)||void 0===r?void 0:r.rename,e,t)},this.removeFile=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.unlink,e)},this.removeEmptyFolder=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.rmdir,e)},this.removeFolder=e=>i(this,void 0,void 0,(function*(){const t=yield this._list(e);if(t.length)for(const r of t){const t=e+"/"+r.filename;r.attrs.isDirectory()?yield this.removeFolder(t):yield this.removeFile(t)}yield this.removeEmptyFolder(e)})),this.createFolder=e=>{var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.mkdir,e)},this.createEmptyFile=e=>i(this,void 0,void 0,(function*(){const t=yield this._open(e,"w");t&&(yield this._close(t))})),this.pwd=()=>{var e;return this.handle(null===(e=this.wrapper)||void 0===e?void 0:e.realpath,"./")},this.send=e=>i(this,void 0,void 0,(function*(){let t="";return yield this.handleNetwork(((r,i)=>{this.client.exec(e,((e,n)=>{if(e)return i(e);n.on("data",(e=>{t+=e})),n.once("error",i),n.once("close",r)}))}),(()=>{})),t})),this.handle=(e,...t)=>this.handleNetwork(((r,i)=>{if(!e)return r(null);e.bind(this.wrapper)(...t,((e,...t)=>{if(e)return i(e);r(...t)}))})),this.handleTransfer=(e,t,r,i)=>{if(!e||!t)return null;const n=this.prepareTransfer(r,i);return this.handleNetwork(((r,i)=>{let s=0;e.on("data",(e=>{s+=e.byteLength,n(s)})),e.once("error",i),e.once("close",r),e.pipe(t)}),(()=>{e.unpipe(t),e.removeAllListeners(),this.finishTransfer()}))}}get socket(){return this.client._sock}getWrapper(){return(0,n.promisify)(this.client.sftp).bind(this.client)()}_list(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.readdir,e)}_stat(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.stat,e)}_open(e,t){var r;return this.handle(null===(r=this.wrapper)||void 0===r?void 0:r.open,e,t)}_close(e){var t;return this.handle(null===(t=this.wrapper)||void 0===t?void 0:t.close,e)}}t.SftpStrategy=h},3911:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Strategy=void 0;const n=r(467),s=r(9992);class o extends n.EventEmitter{abort(){return i(this,void 0,void 0,(function*(){yield this.disconnect(),yield this.connect()}))}constructor(e,t){super(),this.config=e,this.options=t}prepareTransfer(e,t){return this.transfer=new s.Transfer(e,t,((e,t)=>{this.emit("progress",e,t)})),this.transfer.handleProgress}finishTransfer(){this.transfer=null}handleNetwork(e,t){return new Promise(((r,i)=>{const n=()=>{this.removeListener("disconnect",s),t&&t(o,a)},s=()=>o(null),o=e=>{n(),r(e)},a=e=>{n(),i(e)};this.once("disconnect",s),e(o,a)}))}}t.Strategy=o},9748:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TasksManager=void 0;const n=r(467),s=r(9512),o=(e,t)=>e.group===t;class a extends n.EventEmitter{constructor(){super(...arguments),this.workers=[],this.queue=[],this.taskCounter=-1,this.unavailableWorkers=0,this.process=(e,t)=>i(this,void 0,void 0,(function*(){if(t=t||this.getWorker(e.group)){t.busy=!0,this.unavailableWorkers++;const r=this.getWorkerInstance?this.getWorkerInstance(t.index,e.group):t.index,{data:i,error:n}=yield(0,s.execFunction)(e.fn,{instance:r,taskId:e.id,workerIndex:t.index});t.busy=!1,this.unavailableWorkers--,this.finishTask(e.id,i,n),this.processNext()}else this.queue.push(e)}))}getWorker(e){if(this.unavailableWorkers===this.workers.length)return null;const t=this.workerFilter||o;return this.workers.find((r=>!r.busy&&!r.paused&&t(r,e)))}getWorkers(e){return(null==e?void 0:e.length)?e.map((e=>this.workers[e])):this.workers}setWorkers(...e){this.workers=e.map(((e,t)=>({busy:!1,group:e,index:t})))}handle(e,t,r){return i(this,void 0,void 0,(function*(){return this.workersCheck(),new Promise(((i,n)=>{const s={id:null!=r?r:this.createTaskId(),fn:e,group:t},o=e=>{if(e.taskId===s.id){if(this.removeListener("change",o),e.error)return n(e.error);i(e.data)}};this.on("change",o),this.process(s)}))}))}processNext(){return i(this,void 0,void 0,(function*(){if(this.queue.length){const e=[];for(const t of this.queue){const r=this.getWorker(t.group);r?this.process(t,r):e.push(t)}this.queue=e}}))}workersCheck(){if(!this.workers.length)throw new Error("No workers set")}pauseWorkers(...e){this.unavailableWorkers+=e.length,this.getWorkers(e).forEach((e=>e.paused=!0))}resumeWorkers(...e){this.unavailableWorkers-=e.length,this.getWorkers(e).forEach((e=>e.paused=!1)),this.processNext()}deleteTasks(...e){const t=[];this.queue.forEach((r=>{e.includes(r.id)?this.finishTask(r.id):t.push(r)})),this.queue=t}deleteAllTasks(){this.queue.forEach((e=>this.finishTask(e.id))),this.queue=[]}createTaskId(){return++this.taskCounter}finishTask(e,t,r){this.emit("change",{taskId:e,data:t,error:r,type:"finished"})}}t.TasksManager=a},9992:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Transfer=void 0,t.Transfer=class{constructor(e,t,r){var i;this.info=e,this.options=t,this.onProgress=r,this.handleProgress=e=>{var t;this.bytes=e;const{id:r,localPath:i,remotePath:n,totalBytes:s}=this.info;(null===(t=this.options)||void 0===t?void 0:t.quiet)||this.onProgress({id:r,localPath:i,remotePath:n},{bytes:e,totalBytes:s,speed:this.speed,eta:this.eta,percent:this.percent})},this.startTime=Date.now(),this.bytes=null!==(i=null==e?void 0:e.startAt)&&void 0!==i?i:0}get elapsed(){return(Date.now()-this.startTime)/1e3}get speed(){const e=this.elapsed;return 0===e?0:Math.round(this.bytes/e)}get eta(){if(0===this.speed)return null;const e=this.info.totalBytes/this.speed;return Math.round(e-this.elapsed)}get percent(){return Math.round(this.bytes/this.info.totalBytes*100)}}},5520:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0,t.repeat=(e,t)=>Array(t).fill(e)},5712:function(e,t,r){"use strict";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getFileSize=t.getPathFromStream=void 0;const n=r(2058);t.getPathFromStream=e=>e.path,t.getFileSize=e=>i(void 0,void 0,void 0,(function*(){if(!e)return-1;const{size:t}=yield n.promises.stat(e);return t}))},3828:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FtpUtils=void 0;const i=r(7636),n=/[0-9][0-9]-[0-9][0-9]-[0-9][0-9]\s[0-9][0-9]\:[0-9][0-9][PA]M/gi;t.FtpUtils=class{static formatFile(e){const{permissions:t,name:r,size:i,user:n,group:s,type:o}=e;return{name:r,type:this.getFileType(o),size:i,owner:n,group:s,permissions:{owner:null==t?void 0:t.user,group:null==t?void 0:t.group}}}static getFileType(e){switch(e){case i.FileType.Directory:return"folder";case i.FileType.File:return"file";case i.FileType.SymbolicLink:return"symbolic-link"}return"unknown"}static getValidDate(e){const t=e.trim();if(!t.match(n))return new Date(t);const[r,i,s,o,a]=t.match(/[0-9][0-9]/g);let c=parseInt(o);return"P"===t[t.length-2]&&(c+=12),new Date(parseInt(`20${s}`),parseInt(r)-1,parseInt(i),c,parseInt(a))}static getDateFromUnixTime(e){return new Date(1e3*e)}}},9512:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.execFunction=void 0,t.execFunction=(e,...t)=>r(void 0,void 0,void 0,(function*(){let r,i;try{r=yield e(...t)}catch(e){i=e}return{data:r,error:i}}))},9268:(e,t,r)=>{!function(e){"use strict";var t=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},i=function(){throw new Error("no PRNG")},n=new Uint8Array(16),s=new Uint8Array(32);s[0]=9;var o=t(),a=t([1]),c=t([56129,1]),h=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),f=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),u=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),l=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),p=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function d(e,t,r,i){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=i>>24&255,e[t+5]=i>>16&255,e[t+6]=i>>8&255,e[t+7]=255&i}function g(e,t,r,i,n){var s,o=0;for(s=0;s<n;s++)o|=e[t+s]^r[i+s];return(1&o-1>>>8)-1}function E(e,t,r,i){return g(e,t,r,i,16)}function m(e,t,r,i){return g(e,t,r,i,32)}function v(e,t,r,i){!function(e,t,r,i){for(var n,s=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,h=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,f=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,u=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,l=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,E=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,y=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=s,b=o,S=a,k=c,T=h,A=f,U=u,B=l,R=p,N=d,P=g,D=E,O=m,I=v,C=y,L=_,H=0;H<20;H+=2)w^=(n=(O^=(n=(R^=(n=(T^=(n=w+O|0)<<7|n>>>25)+w|0)<<9|n>>>23)+T|0)<<13|n>>>19)+R|0)<<18|n>>>14,A^=(n=(b^=(n=(I^=(n=(N^=(n=A+b|0)<<7|n>>>25)+A|0)<<9|n>>>23)+N|0)<<13|n>>>19)+I|0)<<18|n>>>14,P^=(n=(U^=(n=(S^=(n=(C^=(n=P+U|0)<<7|n>>>25)+P|0)<<9|n>>>23)+C|0)<<13|n>>>19)+S|0)<<18|n>>>14,L^=(n=(D^=(n=(B^=(n=(k^=(n=L+D|0)<<7|n>>>25)+L|0)<<9|n>>>23)+k|0)<<13|n>>>19)+B|0)<<18|n>>>14,w^=(n=(k^=(n=(S^=(n=(b^=(n=w+k|0)<<7|n>>>25)+w|0)<<9|n>>>23)+b|0)<<13|n>>>19)+S|0)<<18|n>>>14,A^=(n=(T^=(n=(B^=(n=(U^=(n=A+T|0)<<7|n>>>25)+A|0)<<9|n>>>23)+U|0)<<13|n>>>19)+B|0)<<18|n>>>14,P^=(n=(N^=(n=(R^=(n=(D^=(n=P+N|0)<<7|n>>>25)+P|0)<<9|n>>>23)+D|0)<<13|n>>>19)+R|0)<<18|n>>>14,L^=(n=(C^=(n=(I^=(n=(O^=(n=L+C|0)<<7|n>>>25)+L|0)<<9|n>>>23)+O|0)<<13|n>>>19)+I|0)<<18|n>>>14;w=w+s|0,b=b+o|0,S=S+a|0,k=k+c|0,T=T+h|0,A=A+f|0,U=U+u|0,B=B+l|0,R=R+p|0,N=N+d|0,P=P+g|0,D=D+E|0,O=O+m|0,I=I+v|0,C=C+y|0,L=L+_|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=b>>>0&255,e[5]=b>>>8&255,e[6]=b>>>16&255,e[7]=b>>>24&255,e[8]=S>>>0&255,e[9]=S>>>8&255,e[10]=S>>>16&255,e[11]=S>>>24&255,e[12]=k>>>0&255,e[13]=k>>>8&255,e[14]=k>>>16&255,e[15]=k>>>24&255,e[16]=T>>>0&255,e[17]=T>>>8&255,e[18]=T>>>16&255,e[19]=T>>>24&255,e[20]=A>>>0&255,e[21]=A>>>8&255,e[22]=A>>>16&255,e[23]=A>>>24&255,e[24]=U>>>0&255,e[25]=U>>>8&255,e[26]=U>>>16&255,e[27]=U>>>24&255,e[28]=B>>>0&255,e[29]=B>>>8&255,e[30]=B>>>16&255,e[31]=B>>>24&255,e[32]=R>>>0&255,e[33]=R>>>8&255,e[34]=R>>>16&255,e[35]=R>>>24&255,e[36]=N>>>0&255,e[37]=N>>>8&255,e[38]=N>>>16&255,e[39]=N>>>24&255,e[40]=P>>>0&255,e[41]=P>>>8&255,e[42]=P>>>16&255,e[43]=P>>>24&255,e[44]=D>>>0&255,e[45]=D>>>8&255,e[46]=D>>>16&255,e[47]=D>>>24&255,e[48]=O>>>0&255,e[49]=O>>>8&255,e[50]=O>>>16&255,e[51]=O>>>24&255,e[52]=I>>>0&255,e[53]=I>>>8&255,e[54]=I>>>16&255,e[55]=I>>>24&255,e[56]=C>>>0&255,e[57]=C>>>8&255,e[58]=C>>>16&255,e[59]=C>>>24&255,e[60]=L>>>0&255,e[61]=L>>>8&255,e[62]=L>>>16&255,e[63]=L>>>24&255}(e,t,r,i)}function y(e,t,r,i){!function(e,t,r,i){for(var n,s=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,h=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,f=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,u=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,l=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,E=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,y=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=0;w<20;w+=2)s^=(n=(m^=(n=(p^=(n=(h^=(n=s+m|0)<<7|n>>>25)+s|0)<<9|n>>>23)+h|0)<<13|n>>>19)+p|0)<<18|n>>>14,f^=(n=(o^=(n=(v^=(n=(d^=(n=f+o|0)<<7|n>>>25)+f|0)<<9|n>>>23)+d|0)<<13|n>>>19)+v|0)<<18|n>>>14,g^=(n=(u^=(n=(a^=(n=(y^=(n=g+u|0)<<7|n>>>25)+g|0)<<9|n>>>23)+y|0)<<13|n>>>19)+a|0)<<18|n>>>14,_^=(n=(E^=(n=(l^=(n=(c^=(n=_+E|0)<<7|n>>>25)+_|0)<<9|n>>>23)+c|0)<<13|n>>>19)+l|0)<<18|n>>>14,s^=(n=(c^=(n=(a^=(n=(o^=(n=s+c|0)<<7|n>>>25)+s|0)<<9|n>>>23)+o|0)<<13|n>>>19)+a|0)<<18|n>>>14,f^=(n=(h^=(n=(l^=(n=(u^=(n=f+h|0)<<7|n>>>25)+f|0)<<9|n>>>23)+u|0)<<13|n>>>19)+l|0)<<18|n>>>14,g^=(n=(d^=(n=(p^=(n=(E^=(n=g+d|0)<<7|n>>>25)+g|0)<<9|n>>>23)+E|0)<<13|n>>>19)+p|0)<<18|n>>>14,_^=(n=(y^=(n=(v^=(n=(m^=(n=_+y|0)<<7|n>>>25)+_|0)<<9|n>>>23)+m|0)<<13|n>>>19)+v|0)<<18|n>>>14;e[0]=s>>>0&255,e[1]=s>>>8&255,e[2]=s>>>16&255,e[3]=s>>>24&255,e[4]=f>>>0&255,e[5]=f>>>8&255,e[6]=f>>>16&255,e[7]=f>>>24&255,e[8]=g>>>0&255,e[9]=g>>>8&255,e[10]=g>>>16&255,e[11]=g>>>24&255,e[12]=_>>>0&255,e[13]=_>>>8&255,e[14]=_>>>16&255,e[15]=_>>>24&255,e[16]=u>>>0&255,e[17]=u>>>8&255,e[18]=u>>>16&255,e[19]=u>>>24&255,e[20]=l>>>0&255,e[21]=l>>>8&255,e[22]=l>>>16&255,e[23]=l>>>24&255,e[24]=p>>>0&255,e[25]=p>>>8&255,e[26]=p>>>16&255,e[27]=p>>>24&255,e[28]=d>>>0&255,e[29]=d>>>8&255,e[30]=d>>>16&255,e[31]=d>>>24&255}(e,t,r,i)}var _=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function w(e,t,r,i,n,s,o){var a,c,h=new Uint8Array(16),f=new Uint8Array(64);for(c=0;c<16;c++)h[c]=0;for(c=0;c<8;c++)h[c]=s[c];for(;n>=64;){for(v(f,h,o,_),c=0;c<64;c++)e[t+c]=r[i+c]^f[c];for(a=1,c=8;c<16;c++)a=a+(255&h[c])|0,h[c]=255&a,a>>>=8;n-=64,t+=64,i+=64}if(n>0)for(v(f,h,o,_),c=0;c<n;c++)e[t+c]=r[i+c]^f[c];return 0}function b(e,t,r,i,n){var s,o,a=new Uint8Array(16),c=new Uint8Array(64);for(o=0;o<16;o++)a[o]=0;for(o=0;o<8;o++)a[o]=i[o];for(;r>=64;){for(v(c,a,n,_),o=0;o<64;o++)e[t+o]=c[o];for(s=1,o=8;o<16;o++)s=s+(255&a[o])|0,a[o]=255&s,s>>>=8;r-=64,t+=64}if(r>0)for(v(c,a,n,_),o=0;o<r;o++)e[t+o]=c[o];return 0}function S(e,t,r,i,n){var s=new Uint8Array(32);y(s,i,n,_);for(var o=new Uint8Array(8),a=0;a<8;a++)o[a]=i[a+16];return b(e,t,r,o,s)}function k(e,t,r,i,n,s,o){var a=new Uint8Array(32);y(a,s,o,_);for(var c=new Uint8Array(8),h=0;h<8;h++)c[h]=s[h+16];return w(e,t,r,i,n,c,a)}var T=function(e){var t,r,i,n,s,o,a,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|r<<3),i=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(r>>>10|i<<6),n=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(i>>>7|n<<9),s=255&e[8]|(255&e[9])<<8,this.r[4]=255&(n>>>4|s<<12),this.r[5]=s>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(s>>>14|o<<2),a=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(o>>>11|a<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(a>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function A(e,t,r,i,n,s){var o=new T(s);return o.update(r,i,n),o.finish(e,t),0}function U(e,t,r,i,n,s){var o=new Uint8Array(16);return A(o,0,r,i,n,s),E(e,t,o,0)}function B(e,t,r,i,n){var s;if(r<32)return-1;for(k(e,0,t,0,r,i,n),A(e,16,e,32,r-32,e),s=0;s<16;s++)e[s]=0;return 0}function R(e,t,r,i,n){var s,o=new Uint8Array(32);if(r<32)return-1;if(S(o,0,32,i,n),0!==U(t,16,t,32,r-32,o))return-1;for(k(e,0,t,0,r,i,n),s=0;s<32;s++)e[s]=0;return 0}function N(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function P(e){var t,r,i=1;for(t=0;t<16;t++)r=e[t]+i+65535,i=Math.floor(r/65536),e[t]=r-65536*i;e[0]+=i-1+37*(i-1)}function D(e,t,r){for(var i,n=~(r-1),s=0;s<16;s++)i=n&(e[s]^t[s]),e[s]^=i,t[s]^=i}function O(e,r){var i,n,s,o=t(),a=t();for(i=0;i<16;i++)a[i]=r[i];for(P(a),P(a),P(a),n=0;n<2;n++){for(o[0]=a[0]-65517,i=1;i<15;i++)o[i]=a[i]-65535-(o[i-1]>>16&1),o[i-1]&=65535;o[15]=a[15]-32767-(o[14]>>16&1),s=o[15]>>16&1,o[14]&=65535,D(a,o,1-s)}for(i=0;i<16;i++)e[2*i]=255&a[i],e[2*i+1]=a[i]>>8}function I(e,t){var r=new Uint8Array(32),i=new Uint8Array(32);return O(r,e),O(i,t),m(r,0,i,0)}function C(e){var t=new Uint8Array(32);return O(t,e),1&t[0]}function L(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function H(e,t,r){for(var i=0;i<16;i++)e[i]=t[i]+r[i]}function x(e,t,r){for(var i=0;i<16;i++)e[i]=t[i]-r[i]}function F(e,t,r){var i,n,s=0,o=0,a=0,c=0,h=0,f=0,u=0,l=0,p=0,d=0,g=0,E=0,m=0,v=0,y=0,_=0,w=0,b=0,S=0,k=0,T=0,A=0,U=0,B=0,R=0,N=0,P=0,D=0,O=0,I=0,C=0,L=r[0],H=r[1],x=r[2],F=r[3],M=r[4],K=r[5],G=r[6],W=r[7],q=r[8],X=r[9],j=r[10],V=r[11],Y=r[12],Q=r[13],z=r[14],$=r[15];s+=(i=t[0])*L,o+=i*H,a+=i*x,c+=i*F,h+=i*M,f+=i*K,u+=i*G,l+=i*W,p+=i*q,d+=i*X,g+=i*j,E+=i*V,m+=i*Y,v+=i*Q,y+=i*z,_+=i*$,o+=(i=t[1])*L,a+=i*H,c+=i*x,h+=i*F,f+=i*M,u+=i*K,l+=i*G,p+=i*W,d+=i*q,g+=i*X,E+=i*j,m+=i*V,v+=i*Y,y+=i*Q,_+=i*z,w+=i*$,a+=(i=t[2])*L,c+=i*H,h+=i*x,f+=i*F,u+=i*M,l+=i*K,p+=i*G,d+=i*W,g+=i*q,E+=i*X,m+=i*j,v+=i*V,y+=i*Y,_+=i*Q,w+=i*z,b+=i*$,c+=(i=t[3])*L,h+=i*H,f+=i*x,u+=i*F,l+=i*M,p+=i*K,d+=i*G,g+=i*W,E+=i*q,m+=i*X,v+=i*j,y+=i*V,_+=i*Y,w+=i*Q,b+=i*z,S+=i*$,h+=(i=t[4])*L,f+=i*H,u+=i*x,l+=i*F,p+=i*M,d+=i*K,g+=i*G,E+=i*W,m+=i*q,v+=i*X,y+=i*j,_+=i*V,w+=i*Y,b+=i*Q,S+=i*z,k+=i*$,f+=(i=t[5])*L,u+=i*H,l+=i*x,p+=i*F,d+=i*M,g+=i*K,E+=i*G,m+=i*W,v+=i*q,y+=i*X,_+=i*j,w+=i*V,b+=i*Y,S+=i*Q,k+=i*z,T+=i*$,u+=(i=t[6])*L,l+=i*H,p+=i*x,d+=i*F,g+=i*M,E+=i*K,m+=i*G,v+=i*W,y+=i*q,_+=i*X,w+=i*j,b+=i*V,S+=i*Y,k+=i*Q,T+=i*z,A+=i*$,l+=(i=t[7])*L,p+=i*H,d+=i*x,g+=i*F,E+=i*M,m+=i*K,v+=i*G,y+=i*W,_+=i*q,w+=i*X,b+=i*j,S+=i*V,k+=i*Y,T+=i*Q,A+=i*z,U+=i*$,p+=(i=t[8])*L,d+=i*H,g+=i*x,E+=i*F,m+=i*M,v+=i*K,y+=i*G,_+=i*W,w+=i*q,b+=i*X,S+=i*j,k+=i*V,T+=i*Y,A+=i*Q,U+=i*z,B+=i*$,d+=(i=t[9])*L,g+=i*H,E+=i*x,m+=i*F,v+=i*M,y+=i*K,_+=i*G,w+=i*W,b+=i*q,S+=i*X,k+=i*j,T+=i*V,A+=i*Y,U+=i*Q,B+=i*z,R+=i*$,g+=(i=t[10])*L,E+=i*H,m+=i*x,v+=i*F,y+=i*M,_+=i*K,w+=i*G,b+=i*W,S+=i*q,k+=i*X,T+=i*j,A+=i*V,U+=i*Y,B+=i*Q,R+=i*z,N+=i*$,E+=(i=t[11])*L,m+=i*H,v+=i*x,y+=i*F,_+=i*M,w+=i*K,b+=i*G,S+=i*W,k+=i*q,T+=i*X,A+=i*j,U+=i*V,B+=i*Y,R+=i*Q,N+=i*z,P+=i*$,m+=(i=t[12])*L,v+=i*H,y+=i*x,_+=i*F,w+=i*M,b+=i*K,S+=i*G,k+=i*W,T+=i*q,A+=i*X,U+=i*j,B+=i*V,R+=i*Y,N+=i*Q,P+=i*z,D+=i*$,v+=(i=t[13])*L,y+=i*H,_+=i*x,w+=i*F,b+=i*M,S+=i*K,k+=i*G,T+=i*W,A+=i*q,U+=i*X,B+=i*j,R+=i*V,N+=i*Y,P+=i*Q,D+=i*z,O+=i*$,y+=(i=t[14])*L,_+=i*H,w+=i*x,b+=i*F,S+=i*M,k+=i*K,T+=i*G,A+=i*W,U+=i*q,B+=i*X,R+=i*j,N+=i*V,P+=i*Y,D+=i*Q,O+=i*z,I+=i*$,_+=(i=t[15])*L,o+=38*(b+=i*x),a+=38*(S+=i*F),c+=38*(k+=i*M),h+=38*(T+=i*K),f+=38*(A+=i*G),u+=38*(U+=i*W),l+=38*(B+=i*q),p+=38*(R+=i*X),d+=38*(N+=i*j),g+=38*(P+=i*V),E+=38*(D+=i*Y),m+=38*(O+=i*Q),v+=38*(I+=i*z),y+=38*(C+=i*$),s=(i=(s+=38*(w+=i*H))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),o=(i=o+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),E=(i=E+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),_=(i=_+n+65535)-65536*(n=Math.floor(i/65536)),s=(i=(s+=n-1+37*(n-1))+(n=1)+65535)-65536*(n=Math.floor(i/65536)),o=(i=o+n+65535)-65536*(n=Math.floor(i/65536)),a=(i=a+n+65535)-65536*(n=Math.floor(i/65536)),c=(i=c+n+65535)-65536*(n=Math.floor(i/65536)),h=(i=h+n+65535)-65536*(n=Math.floor(i/65536)),f=(i=f+n+65535)-65536*(n=Math.floor(i/65536)),u=(i=u+n+65535)-65536*(n=Math.floor(i/65536)),l=(i=l+n+65535)-65536*(n=Math.floor(i/65536)),p=(i=p+n+65535)-65536*(n=Math.floor(i/65536)),d=(i=d+n+65535)-65536*(n=Math.floor(i/65536)),g=(i=g+n+65535)-65536*(n=Math.floor(i/65536)),E=(i=E+n+65535)-65536*(n=Math.floor(i/65536)),m=(i=m+n+65535)-65536*(n=Math.floor(i/65536)),v=(i=v+n+65535)-65536*(n=Math.floor(i/65536)),y=(i=y+n+65535)-65536*(n=Math.floor(i/65536)),_=(i=_+n+65535)-65536*(n=Math.floor(i/65536)),s+=n-1+37*(n-1),e[0]=s,e[1]=o,e[2]=a,e[3]=c,e[4]=h,e[5]=f,e[6]=u,e[7]=l,e[8]=p,e[9]=d,e[10]=g,e[11]=E,e[12]=m,e[13]=v,e[14]=y,e[15]=_}function M(e,t){F(e,t,t)}function K(e,r){var i,n=t();for(i=0;i<16;i++)n[i]=r[i];for(i=253;i>=0;i--)M(n,n),2!==i&&4!==i&&F(n,n,r);for(i=0;i<16;i++)e[i]=n[i]}function G(e,r,i){var n,s,o=new Uint8Array(32),a=new Float64Array(80),h=t(),f=t(),u=t(),l=t(),p=t(),d=t();for(s=0;s<31;s++)o[s]=r[s];for(o[31]=127&r[31]|64,o[0]&=248,L(a,i),s=0;s<16;s++)f[s]=a[s],l[s]=h[s]=u[s]=0;for(h[0]=l[0]=1,s=254;s>=0;--s)D(h,f,n=o[s>>>3]>>>(7&s)&1),D(u,l,n),H(p,h,u),x(h,h,u),H(u,f,l),x(f,f,l),M(l,p),M(d,h),F(h,u,h),F(u,f,p),H(p,h,u),x(h,h,u),M(f,h),x(u,l,d),F(h,u,c),H(h,h,l),F(u,u,h),F(h,l,d),F(l,f,a),M(f,p),D(h,f,n),D(u,l,n);for(s=0;s<16;s++)a[s+16]=h[s],a[s+32]=u[s],a[s+48]=f[s],a[s+64]=l[s];var g=a.subarray(32),E=a.subarray(16);return K(g,g),F(E,E,g),O(e,E),0}function W(e,t){return G(e,t,s)}function q(e,t){return i(t,32),W(e,t)}function X(e,t,r){var i=new Uint8Array(32);return G(i,r,t),y(e,n,i,_)}T.prototype.blocks=function(e,t,r){for(var i,n,s,o,a,c,h,f,u,l,p,d,g,E,m,v,y,_,w,b=this.fin?0:2048,S=this.h[0],k=this.h[1],T=this.h[2],A=this.h[3],U=this.h[4],B=this.h[5],R=this.h[6],N=this.h[7],P=this.h[8],D=this.h[9],O=this.r[0],I=this.r[1],C=this.r[2],L=this.r[3],H=this.r[4],x=this.r[5],F=this.r[6],M=this.r[7],K=this.r[8],G=this.r[9];r>=16;)l=u=0,l+=(S+=8191&(i=255&e[t+0]|(255&e[t+1])<<8))*O,l+=(k+=8191&(i>>>13|(n=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*G),l+=(T+=8191&(n>>>10|(s=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*K),l+=(A+=8191&(s>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*M),u=(l+=(U+=8191&(o>>>4|(a=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*F))>>>13,l&=8191,l+=(B+=a>>>1&8191)*(5*x),l+=(R+=8191&(a>>>14|(c=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*H),l+=(N+=8191&(c>>>11|(h=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*L),l+=(P+=8191&(h>>>8|(f=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*C),p=u+=(l+=(D+=f>>>5|b)*(5*I))>>>13,p+=S*I,p+=k*O,p+=T*(5*G),p+=A*(5*K),u=(p+=U*(5*M))>>>13,p&=8191,p+=B*(5*F),p+=R*(5*x),p+=N*(5*H),p+=P*(5*L),u+=(p+=D*(5*C))>>>13,p&=8191,d=u,d+=S*C,d+=k*I,d+=T*O,d+=A*(5*G),u=(d+=U*(5*K))>>>13,d&=8191,d+=B*(5*M),d+=R*(5*F),d+=N*(5*x),d+=P*(5*H),g=u+=(d+=D*(5*L))>>>13,g+=S*L,g+=k*C,g+=T*I,g+=A*O,u=(g+=U*(5*G))>>>13,g&=8191,g+=B*(5*K),g+=R*(5*M),g+=N*(5*F),g+=P*(5*x),E=u+=(g+=D*(5*H))>>>13,E+=S*H,E+=k*L,E+=T*C,E+=A*I,u=(E+=U*O)>>>13,E&=8191,E+=B*(5*G),E+=R*(5*K),E+=N*(5*M),E+=P*(5*F),m=u+=(E+=D*(5*x))>>>13,m+=S*x,m+=k*H,m+=T*L,m+=A*C,u=(m+=U*I)>>>13,m&=8191,m+=B*O,m+=R*(5*G),m+=N*(5*K),m+=P*(5*M),v=u+=(m+=D*(5*F))>>>13,v+=S*F,v+=k*x,v+=T*H,v+=A*L,u=(v+=U*C)>>>13,v&=8191,v+=B*I,v+=R*O,v+=N*(5*G),v+=P*(5*K),y=u+=(v+=D*(5*M))>>>13,y+=S*M,y+=k*F,y+=T*x,y+=A*H,u=(y+=U*L)>>>13,y&=8191,y+=B*C,y+=R*I,y+=N*O,y+=P*(5*G),_=u+=(y+=D*(5*K))>>>13,_+=S*K,_+=k*M,_+=T*F,_+=A*x,u=(_+=U*H)>>>13,_&=8191,_+=B*L,_+=R*C,_+=N*I,_+=P*O,w=u+=(_+=D*(5*G))>>>13,w+=S*G,w+=k*K,w+=T*M,w+=A*F,u=(w+=U*x)>>>13,w&=8191,w+=B*H,w+=R*L,w+=N*C,w+=P*I,S=l=8191&(u=(u=((u+=(w+=D*O)>>>13)<<2)+u|0)+(l&=8191)|0),k=p+=u>>>=13,T=d&=8191,A=g&=8191,U=E&=8191,B=m&=8191,R=v&=8191,N=y&=8191,P=_&=8191,D=w&=8191,t+=16,r-=16;this.h[0]=S,this.h[1]=k,this.h[2]=T,this.h[3]=A,this.h[4]=U,this.h[5]=B,this.h[6]=R,this.h[7]=N,this.h[8]=P,this.h[9]=D},T.prototype.finish=function(e,t){var r,i,n,s,o=new Uint16Array(10);if(this.leftover){for(s=this.leftover,this.buffer[s++]=1;s<16;s++)this.buffer[s]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,s=2;s<10;s++)this.h[s]+=r,r=this.h[s]>>>13,this.h[s]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,s=1;s<10;s++)o[s]=this.h[s]+r,r=o[s]>>>13,o[s]&=8191;for(o[9]-=8192,i=(1^r)-1,s=0;s<10;s++)o[s]&=i;for(i=~i,s=0;s<10;s++)this.h[s]=this.h[s]&i|o[s];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),n=this.h[0]+this.pad[0],this.h[0]=65535&n,s=1;s<8;s++)n=(this.h[s]+this.pad[s]|0)+(n>>>16)|0,this.h[s]=65535&n;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},T.prototype.update=function(e,t,r){var i,n;if(this.leftover){for((n=16-this.leftover)>r&&(n=r),i=0;i<n;i++)this.buffer[this.leftover+i]=e[t+i];if(r-=n,t+=n,this.leftover+=n,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(n=r-r%16,this.blocks(e,t,n),t+=n,r-=n),r){for(i=0;i<r;i++)this.buffer[this.leftover+i]=e[t+i];this.leftover+=r}};var j=B,V=R,Y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function Q(e,t,r,i){for(var n,s,o,a,c,h,f,u,l,p,d,g,E,m,v,y,_,w,b,S,k,T,A,U,B,R,N=new Int32Array(16),P=new Int32Array(16),D=e[0],O=e[1],I=e[2],C=e[3],L=e[4],H=e[5],x=e[6],F=e[7],M=t[0],K=t[1],G=t[2],W=t[3],q=t[4],X=t[5],j=t[6],V=t[7],Q=0;i>=128;){for(b=0;b<16;b++)S=8*b+Q,N[b]=r[S+0]<<24|r[S+1]<<16|r[S+2]<<8|r[S+3],P[b]=r[S+4]<<24|r[S+5]<<16|r[S+6]<<8|r[S+7];for(b=0;b<80;b++)if(n=D,s=O,o=I,a=C,c=L,h=H,f=x,l=M,p=K,d=G,g=W,E=q,m=X,v=j,A=65535&(T=V),U=T>>>16,B=65535&(k=F),R=k>>>16,A+=65535&(T=(q>>>14|L<<18)^(q>>>18|L<<14)^(L>>>9|q<<23)),U+=T>>>16,B+=65535&(k=(L>>>14|q<<18)^(L>>>18|q<<14)^(q>>>9|L<<23)),R+=k>>>16,A+=65535&(T=q&X^~q&j),U+=T>>>16,B+=65535&(k=L&H^~L&x),R+=k>>>16,k=Y[2*b],A+=65535&(T=Y[2*b+1]),U+=T>>>16,B+=65535&k,R+=k>>>16,k=N[b%16],U+=(T=P[b%16])>>>16,B+=65535&k,R+=k>>>16,B+=(U+=(A+=65535&T)>>>16)>>>16,A=65535&(T=w=65535&A|U<<16),U=T>>>16,B=65535&(k=_=65535&B|(R+=B>>>16)<<16),R=k>>>16,A+=65535&(T=(M>>>28|D<<4)^(D>>>2|M<<30)^(D>>>7|M<<25)),U+=T>>>16,B+=65535&(k=(D>>>28|M<<4)^(M>>>2|D<<30)^(M>>>7|D<<25)),R+=k>>>16,U+=(T=M&K^M&G^K&G)>>>16,B+=65535&(k=D&O^D&I^O&I),R+=k>>>16,u=65535&(B+=(U+=(A+=65535&T)>>>16)>>>16)|(R+=B>>>16)<<16,y=65535&A|U<<16,A=65535&(T=g),U=T>>>16,B=65535&(k=a),R=k>>>16,U+=(T=w)>>>16,B+=65535&(k=_),R+=k>>>16,O=n,I=s,C=o,L=a=65535&(B+=(U+=(A+=65535&T)>>>16)>>>16)|(R+=B>>>16)<<16,H=c,x=h,F=f,D=u,K=l,G=p,W=d,q=g=65535&A|U<<16,X=E,j=m,V=v,M=y,b%16==15)for(S=0;S<16;S++)k=N[S],A=65535&(T=P[S]),U=T>>>16,B=65535&k,R=k>>>16,k=N[(S+9)%16],A+=65535&(T=P[(S+9)%16]),U+=T>>>16,B+=65535&k,R+=k>>>16,_=N[(S+1)%16],A+=65535&(T=((w=P[(S+1)%16])>>>1|_<<31)^(w>>>8|_<<24)^(w>>>7|_<<25)),U+=T>>>16,B+=65535&(k=(_>>>1|w<<31)^(_>>>8|w<<24)^_>>>7),R+=k>>>16,_=N[(S+14)%16],U+=(T=((w=P[(S+14)%16])>>>19|_<<13)^(_>>>29|w<<3)^(w>>>6|_<<26))>>>16,B+=65535&(k=(_>>>19|w<<13)^(w>>>29|_<<3)^_>>>6),R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,N[S]=65535&B|R<<16,P[S]=65535&A|U<<16;A=65535&(T=M),U=T>>>16,B=65535&(k=D),R=k>>>16,k=e[0],U+=(T=t[0])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[0]=D=65535&B|R<<16,t[0]=M=65535&A|U<<16,A=65535&(T=K),U=T>>>16,B=65535&(k=O),R=k>>>16,k=e[1],U+=(T=t[1])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[1]=O=65535&B|R<<16,t[1]=K=65535&A|U<<16,A=65535&(T=G),U=T>>>16,B=65535&(k=I),R=k>>>16,k=e[2],U+=(T=t[2])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[2]=I=65535&B|R<<16,t[2]=G=65535&A|U<<16,A=65535&(T=W),U=T>>>16,B=65535&(k=C),R=k>>>16,k=e[3],U+=(T=t[3])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[3]=C=65535&B|R<<16,t[3]=W=65535&A|U<<16,A=65535&(T=q),U=T>>>16,B=65535&(k=L),R=k>>>16,k=e[4],U+=(T=t[4])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[4]=L=65535&B|R<<16,t[4]=q=65535&A|U<<16,A=65535&(T=X),U=T>>>16,B=65535&(k=H),R=k>>>16,k=e[5],U+=(T=t[5])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[5]=H=65535&B|R<<16,t[5]=X=65535&A|U<<16,A=65535&(T=j),U=T>>>16,B=65535&(k=x),R=k>>>16,k=e[6],U+=(T=t[6])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[6]=x=65535&B|R<<16,t[6]=j=65535&A|U<<16,A=65535&(T=V),U=T>>>16,B=65535&(k=F),R=k>>>16,k=e[7],U+=(T=t[7])>>>16,B+=65535&k,R+=k>>>16,R+=(B+=(U+=(A+=65535&T)>>>16)>>>16)>>>16,e[7]=F=65535&B|R<<16,t[7]=V=65535&A|U<<16,Q+=128,i-=128}return i}function z(e,t,r){var i,n=new Int32Array(8),s=new Int32Array(8),o=new Uint8Array(256),a=r;for(n[0]=1779033703,n[1]=3144134277,n[2]=1013904242,n[3]=2773480762,n[4]=1359893119,n[5]=2600822924,n[6]=528734635,n[7]=1541459225,s[0]=4089235720,s[1]=2227873595,s[2]=4271175723,s[3]=1595750129,s[4]=2917565137,s[5]=725511199,s[6]=4215389547,s[7]=327033209,Q(n,s,t,r),r%=128,i=0;i<r;i++)o[i]=t[a-r+i];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,d(o,r-8,a/536870912|0,a<<3),Q(n,s,o,r),i=0;i<8;i++)d(e,8*i,n[i],s[i]);return 0}function $(e,r){var i=t(),n=t(),s=t(),o=t(),a=t(),c=t(),h=t(),u=t(),l=t();x(i,e[1],e[0]),x(l,r[1],r[0]),F(i,i,l),H(n,e[0],e[1]),H(l,r[0],r[1]),F(n,n,l),F(s,e[3],r[3]),F(s,s,f),F(o,e[2],r[2]),H(o,o,o),x(a,n,i),x(c,o,s),H(h,o,s),H(u,n,i),F(e[0],a,c),F(e[1],u,h),F(e[2],h,c),F(e[3],a,u)}function Z(e,t,r){var i;for(i=0;i<4;i++)D(e[i],t[i],r)}function J(e,r){var i=t(),n=t(),s=t();K(s,r[2]),F(i,r[0],s),F(n,r[1],s),O(e,n),e[31]^=C(i)<<7}function ee(e,t,r){var i,n;for(N(e[0],o),N(e[1],a),N(e[2],a),N(e[3],o),n=255;n>=0;--n)Z(e,t,i=r[n/8|0]>>(7&n)&1),$(t,e),$(e,e),Z(e,t,i)}function te(e,r){var i=[t(),t(),t(),t()];N(i[0],u),N(i[1],l),N(i[2],a),F(i[3],u,l),ee(e,i,r)}function re(e,r,n){var s,o=new Uint8Array(64),a=[t(),t(),t(),t()];for(n||i(r,32),z(o,r,32),o[0]&=248,o[31]&=127,o[31]|=64,te(a,o),J(e,a),s=0;s<32;s++)r[s+32]=e[s];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ne(e,t){var r,i,n,s;for(i=63;i>=32;--i){for(r=0,n=i-32,s=i-12;n<s;++n)t[n]+=r-16*t[i]*ie[n-(i-32)],r=t[n]+128>>8,t[n]-=256*r;t[n]+=r,t[i]=0}for(r=0,n=0;n<32;n++)t[n]+=r-(t[31]>>4)*ie[n],r=t[n]>>8,t[n]&=255;for(n=0;n<32;n++)t[n]-=r*ie[n];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function se(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;ne(e,r)}function oe(e,r,i,n){var s,o,a=new Uint8Array(64),c=new Uint8Array(64),h=new Uint8Array(64),f=new Float64Array(64),u=[t(),t(),t(),t()];z(a,n,32),a[0]&=248,a[31]&=127,a[31]|=64;var l=i+64;for(s=0;s<i;s++)e[64+s]=r[s];for(s=0;s<32;s++)e[32+s]=a[32+s];for(z(h,e.subarray(32),i+32),se(h),te(u,h),J(e,u),s=32;s<64;s++)e[s]=n[s];for(z(c,e,i+64),se(c),s=0;s<64;s++)f[s]=0;for(s=0;s<32;s++)f[s]=h[s];for(s=0;s<32;s++)for(o=0;o<32;o++)f[s+o]+=c[s]*a[o];return ne(e.subarray(32),f),l}function ae(e,r,i,n){var s,c=new Uint8Array(32),f=new Uint8Array(64),u=[t(),t(),t(),t()],l=[t(),t(),t(),t()];if(i<64)return-1;if(function(e,r){var i=t(),n=t(),s=t(),c=t(),f=t(),u=t(),l=t();return N(e[2],a),L(e[1],r),M(s,e[1]),F(c,s,h),x(s,s,e[2]),H(c,e[2],c),M(f,c),M(u,f),F(l,u,f),F(i,l,s),F(i,i,c),function(e,r){var i,n=t();for(i=0;i<16;i++)n[i]=r[i];for(i=250;i>=0;i--)M(n,n),1!==i&&F(n,n,r);for(i=0;i<16;i++)e[i]=n[i]}(i,i),F(i,i,s),F(i,i,c),F(i,i,c),F(e[0],i,c),M(n,e[0]),F(n,n,c),I(n,s)&&F(e[0],e[0],p),M(n,e[0]),F(n,n,c),I(n,s)?-1:(C(e[0])===r[31]>>7&&x(e[0],o,e[0]),F(e[3],e[0],e[1]),0)}(l,n))return-1;for(s=0;s<i;s++)e[s]=r[s];for(s=0;s<32;s++)e[s+32]=n[s];if(z(f,e,i),se(f),ee(u,l,f),te(l,r.subarray(32)),$(u,l),J(c,u),i-=64,m(r,0,c,0)){for(s=0;s<i;s++)e[s]=0;return-1}for(s=0;s<i;s++)e[s]=r[s+64];return i}var ce,he=64,fe=32,ue=64;function le(e,t){if(32!==e.length)throw new Error("bad key size");if(24!==t.length)throw new Error("bad nonce size")}function pe(){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function de(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:y,crypto_stream_xor:k,crypto_stream:S,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:b,crypto_onetimeauth:A,crypto_onetimeauth_verify:U,crypto_verify_16:E,crypto_verify_32:m,crypto_secretbox:B,crypto_secretbox_open:R,crypto_scalarmult:G,crypto_scalarmult_base:W,crypto_box_beforenm:X,crypto_box_afternm:j,crypto_box:function(e,t,r,i,n,s){var o=new Uint8Array(32);return X(o,n,s),j(e,t,r,i,o)},crypto_box_open:function(e,t,r,i,n,s){var o=new Uint8Array(32);return X(o,n,s),V(e,t,r,i,o)},crypto_box_keypair:q,crypto_hash:z,crypto_sign:oe,crypto_sign_keypair:re,crypto_sign_open:ae,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:he,crypto_sign_PUBLICKEYBYTES:fe,crypto_sign_SECRETKEYBYTES:ue,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var t=new Uint8Array(e);return i(t,e),t},e.secretbox=function(e,t,r){pe(e,t,r),le(r,t);for(var i=new Uint8Array(32+e.length),n=new Uint8Array(i.length),s=0;s<e.length;s++)i[s+32]=e[s];return B(n,i,i.length,t,r),n.subarray(16)},e.secretbox.open=function(e,t,r){pe(e,t,r),le(r,t);for(var i=new Uint8Array(16+e.length),n=new Uint8Array(i.length),s=0;s<e.length;s++)i[s+16]=e[s];return!(i.length<32)&&0===R(n,i,i.length,t,r)&&n.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(pe(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var r=new Uint8Array(32);return G(r,e,t),r},e.scalarMult.base=function(e){if(pe(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return W(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,i,n){var s=e.box.before(i,n);return e.secretbox(t,r,s)},e.box.before=function(e,t){pe(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return X(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,i,n){var s=e.box.before(i,n);return e.secretbox.open(t,r,s)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return q(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(pe(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return W(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(pe(e,t),t.length!==ue)throw new Error("bad secret key size");var r=new Uint8Array(he+e.length);return oe(r,e,e.length,t),r},e.sign.open=function(e,t){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(pe(e,t),t.length!==fe)throw new Error("bad public key size");var r=new Uint8Array(e.length),i=ae(r,e,e.length,t);if(i<0)return null;for(var n=new Uint8Array(i),s=0;s<n.length;s++)n[s]=r[s];return n},e.sign.detached=function(t,r){for(var i=e.sign(t,r),n=new Uint8Array(he),s=0;s<n.length;s++)n[s]=i[s];return n},e.sign.detached.verify=function(e,t,r){if(pe(e,t,r),t.length!==he)throw new Error("bad signature size");if(r.length!==fe)throw new Error("bad public key size");var i,n=new Uint8Array(he+e.length),s=new Uint8Array(he+e.length);for(i=0;i<he;i++)n[i]=t[i];for(i=0;i<e.length;i++)n[i+he]=e[i];return ae(s,n,n.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(fe),t=new Uint8Array(ue);return re(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(pe(e),e.length!==ue)throw new Error("bad secret key size");for(var t=new Uint8Array(fe),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(pe(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(fe),r=new Uint8Array(ue),i=0;i<32;i++)r[i]=e[i];return re(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=fe,e.sign.secretKeyLength=ue,e.sign.seedLength=32,e.sign.signatureLength=he,e.hash=function(e){pe(e);var t=new Uint8Array(64);return z(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return pe(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===g(e,0,t,0,e.length)},e.setPRNG=function(e){i=e},(ce="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&ce.getRandomValues?e.setPRNG((function(e,t){var r,i=new Uint8Array(t);for(r=0;r<t;r+=65536)ce.getRandomValues(i.subarray(r,r+Math.min(t-r,65536)));for(r=0;r<t;r++)e[r]=i[r];de(i)})):(ce=r(7968))&&ce.randomBytes&&e.setPRNG((function(e,t){var r,i=ce.randomBytes(t);for(r=0;r<t;r++)e[r]=i[r];de(i)}))}(e.exports?e.exports:self.nacl=self.nacl||{})},6608:e=>{"use strict";e.exports=__nccwpck_require__(9491)},2588:e=>{"use strict";e.exports=__nccwpck_require__(4300)},1984:e=>{"use strict";e.exports=__nccwpck_require__(2081)},7968:e=>{"use strict";e.exports=__nccwpck_require__(6113)},9880:e=>{"use strict";e.exports=__nccwpck_require__(9523)},467:e=>{"use strict";e.exports=__nccwpck_require__(2361)},2058:e=>{"use strict";e.exports=__nccwpck_require__(7147)},6136:e=>{"use strict";e.exports=__nccwpck_require__(3685)},8876:e=>{"use strict";e.exports=__nccwpck_require__(5687)},5256:e=>{"use strict";e.exports=__nccwpck_require__(1808)},7072:e=>{"use strict";e.exports=__nccwpck_require__(1017)},8378:e=>{"use strict";e.exports=__nccwpck_require__(2781)},192:e=>{"use strict";e.exports=__nccwpck_require__(4404)},970:e=>{"use strict";e.exports=__nccwpck_require__(3837)},592:e=>{"use strict";e.exports=__nccwpck_require__(9796)},2968:e=>{"use strict";e.exports={WU:"0.4.34"}}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,r),s.exports}var i={};return(()=>{"use strict";var e=i;Object.defineProperty(e,"__esModule",{value:!0}),e.execFunction=e.SftpStrategy=e.FtpStrategy=e.Strategy=e.Client=void 0;var t=r(9668);Object.defineProperty(e,"Client",{enumerable:!0,get:function(){return t.Client}});var n=r(3911);Object.defineProperty(e,"Strategy",{enumerable:!0,get:function(){return n.Strategy}});var s=r(8652);Object.defineProperty(e,"FtpStrategy",{enumerable:!0,get:function(){return s.FtpStrategy}});var o=r(6711);Object.defineProperty(e,"SftpStrategy",{enumerable:!0,get:function(){return o.SftpStrategy}});var a=r(9512);Object.defineProperty(e,"execFunction",{enumerable:!0,get:function(){return a.execFunction}})})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ 6554:
/***/ ((module) => {

"use strict";


const arrayDiffer = (array, ...values) => {
	const rest = new Set([].concat(...values));
	return array.filter(element => !rest.has(element));
};

module.exports = arrayDiffer;


/***/ }),

/***/ 9600:
/***/ ((module) => {

"use strict";


module.exports = (...arguments_) => {
	return [...new Set([].concat(...arguments_))];
};


/***/ }),

/***/ 1546:
/***/ ((module) => {

"use strict";


const arrify = value => {
	if (value === null || value === undefined) {
		return [];
	}

	if (Array.isArray(value)) {
		return value;
	}

	if (typeof value === 'string') {
		return [value];
	}

	if (typeof value[Symbol.iterator] === 'function') {
		return [...value];
	}

	return [value];
};

module.exports = arrify;


/***/ }),

/***/ 9417:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 3717:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var concatMap = __nccwpck_require__(6891);
var balanced = __nccwpck_require__(9417);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 6891:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 7117:
/***/ ((module) => {

module.exports = function (glob, opts) {
  if (typeof glob !== 'string') {
    throw new TypeError('Expected a string');
  }

  var str = String(glob);

  // The regexp we are building, as a string.
  var reStr = "";

  // Whether we are matching so called "extended" globs (like bash) and should
  // support single character matching, matching ranges of characters, group
  // matching, etc.
  var extended = opts ? !!opts.extended : false;

  // When globstar is _false_ (default), '/foo/*' is translated a regexp like
  // '^\/foo\/.*$' which will match any string beginning with '/foo/'
  // When globstar is _true_, '/foo/*' is translated to regexp like
  // '^\/foo\/[^/]*$' which will match any string beginning with '/foo/' BUT
  // which does not have a '/' to the right of it.
  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but
  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'
  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when
  // globstar is _false_
  var globstar = opts ? !!opts.globstar : false;

  // If we are doing extended matching, this boolean is true when we are inside
  // a group (eg {*.html,*.js}), and false otherwise.
  var inGroup = false;

  // RegExp flags (eg "i" ) to pass in to RegExp constructor.
  var flags = opts && typeof( opts.flags ) === "string" ? opts.flags : "";

  var c;
  for (var i = 0, len = str.length; i < len; i++) {
    c = str[i];

    switch (c) {
    case "/":
    case "$":
    case "^":
    case "+":
    case ".":
    case "(":
    case ")":
    case "=":
    case "!":
    case "|":
      reStr += "\\" + c;
      break;

    case "?":
      if (extended) {
        reStr += ".";
	    break;
      }

    case "[":
    case "]":
      if (extended) {
        reStr += c;
	    break;
      }

    case "{":
      if (extended) {
        inGroup = true;
	    reStr += "(";
	    break;
      }

    case "}":
      if (extended) {
        inGroup = false;
	    reStr += ")";
	    break;
      }

    case ",":
      if (inGroup) {
        reStr += "|";
	    break;
      }
      reStr += "\\" + c;
      break;

    case "*":
      // Move over all consecutive "*"'s.
      // Also store the previous and next characters
      var prevChar = str[i - 1];
      var starCount = 1;
      while(str[i + 1] === "*") {
        starCount++;
        i++;
      }
      var nextChar = str[i + 1];

      if (!globstar) {
        // globstar is disabled, so treat any number of "*" as one
        reStr += ".*";
      } else {
        // globstar is enabled, so determine if this is a globstar segment
        var isGlobstar = starCount > 1                      // multiple "*"'s
          && (prevChar === "/" || prevChar === undefined)   // from the start of the segment
          && (nextChar === "/" || nextChar === undefined)   // to the end of the segment

        if (isGlobstar) {
          // it's a globstar, so match zero or more path segments
          reStr += "((?:[^/]*(?:\/|$))*)";
          i++; // move over the "/"
        } else {
          // it's not a globstar, so only match one path segment
          reStr += "([^/]*)";
        }
      }
      break;

    default:
      reStr += c;
    }
  }

  // When regexp 'g' flag is specified don't
  // constrain the regular expression with ^ & $
  if (!flags || !~flags.indexOf('g')) {
    reStr = "^" + reStr + "$";
  }

  return new RegExp(reStr, flags);
};


/***/ }),

/***/ 3973:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = (function () { try { return __nccwpck_require__(1017) } catch (e) {}}()) || {
  sep: '/'
}
minimatch.sep = path.sep

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __nccwpck_require__(3717)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  b = b || {}
  var t = {}
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }
  m.Minimatch.defaults = function defaults (options) {
    return orig.defaults(ext(def, options)).Minimatch
  }

  m.filter = function filter (pattern, options) {
    return orig.filter(pattern, ext(def, options))
  }

  m.defaults = function defaults (options) {
    return orig.defaults(ext(def, options))
  }

  m.makeRe = function makeRe (pattern, options) {
    return orig.makeRe(pattern, ext(def, options))
  }

  m.braceExpand = function braceExpand (pattern, options) {
    return orig.braceExpand(pattern, ext(def, options))
  }

  m.match = function (list, pattern, options) {
    return orig.match(list, pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  assertValidPattern(pattern)

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  assertValidPattern(pattern)

  if (!options) options = {}

  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (!options.allowWindowsEscape && path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false
  this.partial = !!options.partial

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

var MAX_PATTERN_LENGTH = 1024 * 64
var assertValidPattern = function (pattern) {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  assertValidPattern(pattern)

  var options = this.options

  // shortcuts
  if (pattern === '**') {
    if (!options.noglobstar)
      return GLOBSTAR
    else
      pattern = '*'
  }
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      /* istanbul ignore next */
      case '/': {
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false
      }

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        // split where the last [ was, make sure we don't have
        // an invalid re. if so, re-walk the contents of the
        // would-be class to re-translate any characters that
        // were passed through as-is
        // TODO: It would probably be faster to determine this
        // without a try/catch and a new RegExp, but it's tricky
        // to do safely.  For now, this is safe and works.
        var cs = pattern.substring(classStart + 1, i)
        try {
          RegExp('[' + cs + ']')
        } catch (er) {
          // not a valid class!
          var sp = this.parse(cs, SUBPARSE)
          re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
          hasMagic = hasMagic || sp[1]
          inClass = false
          continue
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '[': case '.': case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) /* istanbul ignore next - should be impossible */ {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) /* istanbul ignore next - should be impossible */ {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = function match (f, partial) {
  if (typeof partial === 'undefined') partial = this.partial
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    /* istanbul ignore if */
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      /* istanbul ignore if */
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      hit = f === p
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else /* istanbul ignore else */ if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return (fi === fl - 1) && (file[fi] === '')
  }

  // should be unreachable.
  /* istanbul ignore next */
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 8222:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const minimatch = __nccwpck_require__(3973);
const arrayUnion = __nccwpck_require__(9600);
const arrayDiffer = __nccwpck_require__(6554);
const arrify = __nccwpck_require__(1546);

module.exports = (list, patterns, options = {}) => {
	list = arrify(list);
	patterns = arrify(patterns);

	if (list.length === 0 || patterns.length === 0) {
		return [];
	}

	let result = [];
	for (const item of list) {
		for (let pattern of patterns) {
			let process = arrayUnion;

			if (pattern[0] === '!') {
				pattern = pattern.slice(1);
				process = arrayDiffer;
			}

			result = process(result, minimatch.match([item], pattern, options));
		}
	}

	return result;
};


/***/ }),

/***/ 7816:
/***/ ((module) => {

"use strict";

module.exports = milliseconds => {
	if (typeof milliseconds !== 'number') {
		throw new TypeError('Expected a number');
	}

	const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;

	return {
		days: roundTowardsZero(milliseconds / 86400000),
		hours: roundTowardsZero(milliseconds / 3600000) % 24,
		minutes: roundTowardsZero(milliseconds / 60000) % 60,
		seconds: roundTowardsZero(milliseconds / 1000) % 60,
		milliseconds: roundTowardsZero(milliseconds) % 1000,
		microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
		nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
	};
};


/***/ }),

/***/ 5168:
/***/ ((module) => {

"use strict";


const BYTE_UNITS = [
	'B',
	'kB',
	'MB',
	'GB',
	'TB',
	'PB',
	'EB',
	'ZB',
	'YB'
];

const BIBYTE_UNITS = [
	'B',
	'kiB',
	'MiB',
	'GiB',
	'TiB',
	'PiB',
	'EiB',
	'ZiB',
	'YiB'
];

const BIT_UNITS = [
	'b',
	'kbit',
	'Mbit',
	'Gbit',
	'Tbit',
	'Pbit',
	'Ebit',
	'Zbit',
	'Ybit'
];

const BIBIT_UNITS = [
	'b',
	'kibit',
	'Mibit',
	'Gibit',
	'Tibit',
	'Pibit',
	'Eibit',
	'Zibit',
	'Yibit'
];

/*
Formats the given number using `Number#toLocaleString`.
- If locale is a string, the value is expected to be a locale-key (for example: `de`).
- If locale is true, the system default locale is used for translation.
- If no value for locale is specified, the number is returned unmodified.
*/
const toLocaleString = (number, locale, options) => {
	let result = number;
	if (typeof locale === 'string' || Array.isArray(locale)) {
		result = number.toLocaleString(locale, options);
	} else if (locale === true || options !== undefined) {
		result = number.toLocaleString(undefined, options);
	}

	return result;
};

module.exports = (number, options) => {
	if (!Number.isFinite(number)) {
		throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
	}

	options = Object.assign({bits: false, binary: false}, options);

	const UNITS = options.bits ?
		(options.binary ? BIBIT_UNITS : BIT_UNITS) :
		(options.binary ? BIBYTE_UNITS : BYTE_UNITS);

	if (options.signed && number === 0) {
		return ` 0 ${UNITS[0]}`;
	}

	const isNegative = number < 0;
	const prefix = isNegative ? '-' : (options.signed ? '+' : '');

	if (isNegative) {
		number = -number;
	}

	let localeOptions;

	if (options.minimumFractionDigits !== undefined) {
		localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
	}

	if (options.maximumFractionDigits !== undefined) {
		localeOptions = Object.assign({maximumFractionDigits: options.maximumFractionDigits}, localeOptions);
	}

	if (number < 1) {
		const numberString = toLocaleString(number, options.locale, localeOptions);
		return prefix + numberString + ' ' + UNITS[0];
	}

	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
	// eslint-disable-next-line unicorn/prefer-exponentiation-operator
	number /= Math.pow(options.binary ? 1024 : 1000, exponent);

	if (!localeOptions) {
		number = number.toPrecision(3);
	}

	const numberString = toLocaleString(Number(number), options.locale, localeOptions);

	const unit = UNITS[exponent];

	return prefix + numberString + ' ' + unit;
};


/***/ }),

/***/ 1127:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const parseMilliseconds = __nccwpck_require__(7816);

const pluralize = (word, count) => count === 1 ? word : `${word}s`;

const SECOND_ROUNDING_EPSILON = 0.0000001;

module.exports = (milliseconds, options = {}) => {
	if (!Number.isFinite(milliseconds)) {
		throw new TypeError('Expected a finite number');
	}

	if (options.colonNotation) {
		options.compact = false;
		options.formatSubMilliseconds = false;
		options.separateMilliseconds = false;
		options.verbose = false;
	}

	if (options.compact) {
		options.secondsDecimalDigits = 0;
		options.millisecondsDecimalDigits = 0;
	}

	const result = [];

	const floorDecimals = (value, decimalDigits) => {
		const flooredInterimValue = Math.floor((value * (10 ** decimalDigits)) + SECOND_ROUNDING_EPSILON);
		const flooredValue = Math.round(flooredInterimValue) / (10 ** decimalDigits);
		return flooredValue.toFixed(decimalDigits);
	};

	const add = (value, long, short, valueString) => {
		if ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {
			return;
		}

		valueString = (valueString || value || '0').toString();
		let prefix;
		let suffix;
		if (options.colonNotation) {
			prefix = result.length > 0 ? ':' : '';
			suffix = '';
			const wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;
			const minLength = result.length > 0 ? 2 : 1;
			valueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;
		} else {
			prefix = '';
			suffix = options.verbose ? ' ' + pluralize(long, value) : short;
		}

		result.push(prefix + valueString + suffix);
	};

	const parsed = parseMilliseconds(milliseconds);

	add(Math.trunc(parsed.days / 365), 'year', 'y');
	add(parsed.days % 365, 'day', 'd');
	add(parsed.hours, 'hour', 'h');
	add(parsed.minutes, 'minute', 'm');

	if (
		options.separateMilliseconds ||
		options.formatSubMilliseconds ||
		(!options.colonNotation && milliseconds < 1000)
	) {
		add(parsed.seconds, 'second', 's');
		if (options.formatSubMilliseconds) {
			add(parsed.milliseconds, 'millisecond', 'ms');
			add(parsed.microseconds, 'microsecond', 'µs');
			add(parsed.nanoseconds, 'nanosecond', 'ns');
		} else {
			const millisecondsAndBelow =
				parsed.milliseconds +
				(parsed.microseconds / 1000) +
				(parsed.nanoseconds / 1e6);

			const millisecondsDecimalDigits =
				typeof options.millisecondsDecimalDigits === 'number' ?
					options.millisecondsDecimalDigits :
					0;

			const roundedMiliseconds = millisecondsAndBelow >= 1 ?
				Math.round(millisecondsAndBelow) :
				Math.ceil(millisecondsAndBelow);

			const millisecondsString = millisecondsDecimalDigits ?
				millisecondsAndBelow.toFixed(millisecondsDecimalDigits) :
				roundedMiliseconds;

			add(
				Number.parseFloat(millisecondsString, 10),
				'millisecond',
				'ms',
				millisecondsString
			);
		}
	} else {
		const seconds = (milliseconds / 1000) % 60;
		const secondsDecimalDigits =
			typeof options.secondsDecimalDigits === 'number' ?
				options.secondsDecimalDigits :
				1;
		const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
		const secondsString = options.keepDecimalsOnWholeSeconds ?
			secondsFixed :
			secondsFixed.replace(/\.0+$/, '');
		add(Number.parseFloat(secondsString, 10), 'second', 's', secondsString);
	}

	if (result.length === 0) {
		return '0' + (options.verbose ? ' milliseconds' : 'ms');
	}

	if (options.compact) {
		return result[0];
	}

	if (typeof options.unitCount === 'number') {
		const separator = options.colonNotation ? '' : ' ';
		return result.slice(0, Math.max(options.unitCount, 1)).join(separator);
	}

	return options.colonNotation ? result.join('') : result.join(' ');
};


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 399:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__nccwpck_require__(2186));
const ftp_deploy_1 = __nccwpck_require__(157);
const parse_1 = __nccwpck_require__(6089);
function runDeployment() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const args = {
                server: core.getInput("server", { required: true }),
                username: core.getInput("username", { required: true }),
                password: core.getInput("password", { required: true }),
                port: (0, parse_1.optionalInt)("port", core.getInput("port")),
                protocol: (0, parse_1.optionalProtocol)("protocol", core.getInput("protocol")),
                "local-dir": (0, parse_1.optionalString)(core.getInput("local-dir")),
                "server-dir": (0, parse_1.optionalString)(core.getInput("server-dir")),
                "state-name": (0, parse_1.optionalString)(core.getInput("state-name")),
                "dry-run": (0, parse_1.optionalBoolean)("dry-run", core.getInput("dry-run")),
                "dangerous-clean-slate": (0, parse_1.optionalBoolean)("dangerous-clean-slate", core.getInput("dangerous-clean-slate")),
                "exclude": (0, parse_1.optionalStringArray)("exclude", core.getMultilineInput("exclude")),
                "log-level": (0, parse_1.optionalLogLevel)("log-level", core.getInput("log-level")),
                "security": (0, parse_1.optionalSecurity)("security", core.getInput("security")),
                "timeout": (0, parse_1.optionalInt)("timeout", core.getInput("timeout"))
            };
            yield (0, ftp_deploy_1.deploy)(args);
        }
        catch (error) {
            core.setFailed(error);
        }
    });
}
runDeployment();


/***/ }),

/***/ 6089:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.optionalStringArray = exports.optionalInt = exports.optionalSecurity = exports.optionalLogLevel = exports.optionalProtocol = exports.optionalBoolean = exports.optionalString = void 0;
function optionalString(rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    return rawValue;
}
exports.optionalString = optionalString;
function optionalBoolean(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "true") {
        return true;
    }
    if (cleanValue === "false") {
        return false;
    }
    throw new Error(`${argumentName}: invalid parameter - please use a boolean, you provided "${rawValue}". Try true or false instead.`);
}
exports.optionalBoolean = optionalBoolean;
function optionalProtocol(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "ftp") {
        return "ftp";
    }
    if (cleanValue === "ftps") {
        return "ftps";
    }
    if (cleanValue === "sftp") {
        return "sftp";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "ftp", "ftps", or "ftps-legacy" instead.`);
}
exports.optionalProtocol = optionalProtocol;
function optionalLogLevel(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "minimal") {
        return "minimal";
    }
    if (cleanValue === "standard") {
        return "standard";
    }
    if (cleanValue === "verbose") {
        return "verbose";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "minimal", "standard", or "verbose" instead.`);
}
exports.optionalLogLevel = optionalLogLevel;
function optionalSecurity(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const cleanValue = rawValue.toLowerCase();
    if (cleanValue === "loose") {
        return "loose";
    }
    if (cleanValue === "strict") {
        return "strict";
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try "loose" or "strict" instead.`);
}
exports.optionalSecurity = optionalSecurity;
function optionalInt(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    const valueAsNumber = parseFloat(rawValue);
    if (Number.isInteger(valueAsNumber)) {
        return valueAsNumber;
    }
    throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". Try a whole number (no decimals) instead like 1234`);
}
exports.optionalInt = optionalInt;
function optionalStringArray(argumentName, rawValue) {
    if (rawValue.length === 0) {
        return undefined;
    }
    if (typeof rawValue === "string") {
        throw new Error(`${argumentName}: invalid parameter - you provided "${rawValue}". This option expects an list in the EXACT format described in the readme`);
    }
    return rawValue;
}
exports.optionalStringArray = optionalStringArray;


/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 4300:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 2081:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 9523:
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 9796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __nccwpck_require__(399);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;